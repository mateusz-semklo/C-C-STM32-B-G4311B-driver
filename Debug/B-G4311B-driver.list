
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c28  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08008e00  08008e00  00018e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e28  08008e28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e30  08008e30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  2000000c  08008e44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08008e44  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ac7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e04  00000000  00000000  00038b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001590  00000000  00000000  0003b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001408  00000000  00000000  0003ce98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219fc  00000000  00000000  0003e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001303e  00000000  00000000  0005fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de0a3  00000000  00000000  00072cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150d7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c90  00000000  00000000  00150df8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008de8 	.word	0x08008de8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008de8 	.word	0x08008de8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b972 	b.w	8000d50 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4615      	mov	r5, r2
 8000a96:	d967      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0720 	rsb	r7, r2, #32
 8000aa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aaa:	4095      	lsls	r5, r2
 8000aac:	ea47 0803 	orr.w	r8, r7, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000abc:	fa1f fc85 	uxth.w	ip, r5
 8000ac0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ac4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac8:	fb07 f10c 	mul.w	r1, r7, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18eb      	adds	r3, r5, r3
 8000ad2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ad6:	f080 811b 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8118 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000ae0:	3f02      	subs	r7, #2
 8000ae2:	442b      	add	r3, r5
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af8:	45a4      	cmp	ip, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	192c      	adds	r4, r5, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	442c      	add	r4, r5
 8000b10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	2700      	movs	r7, #0
 8000b1a:	b11e      	cbz	r6, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c6 4300 	strd	r4, r3, [r6]
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xbe>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80eb 	beq.w	8000d0a <__udivmoddi4+0x286>
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9c6 0100 	strd	r0, r1, [r6]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f783 	clz	r7, r3
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d147      	bne.n	8000bda <__udivmoddi4+0x156>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd0>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80fa 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000b62:	e9c6 4800 	strd	r4, r8, [r6]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xe8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 808f 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b76:	1b49      	subs	r1, r1, r5
 8000b78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7c:	fa1f f885 	uxth.w	r8, r5
 8000b80:	2701      	movs	r7, #1
 8000b82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb08 f10c 	mul.w	r1, r8, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x14c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x14a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80b6 	bhi.w	8000d3a <__udivmoddi4+0x2b6>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e79f      	b.n	8000b1a <__udivmoddi4+0x96>
 8000bda:	f1c7 0c20 	rsb	ip, r7, #32
 8000bde:	40bb      	lsls	r3, r7
 8000be0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000be4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf8:	4325      	orrs	r5, r4
 8000bfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bfe:	0c2c      	lsrs	r4, r5, #16
 8000c00:	fb08 3319 	mls	r3, r8, r9, r3
 8000c04:	fa1f fa8e 	uxth.w	sl, lr
 8000c08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c10:	429c      	cmp	r4, r3
 8000c12:	fa02 f207 	lsl.w	r2, r2, r7
 8000c16:	fa00 f107 	lsl.w	r1, r0, r7
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	f080 8087 	bcs.w	8000d36 <__udivmoddi4+0x2b2>
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	f240 8084 	bls.w	8000d36 <__udivmoddi4+0x2b2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4473      	add	r3, lr
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	b2ad      	uxth	r5, r5
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c48:	45a2      	cmp	sl, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	d26b      	bcs.n	8000d2e <__udivmoddi4+0x2aa>
 8000c56:	45a2      	cmp	sl, r4
 8000c58:	d969      	bls.n	8000d2e <__udivmoddi4+0x2aa>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4474      	add	r4, lr
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	eba4 040a 	sub.w	r4, r4, sl
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c2      	mov	sl, r8
 8000c6e:	464b      	mov	r3, r9
 8000c70:	d354      	bcc.n	8000d1c <__udivmoddi4+0x298>
 8000c72:	d051      	beq.n	8000d18 <__udivmoddi4+0x294>
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d069      	beq.n	8000d4c <__udivmoddi4+0x2c8>
 8000c78:	ebb1 050a 	subs.w	r5, r1, sl
 8000c7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c84:	40fd      	lsrs	r5, r7
 8000c86:	40fc      	lsrs	r4, r7
 8000c88:	ea4c 0505 	orr.w	r5, ip, r5
 8000c8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c90:	2700      	movs	r7, #0
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000c94:	f1c2 0320 	rsb	r3, r2, #32
 8000c98:	fa20 f703 	lsr.w	r7, r0, r3
 8000c9c:	4095      	lsls	r5, r2
 8000c9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	4338      	orrs	r0, r7
 8000cac:	0c01      	lsrs	r1, r0, #16
 8000cae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cb2:	fa1f f885 	uxth.w	r8, r5
 8000cb6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb07 f308 	mul.w	r3, r7, r8
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x256>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd0:	d22f      	bcs.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d92d      	bls.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd6:	3f02      	subs	r7, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1acb      	subs	r3, r1, r3
 8000cdc:	b281      	uxth	r1, r0
 8000cde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cea:	fb00 f308 	mul.w	r3, r0, r8
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x27e>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf8:	d217      	bcs.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d915      	bls.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d08:	e73b      	b.n	8000b82 <__udivmoddi4+0xfe>
 8000d0a:	4637      	mov	r7, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e709      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d10:	4607      	mov	r7, r0
 8000d12:	e6e7      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d14:	4618      	mov	r0, r3
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d18:	4541      	cmp	r1, r8
 8000d1a:	d2ab      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d20:	eb69 020e 	sbc.w	r2, r9, lr
 8000d24:	3801      	subs	r0, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	e7a4      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	e7e9      	b.n	8000d02 <__udivmoddi4+0x27e>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e795      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d32:	4667      	mov	r7, ip
 8000d34:	e7d1      	b.n	8000cda <__udivmoddi4+0x256>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e77c      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	442c      	add	r4, r5
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0x14c>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	442b      	add	r3, r5
 8000d46:	e72f      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xda>
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0xa0>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b092      	sub	sp, #72	; 0x48
 8000d58:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	223c      	movs	r2, #60	; 0x3c
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f008 f833 	bl	8008dd8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d94:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9a:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000da0:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db2:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd0:	482b      	ldr	r0, [pc, #172]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dd2:	f001 fac1 	bl	8002358 <HAL_ADC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ddc:	f000 fc57 	bl	800168e <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000de4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4825      	ldr	r0, [pc, #148]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dec:	f002 ffb4 	bl	8003d58 <HAL_ADCEx_MultiModeConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000df6:	f000 fc4a 	bl	800168e <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_ADC1_Init+0x130>)
 8000dfc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000dfe:	2309      	movs	r3, #9
 8000e00:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000e02:	2301      	movs	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e06:	237f      	movs	r3, #127	; 0x7f
 8000e08:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000e28:	2384      	movs	r3, #132	; 0x84
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4811      	ldr	r0, [pc, #68]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000e3c:	f002 fb34 	bl	80034a8 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000e46:	f000 fc22 	bl	800168e <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_ADC1_Init+0x134>)
 8000e4c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e4e:	f240 130f 	movw	r3, #271	; 0x10f
 8000e52:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8000e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e5c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	773b      	strb	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000e68:	f002 fb1e 	bl	80034a8 <HAL_ADCEx_InjectedConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000e72:	f000 fc0c 	bl	800168e <Error_Handler>
  }

}
 8000e76:	bf00      	nop
 8000e78:	3748      	adds	r7, #72	; 0x48
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000098 	.word	0x20000098
 8000e84:	0c900008 	.word	0x0c900008
 8000e88:	32601000 	.word	0x32601000

08000e8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b090      	sub	sp, #64	; 0x40
 8000e90:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	223c      	movs	r2, #60	; 0x3c
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f007 ff9d 	bl	8008dd8 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000e9e:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ea0:	4a34      	ldr	r2, [pc, #208]	; (8000f74 <MX_ADC2_Init+0xe8>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ea6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000efa:	481d      	ldr	r0, [pc, #116]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000efc:	f001 fa2c 	bl	8002358 <HAL_ADC_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000f06:	f000 fbc2 	bl	800168e <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_ADC2_Init+0xec>)
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8000f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f26:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000f44:	2384      	movs	r3, #132	; 0x84
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000f58:	f002 faa6 	bl	80034a8 <HAL_ADCEx_InjectedConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8000f62:	f000 fb94 	bl	800168e <Error_Handler>
  }

}
 8000f66:	bf00      	nop
 8000f68:	3740      	adds	r7, #64	; 0x40
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000002c 	.word	0x2000002c
 8000f74:	50000100 	.word	0x50000100
 8000f78:	0c900008 	.word	0x0c900008

08000f7c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	; 0x30
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9c:	d14e      	bne.n	800103c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f9e:	4b47      	ldr	r3, [pc, #284]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a45      	ldr	r2, [pc, #276]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8000fa6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fa8:	4b44      	ldr	r3, [pc, #272]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d10b      	bne.n	8000fc8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fb0:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100e:	f003 f8b9 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001012:	2302      	movs	r3, #2
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	4827      	ldr	r0, [pc, #156]	; (80010c4 <HAL_ADC_MspInit+0x148>)
 8001026:	f003 f8ad 	bl	8004184 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2101      	movs	r1, #1
 800102e:	2012      	movs	r0, #18
 8001030:	f003 f80d 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001034:	2012      	movs	r0, #18
 8001036:	f003 f824 	bl	8004082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800103a:	e03a      	b.n	80010b2 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <HAL_ADC_MspInit+0x14c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d135      	bne.n	80010b2 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <HAL_ADC_MspInit+0x140>)
 800104e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10b      	bne.n	8001070 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 800105e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001088:	2340      	movs	r3, #64	; 0x40
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108c:	2303      	movs	r3, #3
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f003 f871 	bl	8004184 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	2012      	movs	r0, #18
 80010a8:	f002 ffd1 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010ac:	2012      	movs	r0, #18
 80010ae:	f002 ffe8 	bl	8004082 <HAL_NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3730      	adds	r7, #48	; 0x30
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000028 	.word	0x20000028
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	50000100 	.word	0x50000100

080010cc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a26      	ldr	r2, [pc, #152]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_GPIO_Init+0xcc>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8001142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001154:	2301      	movs	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f003 f80f 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_GPIO_Init+0xd0>)
 800116e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_GPIO_Init+0xd4>)
 800117c:	f003 f802 	bl	8004184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	210f      	movs	r1, #15
 8001184:	2028      	movs	r0, #40	; 0x28
 8001186:	f002 ff62 	bl	800404e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800118a:	2028      	movs	r0, #40	; 0x28
 800118c:	f002 ff79 	bl	8004082 <HAL_NVIC_EnableIRQ>

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	10110000 	.word	0x10110000
 80011a0:	48000800 	.word	0x48000800

080011a4 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	; 0x40
 80011a8:	af00      	add	r7, sp, #0


	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 80011aa:	217f      	movs	r1, #127	; 0x7f
 80011ac:	4830      	ldr	r0, [pc, #192]	; (8001270 <start_up+0xcc>)
 80011ae:	f001 ff8f 	bl	80030d0 <HAL_ADCEx_Calibration_Start>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <start_up+0x26>
 80011b8:	217f      	movs	r1, #127	; 0x7f
 80011ba:	482e      	ldr	r0, [pc, #184]	; (8001274 <start_up+0xd0>)
 80011bc:	f001 ff88 	bl	80030d0 <HAL_ADCEx_Calibration_Start>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <start_up+0x26>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <start_up+0x28>
 80011ca:	2300      	movs	r3, #0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d14b      	bne.n	8001268 <start_up+0xc4>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)));
 80011d0:	4a29      	ldr	r2, [pc, #164]	; (8001278 <start_up+0xd4>)
 80011d2:	492a      	ldr	r1, [pc, #168]	; (800127c <start_up+0xd8>)
 80011d4:	482a      	ldr	r0, [pc, #168]	; (8001280 <start_up+0xdc>)
 80011d6:	f003 fa70 	bl	80046ba <HAL_OPAMPEx_SelfCalibrateAll>
		{
			ADC_InjectionConfTypeDef sConfigInjected;

			//////// start OPAMP 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 80011da:	4829      	ldr	r0, [pc, #164]	; (8001280 <start_up+0xdc>)
 80011dc:	f003 fa3c 	bl	8004658 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 80011e0:	4826      	ldr	r0, [pc, #152]	; (800127c <start_up+0xd8>)
 80011e2:	f003 fa39 	bl	8004658 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp3);
 80011e6:	4824      	ldr	r0, [pc, #144]	; (8001278 <start_up+0xd4>)
 80011e8:	f003 fa36 	bl	8004658 <HAL_OPAMP_Start>

			//////// start ADC 1 2 ///////////////////////////////////



			HAL_ADCEx_InjectedStart_IT(&hadc1);
 80011ec:	4820      	ldr	r0, [pc, #128]	; (8001270 <start_up+0xcc>)
 80011ee:	f001 ffd1 	bl	8003194 <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 80011f2:	4820      	ldr	r0, [pc, #128]	; (8001274 <start_up+0xd0>)
 80011f4:	f001 ffce 	bl	8003194 <HAL_ADCEx_InjectedStart_IT>





			TIM2->ARR= TIM2_ARR;
 80011f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001200:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->PSC= TIM2_PSC;
 8001202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001206:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800120a:	629a      	str	r2, [r3, #40]	; 0x28

			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <start_up+0xe0>)
 800120e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <start_up+0xe0>)
 8001216:	2200      	movs	r2, #0
 8001218:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR4=(TIM1->ARR-10);
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <start_up+0xe0>)
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	4a19      	ldr	r2, [pc, #100]	; (8001284 <start_up+0xe0>)
 8001220:	3b0a      	subs	r3, #10
 8001222:	6413      	str	r3, [r2, #64]	; 0x40

			TIM1->CCR1=0;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <start_up+0xe0>)
 8001226:	2200      	movs	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
			//TIM1->CCR1=30000;

		//	HAL_TIM_Base_Start_IT(&htim2);
		//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

			HAL_TIM_Base_Start_IT(&htim1);
 800122a:	4817      	ldr	r0, [pc, #92]	; (8001288 <start_up+0xe4>)
 800122c:	f004 fd5a 	bl	8005ce4 <HAL_TIM_Base_Start_IT>

				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	4815      	ldr	r0, [pc, #84]	; (8001288 <start_up+0xe4>)
 8001234:	f004 fdee 	bl	8005e14 <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001238:	2100      	movs	r1, #0
 800123a:	4813      	ldr	r0, [pc, #76]	; (8001288 <start_up+0xe4>)
 800123c:	f005 fd98 	bl	8006d70 <HAL_TIMEx_PWMN_Start>
			   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001240:	2104      	movs	r1, #4
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <start_up+0xe4>)
 8001244:	f004 fde6 	bl	8005e14 <HAL_TIM_PWM_Start>
			   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001248:	2104      	movs	r1, #4
 800124a:	480f      	ldr	r0, [pc, #60]	; (8001288 <start_up+0xe4>)
 800124c:	f005 fd90 	bl	8006d70 <HAL_TIMEx_PWMN_Start>
			    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001250:	2108      	movs	r1, #8
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <start_up+0xe4>)
 8001254:	f004 fdde 	bl	8005e14 <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001258:	2108      	movs	r1, #8
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <start_up+0xe4>)
 800125c:	f005 fd88 	bl	8006d70 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001260:	210c      	movs	r1, #12
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <start_up+0xe4>)
 8001264:	f004 fdd6 	bl	8005e14 <HAL_TIM_PWM_Start>
		}


	   }

}
 8001268:	bf00      	nop
 800126a:	3740      	adds	r7, #64	; 0x40
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000098 	.word	0x20000098
 8001274:	2000002c 	.word	0x2000002c
 8001278:	20000284 	.word	0x20000284
 800127c:	20000248 	.word	0x20000248
 8001280:	200002c0 	.word	0x200002c0
 8001284:	40012c00 	.word	0x40012c00
 8001288:	20000348 	.word	0x20000348

0800128c <HAL_ADCEx_InjectedConvCpltCallback>:
	else{}
}


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b093      	sub	sp, #76	; 0x4c
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	ADC_InjectionConfTypeDef sConfigInjected;


	index_event_adc++;
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a69      	ldr	r2, [pc, #420]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 800129c:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800129e:	2109      	movs	r1, #9
 80012a0:	4868      	ldr	r0, [pc, #416]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012a2:	f002 f8a7 	bl	80033f4 <HAL_ADCEx_InjectedGetValue>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b67      	ldr	r3, [pc, #412]	; (8001448 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 80012aa:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 80012ac:	bf00      	nop
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a63      	ldr	r2, [pc, #396]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f5      	bne.n	80012ae <HAL_ADCEx_InjectedConvCpltCallback+0x22>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80012c2:	f240 110f 	movw	r1, #271	; 0x10f
 80012c6:	485f      	ldr	r0, [pc, #380]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012c8:	f002 f894 	bl	80033f4 <HAL_ADCEx_InjectedGetValue>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b5f      	ldr	r3, [pc, #380]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 80012d0:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 80012d2:	bf00      	nop
 80012d4:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a5a      	ldr	r2, [pc, #360]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	f003 0320 	and.w	r3, r3, #32
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f5      	bne.n	80012d4 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
    adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80012e8:	2109      	movs	r1, #9
 80012ea:	4859      	ldr	r0, [pc, #356]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 80012ec:	f002 f882 	bl	80033f4 <HAL_ADCEx_InjectedGetValue>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b58      	ldr	r3, [pc, #352]	; (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 80012f4:	601a      	str	r2, [r3, #0]
    while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 80012f6:	bf00      	nop
 80012f8:	4b55      	ldr	r3, [pc, #340]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a54      	ldr	r2, [pc, #336]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f5      	bne.n	80012f8 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>




	if(index_event_adc<500)
 800130c:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001314:	d206      	bcs.n	8001324 <HAL_ADCEx_InjectedConvCpltCallback+0x98>
	{


	    HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001316:	484b      	ldr	r0, [pc, #300]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8001318:	f001 ff3c 	bl	8003194 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 800131c:	484c      	ldr	r0, [pc, #304]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 800131e:	f001 ff39 	bl	8003194 <HAL_ADCEx_InjectedStart_IT>


	// HAL_ADCEx_InjectedStart_IT(&hadc1);
	// HAL_ADCEx_InjectedStart_IT(&hadc2);

}
 8001322:	e088      	b.n	8001436 <HAL_ADCEx_InjectedConvCpltCallback+0x1aa>
	else if(index_event_adc == 500)
 8001324:	4b46      	ldr	r3, [pc, #280]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800132c:	d118      	bne.n	8001360 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>
		       HAL_ADCEx_InjectedStop_IT(&hadc1);
 800132e:	4845      	ldr	r0, [pc, #276]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8001330:	f002 f816 	bl	8003360 <HAL_ADCEx_InjectedStop_IT>
			   HAL_ADCEx_InjectedStop_IT(&hadc2);
 8001334:	4846      	ldr	r0, [pc, #280]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8001336:	f002 f813 	bl	8003360 <HAL_ADCEx_InjectedStop_IT>
			   offset1=adc_Ia;
 800133a:	4b43      	ldr	r3, [pc, #268]	; (8001448 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a46      	ldr	r2, [pc, #280]	; (8001458 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 8001340:	6013      	str	r3, [r2, #0]
			   offset2=adc_Ib;
 8001342:	4b44      	ldr	r3, [pc, #272]	; (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a45      	ldr	r2, [pc, #276]	; (800145c <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 8001348:	6013      	str	r3, [r2, #0]
			   offset3=adc_Ic;
 800134a:	4b40      	ldr	r3, [pc, #256]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a44      	ldr	r2, [pc, #272]	; (8001460 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 8001350:	6013      	str	r3, [r2, #0]
			    HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001352:	483c      	ldr	r0, [pc, #240]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8001354:	f001 ff1e 	bl	8003194 <HAL_ADCEx_InjectedStart_IT>
			    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001358:	483d      	ldr	r0, [pc, #244]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 800135a:	f001 ff1b 	bl	8003194 <HAL_ADCEx_InjectedStart_IT>
}
 800135e:	e06a      	b.n	8001436 <HAL_ADCEx_InjectedConvCpltCallback+0x1aa>
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001360:	4838      	ldr	r0, [pc, #224]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8001362:	f001 ff17 	bl	8003194 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001366:	483a      	ldr	r0, [pc, #232]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8001368:	f001 ff14 	bl	8003194 <HAL_ADCEx_InjectedStart_IT>
	    sum=(adc_Ia-offset1)+(adc_Ic-offset3)+(adc_Ib-offset2);
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	1ad2      	subs	r2, r2, r3
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 8001378:	6819      	ldr	r1, [r3, #0]
 800137a:	4b39      	ldr	r3, [pc, #228]	; (8001460 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1acb      	subs	r3, r1, r3
 8001380:	441a      	add	r2, r3
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1acb      	subs	r3, r1, r3
 800138c:	4413      	add	r3, r2
 800138e:	461a      	mov	r2, r3
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 8001392:	601a      	str	r2, [r3, #0]
		    IIa=(adc_Ia-offset1);
 8001394:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	4b31      	ldr	r3, [pc, #196]	; (8001468 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 80013a2:	601a      	str	r2, [r3, #0]
		    IIb=(adc_Ib-offset2);
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 80013b2:	601a      	str	r2, [r3, #0]
		    IIc=(adc_Ic-offset3);
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 80013c2:	601a      	str	r2, [r3, #0]
	    pa=IIa/33.0;
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f877 	bl	80004bc <__aeabi_i2d>
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 80013d4:	f7ff fa06 	bl	80007e4 <__aeabi_ddiv>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	4618      	mov	r0, r3
 80013de:	4621      	mov	r1, r4
 80013e0:	f7ff fae8 	bl	80009b4 <__aeabi_d2f>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 80013e8:	601a      	str	r2, [r3, #0]
	    pb=IIb/33.0;
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f864 	bl	80004bc <__aeabi_i2d>
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 80013fa:	f7ff f9f3 	bl	80007e4 <__aeabi_ddiv>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fad5 	bl	80009b4 <__aeabi_d2f>
 800140a:	4602      	mov	r2, r0
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800140e:	601a      	str	r2, [r3, #0]
	    pc=IIc/33.0;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f851 	bl	80004bc <__aeabi_i2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 8001420:	f7ff f9e0 	bl	80007e4 <__aeabi_ddiv>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4618      	mov	r0, r3
 800142a:	4621      	mov	r1, r4
 800142c:	f7ff fac2 	bl	80009b4 <__aeabi_d2f>
 8001430:	4602      	mov	r2, r0
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 8001434:	601a      	str	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	374c      	adds	r7, #76	; 0x4c
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	2000020c 	.word	0x2000020c
 8001444:	20000098 	.word	0x20000098
 8001448:	200001a4 	.word	0x200001a4
 800144c:	20000220 	.word	0x20000220
 8001450:	2000002c 	.word	0x2000002c
 8001454:	20000130 	.word	0x20000130
 8001458:	20000124 	.word	0x20000124
 800145c:	2000016c 	.word	0x2000016c
 8001460:	20000230 	.word	0x20000230
 8001464:	20000164 	.word	0x20000164
 8001468:	200001e8 	.word	0x200001e8
 800146c:	2000012c 	.word	0x2000012c
 8001470:	20000194 	.word	0x20000194
 8001474:	40408000 	.word	0x40408000
 8001478:	2000023c 	.word	0x2000023c
 800147c:	2000018c 	.word	0x2000018c
 8001480:	20000214 	.word	0x20000214

08001484 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001494:	d170      	bne.n	8001578 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		licznik++;
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_GPIO_EXTI_Callback+0x100>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a39      	ldr	r2, [pc, #228]	; (8001584 <HAL_GPIO_EXTI_Callback+0x100>)
 800149e:	6013      	str	r3, [r2, #0]
		switch (licznik)
 80014a0:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_GPIO_EXTI_Callback+0x100>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d85f      	bhi.n	800156a <HAL_GPIO_EXTI_Callback+0xe6>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	08001541 	.word	0x08001541
 80014b4:	080014cd 	.word	0x080014cd
 80014b8:	080014e5 	.word	0x080014e5
 80014bc:	080014fb 	.word	0x080014fb
 80014c0:	08001513 	.word	0x08001513
 80014c4:	08001529 	.word	0x08001529
 80014c8:	08001557 	.word	0x08001557
		{

								case 2:
									TIM1->CCR1=duty;
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 80014ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 80014d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014da:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 80014de:	2200      	movs	r2, #0
 80014e0:	63da      	str	r2, [r3, #60]	; 0x3c



							    break;
 80014e2:	e042      	b.n	800156a <HAL_GPIO_EXTI_Callback+0xe6>

								case 3:
									TIM1->CCR1=0;
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 80014ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 80014f8:	e037      	b.n	800156a <HAL_GPIO_EXTI_Callback+0xe6>

								case 4:
									TIM1->CCR1=0;
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 8001502:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=duty;
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 800150a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800150e:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8001510:	e02b      	b.n	800156a <HAL_GPIO_EXTI_Callback+0xe6>

							    case 5:
							    	TIM1->CCR1=0;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 8001514:	2200      	movs	r2, #0
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 800151a:	2200      	movs	r2, #0
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=duty;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 8001520:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c


								break;
 8001526:	e020      	b.n	800156a <HAL_GPIO_EXTI_Callback+0xe6>

							    case 6:
							    	TIM1->CCR1=duty;
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 800152a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800152e:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 8001532:	2200      	movs	r2, #0
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=duty;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 8001538:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 800153e:	e014      	b.n	800156a <HAL_GPIO_EXTI_Callback+0xe6>

							    case 1:
							    TIM1->CCR1=duty;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 8001542:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001546:	635a      	str	r2, [r3, #52]	; 0x34
							    TIM1->CCR2=0;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 800154a:	2200      	movs	r2, #0
 800154c:	639a      	str	r2, [r3, #56]	; 0x38
							    TIM1->CCR3=0;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 8001550:	2200      	movs	r2, #0
 8001552:	63da      	str	r2, [r3, #60]	; 0x3c
							    break;
 8001554:	e009      	b.n	800156a <HAL_GPIO_EXTI_Callback+0xe6>

							    case 7:
							  							    TIM1->CCR1=0;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 8001558:	2200      	movs	r2, #0
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
							  							    TIM1->CCR2=0;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 800155e:	2200      	movs	r2, #0
 8001560:	639a      	str	r2, [r3, #56]	; 0x38
							  							    TIM1->CCR3=0;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_GPIO_EXTI_Callback+0x104>)
 8001564:	2200      	movs	r2, #0
 8001566:	63da      	str	r2, [r3, #60]	; 0x3c
							  							    break;
 8001568:	bf00      	nop





								if(licznik>7)
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_GPIO_EXTI_Callback+0x100>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b07      	cmp	r3, #7
 8001570:	d902      	bls.n	8001578 <HAL_GPIO_EXTI_Callback+0xf4>
								licznik=0;
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_GPIO_EXTI_Callback+0x100>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]




	}
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	20000200 	.word	0x20000200
 8001588:	40012c00 	.word	0x40012c00

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001590:	f000 fd0f 	bl	8001fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001594:	f000 f815 	bl	80015c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001598:	f7ff fd98 	bl	80010cc <MX_GPIO_Init>
  MX_TIM1_Init();
 800159c:	f000 fa16 	bl	80019cc <MX_TIM1_Init>
  MX_TIM4_Init();
 80015a0:	f000 faf4 	bl	8001b8c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80015a4:	f000 fc44 	bl	8001e30 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015a8:	f7ff fbd4 	bl	8000d54 <MX_ADC1_Init>
  MX_ADC2_Init();
 80015ac:	f7ff fc6e 	bl	8000e8c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80015b0:	f000 f874 	bl	800169c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80015b4:	f000 f8a0 	bl	80016f8 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80015b8:	f000 f8cc 	bl	8001754 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


    start_up();
 80015bc:	f7ff fdf2 	bl	80011a4 <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <main+0x34>

080015c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b0a4      	sub	sp, #144	; 0x90
 80015c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015cc:	2238      	movs	r2, #56	; 0x38
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f007 fc01 	bl	8008dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	2244      	movs	r2, #68	; 0x44
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f007 fbf3 	bl	8008dd8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f003 fb56 	bl	8004ca4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001600:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001602:	2302      	movs	r3, #2
 8001604:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001606:	2303      	movs	r3, #3
 8001608:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800160a:	2302      	movs	r3, #2
 800160c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800160e:	2350      	movs	r3, #80	; 0x50
 8001610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fbde 	bl	8004dec <HAL_RCC_OscConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001636:	f000 f82a 	bl	800168e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	230f      	movs	r3, #15
 800163c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163e:	2303      	movs	r3, #3
 8001640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800164e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001652:	2107      	movs	r1, #7
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fee1 	bl	800541c <HAL_RCC_ClockConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001660:	f000 f815 	bl	800168e <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001664:	f248 0302 	movw	r3, #32770	; 0x8002
 8001668:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800166e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4618      	mov	r0, r3
 8001678:	f004 f8ec 	bl	8005854 <HAL_RCCEx_PeriphCLKConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001682:	f000 f804 	bl	800168e <Error_Handler>
  }
}
 8001686:	bf00      	nop
 8001688:	3790      	adds	r7, #144	; 0x90
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016a2:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <MX_OPAMP1_Init+0x58>)
 80016a4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016ce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_OPAMP1_Init+0x54>)
 80016dc:	f002 feec 	bl	80044b8 <HAL_OPAMP_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 80016e6:	f7ff ffd2 	bl	800168e <Error_Handler>
  }

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200002c0 	.word	0x200002c0
 80016f4:	40010300 	.word	0x40010300

080016f8 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <MX_OPAMP2_Init+0x54>)
 80016fe:	4a14      	ldr	r2, [pc, #80]	; (8001750 <MX_OPAMP2_Init+0x58>)
 8001700:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_OPAMP2_Init+0x54>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_OPAMP2_Init+0x54>)
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_OPAMP2_Init+0x54>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <MX_OPAMP2_Init+0x54>)
 8001716:	2200      	movs	r2, #0
 8001718:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_OPAMP2_Init+0x54>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <MX_OPAMP2_Init+0x54>)
 8001722:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_OPAMP2_Init+0x54>)
 800172a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_OPAMP2_Init+0x54>)
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_OPAMP2_Init+0x54>)
 8001738:	f002 febe 	bl	80044b8 <HAL_OPAMP_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8001742:	f7ff ffa4 	bl	800168e <Error_Handler>
  }

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000248 	.word	0x20000248
 8001750:	40010304 	.word	0x40010304

08001754 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <MX_OPAMP3_Init+0x58>)
 800175c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 8001766:	2240      	movs	r2, #64	; 0x40
 8001768:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 8001772:	2200      	movs	r2, #0
 8001774:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 800177e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 8001786:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 800178e:	2200      	movs	r2, #0
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_OPAMP3_Init+0x54>)
 8001794:	f002 fe90 	bl	80044b8 <HAL_OPAMP_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 800179e:	f7ff ff76 	bl	800168e <Error_Handler>
  }

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000284 	.word	0x20000284
 80017ac:	40010308 	.word	0x40010308

080017b0 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2e      	ldr	r2, [pc, #184]	; (8001888 <HAL_OPAMP_MspInit+0xd8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d119      	bne.n	8001806 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_OPAMP_MspInit+0xdc>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a2d      	ldr	r2, [pc, #180]	; (800188c <HAL_OPAMP_MspInit+0xdc>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_OPAMP_MspInit+0xdc>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017ea:	230e      	movs	r3, #14
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ee:	2303      	movs	r3, #3
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f002 fcc0 	bl	8004184 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001804:	e03b      	b.n	800187e <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <HAL_OPAMP_MspInit+0xe0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d119      	bne.n	8001844 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_OPAMP_MspInit+0xdc>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_OPAMP_MspInit+0xdc>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_OPAMP_MspInit+0xdc>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001828:	23e0      	movs	r3, #224	; 0xe0
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182c:	2303      	movs	r3, #3
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f002 fca1 	bl	8004184 <HAL_GPIO_Init>
}
 8001842:	e01c      	b.n	800187e <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_OPAMP_MspInit+0xe4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d117      	bne.n	800187e <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_OPAMP_MspInit+0xdc>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <HAL_OPAMP_MspInit+0xdc>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_OPAMP_MspInit+0xdc>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001866:	2307      	movs	r3, #7
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186a:	2303      	movs	r3, #3
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <HAL_OPAMP_MspInit+0xe8>)
 800187a:	f002 fc83 	bl	8004184 <HAL_GPIO_Init>
}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40010300 	.word	0x40010300
 800188c:	40021000 	.word	0x40021000
 8001890:	40010304 	.word	0x40010304
 8001894:	40010308 	.word	0x40010308
 8001898:	48000400 	.word	0x48000400

0800189c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018aa:	6093      	str	r3, [r2, #8]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40007000 	.word	0x40007000

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_MspInit+0x44>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_MspInit+0x44>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6613      	str	r3, [r2, #96]	; 0x60
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_MspInit+0x44>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_MspInit+0x44>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_MspInit+0x44>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6593      	str	r3, [r2, #88]	; 0x58
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_MspInit+0x44>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80018f2:	f7ff ffd3 	bl	800189c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 fb7e 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <ADC1_2_IRQHandler+0x14>)
 8001966:	f000 fe7f 	bl	8002668 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <ADC1_2_IRQHandler+0x18>)
 800196c:	f000 fe7c 	bl	8002668 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000098 	.word	0x20000098
 8001978:	2000002c 	.word	0x2000002c

0800197c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <USART2_IRQHandler+0x10>)
 8001982:	f005 fc0d 	bl	80071a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000394 	.word	0x20000394

08001990 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001994:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001998:	f002 fd76 	bl	8004488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <SystemInit+0x28>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <SystemInit+0x28>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SystemInit+0x28>)
 80019b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ba:	609a      	str	r2, [r3, #8]
#endif
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b09c      	sub	sp, #112	; 0x70
 80019d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2234      	movs	r2, #52	; 0x34
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f007 f9e6 	bl	8008dd8 <memset>

  htim1.Instance = TIM1;
 8001a0c:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a0e:	4a5e      	ldr	r2, [pc, #376]	; (8001b88 <MX_TIM1_Init+0x1bc>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a18:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001a1e:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2a:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a30:	4b54      	ldr	r3, [pc, #336]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a36:	4853      	ldr	r0, [pc, #332]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a38:	f004 f8fc 	bl	8005c34 <HAL_TIM_Base_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a42:	f7ff fe24 	bl	800168e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a4c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a50:	4619      	mov	r1, r3
 8001a52:	484c      	ldr	r0, [pc, #304]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a54:	f004 fc66 	bl	8006324 <HAL_TIM_ConfigClockSource>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a5e:	f7ff fe16 	bl	800168e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a62:	4848      	ldr	r0, [pc, #288]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a64:	f004 f974 	bl	8005d50 <HAL_TIM_PWM_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a6e:	f7ff fe0e 	bl	800168e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001a72:	2370      	movs	r3, #112	; 0x70
 8001a74:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a82:	4619      	mov	r1, r3
 8001a84:	483f      	ldr	r0, [pc, #252]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001a86:	f005 f9f3 	bl	8006e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001a90:	f7ff fdfd 	bl	800168e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a94:	2360      	movs	r3, #96	; 0x60
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4832      	ldr	r0, [pc, #200]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001aba:	f004 fb23 	bl	8006104 <HAL_TIM_PWM_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001ac4:	f7ff fde3 	bl	800168e <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001acc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	482b      	ldr	r0, [pc, #172]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001ad6:	f004 fb15 	bl	8006104 <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001ae0:	f7ff fdd5 	bl	800168e <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ae8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aec:	2208      	movs	r2, #8
 8001aee:	4619      	mov	r1, r3
 8001af0:	4824      	ldr	r0, [pc, #144]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001af2:	f004 fb07 	bl	8006104 <HAL_TIM_PWM_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001afc:	f7ff fdc7 	bl	800168e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001b00:	2370      	movs	r3, #112	; 0x70
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b10:	220c      	movs	r2, #12
 8001b12:	4619      	mov	r1, r3
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001b16:	f004 faf5 	bl	8006104 <HAL_TIM_PWM_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001b20:	f7ff fdb5 	bl	800168e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001b24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8001b34:	2344      	movs	r3, #68	; 0x44
 8001b36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 8001b54:	2303      	movs	r3, #3
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4807      	ldr	r0, [pc, #28]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001b66:	f005 fa05 	bl	8006f74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8001b70:	f7ff fd8d 	bl	800168e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001b74:	4803      	ldr	r0, [pc, #12]	; (8001b84 <MX_TIM1_Init+0x1b8>)
 8001b76:	f000 f8d3 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 8001b7a:	bf00      	nop
 8001b7c:	3770      	adds	r7, #112	; 0x70
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000348 	.word	0x20000348
 8001b88:	40012c00 	.word	0x40012c00

08001b8c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	; 0x30
 8001b90:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f007 f91c 	bl	8008dd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <MX_TIM4_Init+0xa0>)
 8001bac:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <MX_TIM4_Init+0xa4>)
 8001bae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <MX_TIM4_Init+0xa0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <MX_TIM4_Init+0xa0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <MX_TIM4_Init+0xa0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <MX_TIM4_Init+0xa0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_TIM4_Init+0xa0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_TIM4_Init+0xa8>)
 8001bd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001be6:	2301      	movs	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <MX_TIM4_Init+0xa0>)
 8001bfa:	f004 f9dd 	bl	8005fb8 <HAL_TIM_Encoder_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c04:	f7ff fd43 	bl	800168e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c10:	463b      	mov	r3, r7
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_TIM4_Init+0xa0>)
 8001c16:	f005 f92b 	bl	8006e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c20:	f7ff fd35 	bl	800168e <Error_Handler>
  }

}
 8001c24:	bf00      	nop
 8001c26:	3730      	adds	r7, #48	; 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200002fc 	.word	0x200002fc
 8001c30:	40000800 	.word	0x40000800
 8001c34:	00010006 	.word	0x00010006

08001c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_TIM_Base_MspInit+0x38>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10b      	bne.n	8001c62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_TIM_Base_MspInit+0x3c>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_TIM_Base_MspInit+0x3c>)
 8001c50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c54:	6613      	str	r3, [r2, #96]	; 0x60
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_TIM_Base_MspInit+0x3c>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40012c00 	.word	0x40012c00
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d138      	bne.n	8001d0c <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 8001cca:	23c0      	movs	r3, #192	; 0xc0
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <HAL_TIM_Encoder_MspInit+0xa4>)
 8001ce6:	f002 fa4d 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 8001cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <HAL_TIM_Encoder_MspInit+0xa4>)
 8001d08:	f002 fa3c 	bl	8004184 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40000800 	.word	0x40000800
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48000400 	.word	0x48000400

08001d20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a38      	ldr	r2, [pc, #224]	; (8001e20 <HAL_TIM_MspPostInit+0x100>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d169      	bne.n	8001e16 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_TIM_MspPostInit+0x104>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <HAL_TIM_MspPostInit+0x104>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_TIM_MspPostInit+0x104>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_TIM_MspPostInit+0x104>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <HAL_TIM_MspPostInit+0x104>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_TIM_MspPostInit+0x104>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <HAL_TIM_MspPostInit+0x104>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a2b      	ldr	r2, [pc, #172]	; (8001e24 <HAL_TIM_MspPostInit+0x104>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_TIM_MspPostInit+0x104>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	4820      	ldr	r0, [pc, #128]	; (8001e28 <HAL_TIM_MspPostInit+0x108>)
 8001da8:	f002 f9ec 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4818      	ldr	r0, [pc, #96]	; (8001e2c <HAL_TIM_MspPostInit+0x10c>)
 8001dca:	f002 f9db 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001dce:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001de0:	2306      	movs	r3, #6
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f002 f9c9 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001df2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001e04:	230b      	movs	r3, #11
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f002 f9b7 	bl	8004184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	; 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40012c00 	.word	0x40012c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	48000800 	.word	0x48000800
 8001e2c:	48000400 	.word	0x48000400

08001e30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e36:	4a23      	ldr	r2, [pc, #140]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e3a:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e56:	220c      	movs	r2, #12
 8001e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e78:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e7a:	f005 f940 	bl	80070fe <HAL_UART_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e84:	f7ff fc03 	bl	800168e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e8c:	f006 fe9c 	bl	8008bc8 <HAL_UARTEx_SetTxFifoThreshold>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e96:	f7ff fbfa 	bl	800168e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4808      	ldr	r0, [pc, #32]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e9e:	f006 fed1 	bl	8008c44 <HAL_UARTEx_SetRxFifoThreshold>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ea8:	f7ff fbf1 	bl	800168e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001eae:	f006 fe52 	bl	8008b56 <HAL_UARTEx_DisableFifoMode>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001eb8:	f7ff fbe9 	bl	800168e <Error_Handler>
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000394 	.word	0x20000394
 8001ec4:	40004400 	.word	0x40004400

08001ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_UART_MspInit+0x8c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d12f      	bne.n	8001f4a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f1a:	2318      	movs	r3, #24
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <HAL_UART_MspInit+0x94>)
 8001f36:	f002 f925 	bl	8004184 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2108      	movs	r1, #8
 8001f3e:	2026      	movs	r0, #38	; 0x26
 8001f40:	f002 f885 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f44:	2026      	movs	r0, #38	; 0x26
 8001f46:	f002 f89c 	bl	8004082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3728      	adds	r7, #40	; 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40004400 	.word	0x40004400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000400 	.word	0x48000400

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f66:	490e      	ldr	r1, [pc, #56]	; (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f6c:	e002      	b.n	8001f74 <LoopCopyDataInit>

08001f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f72:	3304      	adds	r3, #4

08001f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f78:	d3f9      	bcc.n	8001f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f7c:	4c0b      	ldr	r4, [pc, #44]	; (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f80:	e001      	b.n	8001f86 <LoopFillZerobss>

08001f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f84:	3204      	adds	r2, #4

08001f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f88:	d3fb      	bcc.n	8001f82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f8a:	f7ff fd09 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f006 feff 	bl	8008d90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7ff fafb 	bl	800158c <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   r0, =_estack
 8001f98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fa4:	08008e38 	.word	0x08008e38
  ldr r2, =_sbss
 8001fa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fac:	20000424 	.word	0x20000424

08001fb0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <COMP1_2_3_IRQHandler>

08001fb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f002 f83b 	bl	8004038 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 f80e 	bl	8001fe4 <HAL_InitTick>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	e001      	b.n	8001fd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd4:	f7ff fc72 	bl	80018bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd8:	79fb      	ldrb	r3, [r7, #7]

}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_InitTick+0x68>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d022      	beq.n	800203e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_InitTick+0x6c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_InitTick+0x68>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002004:	fbb1 f3f3 	udiv	r3, r1, r3
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	4618      	mov	r0, r3
 800200e:	f002 f846 	bl	800409e <HAL_SYSTICK_Config>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10f      	bne.n	8002038 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	d809      	bhi.n	8002032 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201e:	2200      	movs	r2, #0
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	f04f 30ff 	mov.w	r0, #4294967295
 8002026:	f002 f812 	bl	800404e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_InitTick+0x70>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	e007      	b.n	8002042 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	e004      	b.n	8002042 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e001      	b.n	8002042 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000008 	.word	0x20000008
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_IncTick+0x1c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x20>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4413      	add	r3, r2
 8002066:	4a03      	ldr	r2, [pc, #12]	; (8002074 <HAL_IncTick+0x1c>)
 8002068:	6013      	str	r3, [r2, #0]
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	20000420 	.word	0x20000420
 8002078:	20000008 	.word	0x20000008

0800207c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_GetTick+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000420 	.word	0x20000420

08002094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff ffee 	bl	800207c <HAL_GetTick>
 80020a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d004      	beq.n	80020b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_Delay+0x40>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b8:	bf00      	nop
 80020ba:	f7ff ffdf 	bl	800207c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d8f7      	bhi.n	80020ba <HAL_Delay+0x26>
  {
  }
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000008 	.word	0x20000008

080020d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	609a      	str	r2, [r3, #8]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002130:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 031f 	and.w	r3, r3, #31
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002192:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6093      	str	r3, [r2, #8]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ba:	d101      	bne.n	80021c0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800220a:	d101      	bne.n	8002210 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800222e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002256:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800225a:	f043 0202 	orr.w	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <LL_ADC_IsEnabled+0x18>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_ADC_IsEnabled+0x1a>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d101      	bne.n	80022ac <LL_ADC_IsDisableOngoing+0x18>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_ADC_IsDisableOngoing+0x1a>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d101      	bne.n	80022fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800231c:	f043 0220 	orr.w	r2, r3, #32
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b08      	cmp	r3, #8
 8002342:	d101      	bne.n	8002348 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e16b      	b.n	800264a <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7fe fdfb 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff04 	bl	80021a6 <LL_ADC_IsDeepPowerDownEnabled>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff feea 	bl	8002182 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff1f 	bl	80021f6 <LL_ADC_IsInternalRegulatorEnabled>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff03 	bl	80021ce <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80023c8:	4ba2      	ldr	r3, [pc, #648]	; (8002654 <HAL_ADC_Init+0x2fc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	4aa2      	ldr	r2, [pc, #648]	; (8002658 <HAL_ADC_Init+0x300>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023d8:	e002      	b.n	80023e0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff03 	bl	80021f6 <LL_ADC_IsInternalRegulatorEnabled>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff63 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 800241c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 8106 	bne.w	8002638 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 8102 	bne.w	8002638 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800243c:	f043 0202 	orr.w	r2, r3, #2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff10 	bl	800226e <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d111      	bne.n	8002478 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002454:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002458:	f7ff ff09 	bl	800226e <LL_ADC_IsEnabled>
 800245c:	4604      	mov	r4, r0
 800245e:	487f      	ldr	r0, [pc, #508]	; (800265c <HAL_ADC_Init+0x304>)
 8002460:	f7ff ff05 	bl	800226e <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	4323      	orrs	r3, r4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4619      	mov	r1, r3
 8002472:	487b      	ldr	r0, [pc, #492]	; (8002660 <HAL_ADC_Init+0x308>)
 8002474:	f7ff fe30 	bl	80020d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7f5b      	ldrb	r3, [r3, #29]
 800247c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002482:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002488:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800248e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002496:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d106      	bne.n	80024b4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	3b01      	subs	r3, #1
 80024ac:	045b      	lsls	r3, r3, #17
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_ADC_Init+0x30c>)
 80024d8:	4013      	ands	r3, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	69b9      	ldr	r1, [r7, #24]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff feef 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 8002504:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff10 	bl	8002330 <LL_ADC_INJ_IsConversionOngoing>
 8002510:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d16d      	bne.n	80025f4 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d16a      	bne.n	80025f4 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002522:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800252a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800253a:	f023 0302 	bic.w	r3, r3, #2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	430b      	orrs	r3, r1
 8002546:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d017      	beq.n	8002580 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800255e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002568:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800256c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6911      	ldr	r1, [r2, #16]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800257e:	e013      	b.n	80025a8 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800258e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d118      	bne.n	80025e4 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025c8:	4311      	orrs	r1, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025ce:	4311      	orrs	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025d4:	430a      	orrs	r2, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	611a      	str	r2, [r3, #16]
 80025e2:	e007      	b.n	80025f4 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d10c      	bne.n	8002616 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f023 010f 	bic.w	r1, r3, #15
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	1e5a      	subs	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
 8002614:	e007      	b.n	8002626 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 020f 	bic.w	r2, r2, #15
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	65da      	str	r2, [r3, #92]	; 0x5c
 8002636:	e007      	b.n	8002648 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	f043 0210 	orr.w	r2, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002648:	7ffb      	ldrb	r3, [r7, #31]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop
 8002654:	20000000 	.word	0x20000000
 8002658:	053e2d63 	.word	0x053e2d63
 800265c:	50000100 	.word	0x50000100
 8002660:	50000300 	.word	0x50000300
 8002664:	fff04007 	.word	0xfff04007

08002668 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002684:	4883      	ldr	r0, [pc, #524]	; (8002894 <HAL_ADC_IRQHandler+0x22c>)
 8002686:	f7ff fd60 	bl	800214a <LL_ADC_GetMultimode>
 800268a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d017      	beq.n	80026c6 <HAL_ADC_IRQHandler+0x5e>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 feeb 	bl	8003494 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2202      	movs	r2, #2
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <HAL_ADC_IRQHandler+0x72>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8085 	beq.w	80027f0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d07f      	beq.n	80027f0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fcf6 	bl	80020fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d064      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5e      	ldr	r2, [pc, #376]	; (8002898 <HAL_ADC_IRQHandler+0x230>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d002      	beq.n	8002728 <HAL_ADC_IRQHandler+0xc0>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e001      	b.n	800272c <HAL_ADC_IRQHandler+0xc4>
 8002728:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	4293      	cmp	r3, r2
 8002732:	d008      	beq.n	8002746 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d002      	beq.n	8002746 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b09      	cmp	r3, #9
 8002744:	d104      	bne.n	8002750 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	e00d      	b.n	800276c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a50      	ldr	r2, [pc, #320]	; (8002898 <HAL_ADC_IRQHandler+0x230>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d002      	beq.n	8002760 <HAL_ADC_IRQHandler+0xf8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e001      	b.n	8002764 <HAL_ADC_IRQHandler+0xfc>
 8002760:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002764:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d135      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b08      	cmp	r3, #8
 8002782:	d12e      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fdaa 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11a      	bne.n	80027ca <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 020c 	bic.w	r2, r2, #12
 80027a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d112      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80027c8:	e00b      	b.n	80027e2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f95a 	bl	8002a9c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	220c      	movs	r2, #12
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_ADC_IRQHandler+0x19c>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 809e 	beq.w	800294c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8098 	beq.w	800294c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fc73 	bl	8002124 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800283e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fc5a 	bl	80020fe <LL_ADC_REG_IsTriggerSourceSWStart>
 800284a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_ADC_IRQHandler+0x230>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d002      	beq.n	800285c <HAL_ADC_IRQHandler+0x1f4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	e001      	b.n	8002860 <HAL_ADC_IRQHandler+0x1f8>
 800285c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4293      	cmp	r3, r2
 8002866:	d008      	beq.n	800287a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d002      	beq.n	800287a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b07      	cmp	r3, #7
 8002878:	d104      	bne.n	8002884 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	e011      	b.n	80028a8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <HAL_ADC_IRQHandler+0x230>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d006      	beq.n	800289c <HAL_ADC_IRQHandler+0x234>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	e005      	b.n	80028a0 <HAL_ADC_IRQHandler+0x238>
 8002894:	50000300 	.word	0x50000300
 8002898:	50000100 	.word	0x50000100
 800289c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028a0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10c      	bne.n	80028c8 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d142      	bne.n	800293e <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03f      	beq.n	800293e <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d13a      	bne.n	800293e <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	2b40      	cmp	r3, #64	; 0x40
 80028d4:	d133      	bne.n	800293e <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12e      	bne.n	800293e <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fd23 	bl	8002330 <LL_ADC_INJ_IsConversionOngoing>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d11a      	bne.n	8002926 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028fe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d112      	bne.n	800293e <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	; 0x5c
 8002924:	e00b      	b.n	800293e <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fca4 	bl	800128c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2260      	movs	r2, #96	; 0x60
 800294a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d011      	beq.n	800297a <HAL_ADC_IRQHandler+0x312>
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00c      	beq.n	800297a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f89f 	bl	8002ab0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d012      	beq.n	80029aa <HAL_ADC_IRQHandler+0x342>
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fd66 	bl	800346c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d012      	beq.n	80029da <HAL_ADC_IRQHandler+0x372>
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fd58 	bl	8003480 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d036      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x3ea>
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d031      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80029f6:	2301      	movs	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
 80029fa:	e014      	b.n	8002a26 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a02:	4825      	ldr	r0, [pc, #148]	; (8002a98 <HAL_ADC_IRQHandler+0x430>)
 8002a04:	f7ff fbaf 	bl	8002166 <LL_ADC_GetMultiDMATransfer>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
 8002a12:	e008      	b.n	8002a26 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002a22:	2301      	movs	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10e      	bne.n	8002a4a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3c:	f043 0202 	orr.w	r2, r3, #2
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f83d 	bl	8002ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2210      	movs	r2, #16
 8002a50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d018      	beq.n	8002a8e <HAL_ADC_IRQHandler+0x426>
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d013      	beq.n	8002a8e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a76:	f043 0208 	orr.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a86:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fce5 	bl	8003458 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002a8e:	bf00      	nop
 8002a90:	3728      	adds	r7, #40	; 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	50000300 	.word	0x50000300

08002a9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fbf7 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 8002af4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fc18 	bl	8002330 <LL_ADC_INJ_IsConversionOngoing>
 8002b00:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8090 	beq.w	8002c30 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02a      	beq.n	8002b74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7f5b      	ldrb	r3, [r3, #29]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d126      	bne.n	8002b74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7f1b      	ldrb	r3, [r3, #28]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d122      	bne.n	8002b74 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b32:	e014      	b.n	8002b5e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4a41      	ldr	r2, [pc, #260]	; (8002c3c <ADC_ConversionStop+0x164>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d90d      	bls.n	8002b58 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	f043 0210 	orr.w	r2, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e06c      	b.n	8002c32 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d1e3      	bne.n	8002b34 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2240      	movs	r2, #64	; 0x40
 8002b72:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d014      	beq.n	8002ba4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fbaf 	bl	80022e2 <LL_ADC_REG_IsConversionOngoing>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fb80 	bl	8002294 <LL_ADC_IsDisableOngoing>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d104      	bne.n	8002ba4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fb8b 	bl	80022ba <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d014      	beq.n	8002bd4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fbbe 	bl	8002330 <LL_ADC_INJ_IsConversionOngoing>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fb68 	bl	8002294 <LL_ADC_IsDisableOngoing>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d104      	bne.n	8002bd4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fb9a 	bl	8002308 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d004      	beq.n	8002be4 <ADC_ConversionStop+0x10c>
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d105      	bne.n	8002bea <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002bde:	230c      	movs	r3, #12
 8002be0:	617b      	str	r3, [r7, #20]
        break;
 8002be2:	e005      	b.n	8002bf0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002be4:	2308      	movs	r3, #8
 8002be6:	617b      	str	r3, [r7, #20]
        break;
 8002be8:	e002      	b.n	8002bf0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bea:	2304      	movs	r3, #4
 8002bec:	617b      	str	r3, [r7, #20]
        break;
 8002bee:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002bf0:	f7ff fa44 	bl	800207c <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bf6:	e014      	b.n	8002c22 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bf8:	f7ff fa40 	bl	800207c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d90d      	bls.n	8002c22 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e3      	bne.n	8002bf8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	a33fffff 	.word	0xa33fffff

08002c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fb0e 	bl	800226e <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d146      	bne.n	8002ce6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <ADC_Enable+0xb0>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	f043 0210 	orr.w	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e032      	b.n	8002ce8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fac9 	bl	800221e <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c8c:	f7ff f9f6 	bl	800207c <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c92:	e021      	b.n	8002cd8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fae8 	bl	800226e <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fab8 	bl	800221e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cae:	f7ff f9e5 	bl	800207c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d90d      	bls.n	8002cd8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	f043 0210 	orr.w	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e007      	b.n	8002ce8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d1d6      	bne.n	8002c94 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	8000003f 	.word	0x8000003f

08002cf4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fac7 	bl	8002294 <LL_ADC_IsDisableOngoing>
 8002d06:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff faae 	bl	800226e <LL_ADC_IsEnabled>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d040      	beq.n	8002d9a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d13d      	bne.n	8002d9a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030d 	and.w	r3, r3, #13
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10c      	bne.n	8002d46 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fa88 	bl	8002246 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d3e:	f7ff f99d 	bl	800207c <HAL_GetTick>
 8002d42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d44:	e022      	b.n	8002d8c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e01c      	b.n	8002d9c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d62:	f7ff f98b 	bl	800207c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d90d      	bls.n	8002d8c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	f043 0210 	orr.w	r2, r3, #16
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e007      	b.n	8002d9c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e3      	bne.n	8002d62 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <LL_ADC_SetCommonPathInternalCh>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_ADC_GetCommonPathInternalCh>:
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <LL_ADC_SetOffset>:
{
 8002de8:	b490      	push	{r4, r7}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3360      	adds	r3, #96	; 0x60
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002e04:	6822      	ldr	r2, [r4, #0]
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <LL_ADC_SetOffset+0x40>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e1a:	6023      	str	r3, [r4, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc90      	pop	{r4, r7}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	03fff000 	.word	0x03fff000

08002e2c <LL_ADC_GetOffsetChannel>:
{
 8002e2c:	b490      	push	{r4, r7}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc90      	pop	{r4, r7}
 8002e52:	4770      	bx	lr

08002e54 <LL_ADC_SetOffsetState>:
{
 8002e54:	b490      	push	{r4, r7}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3360      	adds	r3, #96	; 0x60
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	6023      	str	r3, [r4, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc90      	pop	{r4, r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_SetOffsetSign>:
{
 8002e84:	b490      	push	{r4, r7}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3360      	adds	r3, #96	; 0x60
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	6023      	str	r3, [r4, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc90      	pop	{r4, r7}
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_SetOffsetSaturation>:
{
 8002eb4:	b490      	push	{r4, r7}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3360      	adds	r3, #96	; 0x60
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	6023      	str	r3, [r4, #0]
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc90      	pop	{r4, r7}
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	615a      	str	r2, [r3, #20]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_INJ_GetTrigAuto>:
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_ADC_SetChannelSamplingTime>:
{
 8002f26:	b490      	push	{r4, r7}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3314      	adds	r3, #20
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	0e5b      	lsrs	r3, r3, #25
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	4413      	add	r3, r2
 8002f44:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	0d1b      	lsrs	r3, r3, #20
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2107      	movs	r1, #7
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	401a      	ands	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	0d1b      	lsrs	r3, r3, #20
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	6023      	str	r3, [r4, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc90      	pop	{r4, r7}
 8002f74:	4770      	bx	lr
	...

08002f78 <LL_ADC_SetChannelSingleDiff>:
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f90:	43db      	mvns	r3, r3
 8002f92:	401a      	ands	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0318 	and.w	r3, r3, #24
 8002f9a:	4908      	ldr	r1, [pc, #32]	; (8002fbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f9c:	40d9      	lsrs	r1, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	0007ffff 	.word	0x0007ffff

08002fc0 <LL_ADC_GetMultimode>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_IsEnabled>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <LL_ADC_IsEnabled+0x18>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <LL_ADC_IsEnabled+0x1a>
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_ADC_StartCalibration>:
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800301e:	4313      	orrs	r3, r2
 8003020:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	609a      	str	r2, [r3, #8]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <LL_ADC_IsCalibrationOnGoing>:
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003048:	d101      	bne.n	800304e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_ADC_REG_IsConversionOngoing>:
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d101      	bne.n	8003074 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_ADC_INJ_StartConversion>:
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003092:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003096:	f043 0208 	orr.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	609a      	str	r2, [r3, #8]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_ADC_INJ_IsConversionOngoing>:
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d101      	bne.n	80030c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_ADCEx_Calibration_Start+0x1c>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e04d      	b.n	8003188 <HAL_ADCEx_Calibration_Start+0xb8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff fdfd 	bl	8002cf4 <ADC_Disable>
 80030fa:	4603      	mov	r3, r0
 80030fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d136      	bne.n	8003172 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800310c:	f023 0302 	bic.w	r3, r3, #2
 8003110:	f043 0202 	orr.w	r2, r3, #2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff6f 	bl	8003002 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003124:	e014      	b.n	8003150 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3301      	adds	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d90d      	bls.n	8003150 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	f023 0312 	bic.w	r3, r3, #18
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e01b      	b.n	8003188 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff6d 	bl	8003034 <LL_ADC_IsCalibrationOnGoing>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e2      	bne.n	8003126 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	f023 0303 	bic.w	r3, r3, #3
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003170:	e005      	b.n	800317e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	f043 0210 	orr.w	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	0004de01 	.word	0x0004de01

08003194 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800319c:	486e      	ldr	r0, [pc, #440]	; (8003358 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800319e:	f7ff ff0f 	bl	8002fc0 <LL_ADC_GetMultimode>
 80031a2:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff7e 	bl	80030aa <LL_ADC_INJ_IsConversionOngoing>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0ca      	b.n	800334e <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031c2:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d107      	bne.n	80031e8 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b2      	b.n	800334e <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_ADCEx_InjectedStart_IT+0x62>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e0ab      	b.n	800334e <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fd1e 	bl	8002c40 <ADC_Enable>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 809a 	bne.w	8003344 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003220:	f023 0208 	bic.w	r2, r3, #8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	661a      	str	r2, [r3, #96]	; 0x60
 8003228:	e002      	b.n	8003230 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a44      	ldr	r2, [pc, #272]	; (800335c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d002      	beq.n	8003254 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	e001      	b.n	8003258 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8003254:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	4293      	cmp	r3, r2
 800325e:	d002      	beq.n	8003266 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2260      	movs	r2, #96	; 0x60
 8003278:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800329e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d110      	bne.n	80032ca <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0220 	bic.w	r2, r2, #32
 80032b6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c6:	605a      	str	r2, [r3, #4]
          break;
 80032c8:	e010      	b.n	80032ec <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0220 	orr.w	r2, r2, #32
 80032e8:	605a      	str	r2, [r3, #4]
          break;
 80032ea:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d002      	beq.n	80032fc <HAL_ADCEx_InjectedStart_IT+0x168>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	e001      	b.n	8003300 <HAL_ADCEx_InjectedStart_IT+0x16c>
 80032fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4293      	cmp	r3, r2
 8003306:	d008      	beq.n	800331a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d002      	beq.n	800331a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b07      	cmp	r3, #7
 8003318:	d10d      	bne.n	8003336 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fdf3 	bl	8002f0a <LL_ADC_INJ_GetTrigAuto>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d110      	bne.n	800334c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fea7 	bl	8003082 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003334:	e00a      	b.n	800334c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c
 8003342:	e003      	b.n	800334c <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	50000300 	.word	0x50000300
 800335c:	50000100 	.word	0x50000100

08003360 <HAL_ADCEx_InjectedStop_IT>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop() must be used.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef *hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_ADCEx_InjectedStop_IT+0x16>
 8003372:	2302      	movs	r3, #2
 8003374:	e03a      	b.n	80033ec <HAL_ADCEx_InjectedStop_IT+0x8c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going on injected group only. */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 800337e:	2102      	movs	r1, #2
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fba9 	bl	8002ad8 <ADC_ConversionStop>
 8003386:	4603      	mov	r3, r0
 8003388:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if injected conversions are effectively stopped   */
  /* and if no conversion on the other group (regular group) is intended to   */
  /* continue.                                                                */
  if (tmp_hal_status == HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d128      	bne.n	80033e2 <HAL_ADCEx_InjectedStop_IT+0x82>
  {
    /* Disable ADC end of conversion interrupt for injected channels */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_FLAG_JQOVF));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 628c 	bic.w	r2, r2, #1120	; 0x460
 800339e:	605a      	str	r2, [r3, #4]

    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fe59 	bl	800305c <LL_ADC_REG_IsConversionOngoing>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d112      	bne.n	80033d6 <HAL_ADCEx_InjectedStop_IT+0x76>
    {
      /* 2. Disable the ADC peripheral */
      tmp_hal_status = ADC_Disable(hadc);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fc9f 	bl	8002cf4 <ADC_Disable>
 80033b6:	4603      	mov	r3, r0
 80033b8:	73fb      	strb	r3, [r7, #15]

      /* Check if ADC is effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d110      	bne.n	80033e2 <HAL_ADCEx_InjectedStop_IT+0x82>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80033d4:	e005      	b.n	80033e2 <HAL_ADCEx_InjectedStop_IT+0x82>
    /* Conversion on injected group is stopped, but ADC not disabled since    */
    /* conversion on regular group is still running.                          */
    else
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	f240 2215 	movw	r2, #533	; 0x215
 8003404:	4293      	cmp	r3, r2
 8003406:	d00e      	beq.n	8003426 <HAL_ADCEx_InjectedGetValue+0x32>
 8003408:	f240 321b 	movw	r2, #795	; 0x31b
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_ADCEx_InjectedGetValue+0x26>
 8003410:	f240 120f 	movw	r2, #271	; 0x10f
 8003414:	4293      	cmp	r3, r2
 8003416:	d00c      	beq.n	8003432 <HAL_ADCEx_InjectedGetValue+0x3e>
 8003418:	e011      	b.n	800343e <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003422:	60fb      	str	r3, [r7, #12]
      break;
 8003424:	e011      	b.n	800344a <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	60fb      	str	r3, [r7, #12]
      break;
 8003430:	e00b      	b.n	800344a <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343a:	60fb      	str	r3, [r7, #12]
      break;
 800343c:	e005      	b.n	800344a <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003446:	60fb      	str	r3, [r7, #12]
      break;
 8003448:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b0a8      	sub	sp, #160	; 0xa0
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d102      	bne.n	80034d2 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80034cc:	2302      	movs	r3, #2
 80034ce:	f000 bc39 	b.w	8003d44 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d130      	bne.n	800354c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	d179      	bne.n	80035e6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d010      	beq.n	800351c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	0e9b      	lsrs	r3, r3, #26
 8003500:	025b      	lsls	r3, r3, #9
 8003502:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800350e:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800351a:	e007      	b.n	800352c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0e9b      	lsrs	r3, r3, #26
 8003522:	025b      	lsls	r3, r3, #9
 8003524:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003532:	4ba3      	ldr	r3, [pc, #652]	; (80037c0 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800353e:	430b      	orrs	r3, r1
 8003540:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003548:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800354a:	e04c      	b.n	80035e6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11d      	bne.n	8003590 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003578:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003584:	e004      	b.n	8003590 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	3b01      	subs	r3, #1
 800358c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	f003 021f 	and.w	r2, r3, #31
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035d6:	4b7a      	ldr	r3, [pc, #488]	; (80037c0 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	430b      	orrs	r3, r1
 80035e4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fd5d 	bl	80030aa <LL_ADC_INJ_IsConversionOngoing>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d124      	bne.n	8003640 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d112      	bne.n	8003626 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003610:	055a      	lsls	r2, r3, #21
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003618:	051b      	lsls	r3, r3, #20
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e00c      	b.n	8003640 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003636:	055a      	lsls	r2, r3, #21
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fd09 	bl	800305c <LL_ADC_REG_IsConversionOngoing>
 800364a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fd29 	bl	80030aa <LL_ADC_INJ_IsConversionOngoing>
 8003658:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800365c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 81d4 	bne.w	8003a0e <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003666:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 81cf 	bne.w	8003a0e <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d116      	bne.n	80036ae <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003686:	2b01      	cmp	r3, #1
 8003688:	d108      	bne.n	800369c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003698:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800369a:	e01f      	b.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80036aa:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80036ac:	e016      	b.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d109      	bne.n	80036cc <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80036ca:	e007      	b.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80036da:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d110      	bne.n	8003708 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	430b      	orrs	r3, r1
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0202 	orr.w	r2, r2, #2
 8003704:	611a      	str	r2, [r3, #16]
 8003706:	e007      	b.n	8003718 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0202 	bic.w	r2, r2, #2
 8003716:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003720:	d10f      	bne.n	8003742 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	4619      	mov	r1, r3
 800372e:	f7ff fbfa 	bl	8002f26 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fbd2 	bl	8002ee4 <LL_ADC_SetSamplingTimeCommonConfig>
 8003740:	e00e      	b.n	8003760 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	461a      	mov	r2, r3
 8003750:	f7ff fbe9 	bl	8002f26 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fbc2 	bl	8002ee4 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b04      	cmp	r3, #4
 8003780:	d025      	beq.n	80037ce <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6919      	ldr	r1, [r3, #16]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003792:	f7ff fb29 	bl	8002de8 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6919      	ldr	r1, [r3, #16]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	461a      	mov	r2, r3
 80037a4:	f7ff fb6e 	bl	8002e84 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80037b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037bc:	e003      	b.n	80037c6 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80037be:	bf00      	nop
 80037c0:	04104000 	.word	0x04104000
 80037c4:	2300      	movs	r3, #0
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7ff fb74 	bl	8002eb4 <LL_ADC_SetOffsetSaturation>
 80037cc:	e11f      	b.n	8003a0e <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fb29 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_ADCEx_InjectedConfigChannel+0x352>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fb1e 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	0e9b      	lsrs	r3, r3, #26
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	e014      	b.n	8003824 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fb13 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003818:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_ADCEx_InjectedConfigChannel+0x394>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	e00a      	b.n	8003852 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800384a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	429a      	cmp	r2, r3
 8003854:	d106      	bne.n	8003864 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff faf8 	bl	8002e54 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2101      	movs	r1, #1
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fade 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 8003870:	4603      	mov	r3, r0
 8003872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fad3 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 8003886:	4603      	mov	r3, r0
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	f003 021f 	and.w	r2, r3, #31
 800388e:	e010      	b.n	80038b2 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fac8 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 800389c:	4603      	mov	r3, r0
 800389e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80038a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_ADCEx_InjectedConfigChannel+0x422>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	0e9b      	lsrs	r3, r3, #26
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	e00a      	b.n	80038e0 <HAL_ADCEx_InjectedConfigChannel+0x438>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 80038d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d106      	bne.n	80038f2 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fab1 	bl	8002e54 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fa97 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 80038fe:	4603      	mov	r3, r0
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <HAL_ADCEx_InjectedConfigChannel+0x476>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2102      	movs	r1, #2
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fa8c 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 8003914:	4603      	mov	r3, r0
 8003916:	0e9b      	lsrs	r3, r3, #26
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	e010      	b.n	8003940 <HAL_ADCEx_InjectedConfigChannel+0x498>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2102      	movs	r1, #2
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fa81 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 800392a:	4603      	mov	r3, r0
 800392c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003938:	fab3 f383 	clz	r3, r3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	e00a      	b.n	800396e <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	429a      	cmp	r2, r3
 8003970:	d106      	bne.n	8003980 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	2102      	movs	r1, #2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fa6a 	bl	8002e54 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2103      	movs	r1, #3
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fa50 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 800398c:	4603      	mov	r3, r0
 800398e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <HAL_ADCEx_InjectedConfigChannel+0x504>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2103      	movs	r1, #3
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fa45 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 80039a2:	4603      	mov	r3, r0
 80039a4:	0e9b      	lsrs	r3, r3, #26
 80039a6:	f003 021f 	and.w	r2, r3, #31
 80039aa:	e010      	b.n	80039ce <HAL_ADCEx_InjectedConfigChannel+0x526>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2103      	movs	r1, #3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fa3a 	bl	8002e2c <LL_ADC_GetOffsetChannel>
 80039b8:	4603      	mov	r3, r0
 80039ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 80039c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	0e9b      	lsrs	r3, r3, #26
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	e00a      	b.n	80039fc <HAL_ADCEx_InjectedConfigChannel+0x554>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80039f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d106      	bne.n	8003a0e <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2103      	movs	r1, #3
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fa23 	bl	8002e54 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fae2 	bl	8002fdc <LL_ADC_IsEnabled>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 810c 	bne.w	8003c38 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f7ff faa3 	bl	8002f78 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4aab      	ldr	r2, [pc, #684]	; (8003ce4 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f040 80fd 	bne.w	8003c38 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	0e9b      	lsrs	r3, r3, #26
 8003a54:	3301      	adds	r3, #1
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	bf94      	ite	ls
 8003a5e:	2301      	movls	r3, #1
 8003a60:	2300      	movhi	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	e012      	b.n	8003a8c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2b09      	cmp	r3, #9
 8003a84:	bf94      	ite	ls
 8003a86:	2301      	movls	r3, #1
 8003a88:	2300      	movhi	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d064      	beq.n	8003b5a <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <HAL_ADCEx_InjectedConfigChannel+0x604>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	0e9b      	lsrs	r3, r3, #26
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	069b      	lsls	r3, r3, #26
 8003aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aaa:	e00e      	b.n	8003aca <HAL_ADCEx_InjectedConfigChannel+0x622>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	069b      	lsls	r3, r3, #26
 8003ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_ADCEx_InjectedConfigChannel+0x642>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	0e9b      	lsrs	r3, r3, #26
 8003adc:	3301      	adds	r3, #1
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	e010      	b.n	8003b0c <HAL_ADCEx_InjectedConfigChannel+0x664>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	3301      	adds	r3, #1
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	2101      	movs	r1, #1
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	ea42 0103 	orr.w	r1, r2, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	3301      	adds	r3, #1
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	051b      	lsls	r3, r3, #20
 8003b30:	e011      	b.n	8003b56 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f003 021f 	and.w	r2, r3, #31
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	051b      	lsls	r3, r3, #20
 8003b56:	430b      	orrs	r3, r1
 8003b58:	e069      	b.n	8003c2e <HAL_ADCEx_InjectedConfigChannel+0x786>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d107      	bne.n	8003b76 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	0e9b      	lsrs	r3, r3, #26
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	069b      	lsls	r3, r3, #26
 8003b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b74:	e00e      	b.n	8003b94 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	623b      	str	r3, [r7, #32]
  return result;
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	069b      	lsls	r3, r3, #26
 8003b90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d109      	bne.n	8003bb4 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	e010      	b.n	8003bd6 <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	61bb      	str	r3, [r7, #24]
  return result;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	ea42 0103 	orr.w	r1, r2, r3
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0e9b      	lsrs	r3, r3, #26
 8003bec:	3301      	adds	r3, #1
 8003bee:	f003 021f 	and.w	r2, r3, #31
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3b1e      	subs	r3, #30
 8003bfa:	051b      	lsls	r3, r3, #20
 8003bfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c00:	e014      	b.n	8003c2c <HAL_ADCEx_InjectedConfigChannel+0x784>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	613b      	str	r3, [r7, #16]
  return result;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f003 021f 	and.w	r2, r3, #31
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	3b1e      	subs	r3, #30
 8003c26:	051b      	lsls	r3, r3, #20
 8003c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	6892      	ldr	r2, [r2, #8]
 8003c32:	4619      	mov	r1, r3
 8003c34:	f7ff f977 	bl	8002f26 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d079      	beq.n	8003d38 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c44:	4829      	ldr	r0, [pc, #164]	; (8003cec <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003c46:	f7ff f8c0 	bl	8002dca <LL_ADC_GetCommonPathInternalCh>
 8003c4a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a27      	ldr	r2, [pc, #156]	; (8003cf0 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a25      	ldr	r2, [pc, #148]	; (8003cf4 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d126      	bne.n	8003cb0 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d120      	bne.n	8003cb0 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c76:	d15f      	bne.n	8003d38 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c80:	4619      	mov	r1, r3
 8003c82:	481a      	ldr	r0, [pc, #104]	; (8003cec <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003c84:	f7ff f88e 	bl	8002da4 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c88:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	099a      	lsrs	r2, r3, #6
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003ca0:	e002      	b.n	8003ca8 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f9      	bne.n	8003ca2 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cae:	e043      	b.n	8003d38 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a12      	ldr	r2, [pc, #72]	; (8003d00 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d126      	bne.n	8003d08 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d120      	bne.n	8003d08 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a0e      	ldr	r2, [pc, #56]	; (8003d04 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d033      	beq.n	8003d38 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4804      	ldr	r0, [pc, #16]	; (8003cec <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003cdc:	f7ff f862 	bl	8002da4 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ce0:	e02a      	b.n	8003d38 <HAL_ADCEx_InjectedConfigChannel+0x890>
 8003ce2:	bf00      	nop
 8003ce4:	407f0000 	.word	0x407f0000
 8003ce8:	80080000 	.word	0x80080000
 8003cec:	50000300 	.word	0x50000300
 8003cf0:	c3210000 	.word	0xc3210000
 8003cf4:	90c00010 	.word	0x90c00010
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	053e2d63 	.word	0x053e2d63
 8003d00:	c7520000 	.word	0xc7520000
 8003d04:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d112      	bne.n	8003d38 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d007      	beq.n	8003d38 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d30:	4619      	mov	r1, r3
 8003d32:	4808      	ldr	r0, [pc, #32]	; (8003d54 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 8003d34:	f7ff f836 	bl	8002da4 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d40:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	37a0      	adds	r7, #160	; 0xa0
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	cb840000 	.word	0xcb840000
 8003d50:	50000100 	.word	0x50000100
 8003d54:	50000300 	.word	0x50000300

08003d58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b0a1      	sub	sp, #132	; 0x84
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e087      	b.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d86:	d102      	bne.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003d88:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	e001      	b.n	8003d92 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e06a      	b.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff f952 	bl	800305c <LL_ADC_REG_IsConversionOngoing>
 8003db8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f94c 	bl	800305c <LL_ADC_REG_IsConversionOngoing>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d14c      	bne.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d149      	bne.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dd0:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003dd2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d028      	beq.n	8003e2e <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dee:	035b      	lsls	r3, r3, #13
 8003df0:	430b      	orrs	r3, r1
 8003df2:	431a      	orrs	r2, r3
 8003df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003dfc:	f7ff f8ee 	bl	8002fdc <LL_ADC_IsEnabled>
 8003e00:	4604      	mov	r4, r0
 8003e02:	4823      	ldr	r0, [pc, #140]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003e04:	f7ff f8ea 	bl	8002fdc <LL_ADC_IsEnabled>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4323      	orrs	r3, r4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d133      	bne.n	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e18:	f023 030f 	bic.w	r3, r3, #15
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	6811      	ldr	r1, [r2, #0]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	6892      	ldr	r2, [r2, #8]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	431a      	orrs	r2, r3
 8003e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e2c:	e024      	b.n	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e38:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e3a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e3e:	f7ff f8cd 	bl	8002fdc <LL_ADC_IsEnabled>
 8003e42:	4604      	mov	r4, r0
 8003e44:	4812      	ldr	r0, [pc, #72]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003e46:	f7ff f8c9 	bl	8002fdc <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4323      	orrs	r3, r4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d112      	bne.n	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e5a:	f023 030f 	bic.w	r3, r3, #15
 8003e5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e60:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e62:	e009      	b.n	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e76:	e000      	b.n	8003e7a <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e82:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3784      	adds	r7, #132	; 0x84
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd90      	pop	{r4, r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	50000100 	.word	0x50000100
 8003e94:	50000300 	.word	0x50000300

08003e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eca:	4a04      	ldr	r2, [pc, #16]	; (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	60d3      	str	r3, [r2, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	f003 0307 	and.w	r3, r3, #7
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	db0b      	blt.n	8003f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4907      	ldr	r1, [pc, #28]	; (8003f34 <__NVIC_EnableIRQ+0x38>)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000e100 	.word	0xe000e100

08003f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	db0a      	blt.n	8003f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	490c      	ldr	r1, [pc, #48]	; (8003f84 <__NVIC_SetPriority+0x4c>)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f60:	e00a      	b.n	8003f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <__NVIC_SetPriority+0x50>)
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3b04      	subs	r3, #4
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	761a      	strb	r2, [r3, #24]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000e100 	.word	0xe000e100
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f1c3 0307 	rsb	r3, r3, #7
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	bf28      	it	cs
 8003faa:	2304      	movcs	r3, #4
 8003fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d902      	bls.n	8003fbc <NVIC_EncodePriority+0x30>
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3b03      	subs	r3, #3
 8003fba:	e000      	b.n	8003fbe <NVIC_EncodePriority+0x32>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	401a      	ands	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	43d9      	mvns	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	4313      	orrs	r3, r2
         );
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004004:	d301      	bcc.n	800400a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004006:	2301      	movs	r3, #1
 8004008:	e00f      	b.n	800402a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <SysTick_Config+0x40>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004012:	210f      	movs	r1, #15
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	f7ff ff8e 	bl	8003f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <SysTick_Config+0x40>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004022:	4b04      	ldr	r3, [pc, #16]	; (8004034 <SysTick_Config+0x40>)
 8004024:	2207      	movs	r2, #7
 8004026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	e000e010 	.word	0xe000e010

08004038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff29 	bl	8003e98 <__NVIC_SetPriorityGrouping>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	4603      	mov	r3, r0
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800405c:	f7ff ff40 	bl	8003ee0 <__NVIC_GetPriorityGrouping>
 8004060:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	6978      	ldr	r0, [r7, #20]
 8004068:	f7ff ff90 	bl	8003f8c <NVIC_EncodePriority>
 800406c:	4602      	mov	r2, r0
 800406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff5f 	bl	8003f38 <__NVIC_SetPriority>
}
 800407a:	bf00      	nop
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	4603      	mov	r3, r0
 800408a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800408c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff33 	bl	8003efc <__NVIC_EnableIRQ>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ffa4 	bl	8003ff4 <SysTick_Config>
 80040ac:	4603      	mov	r3, r0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d00d      	beq.n	80040ea <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2204      	movs	r2, #4
 80040d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e047      	b.n	800417a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 020e 	bic.w	r2, r2, #14
 80040f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004118:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	f003 021f 	and.w	r2, r3, #31
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004136:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004158:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
    }
  }
  return status;
 800417a:	7bfb      	ldrb	r3, [r7, #15]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004192:	e15a      	b.n	800444a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 814c 	beq.w	8004444 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d00b      	beq.n	80041cc <HAL_GPIO_Init+0x48>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d007      	beq.n	80041cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041c0:	2b11      	cmp	r3, #17
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b12      	cmp	r3, #18
 80041ca:	d130      	bne.n	800422e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004202:	2201      	movs	r2, #1
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0201 	and.w	r2, r3, #1
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	2203      	movs	r2, #3
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0xea>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b12      	cmp	r3, #18
 800426c:	d123      	bne.n	80042b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	08da      	lsrs	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3208      	adds	r2, #8
 8004276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800427a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	08da      	lsrs	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3208      	adds	r2, #8
 80042b0:	6939      	ldr	r1, [r7, #16]
 80042b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 0203 	and.w	r2, r3, #3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80a6 	beq.w	8004444 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f8:	4b5b      	ldr	r3, [pc, #364]	; (8004468 <HAL_GPIO_Init+0x2e4>)
 80042fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fc:	4a5a      	ldr	r2, [pc, #360]	; (8004468 <HAL_GPIO_Init+0x2e4>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6613      	str	r3, [r2, #96]	; 0x60
 8004304:	4b58      	ldr	r3, [pc, #352]	; (8004468 <HAL_GPIO_Init+0x2e4>)
 8004306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004310:	4a56      	ldr	r2, [pc, #344]	; (800446c <HAL_GPIO_Init+0x2e8>)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	3302      	adds	r3, #2
 8004318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	220f      	movs	r2, #15
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800433a:	d01f      	beq.n	800437c <HAL_GPIO_Init+0x1f8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a4c      	ldr	r2, [pc, #304]	; (8004470 <HAL_GPIO_Init+0x2ec>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d019      	beq.n	8004378 <HAL_GPIO_Init+0x1f4>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a4b      	ldr	r2, [pc, #300]	; (8004474 <HAL_GPIO_Init+0x2f0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_GPIO_Init+0x1f0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <HAL_GPIO_Init+0x2f4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00d      	beq.n	8004370 <HAL_GPIO_Init+0x1ec>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a49      	ldr	r2, [pc, #292]	; (800447c <HAL_GPIO_Init+0x2f8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <HAL_GPIO_Init+0x1e8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a48      	ldr	r2, [pc, #288]	; (8004480 <HAL_GPIO_Init+0x2fc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <HAL_GPIO_Init+0x1e4>
 8004364:	2305      	movs	r3, #5
 8004366:	e00a      	b.n	800437e <HAL_GPIO_Init+0x1fa>
 8004368:	2306      	movs	r3, #6
 800436a:	e008      	b.n	800437e <HAL_GPIO_Init+0x1fa>
 800436c:	2304      	movs	r3, #4
 800436e:	e006      	b.n	800437e <HAL_GPIO_Init+0x1fa>
 8004370:	2303      	movs	r3, #3
 8004372:	e004      	b.n	800437e <HAL_GPIO_Init+0x1fa>
 8004374:	2302      	movs	r3, #2
 8004376:	e002      	b.n	800437e <HAL_GPIO_Init+0x1fa>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <HAL_GPIO_Init+0x1fa>
 800437c:	2300      	movs	r3, #0
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	f002 0203 	and.w	r2, r2, #3
 8004384:	0092      	lsls	r2, r2, #2
 8004386:	4093      	lsls	r3, r2
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800438e:	4937      	ldr	r1, [pc, #220]	; (800446c <HAL_GPIO_Init+0x2e8>)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	089b      	lsrs	r3, r3, #2
 8004394:	3302      	adds	r3, #2
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800439c:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_GPIO_Init+0x300>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043c0:	4a30      	ldr	r2, [pc, #192]	; (8004484 <HAL_GPIO_Init+0x300>)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80043c6:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <HAL_GPIO_Init+0x300>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043ea:	4a26      	ldr	r2, [pc, #152]	; (8004484 <HAL_GPIO_Init+0x300>)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_GPIO_Init+0x300>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	43db      	mvns	r3, r3
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004414:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <HAL_GPIO_Init+0x300>)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <HAL_GPIO_Init+0x300>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	43db      	mvns	r3, r3
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4013      	ands	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800443e:	4a11      	ldr	r2, [pc, #68]	; (8004484 <HAL_GPIO_Init+0x300>)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	3301      	adds	r3, #1
 8004448:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	f47f ae9d 	bne.w	8004194 <HAL_GPIO_Init+0x10>
  }
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	40010000 	.word	0x40010000
 8004470:	48000400 	.word	0x48000400
 8004474:	48000800 	.word	0x48000800
 8004478:	48000c00 	.word	0x48000c00
 800447c:	48001000 	.word	0x48001000
 8004480:	48001400 	.word	0x48001400
 8004484:	40010400 	.word	0x40010400

08004488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800449e:	4a05      	ldr	r2, [pc, #20]	; (80044b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc ffec 	bl	8001484 <HAL_GPIO_EXTI_Callback>
  }
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40010400 	.word	0x40010400

080044b8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0bb      	b.n	8004646 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d101      	bne.n	80044de <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0b3      	b.n	8004646 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d101      	bne.n	80044ee <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0ab      	b.n	8004646 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ee:	4b58      	ldr	r3, [pc, #352]	; (8004650 <HAL_OPAMP_Init+0x198>)
 80044f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f2:	4a57      	ldr	r2, [pc, #348]	; (8004650 <HAL_OPAMP_Init+0x198>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6613      	str	r3, [r2, #96]	; 0x60
 80044fa:	4b55      	ldr	r3, [pc, #340]	; (8004650 <HAL_OPAMP_Init+0x198>)
 80044fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd f948 	bl	80017b0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d003      	beq.n	8004530 <HAL_OPAMP_Init+0x78>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b60      	cmp	r3, #96	; 0x60
 800452e:	d133      	bne.n	8004598 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 0110 	bic.w	r1, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_OPAMP_Init+0x19c>)
 800454e:	4013      	ands	r3, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6851      	ldr	r1, [r2, #4]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6892      	ldr	r2, [r2, #8]
 8004558:	4311      	orrs	r1, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6912      	ldr	r2, [r2, #16]
 800455e:	430a      	orrs	r2, r1
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	7d09      	ldrb	r1, [r1, #20]
 8004564:	2901      	cmp	r1, #1
 8004566:	d102      	bne.n	800456e <HAL_OPAMP_Init+0xb6>
 8004568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800456c:	e000      	b.n	8004570 <HAL_OPAMP_Init+0xb8>
 800456e:	2100      	movs	r1, #0
 8004570:	4311      	orrs	r1, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004576:	4311      	orrs	r1, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800457c:	4311      	orrs	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004582:	04d2      	lsls	r2, r2, #19
 8004584:	4311      	orrs	r1, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800458a:	0612      	lsls	r2, r2, #24
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	430b      	orrs	r3, r1
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e035      	b.n	8004604 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 0110 	bic.w	r1, r3, #16
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b27      	ldr	r3, [pc, #156]	; (8004654 <HAL_OPAMP_Init+0x19c>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6851      	ldr	r1, [r2, #4]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6892      	ldr	r2, [r2, #8]
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68d2      	ldr	r2, [r2, #12]
 80045c6:	4311      	orrs	r1, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6912      	ldr	r2, [r2, #16]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	7d09      	ldrb	r1, [r1, #20]
 80045d2:	2901      	cmp	r1, #1
 80045d4:	d102      	bne.n	80045dc <HAL_OPAMP_Init+0x124>
 80045d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045da:	e000      	b.n	80045de <HAL_OPAMP_Init+0x126>
 80045dc:	2100      	movs	r1, #0
 80045de:	4311      	orrs	r1, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045e4:	4311      	orrs	r1, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045ea:	4311      	orrs	r1, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045f0:	04d2      	lsls	r2, r2, #19
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f8:	0612      	lsls	r2, r2, #24
 80045fa:	4311      	orrs	r1, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	430b      	orrs	r3, r1
 8004602:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	db10      	blt.n	8004630 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	e0003e11 	.word	0xe0003e11

08004658 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	e01d      	b.n	80046ac <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b05      	cmp	r3, #5
 800467a:	d102      	bne.n	8004682 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	e014      	b.n	80046ac <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10c      	bne.n	80046a8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2204      	movs	r2, #4
 80046a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80046a6:	e001      	b.n	80046ac <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b08c      	sub	sp, #48	; 0x30
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e2df      	b.n	8004c9c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e2d7      	b.n	8004c9c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e2cf      	b.n	8004c9c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d001      	beq.n	800470c <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e2c7      	b.n	8004c9c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0202 	orr.w	r2, r2, #2
 800471a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0202 	orr.w	r2, r2, #2
 800472a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0202 	orr.w	r2, r2, #2
 800473a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0210 	orr.w	r2, r2, #16
 800474a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0210 	orr.w	r2, r2, #16
 800475a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0210 	orr.w	r2, r2, #16
 800476a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80047aa:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80047ba:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80047ca:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 80047fc:	2310      	movs	r3, #16
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 8004800:	2310      	movs	r3, #16
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 8004804:	2310      	movs	r3, #16
 8004806:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 8004808:	2308      	movs	r3, #8
 800480a:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 800480c:	e056      	b.n	80048bc <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	061a      	lsls	r2, r3, #24
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	061a      	lsls	r2, r3, #24
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	061a      	lsls	r2, r3, #24
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8004850:	2002      	movs	r0, #2
 8004852:	f7fd fc1f 	bl	8002094 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8004864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	4413      	add	r3, r2
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486c:	e003      	b.n	8004876 <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 800486e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d004      	beq.n	800488e <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8004884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	4413      	add	r3, r2
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	e003      	b.n	8004896 <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	4413      	add	r3, r2
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	e003      	b.n	80048b6 <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1a5      	bne.n	800480e <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	061a      	lsls	r2, r3, #24
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	061a      	lsls	r2, r3, #24
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	061a      	lsls	r2, r3, #24
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8004904:	2002      	movs	r0, #2
 8004906:	f7fd fbc5 	bl	8002094 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00d      	beq.n	8004934 <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	3301      	adds	r3, #1
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	061a      	lsls	r2, r3, #24
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	3301      	adds	r3, #1
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	061a      	lsls	r2, r3, #24
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00d      	beq.n	8004988 <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	3301      	adds	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	061a      	lsls	r2, r3, #24
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800499a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049ae:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049c2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 80049c4:	2310      	movs	r3, #16
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 80049c8:	2310      	movs	r3, #16
 80049ca:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 80049cc:	2310      	movs	r3, #16
 80049ce:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 80049d0:	2308      	movs	r3, #8
 80049d2:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 80049d4:	e056      	b.n	8004a84 <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	04da      	lsls	r2, r3, #19
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	04da      	lsls	r2, r3, #19
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	04da      	lsls	r2, r3, #19
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8004a18:	2002      	movs	r0, #2
 8004a1a:	f7fd fb3b 	bl	8002094 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 8004a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	4413      	add	r3, r2
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a34:	e003      	b.n	8004a3e <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 8004a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4413      	add	r3, r2
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	e003      	b.n	8004a5e <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	4413      	add	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e003      	b.n	8004a7e <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1a5      	bne.n	80049d6 <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	04da      	lsls	r2, r3, #19
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	04da      	lsls	r2, r3, #19
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	04da      	lsls	r2, r3, #19
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8004acc:	2002      	movs	r0, #2
 8004ace:	f7fd fae1 	bl	8002094 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	04da      	lsls	r2, r3, #19
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	04da      	lsls	r2, r3, #19
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3301      	adds	r3, #1
 8004b38:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	04da      	lsls	r2, r3, #19
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b7e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0202 	bic.w	r2, r2, #2
 8004bbe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0202 	bic.w	r2, r2, #2
 8004bce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0202 	bic.w	r2, r2, #2
 8004bde:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be4:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6a3a      	ldr	r2, [r7, #32]
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2210      	movs	r2, #16
 8004c08:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2210      	movs	r2, #16
 8004c14:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	061a      	lsls	r2, r3, #24
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	061a      	lsls	r2, r3, #24
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	061a      	lsls	r2, r3, #24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	04da      	lsls	r2, r3, #19
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	04da      	lsls	r2, r3, #19
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	04da      	lsls	r2, r3, #19
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3730      	adds	r7, #48	; 0x30
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d141      	bne.n	8004d36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cb2:	4b4b      	ldr	r3, [pc, #300]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbe:	d131      	bne.n	8004d24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cc0:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc6:	4a46      	ldr	r2, [pc, #280]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ccc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cd0:	4b43      	ldr	r3, [pc, #268]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cd8:	4a41      	ldr	r2, [pc, #260]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ce0:	4b40      	ldr	r3, [pc, #256]	; (8004de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2232      	movs	r2, #50	; 0x32
 8004ce6:	fb02 f303 	mul.w	r3, r2, r3
 8004cea:	4a3f      	ldr	r2, [pc, #252]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	0c9b      	lsrs	r3, r3, #18
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cf6:	e002      	b.n	8004cfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cfe:	4b38      	ldr	r3, [pc, #224]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0a:	d102      	bne.n	8004d12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f2      	bne.n	8004cf8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d12:	4b33      	ldr	r3, [pc, #204]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1e:	d158      	bne.n	8004dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e057      	b.n	8004dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d24:	4b2e      	ldr	r3, [pc, #184]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d2a:	4a2d      	ldr	r2, [pc, #180]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d34:	e04d      	b.n	8004dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d3c:	d141      	bne.n	8004dc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d3e:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d131      	bne.n	8004db0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d4c:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d52:	4a23      	ldr	r2, [pc, #140]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d5c:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d64:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	; (8004de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2232      	movs	r2, #50	; 0x32
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	0c9b      	lsrs	r3, r3, #18
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d82:	e002      	b.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d8a:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d96:	d102      	bne.n	8004d9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f2      	bne.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004daa:	d112      	bne.n	8004dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e011      	b.n	8004dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db6:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004dc0:	e007      	b.n	8004dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dca:	4a05      	ldr	r2, [pc, #20]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40007000 	.word	0x40007000
 8004de4:	20000000 	.word	0x20000000
 8004de8:	431bde83 	.word	0x431bde83

08004dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e308      	b.n	8005410 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d075      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e0a:	4ba3      	ldr	r3, [pc, #652]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e14:	4ba0      	ldr	r3, [pc, #640]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d102      	bne.n	8004e2a <HAL_RCC_OscConfig+0x3e>
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d002      	beq.n	8004e30 <HAL_RCC_OscConfig+0x44>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d10b      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e30:	4b99      	ldr	r3, [pc, #612]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05b      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x108>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d157      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e2e3      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d106      	bne.n	8004e60 <HAL_RCC_OscConfig+0x74>
 8004e52:	4b91      	ldr	r3, [pc, #580]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a90      	ldr	r2, [pc, #576]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e01d      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x98>
 8004e6a:	4b8b      	ldr	r3, [pc, #556]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a8a      	ldr	r2, [pc, #552]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4b88      	ldr	r3, [pc, #544]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a87      	ldr	r2, [pc, #540]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e00b      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e84:	4b84      	ldr	r3, [pc, #528]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a83      	ldr	r2, [pc, #524]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	4b81      	ldr	r3, [pc, #516]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a80      	ldr	r2, [pc, #512]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d013      	beq.n	8004ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fd f8ea 	bl	800207c <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eac:	f7fd f8e6 	bl	800207c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	; 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e2a8      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ebe:	4b76      	ldr	r3, [pc, #472]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0xc0>
 8004eca:	e014      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fd f8d6 	bl	800207c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fd f8d2 	bl	800207c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e294      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ee6:	4b6c      	ldr	r3, [pc, #432]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0xe8>
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d075      	beq.n	8004fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	4b65      	ldr	r3, [pc, #404]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f0c:	4b62      	ldr	r3, [pc, #392]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b0c      	cmp	r3, #12
 8004f1a:	d102      	bne.n	8004f22 <HAL_RCC_OscConfig+0x136>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d002      	beq.n	8004f28 <HAL_RCC_OscConfig+0x13c>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d11f      	bne.n	8004f68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f28:	4b5b      	ldr	r3, [pc, #364]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_OscConfig+0x154>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e267      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f40:	4b55      	ldr	r3, [pc, #340]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	061b      	lsls	r3, r3, #24
 8004f4e:	4952      	ldr	r1, [pc, #328]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f54:	4b51      	ldr	r3, [pc, #324]	; (800509c <HAL_RCC_OscConfig+0x2b0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fd f843 	bl	8001fe4 <HAL_InitTick>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d043      	beq.n	8004fec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e253      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d023      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f70:	4b49      	ldr	r3, [pc, #292]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a48      	ldr	r2, [pc, #288]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fd f87e 	bl	800207c <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f84:	f7fd f87a 	bl	800207c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e23c      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f96:	4b40      	ldr	r3, [pc, #256]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	4939      	ldr	r1, [pc, #228]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	604b      	str	r3, [r1, #4]
 8004fb6:	e01a      	b.n	8004fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb8:	4b37      	ldr	r3, [pc, #220]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a36      	ldr	r2, [pc, #216]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fd f85a 	bl	800207c <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fcc:	f7fd f856 	bl	800207c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e218      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fde:	4b2e      	ldr	r3, [pc, #184]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x1e0>
 8004fea:	e000      	b.n	8004fee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d03c      	beq.n	8005074 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01c      	beq.n	800503c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005002:	4b25      	ldr	r3, [pc, #148]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005008:	4a23      	ldr	r2, [pc, #140]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005012:	f7fd f833 	bl	800207c <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501a:	f7fd f82f 	bl	800207c <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e1f1      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800502c:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 800502e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0ef      	beq.n	800501a <HAL_RCC_OscConfig+0x22e>
 800503a:	e01b      	b.n	8005074 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503c:	4b16      	ldr	r3, [pc, #88]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 800503e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005042:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fd f816 	bl	800207c <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005054:	f7fd f812 	bl	800207c <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1d4      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1ef      	bne.n	8005054 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80ab 	beq.w	80051d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005082:	2300      	movs	r3, #0
 8005084:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005086:	4b04      	ldr	r3, [pc, #16]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_RCC_OscConfig+0x2b4>
 8005092:	2301      	movs	r3, #1
 8005094:	e005      	b.n	80050a2 <HAL_RCC_OscConfig+0x2b6>
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000
 800509c:	20000004 	.word	0x20000004
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00d      	beq.n	80050c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	4baf      	ldr	r3, [pc, #700]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	4aae      	ldr	r2, [pc, #696]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6593      	str	r3, [r2, #88]	; 0x58
 80050b2:	4bac      	ldr	r3, [pc, #688]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80050be:	2301      	movs	r3, #1
 80050c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c2:	4ba9      	ldr	r3, [pc, #676]	; (8005368 <HAL_RCC_OscConfig+0x57c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d118      	bne.n	8005100 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ce:	4ba6      	ldr	r3, [pc, #664]	; (8005368 <HAL_RCC_OscConfig+0x57c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4aa5      	ldr	r2, [pc, #660]	; (8005368 <HAL_RCC_OscConfig+0x57c>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050da:	f7fc ffcf 	bl	800207c <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e2:	f7fc ffcb 	bl	800207c <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e18d      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f4:	4b9c      	ldr	r3, [pc, #624]	; (8005368 <HAL_RCC_OscConfig+0x57c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d108      	bne.n	800511a <HAL_RCC_OscConfig+0x32e>
 8005108:	4b96      	ldr	r3, [pc, #600]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	4a95      	ldr	r2, [pc, #596]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005118:	e024      	b.n	8005164 <HAL_RCC_OscConfig+0x378>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b05      	cmp	r3, #5
 8005120:	d110      	bne.n	8005144 <HAL_RCC_OscConfig+0x358>
 8005122:	4b90      	ldr	r3, [pc, #576]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005128:	4a8e      	ldr	r2, [pc, #568]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005132:	4b8c      	ldr	r3, [pc, #560]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	4a8a      	ldr	r2, [pc, #552]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005142:	e00f      	b.n	8005164 <HAL_RCC_OscConfig+0x378>
 8005144:	4b87      	ldr	r3, [pc, #540]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514a:	4a86      	ldr	r2, [pc, #536]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005154:	4b83      	ldr	r3, [pc, #524]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	4a82      	ldr	r2, [pc, #520]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d016      	beq.n	800519a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fc ff86 	bl	800207c <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005172:	e00a      	b.n	800518a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fc ff82 	bl	800207c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e142      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800518a:	4b76      	ldr	r3, [pc, #472]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0ed      	beq.n	8005174 <HAL_RCC_OscConfig+0x388>
 8005198:	e015      	b.n	80051c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519a:	f7fc ff6f 	bl	800207c <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051a0:	e00a      	b.n	80051b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a2:	f7fc ff6b 	bl	800207c <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e12b      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051b8:	4b6a      	ldr	r3, [pc, #424]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1ed      	bne.n	80051a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051c6:	7ffb      	ldrb	r3, [r7, #31]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d105      	bne.n	80051d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051cc:	4b65      	ldr	r3, [pc, #404]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	4a64      	ldr	r2, [pc, #400]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80051d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d03c      	beq.n	800525e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01c      	beq.n	8005226 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051ec:	4b5d      	ldr	r3, [pc, #372]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80051ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051f2:	4a5c      	ldr	r2, [pc, #368]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fc:	f7fc ff3e 	bl	800207c <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005204:	f7fc ff3a 	bl	800207c <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e0fc      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005216:	4b53      	ldr	r3, [pc, #332]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0ef      	beq.n	8005204 <HAL_RCC_OscConfig+0x418>
 8005224:	e01b      	b.n	800525e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005226:	4b4f      	ldr	r3, [pc, #316]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800522c:	4a4d      	ldr	r2, [pc, #308]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005236:	f7fc ff21 	bl	800207c <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800523e:	f7fc ff1d 	bl	800207c <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e0df      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005250:	4b44      	ldr	r3, [pc, #272]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ef      	bne.n	800523e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80d3 	beq.w	800540e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005268:	4b3e      	ldr	r3, [pc, #248]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b0c      	cmp	r3, #12
 8005272:	f000 808d 	beq.w	8005390 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d15a      	bne.n	8005334 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	4b39      	ldr	r3, [pc, #228]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a38      	ldr	r2, [pc, #224]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005284:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528a:	f7fc fef7 	bl	800207c <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005292:	f7fc fef3 	bl	800207c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e0b5      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a4:	4b2f      	ldr	r3, [pc, #188]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f0      	bne.n	8005292 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	4b2d      	ldr	r3, [pc, #180]	; (800536c <HAL_RCC_OscConfig+0x580>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6a11      	ldr	r1, [r2, #32]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052c0:	3a01      	subs	r2, #1
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	4311      	orrs	r1, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80052ca:	0212      	lsls	r2, r2, #8
 80052cc:	4311      	orrs	r1, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052d2:	0852      	lsrs	r2, r2, #1
 80052d4:	3a01      	subs	r2, #1
 80052d6:	0552      	lsls	r2, r2, #21
 80052d8:	4311      	orrs	r1, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052de:	0852      	lsrs	r2, r2, #1
 80052e0:	3a01      	subs	r2, #1
 80052e2:	0652      	lsls	r2, r2, #25
 80052e4:	4311      	orrs	r1, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052ea:	06d2      	lsls	r2, r2, #27
 80052ec:	430a      	orrs	r2, r1
 80052ee:	491d      	ldr	r1, [pc, #116]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f4:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 80052fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005300:	4b18      	ldr	r3, [pc, #96]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4a17      	ldr	r2, [pc, #92]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800530a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fc feb6 	bl	800207c <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005314:	f7fc feb2 	bl	800207c <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e074      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005326:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x528>
 8005332:	e06c      	b.n	800540e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005334:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800533a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005340:	4b08      	ldr	r3, [pc, #32]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4a07      	ldr	r2, [pc, #28]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005346:	f023 0303 	bic.w	r3, r3, #3
 800534a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <HAL_RCC_OscConfig+0x578>)
 8005352:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fc fe8e 	bl	800207c <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005362:	e00e      	b.n	8005382 <HAL_RCC_OscConfig+0x596>
 8005364:	40021000 	.word	0x40021000
 8005368:	40007000 	.word	0x40007000
 800536c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005370:	f7fc fe84 	bl	800207c <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e046      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005382:	4b25      	ldr	r3, [pc, #148]	; (8005418 <HAL_RCC_OscConfig+0x62c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x584>
 800538e:	e03e      	b.n	800540e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e039      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800539c:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <HAL_RCC_OscConfig+0x62c>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f003 0203 	and.w	r2, r3, #3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d12c      	bne.n	800540a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	3b01      	subs	r3, #1
 80053bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053be:	429a      	cmp	r2, r3
 80053c0:	d123      	bne.n	800540a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d11b      	bne.n	800540a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053de:	429a      	cmp	r2, r3
 80053e0:	d113      	bne.n	800540a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	3b01      	subs	r3, #1
 80053f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d109      	bne.n	800540a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	3b01      	subs	r3, #1
 8005404:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005406:	429a      	cmp	r2, r3
 8005408:	d001      	beq.n	800540e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40021000 	.word	0x40021000

0800541c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e11e      	b.n	8005672 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005434:	4b91      	ldr	r3, [pc, #580]	; (800567c <HAL_RCC_ClockConfig+0x260>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d910      	bls.n	8005464 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005442:	4b8e      	ldr	r3, [pc, #568]	; (800567c <HAL_RCC_ClockConfig+0x260>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 020f 	bic.w	r2, r3, #15
 800544a:	498c      	ldr	r1, [pc, #560]	; (800567c <HAL_RCC_ClockConfig+0x260>)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	4313      	orrs	r3, r2
 8005450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b8a      	ldr	r3, [pc, #552]	; (800567c <HAL_RCC_ClockConfig+0x260>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e106      	b.n	8005672 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d073      	beq.n	8005558 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d129      	bne.n	80054cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005478:	4b81      	ldr	r3, [pc, #516]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0f4      	b.n	8005672 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005488:	f000 f99e 	bl	80057c8 <RCC_GetSysClockFreqFromPLLSource>
 800548c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	4a7c      	ldr	r2, [pc, #496]	; (8005684 <HAL_RCC_ClockConfig+0x268>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d93f      	bls.n	8005516 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005496:	4b7a      	ldr	r3, [pc, #488]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d033      	beq.n	8005516 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d12f      	bne.n	8005516 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054b6:	4b72      	ldr	r3, [pc, #456]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054be:	4a70      	ldr	r2, [pc, #448]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 80054c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e024      	b.n	8005516 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d107      	bne.n	80054e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054d4:	4b6a      	ldr	r3, [pc, #424]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0c6      	b.n	8005672 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054e4:	4b66      	ldr	r3, [pc, #408]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0be      	b.n	8005672 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80054f4:	f000 f8ce 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4a61      	ldr	r2, [pc, #388]	; (8005684 <HAL_RCC_ClockConfig+0x268>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d909      	bls.n	8005516 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005502:	4b5f      	ldr	r3, [pc, #380]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550a:	4a5d      	ldr	r2, [pc, #372]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 800550c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005510:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005516:	4b5a      	ldr	r3, [pc, #360]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f023 0203 	bic.w	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4957      	ldr	r1, [pc, #348]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005524:	4313      	orrs	r3, r2
 8005526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005528:	f7fc fda8 	bl	800207c <HAL_GetTick>
 800552c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552e:	e00a      	b.n	8005546 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005530:	f7fc fda4 	bl	800207c <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	f241 3288 	movw	r2, #5000	; 0x1388
 800553e:	4293      	cmp	r3, r2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e095      	b.n	8005672 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005546:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 020c 	and.w	r2, r3, #12
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	429a      	cmp	r2, r3
 8005556:	d1eb      	bne.n	8005530 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d023      	beq.n	80055ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005570:	4b43      	ldr	r3, [pc, #268]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a42      	ldr	r2, [pc, #264]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800557a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005588:	4b3d      	ldr	r3, [pc, #244]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005590:	4a3b      	ldr	r2, [pc, #236]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005596:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005598:	4b39      	ldr	r3, [pc, #228]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4936      	ldr	r1, [pc, #216]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]
 80055aa:	e008      	b.n	80055be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b80      	cmp	r3, #128	; 0x80
 80055b0:	d105      	bne.n	80055be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055b2:	4b33      	ldr	r3, [pc, #204]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	4a32      	ldr	r2, [pc, #200]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 80055b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055be:	4b2f      	ldr	r3, [pc, #188]	; (800567c <HAL_RCC_ClockConfig+0x260>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d21d      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055cc:	4b2b      	ldr	r3, [pc, #172]	; (800567c <HAL_RCC_ClockConfig+0x260>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f023 020f 	bic.w	r2, r3, #15
 80055d4:	4929      	ldr	r1, [pc, #164]	; (800567c <HAL_RCC_ClockConfig+0x260>)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	4313      	orrs	r3, r2
 80055da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055dc:	f7fc fd4e 	bl	800207c <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e4:	f7fc fd4a 	bl	800207c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e03b      	b.n	8005672 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fa:	4b20      	ldr	r3, [pc, #128]	; (800567c <HAL_RCC_ClockConfig+0x260>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d1ed      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005614:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4917      	ldr	r1, [pc, #92]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005622:	4313      	orrs	r3, r2
 8005624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005632:	4b13      	ldr	r3, [pc, #76]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	490f      	ldr	r1, [pc, #60]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005646:	f000 f825 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 800564a:	4601      	mov	r1, r0
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <HAL_RCC_ClockConfig+0x264>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	4a0c      	ldr	r2, [pc, #48]	; (8005688 <HAL_RCC_ClockConfig+0x26c>)
 8005658:	5cd3      	ldrb	r3, [r2, r3]
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	fa21 f303 	lsr.w	r3, r1, r3
 8005662:	4a0a      	ldr	r2, [pc, #40]	; (800568c <HAL_RCC_ClockConfig+0x270>)
 8005664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <HAL_RCC_ClockConfig+0x274>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7fc fcba 	bl	8001fe4 <HAL_InitTick>
 8005670:	4603      	mov	r3, r0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40022000 	.word	0x40022000
 8005680:	40021000 	.word	0x40021000
 8005684:	04c4b400 	.word	0x04c4b400
 8005688:	08008e10 	.word	0x08008e10
 800568c:	20000000 	.word	0x20000000
 8005690:	20000004 	.word	0x20000004

08005694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800569a:	4b2c      	ldr	r3, [pc, #176]	; (800574c <HAL_RCC_GetSysClockFreq+0xb8>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d102      	bne.n	80056ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056a6:	4b2a      	ldr	r3, [pc, #168]	; (8005750 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e047      	b.n	800573c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80056ac:	4b27      	ldr	r3, [pc, #156]	; (800574c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d102      	bne.n	80056be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056b8:	4b26      	ldr	r3, [pc, #152]	; (8005754 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e03e      	b.n	800573c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80056be:	4b23      	ldr	r3, [pc, #140]	; (800574c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d136      	bne.n	8005738 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056ca:	4b20      	ldr	r3, [pc, #128]	; (800574c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	3301      	adds	r3, #1
 80056e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d10c      	bne.n	8005702 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056e8:	4a1a      	ldr	r2, [pc, #104]	; (8005754 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	4a16      	ldr	r2, [pc, #88]	; (800574c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056f2:	68d2      	ldr	r2, [r2, #12]
 80056f4:	0a12      	lsrs	r2, r2, #8
 80056f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	617b      	str	r3, [r7, #20]
      break;
 8005700:	e00c      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005702:	4a13      	ldr	r2, [pc, #76]	; (8005750 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	4a10      	ldr	r2, [pc, #64]	; (800574c <HAL_RCC_GetSysClockFreq+0xb8>)
 800570c:	68d2      	ldr	r2, [r2, #12]
 800570e:	0a12      	lsrs	r2, r2, #8
 8005710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005714:	fb02 f303 	mul.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
      break;
 800571a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_GetSysClockFreq+0xb8>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	0e5b      	lsrs	r3, r3, #25
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	3301      	adds	r3, #1
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	e001      	b.n	800573c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800573c:	693b      	ldr	r3, [r7, #16]
}
 800573e:	4618      	mov	r0, r3
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000
 8005750:	00f42400 	.word	0x00f42400
 8005754:	007a1200 	.word	0x007a1200

08005758 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800575c:	4b03      	ldr	r3, [pc, #12]	; (800576c <HAL_RCC_GetHCLKFreq+0x14>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000000 	.word	0x20000000

08005770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005774:	f7ff fff0 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8005778:	4601      	mov	r1, r0
 800577a:	4b06      	ldr	r3, [pc, #24]	; (8005794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	0a1b      	lsrs	r3, r3, #8
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4a04      	ldr	r2, [pc, #16]	; (8005798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005786:	5cd3      	ldrb	r3, [r2, r3]
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005790:	4618      	mov	r0, r3
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40021000 	.word	0x40021000
 8005798:	08008e20 	.word	0x08008e20

0800579c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057a0:	f7ff ffda 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 80057a4:	4601      	mov	r1, r0
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	0adb      	lsrs	r3, r3, #11
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057b2:	5cd3      	ldrb	r3, [r2, r3]
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40021000 	.word	0x40021000
 80057c4:	08008e20 	.word	0x08008e20

080057c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ce:	4b1e      	ldr	r3, [pc, #120]	; (8005848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057d8:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	3301      	adds	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d10c      	bne.n	8005806 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057ec:	4a17      	ldr	r2, [pc, #92]	; (800584c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f4:	4a14      	ldr	r2, [pc, #80]	; (8005848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057f6:	68d2      	ldr	r2, [r2, #12]
 80057f8:	0a12      	lsrs	r2, r2, #8
 80057fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	617b      	str	r3, [r7, #20]
    break;
 8005804:	e00c      	b.n	8005820 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005806:	4a12      	ldr	r2, [pc, #72]	; (8005850 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	fbb2 f3f3 	udiv	r3, r2, r3
 800580e:	4a0e      	ldr	r2, [pc, #56]	; (8005848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005810:	68d2      	ldr	r2, [r2, #12]
 8005812:	0a12      	lsrs	r2, r2, #8
 8005814:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005818:	fb02 f303 	mul.w	r3, r2, r3
 800581c:	617b      	str	r3, [r7, #20]
    break;
 800581e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	0e5b      	lsrs	r3, r3, #25
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	3301      	adds	r3, #1
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800583a:	687b      	ldr	r3, [r7, #4]
}
 800583c:	4618      	mov	r0, r3
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	40021000 	.word	0x40021000
 800584c:	007a1200 	.word	0x007a1200
 8005850:	00f42400 	.word	0x00f42400

08005854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800585c:	2300      	movs	r3, #0
 800585e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005860:	2300      	movs	r3, #0
 8005862:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8098 	beq.w	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005872:	2300      	movs	r3, #0
 8005874:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005876:	4b43      	ldr	r3, [pc, #268]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10d      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005882:	4b40      	ldr	r3, [pc, #256]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	4a3f      	ldr	r2, [pc, #252]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588c:	6593      	str	r3, [r2, #88]	; 0x58
 800588e:	4b3d      	ldr	r3, [pc, #244]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	60bb      	str	r3, [r7, #8]
 8005898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800589a:	2301      	movs	r3, #1
 800589c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800589e:	4b3a      	ldr	r3, [pc, #232]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a39      	ldr	r2, [pc, #228]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058aa:	f7fc fbe7 	bl	800207c <HAL_GetTick>
 80058ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b0:	e009      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b2:	f7fc fbe3 	bl	800207c <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d902      	bls.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	74fb      	strb	r3, [r7, #19]
        break;
 80058c4:	e005      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058c6:	4b30      	ldr	r3, [pc, #192]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0ef      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80058d2:	7cfb      	ldrb	r3, [r7, #19]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d159      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058d8:	4b2a      	ldr	r3, [pc, #168]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01e      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d019      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058f4:	4b23      	ldr	r3, [pc, #140]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005900:	4b20      	ldr	r3, [pc, #128]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	4a1f      	ldr	r2, [pc, #124]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005910:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005916:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005920:	4a18      	ldr	r2, [pc, #96]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d016      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005932:	f7fc fba3 	bl	800207c <HAL_GetTick>
 8005936:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005938:	e00b      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593a:	f7fc fb9f 	bl	800207c <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f241 3288 	movw	r2, #5000	; 0x1388
 8005948:	4293      	cmp	r3, r2
 800594a:	d902      	bls.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	74fb      	strb	r3, [r7, #19]
            break;
 8005950:	e006      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005952:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ec      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	4903      	ldr	r1, [pc, #12]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800597c:	e008      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800597e:	7cfb      	ldrb	r3, [r7, #19]
 8005980:	74bb      	strb	r3, [r7, #18]
 8005982:	e005      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005984:	40021000 	.word	0x40021000
 8005988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598c:	7cfb      	ldrb	r3, [r7, #19]
 800598e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005990:	7c7b      	ldrb	r3, [r7, #17]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d105      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005996:	4ba6      	ldr	r3, [pc, #664]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599a:	4aa5      	ldr	r2, [pc, #660]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ae:	4ba0      	ldr	r3, [pc, #640]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f023 0203 	bic.w	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	499c      	ldr	r1, [pc, #624]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059d0:	4b97      	ldr	r3, [pc, #604]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f023 020c 	bic.w	r2, r3, #12
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	4994      	ldr	r1, [pc, #592]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059f2:	4b8f      	ldr	r3, [pc, #572]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	498b      	ldr	r1, [pc, #556]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a14:	4b86      	ldr	r3, [pc, #536]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	4983      	ldr	r1, [pc, #524]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a36:	4b7e      	ldr	r3, [pc, #504]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	497a      	ldr	r1, [pc, #488]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a58:	4b75      	ldr	r3, [pc, #468]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	4972      	ldr	r1, [pc, #456]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a7a:	4b6d      	ldr	r3, [pc, #436]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	4969      	ldr	r1, [pc, #420]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a9c:	4b64      	ldr	r3, [pc, #400]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	4961      	ldr	r1, [pc, #388]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005abe:	4b5c      	ldr	r3, [pc, #368]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	4958      	ldr	r1, [pc, #352]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d015      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ae0:	4b53      	ldr	r3, [pc, #332]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	4950      	ldr	r1, [pc, #320]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afe:	d105      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b00:	4b4b      	ldr	r3, [pc, #300]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4a4a      	ldr	r2, [pc, #296]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d015      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b18:	4b45      	ldr	r3, [pc, #276]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4942      	ldr	r1, [pc, #264]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b36:	d105      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b38:	4b3d      	ldr	r3, [pc, #244]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4a3c      	ldr	r2, [pc, #240]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b42:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b50:	4b37      	ldr	r3, [pc, #220]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	4934      	ldr	r1, [pc, #208]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b6e:	d105      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b70:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4a2e      	ldr	r2, [pc, #184]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d015      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b88:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	4926      	ldr	r1, [pc, #152]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba6:	d105      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba8:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	4a20      	ldr	r2, [pc, #128]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d015      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	4918      	ldr	r1, [pc, #96]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bde:	d105      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be0:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d015      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	490a      	ldr	r1, [pc, #40]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c16:	d105      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4a04      	ldr	r2, [pc, #16]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c24:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40021000 	.word	0x40021000

08005c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e049      	b.n	8005cda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fb ffec 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f000 fc34 	bl	80064e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d001      	beq.n	8005cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e021      	b.n	8005d40 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <HAL_TIM_Base_Start_IT+0x68>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b06      	cmp	r3, #6
 8005d24:	d00b      	beq.n	8005d3e <HAL_TIM_Base_Start_IT+0x5a>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d007      	beq.n	8005d3e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	00010007 	.word	0x00010007

08005d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e049      	b.n	8005df6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f841 	bl	8005dfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f000 fba6 	bl	80064e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x24>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e03c      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d109      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x3e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	bf14      	ite	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	2300      	moveq	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	e02f      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d109      	bne.n	8005e6c <HAL_TIM_PWM_Start+0x58>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e022      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d109      	bne.n	8005e86 <HAL_TIM_PWM_Start+0x72>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e015      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x8c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e008      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e06e      	b.n	8005f98 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xb6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec8:	e023      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xc6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	e01b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0xd6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee8:	e013      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0xe6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xf6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f08:	e003      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 ff02 	bl	8006d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <HAL_TIM_PWM_Start+0x18c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <HAL_TIM_PWM_Start+0x13e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <HAL_TIM_PWM_Start+0x190>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <HAL_TIM_PWM_Start+0x13e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <HAL_TIM_PWM_Start+0x194>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d009      	beq.n	8005f52 <HAL_TIM_PWM_Start+0x13e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1a      	ldr	r2, [pc, #104]	; (8005fac <HAL_TIM_PWM_Start+0x198>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <HAL_TIM_PWM_Start+0x13e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <HAL_TIM_PWM_Start+0x19c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_PWM_Start+0x142>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <HAL_TIM_PWM_Start+0x144>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_TIM_PWM_Start+0x1a0>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d00b      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x182>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f84:	d007      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800
 8005fb4:	00010007 	.word	0x00010007

08005fb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e097      	b.n	80060fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7fb fe49 	bl	8001c78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f000 fa67 	bl	80064e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	4313      	orrs	r3, r2
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006058:	f023 030c 	bic.w	r3, r3, #12
 800605c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	4313      	orrs	r3, r2
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	011a      	lsls	r2, r3, #4
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	031b      	lsls	r3, r3, #12
 8006088:	4313      	orrs	r3, r2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800609e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	4313      	orrs	r3, r2
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800611a:	2302      	movs	r3, #2
 800611c:	e0fd      	b.n	800631a <HAL_TIM_PWM_ConfigChannel+0x216>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b14      	cmp	r3, #20
 800612a:	f200 80f0 	bhi.w	800630e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	08006189 	.word	0x08006189
 8006138:	0800630f 	.word	0x0800630f
 800613c:	0800630f 	.word	0x0800630f
 8006140:	0800630f 	.word	0x0800630f
 8006144:	080061c9 	.word	0x080061c9
 8006148:	0800630f 	.word	0x0800630f
 800614c:	0800630f 	.word	0x0800630f
 8006150:	0800630f 	.word	0x0800630f
 8006154:	0800620b 	.word	0x0800620b
 8006158:	0800630f 	.word	0x0800630f
 800615c:	0800630f 	.word	0x0800630f
 8006160:	0800630f 	.word	0x0800630f
 8006164:	0800624b 	.word	0x0800624b
 8006168:	0800630f 	.word	0x0800630f
 800616c:	0800630f 	.word	0x0800630f
 8006170:	0800630f 	.word	0x0800630f
 8006174:	0800628d 	.word	0x0800628d
 8006178:	0800630f 	.word	0x0800630f
 800617c:	0800630f 	.word	0x0800630f
 8006180:	0800630f 	.word	0x0800630f
 8006184:	080062cd 	.word	0x080062cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fa36 	bl	8006600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0208 	orr.w	r2, r2, #8
 80061a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0204 	bic.w	r2, r2, #4
 80061b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6999      	ldr	r1, [r3, #24]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	619a      	str	r2, [r3, #24]
      break;
 80061c6:	e0a3      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 faa6 	bl	8006720 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6999      	ldr	r1, [r3, #24]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	021a      	lsls	r2, r3, #8
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	619a      	str	r2, [r3, #24]
      break;
 8006208:	e082      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fb0f 	bl	8006834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0208 	orr.w	r2, r2, #8
 8006224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0204 	bic.w	r2, r2, #4
 8006234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69d9      	ldr	r1, [r3, #28]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	61da      	str	r2, [r3, #28]
      break;
 8006248:	e062      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fb77 	bl	8006944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69d9      	ldr	r1, [r3, #28]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	021a      	lsls	r2, r3, #8
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	61da      	str	r2, [r3, #28]
      break;
 800628a:	e041      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fbe0 	bl	8006a58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0208 	orr.w	r2, r2, #8
 80062a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0204 	bic.w	r2, r2, #4
 80062b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062ca:	e021      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fc24 	bl	8006b20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	021a      	lsls	r2, r3, #8
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800630c:	e000      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800630e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop

08006324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_TIM_ConfigClockSource+0x18>
 8006338:	2302      	movs	r3, #2
 800633a:	e0c3      	b.n	80064c4 <HAL_TIM_ConfigClockSource+0x1a0>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800635a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800635e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006366:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b70      	cmp	r3, #112	; 0x70
 8006376:	d038      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0xc6>
 8006378:	2b70      	cmp	r3, #112	; 0x70
 800637a:	d815      	bhi.n	80063a8 <HAL_TIM_ConfigClockSource+0x84>
 800637c:	2b30      	cmp	r3, #48	; 0x30
 800637e:	f000 808e 	beq.w	800649e <HAL_TIM_ConfigClockSource+0x17a>
 8006382:	2b30      	cmp	r3, #48	; 0x30
 8006384:	d809      	bhi.n	800639a <HAL_TIM_ConfigClockSource+0x76>
 8006386:	2b10      	cmp	r3, #16
 8006388:	f000 8089 	beq.w	800649e <HAL_TIM_ConfigClockSource+0x17a>
 800638c:	2b20      	cmp	r3, #32
 800638e:	f000 8086 	beq.w	800649e <HAL_TIM_ConfigClockSource+0x17a>
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8083 	beq.w	800649e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006398:	e08b      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800639a:	2b50      	cmp	r3, #80	; 0x50
 800639c:	d04f      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x11a>
 800639e:	2b60      	cmp	r3, #96	; 0x60
 80063a0:	d05d      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x13a>
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	d06b      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80063a6:	e084      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80063a8:	4a48      	ldr	r2, [pc, #288]	; (80064cc <HAL_TIM_ConfigClockSource+0x1a8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d077      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x17a>
 80063ae:	4a47      	ldr	r2, [pc, #284]	; (80064cc <HAL_TIM_ConfigClockSource+0x1a8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d809      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0xa4>
 80063b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b8:	d02e      	beq.n	8006418 <HAL_TIM_ConfigClockSource+0xf4>
 80063ba:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063be:	d06e      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x17a>
 80063c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c4:	d074      	beq.n	80064b0 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80063c6:	e074      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80063c8:	4a41      	ldr	r2, [pc, #260]	; (80064d0 <HAL_TIM_ConfigClockSource+0x1ac>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d067      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x17a>
 80063ce:	4a40      	ldr	r2, [pc, #256]	; (80064d0 <HAL_TIM_ConfigClockSource+0x1ac>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d803      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0xb8>
 80063d4:	4a3f      	ldr	r2, [pc, #252]	; (80064d4 <HAL_TIM_ConfigClockSource+0x1b0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d061      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80063da:	e06a      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80063dc:	4a3e      	ldr	r2, [pc, #248]	; (80064d8 <HAL_TIM_ConfigClockSource+0x1b4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d05d      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x17a>
 80063e2:	4a3e      	ldr	r2, [pc, #248]	; (80064dc <HAL_TIM_ConfigClockSource+0x1b8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d05a      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80063e8:	e063      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6899      	ldr	r1, [r3, #8]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f000 fc73 	bl	8006ce4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800640c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	609a      	str	r2, [r3, #8]
      break;
 8006416:	e04c      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	6899      	ldr	r1, [r3, #8]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f000 fc5c 	bl	8006ce4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800643a:	609a      	str	r2, [r3, #8]
      break;
 800643c:	e039      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	f000 fbce 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2150      	movs	r1, #80	; 0x50
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fc27 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 800645c:	e029      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	461a      	mov	r2, r3
 800646c:	f000 fbed 	bl	8006c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2160      	movs	r1, #96	; 0x60
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fc17 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 800647c:	e019      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	461a      	mov	r2, r3
 800648c:	f000 fbae 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2140      	movs	r1, #64	; 0x40
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fc07 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 800649c:	e009      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f000 fbfe 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 80064ae:	e000      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80064b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	00100020 	.word	0x00100020
 80064d0:	00100040 	.word	0x00100040
 80064d4:	00100030 	.word	0x00100030
 80064d8:	00100060 	.word	0x00100060
 80064dc:	00100070 	.word	0x00100070

080064e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a3c      	ldr	r2, [pc, #240]	; (80065e4 <TIM_Base_SetConfig+0x104>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00f      	beq.n	8006518 <TIM_Base_SetConfig+0x38>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fe:	d00b      	beq.n	8006518 <TIM_Base_SetConfig+0x38>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a39      	ldr	r2, [pc, #228]	; (80065e8 <TIM_Base_SetConfig+0x108>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d007      	beq.n	8006518 <TIM_Base_SetConfig+0x38>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a38      	ldr	r2, [pc, #224]	; (80065ec <TIM_Base_SetConfig+0x10c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_Base_SetConfig+0x38>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a37      	ldr	r2, [pc, #220]	; (80065f0 <TIM_Base_SetConfig+0x110>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d108      	bne.n	800652a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2d      	ldr	r2, [pc, #180]	; (80065e4 <TIM_Base_SetConfig+0x104>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01b      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d017      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a2a      	ldr	r2, [pc, #168]	; (80065e8 <TIM_Base_SetConfig+0x108>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a29      	ldr	r2, [pc, #164]	; (80065ec <TIM_Base_SetConfig+0x10c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00f      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a28      	ldr	r2, [pc, #160]	; (80065f0 <TIM_Base_SetConfig+0x110>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00b      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a27      	ldr	r2, [pc, #156]	; (80065f4 <TIM_Base_SetConfig+0x114>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <TIM_Base_SetConfig+0x118>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a25      	ldr	r2, [pc, #148]	; (80065fc <TIM_Base_SetConfig+0x11c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d108      	bne.n	800657c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a10      	ldr	r2, [pc, #64]	; (80065e4 <TIM_Base_SetConfig+0x104>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00f      	beq.n	80065c8 <TIM_Base_SetConfig+0xe8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a11      	ldr	r2, [pc, #68]	; (80065f0 <TIM_Base_SetConfig+0x110>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00b      	beq.n	80065c8 <TIM_Base_SetConfig+0xe8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a10      	ldr	r2, [pc, #64]	; (80065f4 <TIM_Base_SetConfig+0x114>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d007      	beq.n	80065c8 <TIM_Base_SetConfig+0xe8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a0f      	ldr	r2, [pc, #60]	; (80065f8 <TIM_Base_SetConfig+0x118>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_Base_SetConfig+0xe8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a0e      	ldr	r2, [pc, #56]	; (80065fc <TIM_Base_SetConfig+0x11c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d103      	bne.n	80065d0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	615a      	str	r2, [r3, #20]
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40012c00 	.word	0x40012c00
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40013400 	.word	0x40013400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 0302 	bic.w	r3, r3, #2
 800664c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a2c      	ldr	r2, [pc, #176]	; (800670c <TIM_OC1_SetConfig+0x10c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00f      	beq.n	8006680 <TIM_OC1_SetConfig+0x80>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a2b      	ldr	r2, [pc, #172]	; (8006710 <TIM_OC1_SetConfig+0x110>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00b      	beq.n	8006680 <TIM_OC1_SetConfig+0x80>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a2a      	ldr	r2, [pc, #168]	; (8006714 <TIM_OC1_SetConfig+0x114>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d007      	beq.n	8006680 <TIM_OC1_SetConfig+0x80>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a29      	ldr	r2, [pc, #164]	; (8006718 <TIM_OC1_SetConfig+0x118>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_OC1_SetConfig+0x80>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a28      	ldr	r2, [pc, #160]	; (800671c <TIM_OC1_SetConfig+0x11c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10c      	bne.n	800669a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0308 	bic.w	r3, r3, #8
 8006686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f023 0304 	bic.w	r3, r3, #4
 8006698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1b      	ldr	r2, [pc, #108]	; (800670c <TIM_OC1_SetConfig+0x10c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00f      	beq.n	80066c2 <TIM_OC1_SetConfig+0xc2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1a      	ldr	r2, [pc, #104]	; (8006710 <TIM_OC1_SetConfig+0x110>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_OC1_SetConfig+0xc2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <TIM_OC1_SetConfig+0x114>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_OC1_SetConfig+0xc2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a18      	ldr	r2, [pc, #96]	; (8006718 <TIM_OC1_SetConfig+0x118>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC1_SetConfig+0xc2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a17      	ldr	r2, [pc, #92]	; (800671c <TIM_OC1_SetConfig+0x11c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d111      	bne.n	80066e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40014000 	.word	0x40014000
 8006718:	40014400 	.word	0x40014400
 800671c:	40014800 	.word	0x40014800

08006720 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f023 0210 	bic.w	r2, r3, #16
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0320 	bic.w	r3, r3, #32
 800676e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a28      	ldr	r2, [pc, #160]	; (8006820 <TIM_OC2_SetConfig+0x100>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC2_SetConfig+0x6c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a27      	ldr	r2, [pc, #156]	; (8006824 <TIM_OC2_SetConfig+0x104>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d10d      	bne.n	80067a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <TIM_OC2_SetConfig+0x100>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00f      	beq.n	80067d0 <TIM_OC2_SetConfig+0xb0>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a1c      	ldr	r2, [pc, #112]	; (8006824 <TIM_OC2_SetConfig+0x104>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <TIM_OC2_SetConfig+0xb0>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a1b      	ldr	r2, [pc, #108]	; (8006828 <TIM_OC2_SetConfig+0x108>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d007      	beq.n	80067d0 <TIM_OC2_SetConfig+0xb0>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a1a      	ldr	r2, [pc, #104]	; (800682c <TIM_OC2_SetConfig+0x10c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_OC2_SetConfig+0xb0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a19      	ldr	r2, [pc, #100]	; (8006830 <TIM_OC2_SetConfig+0x110>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d113      	bne.n	80067f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40013400 	.word	0x40013400
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400
 8006830:	40014800 	.word	0x40014800

08006834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a27      	ldr	r2, [pc, #156]	; (8006930 <TIM_OC3_SetConfig+0xfc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_OC3_SetConfig+0x6a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a26      	ldr	r2, [pc, #152]	; (8006934 <TIM_OC3_SetConfig+0x100>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d10d      	bne.n	80068ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <TIM_OC3_SetConfig+0xfc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00f      	beq.n	80068e2 <TIM_OC3_SetConfig+0xae>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <TIM_OC3_SetConfig+0x100>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00b      	beq.n	80068e2 <TIM_OC3_SetConfig+0xae>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a1a      	ldr	r2, [pc, #104]	; (8006938 <TIM_OC3_SetConfig+0x104>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d007      	beq.n	80068e2 <TIM_OC3_SetConfig+0xae>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a19      	ldr	r2, [pc, #100]	; (800693c <TIM_OC3_SetConfig+0x108>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <TIM_OC3_SetConfig+0xae>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a18      	ldr	r2, [pc, #96]	; (8006940 <TIM_OC3_SetConfig+0x10c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d113      	bne.n	800690a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	621a      	str	r2, [r3, #32]
}
 8006924:	bf00      	nop
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40013400 	.word	0x40013400
 8006938:	40014000 	.word	0x40014000
 800693c:	40014400 	.word	0x40014400
 8006940:	40014800 	.word	0x40014800

08006944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	031b      	lsls	r3, r3, #12
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a28      	ldr	r2, [pc, #160]	; (8006a44 <TIM_OC4_SetConfig+0x100>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_OC4_SetConfig+0x6c>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a27      	ldr	r2, [pc, #156]	; (8006a48 <TIM_OC4_SetConfig+0x104>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d10d      	bne.n	80069cc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	031b      	lsls	r3, r3, #12
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <TIM_OC4_SetConfig+0x100>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00f      	beq.n	80069f4 <TIM_OC4_SetConfig+0xb0>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <TIM_OC4_SetConfig+0x104>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00b      	beq.n	80069f4 <TIM_OC4_SetConfig+0xb0>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <TIM_OC4_SetConfig+0x108>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d007      	beq.n	80069f4 <TIM_OC4_SetConfig+0xb0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a1a      	ldr	r2, [pc, #104]	; (8006a50 <TIM_OC4_SetConfig+0x10c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_OC4_SetConfig+0xb0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a19      	ldr	r2, [pc, #100]	; (8006a54 <TIM_OC4_SetConfig+0x110>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d113      	bne.n	8006a1c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a02:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	019b      	lsls	r3, r3, #6
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	019b      	lsls	r3, r3, #6
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40013400 	.word	0x40013400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40014400 	.word	0x40014400
 8006a54:	40014800 	.word	0x40014800

08006a58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	041b      	lsls	r3, r3, #16
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a17      	ldr	r2, [pc, #92]	; (8006b0c <TIM_OC5_SetConfig+0xb4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00f      	beq.n	8006ad2 <TIM_OC5_SetConfig+0x7a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <TIM_OC5_SetConfig+0xb8>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00b      	beq.n	8006ad2 <TIM_OC5_SetConfig+0x7a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <TIM_OC5_SetConfig+0xbc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d007      	beq.n	8006ad2 <TIM_OC5_SetConfig+0x7a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a14      	ldr	r2, [pc, #80]	; (8006b18 <TIM_OC5_SetConfig+0xc0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_OC5_SetConfig+0x7a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <TIM_OC5_SetConfig+0xc4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d109      	bne.n	8006ae6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	621a      	str	r2, [r3, #32]
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40014400 	.word	0x40014400
 8006b1c:	40014800 	.word	0x40014800

08006b20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	051b      	lsls	r3, r3, #20
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <TIM_OC6_SetConfig+0xb8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00f      	beq.n	8006b9c <TIM_OC6_SetConfig+0x7c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <TIM_OC6_SetConfig+0xbc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <TIM_OC6_SetConfig+0x7c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a16      	ldr	r2, [pc, #88]	; (8006be0 <TIM_OC6_SetConfig+0xc0>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_OC6_SetConfig+0x7c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a15      	ldr	r2, [pc, #84]	; (8006be4 <TIM_OC6_SetConfig+0xc4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_OC6_SetConfig+0x7c>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a14      	ldr	r2, [pc, #80]	; (8006be8 <TIM_OC6_SetConfig+0xc8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d109      	bne.n	8006bb0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	029b      	lsls	r3, r3, #10
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40012c00 	.word	0x40012c00
 8006bdc:	40013400 	.word	0x40013400
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 030a 	bic.w	r3, r3, #10
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0210 	bic.w	r2, r3, #16
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	031b      	lsls	r3, r3, #12
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f043 0307 	orr.w	r3, r3, #7
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	021a      	lsls	r2, r3, #8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	609a      	str	r2, [r3, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	2201      	movs	r2, #1
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1a      	ldr	r2, [r3, #32]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	43db      	mvns	r3, r3
 8006d46:	401a      	ands	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1a      	ldr	r2, [r3, #32]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	621a      	str	r2, [r3, #32]
}
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <HAL_TIMEx_PWMN_Start+0x24>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	bf14      	ite	ne
 8006d8c:	2301      	movne	r3, #1
 8006d8e:	2300      	moveq	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	e022      	b.n	8006dda <HAL_TIMEx_PWMN_Start+0x6a>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d109      	bne.n	8006dae <HAL_TIMEx_PWMN_Start+0x3e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	bf14      	ite	ne
 8006da6:	2301      	movne	r3, #1
 8006da8:	2300      	moveq	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	e015      	b.n	8006dda <HAL_TIMEx_PWMN_Start+0x6a>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d109      	bne.n	8006dc8 <HAL_TIMEx_PWMN_Start+0x58>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	bf14      	ite	ne
 8006dc0:	2301      	movne	r3, #1
 8006dc2:	2300      	moveq	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	e008      	b.n	8006dda <HAL_TIMEx_PWMN_Start+0x6a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	bf14      	ite	ne
 8006dd4:	2301      	movne	r3, #1
 8006dd6:	2300      	moveq	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e040      	b.n	8006e64 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <HAL_TIMEx_PWMN_Start+0x82>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df0:	e013      	b.n	8006e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d104      	bne.n	8006e02 <HAL_TIMEx_PWMN_Start+0x92>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e00:	e00b      	b.n	8006e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d104      	bne.n	8006e12 <HAL_TIMEx_PWMN_Start+0xa2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e10:	e003      	b.n	8006e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2204      	movs	r2, #4
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f946 	bl	80070b4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <HAL_TIMEx_PWMN_Start+0xfc>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b06      	cmp	r3, #6
 8006e48:	d00b      	beq.n	8006e62 <HAL_TIMEx_PWMN_Start+0xf2>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e50:	d007      	beq.n	8006e62 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	00010007 	.word	0x00010007

08006e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e065      	b.n	8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a2c      	ldr	r2, [pc, #176]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d004      	beq.n	8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a2b      	ldr	r2, [pc, #172]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d108      	bne.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ec2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d018      	beq.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efe:	d013      	beq.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00e      	beq.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d009      	beq.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a12      	ldr	r2, [pc, #72]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d10c      	bne.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40013400 	.word	0x40013400
 8006f68:	40000400 	.word	0x40000400
 8006f6c:	40000800 	.word	0x40000800
 8006f70:	40014000 	.word	0x40014000

08006f74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e087      	b.n	80070a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	041b      	lsls	r3, r3, #16
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a27      	ldr	r2, [pc, #156]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a25      	ldr	r2, [pc, #148]	; (80070b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d106      	bne.n	800702c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1e      	ldr	r2, [pc, #120]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1d      	ldr	r2, [pc, #116]	; (80070b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d126      	bne.n	800708e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	051b      	lsls	r3, r3, #20
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a0e      	ldr	r2, [pc, #56]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a0d      	ldr	r2, [pc, #52]	; (80070b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d106      	bne.n	800708e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40013400 	.word	0x40013400

080070b4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	2204      	movs	r2, #4
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	43db      	mvns	r3, r3
 80070d6:	401a      	ands	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1a      	ldr	r2, [r3, #32]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e042      	b.n	8007196 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fa fed0 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2224      	movs	r2, #36	; 0x24
 800712c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0201 	bic.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f9a9 	bl	8007498 <UART_SetConfig>
 8007146:	4603      	mov	r3, r0
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e022      	b.n	8007196 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fb57 	bl	800880c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800716c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800717c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0201 	orr.w	r2, r2, #1
 800718c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 fbde 	bl	8008950 <UART_CheckIdleState>
 8007194:	4603      	mov	r3, r0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d118      	bne.n	8007200 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d013      	beq.n	8007200 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d009      	beq.n	8007200 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 812e 	beq.w	8007452 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
      }
      return;
 80071fe:	e128      	b.n	8007452 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80d1 	beq.w	80073aa <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4b96      	ldr	r3, [pc, #600]	; (8007464 <HAL_UART_IRQHandler+0x2c4>)
 800720c:	4013      	ands	r3, r2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d105      	bne.n	800721e <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 80c6 	beq.w	80073aa <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d010      	beq.n	800724a <HAL_UART_IRQHandler+0xaa>
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2201      	movs	r2, #1
 8007238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007240:	f043 0201 	orr.w	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d010      	beq.n	8007276 <HAL_UART_IRQHandler+0xd6>
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2202      	movs	r2, #2
 8007264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726c:	f043 0204 	orr.w	r2, r3, #4
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d010      	beq.n	80072a2 <HAL_UART_IRQHandler+0x102>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2204      	movs	r2, #4
 8007290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007298:	f043 0202 	orr.w	r2, r3, #2
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d015      	beq.n	80072d8 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4b6a      	ldr	r3, [pc, #424]	; (8007464 <HAL_UART_IRQHandler+0x2c4>)
 80072ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2208      	movs	r2, #8
 80072c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ce:	f043 0208 	orr.w	r2, r3, #8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 80b9 	beq.w	8007456 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d011      	beq.n	8007312 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007318:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d004      	beq.n	8007332 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800732e:	2b00      	cmp	r3, #0
 8007330:	d031      	beq.n	8007396 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fb9e 	bl	8008a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d123      	bne.n	800738e <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007354:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800735a:	2b00      	cmp	r3, #0
 800735c:	d013      	beq.n	8007386 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007362:	4a41      	ldr	r2, [pc, #260]	; (8007468 <HAL_UART_IRQHandler+0x2c8>)
 8007364:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800736a:	4618      	mov	r0, r3
 800736c:	f7fc fea3 	bl	80040b6 <HAL_DMA_Abort_IT>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d017      	beq.n	80073a6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007380:	4610      	mov	r0, r2
 8007382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007384:	e00f      	b.n	80073a6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f87a 	bl	8007480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	e00b      	b.n	80073a6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f876 	bl	8007480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	e007      	b.n	80073a6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f872 	bl	8007480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80073a4:	e057      	b.n	8007456 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a6:	bf00      	nop
    return;
 80073a8:	e055      	b.n	8007456 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00d      	beq.n	80073d0 <HAL_UART_IRQHandler+0x230>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80073c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 fba6 	bl	8008b1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073ce:	e045      	b.n	800745c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d012      	beq.n	8007400 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d031      	beq.n	800745a <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
    }
    return;
 80073fe:	e02c      	b.n	800745a <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <HAL_UART_IRQHandler+0x27c>
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 fb66 	bl	8008ae6 <UART_EndTransmit_IT>
    return;
 800741a:	e01f      	b.n	800745c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <HAL_UART_IRQHandler+0x298>
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f001 fb86 	bl	8008b42 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007436:	e011      	b.n	800745c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00c      	beq.n	800745c <HAL_UART_IRQHandler+0x2bc>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	da09      	bge.n	800745c <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 fb70 	bl	8008b2e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800744e:	bf00      	nop
 8007450:	e004      	b.n	800745c <HAL_UART_IRQHandler+0x2bc>
      return;
 8007452:	bf00      	nop
 8007454:	e002      	b.n	800745c <HAL_UART_IRQHandler+0x2bc>
    return;
 8007456:	bf00      	nop
 8007458:	e000      	b.n	800745c <HAL_UART_IRQHandler+0x2bc>
    return;
 800745a:	bf00      	nop
  }
}
 800745c:	3720      	adds	r7, #32
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	10000001 	.word	0x10000001
 8007468:	08008abb 	.word	0x08008abb

0800746c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	0000      	movs	r0, r0
	...

08007498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007498:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800749c:	b08a      	sub	sp, #40	; 0x28
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074cc:	4313      	orrs	r3, r2
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4ba4      	ldr	r3, [pc, #656]	; (8007768 <UART_SetConfig+0x2d0>)
 80074d8:	4013      	ands	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074e0:	430b      	orrs	r3, r1
 80074e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a99      	ldr	r2, [pc, #612]	; (800776c <UART_SetConfig+0x2d4>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007510:	4313      	orrs	r3, r2
 8007512:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800751e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6812      	ldr	r2, [r2, #0]
 8007526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007528:	430b      	orrs	r3, r1
 800752a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	f023 010f 	bic.w	r1, r3, #15
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a8a      	ldr	r2, [pc, #552]	; (8007770 <UART_SetConfig+0x2d8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d126      	bne.n	800759a <UART_SetConfig+0x102>
 800754c:	4b89      	ldr	r3, [pc, #548]	; (8007774 <UART_SetConfig+0x2dc>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	2b03      	cmp	r3, #3
 8007558:	d81a      	bhi.n	8007590 <UART_SetConfig+0xf8>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <UART_SetConfig+0xc8>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	08007571 	.word	0x08007571
 8007564:	08007581 	.word	0x08007581
 8007568:	08007579 	.word	0x08007579
 800756c:	08007589 	.word	0x08007589
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007576:	e0d6      	b.n	8007726 <UART_SetConfig+0x28e>
 8007578:	2302      	movs	r3, #2
 800757a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757e:	e0d2      	b.n	8007726 <UART_SetConfig+0x28e>
 8007580:	2304      	movs	r3, #4
 8007582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007586:	e0ce      	b.n	8007726 <UART_SetConfig+0x28e>
 8007588:	2308      	movs	r3, #8
 800758a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800758e:	e0ca      	b.n	8007726 <UART_SetConfig+0x28e>
 8007590:	2310      	movs	r3, #16
 8007592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007596:	bf00      	nop
 8007598:	e0c5      	b.n	8007726 <UART_SetConfig+0x28e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a76      	ldr	r2, [pc, #472]	; (8007778 <UART_SetConfig+0x2e0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d138      	bne.n	8007616 <UART_SetConfig+0x17e>
 80075a4:	4b73      	ldr	r3, [pc, #460]	; (8007774 <UART_SetConfig+0x2dc>)
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075aa:	f003 030c 	and.w	r3, r3, #12
 80075ae:	2b0c      	cmp	r3, #12
 80075b0:	d82c      	bhi.n	800760c <UART_SetConfig+0x174>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <UART_SetConfig+0x120>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	080075ed 	.word	0x080075ed
 80075bc:	0800760d 	.word	0x0800760d
 80075c0:	0800760d 	.word	0x0800760d
 80075c4:	0800760d 	.word	0x0800760d
 80075c8:	080075fd 	.word	0x080075fd
 80075cc:	0800760d 	.word	0x0800760d
 80075d0:	0800760d 	.word	0x0800760d
 80075d4:	0800760d 	.word	0x0800760d
 80075d8:	080075f5 	.word	0x080075f5
 80075dc:	0800760d 	.word	0x0800760d
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	0800760d 	.word	0x0800760d
 80075e8:	08007605 	.word	0x08007605
 80075ec:	2300      	movs	r3, #0
 80075ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075f2:	e098      	b.n	8007726 <UART_SetConfig+0x28e>
 80075f4:	2302      	movs	r3, #2
 80075f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075fa:	e094      	b.n	8007726 <UART_SetConfig+0x28e>
 80075fc:	2304      	movs	r3, #4
 80075fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007602:	e090      	b.n	8007726 <UART_SetConfig+0x28e>
 8007604:	2308      	movs	r3, #8
 8007606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800760a:	e08c      	b.n	8007726 <UART_SetConfig+0x28e>
 800760c:	2310      	movs	r3, #16
 800760e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007612:	bf00      	nop
 8007614:	e087      	b.n	8007726 <UART_SetConfig+0x28e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a58      	ldr	r2, [pc, #352]	; (800777c <UART_SetConfig+0x2e4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d125      	bne.n	800766c <UART_SetConfig+0x1d4>
 8007620:	4b54      	ldr	r3, [pc, #336]	; (8007774 <UART_SetConfig+0x2dc>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007626:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800762a:	2b10      	cmp	r3, #16
 800762c:	d011      	beq.n	8007652 <UART_SetConfig+0x1ba>
 800762e:	2b10      	cmp	r3, #16
 8007630:	d802      	bhi.n	8007638 <UART_SetConfig+0x1a0>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <UART_SetConfig+0x1aa>
 8007636:	e014      	b.n	8007662 <UART_SetConfig+0x1ca>
 8007638:	2b20      	cmp	r3, #32
 800763a:	d006      	beq.n	800764a <UART_SetConfig+0x1b2>
 800763c:	2b30      	cmp	r3, #48	; 0x30
 800763e:	d00c      	beq.n	800765a <UART_SetConfig+0x1c2>
 8007640:	e00f      	b.n	8007662 <UART_SetConfig+0x1ca>
 8007642:	2300      	movs	r3, #0
 8007644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007648:	e06d      	b.n	8007726 <UART_SetConfig+0x28e>
 800764a:	2302      	movs	r3, #2
 800764c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007650:	e069      	b.n	8007726 <UART_SetConfig+0x28e>
 8007652:	2304      	movs	r3, #4
 8007654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007658:	e065      	b.n	8007726 <UART_SetConfig+0x28e>
 800765a:	2308      	movs	r3, #8
 800765c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007660:	e061      	b.n	8007726 <UART_SetConfig+0x28e>
 8007662:	2310      	movs	r3, #16
 8007664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007668:	bf00      	nop
 800766a:	e05c      	b.n	8007726 <UART_SetConfig+0x28e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a43      	ldr	r2, [pc, #268]	; (8007780 <UART_SetConfig+0x2e8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d125      	bne.n	80076c2 <UART_SetConfig+0x22a>
 8007676:	4b3f      	ldr	r3, [pc, #252]	; (8007774 <UART_SetConfig+0x2dc>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d011      	beq.n	80076a8 <UART_SetConfig+0x210>
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d802      	bhi.n	800768e <UART_SetConfig+0x1f6>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <UART_SetConfig+0x200>
 800768c:	e014      	b.n	80076b8 <UART_SetConfig+0x220>
 800768e:	2b80      	cmp	r3, #128	; 0x80
 8007690:	d006      	beq.n	80076a0 <UART_SetConfig+0x208>
 8007692:	2bc0      	cmp	r3, #192	; 0xc0
 8007694:	d00c      	beq.n	80076b0 <UART_SetConfig+0x218>
 8007696:	e00f      	b.n	80076b8 <UART_SetConfig+0x220>
 8007698:	2300      	movs	r3, #0
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800769e:	e042      	b.n	8007726 <UART_SetConfig+0x28e>
 80076a0:	2302      	movs	r3, #2
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a6:	e03e      	b.n	8007726 <UART_SetConfig+0x28e>
 80076a8:	2304      	movs	r3, #4
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ae:	e03a      	b.n	8007726 <UART_SetConfig+0x28e>
 80076b0:	2308      	movs	r3, #8
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b6:	e036      	b.n	8007726 <UART_SetConfig+0x28e>
 80076b8:	2310      	movs	r3, #16
 80076ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076be:	bf00      	nop
 80076c0:	e031      	b.n	8007726 <UART_SetConfig+0x28e>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a29      	ldr	r2, [pc, #164]	; (800776c <UART_SetConfig+0x2d4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d129      	bne.n	8007720 <UART_SetConfig+0x288>
 80076cc:	4b29      	ldr	r3, [pc, #164]	; (8007774 <UART_SetConfig+0x2dc>)
 80076ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076da:	d014      	beq.n	8007706 <UART_SetConfig+0x26e>
 80076dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e0:	d802      	bhi.n	80076e8 <UART_SetConfig+0x250>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <UART_SetConfig+0x25e>
 80076e6:	e016      	b.n	8007716 <UART_SetConfig+0x27e>
 80076e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ec:	d007      	beq.n	80076fe <UART_SetConfig+0x266>
 80076ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076f2:	d00c      	beq.n	800770e <UART_SetConfig+0x276>
 80076f4:	e00f      	b.n	8007716 <UART_SetConfig+0x27e>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fc:	e013      	b.n	8007726 <UART_SetConfig+0x28e>
 80076fe:	2302      	movs	r3, #2
 8007700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007704:	e00f      	b.n	8007726 <UART_SetConfig+0x28e>
 8007706:	2304      	movs	r3, #4
 8007708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770c:	e00b      	b.n	8007726 <UART_SetConfig+0x28e>
 800770e:	2308      	movs	r3, #8
 8007710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007714:	e007      	b.n	8007726 <UART_SetConfig+0x28e>
 8007716:	2310      	movs	r3, #16
 8007718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771c:	bf00      	nop
 800771e:	e002      	b.n	8007726 <UART_SetConfig+0x28e>
 8007720:	2310      	movs	r3, #16
 8007722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a10      	ldr	r2, [pc, #64]	; (800776c <UART_SetConfig+0x2d4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	f040 842e 	bne.w	8007f8e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007736:	2b08      	cmp	r3, #8
 8007738:	f200 8169 	bhi.w	8007a0e <UART_SetConfig+0x576>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <UART_SetConfig+0x2ac>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007785 	.word	0x08007785
 8007748:	08007a0f 	.word	0x08007a0f
 800774c:	08007827 	.word	0x08007827
 8007750:	08007a0f 	.word	0x08007a0f
 8007754:	080078bf 	.word	0x080078bf
 8007758:	08007a0f 	.word	0x08007a0f
 800775c:	08007a0f 	.word	0x08007a0f
 8007760:	08007a0f 	.word	0x08007a0f
 8007764:	08007961 	.word	0x08007961
 8007768:	cfff69f3 	.word	0xcfff69f3
 800776c:	40008000 	.word	0x40008000
 8007770:	40013800 	.word	0x40013800
 8007774:	40021000 	.word	0x40021000
 8007778:	40004400 	.word	0x40004400
 800777c:	40004800 	.word	0x40004800
 8007780:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007784:	f7fd fff4 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8007788:	4602      	mov	r2, r0
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d044      	beq.n	800781c <UART_SetConfig+0x384>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b01      	cmp	r3, #1
 8007798:	d03e      	beq.n	8007818 <UART_SetConfig+0x380>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d038      	beq.n	8007814 <UART_SetConfig+0x37c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d032      	beq.n	8007810 <UART_SetConfig+0x378>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d02c      	beq.n	800780c <UART_SetConfig+0x374>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	2b05      	cmp	r3, #5
 80077b8:	d026      	beq.n	8007808 <UART_SetConfig+0x370>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	2b06      	cmp	r3, #6
 80077c0:	d020      	beq.n	8007804 <UART_SetConfig+0x36c>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	2b07      	cmp	r3, #7
 80077c8:	d01a      	beq.n	8007800 <UART_SetConfig+0x368>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d014      	beq.n	80077fc <UART_SetConfig+0x364>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d00e      	beq.n	80077f8 <UART_SetConfig+0x360>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b0a      	cmp	r3, #10
 80077e0:	d008      	beq.n	80077f4 <UART_SetConfig+0x35c>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	2b0b      	cmp	r3, #11
 80077e8:	d102      	bne.n	80077f0 <UART_SetConfig+0x358>
 80077ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077ee:	e016      	b.n	800781e <UART_SetConfig+0x386>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e014      	b.n	800781e <UART_SetConfig+0x386>
 80077f4:	2380      	movs	r3, #128	; 0x80
 80077f6:	e012      	b.n	800781e <UART_SetConfig+0x386>
 80077f8:	2340      	movs	r3, #64	; 0x40
 80077fa:	e010      	b.n	800781e <UART_SetConfig+0x386>
 80077fc:	2320      	movs	r3, #32
 80077fe:	e00e      	b.n	800781e <UART_SetConfig+0x386>
 8007800:	2310      	movs	r3, #16
 8007802:	e00c      	b.n	800781e <UART_SetConfig+0x386>
 8007804:	230c      	movs	r3, #12
 8007806:	e00a      	b.n	800781e <UART_SetConfig+0x386>
 8007808:	230a      	movs	r3, #10
 800780a:	e008      	b.n	800781e <UART_SetConfig+0x386>
 800780c:	2308      	movs	r3, #8
 800780e:	e006      	b.n	800781e <UART_SetConfig+0x386>
 8007810:	2306      	movs	r3, #6
 8007812:	e004      	b.n	800781e <UART_SetConfig+0x386>
 8007814:	2304      	movs	r3, #4
 8007816:	e002      	b.n	800781e <UART_SetConfig+0x386>
 8007818:	2302      	movs	r3, #2
 800781a:	e000      	b.n	800781e <UART_SetConfig+0x386>
 800781c:	2301      	movs	r3, #1
 800781e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007822:	617b      	str	r3, [r7, #20]
        break;
 8007824:	e0f6      	b.n	8007a14 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d044      	beq.n	80078b8 <UART_SetConfig+0x420>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	2b01      	cmp	r3, #1
 8007834:	d03e      	beq.n	80078b4 <UART_SetConfig+0x41c>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	2b02      	cmp	r3, #2
 800783c:	d038      	beq.n	80078b0 <UART_SetConfig+0x418>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	2b03      	cmp	r3, #3
 8007844:	d032      	beq.n	80078ac <UART_SetConfig+0x414>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	2b04      	cmp	r3, #4
 800784c:	d02c      	beq.n	80078a8 <UART_SetConfig+0x410>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	2b05      	cmp	r3, #5
 8007854:	d026      	beq.n	80078a4 <UART_SetConfig+0x40c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	2b06      	cmp	r3, #6
 800785c:	d020      	beq.n	80078a0 <UART_SetConfig+0x408>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	2b07      	cmp	r3, #7
 8007864:	d01a      	beq.n	800789c <UART_SetConfig+0x404>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	2b08      	cmp	r3, #8
 800786c:	d014      	beq.n	8007898 <UART_SetConfig+0x400>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b09      	cmp	r3, #9
 8007874:	d00e      	beq.n	8007894 <UART_SetConfig+0x3fc>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	2b0a      	cmp	r3, #10
 800787c:	d008      	beq.n	8007890 <UART_SetConfig+0x3f8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	2b0b      	cmp	r3, #11
 8007884:	d102      	bne.n	800788c <UART_SetConfig+0x3f4>
 8007886:	f24f 4324 	movw	r3, #62500	; 0xf424
 800788a:	e016      	b.n	80078ba <UART_SetConfig+0x422>
 800788c:	4ba1      	ldr	r3, [pc, #644]	; (8007b14 <UART_SetConfig+0x67c>)
 800788e:	e014      	b.n	80078ba <UART_SetConfig+0x422>
 8007890:	4ba1      	ldr	r3, [pc, #644]	; (8007b18 <UART_SetConfig+0x680>)
 8007892:	e012      	b.n	80078ba <UART_SetConfig+0x422>
 8007894:	4ba1      	ldr	r3, [pc, #644]	; (8007b1c <UART_SetConfig+0x684>)
 8007896:	e010      	b.n	80078ba <UART_SetConfig+0x422>
 8007898:	4ba1      	ldr	r3, [pc, #644]	; (8007b20 <UART_SetConfig+0x688>)
 800789a:	e00e      	b.n	80078ba <UART_SetConfig+0x422>
 800789c:	4ba1      	ldr	r3, [pc, #644]	; (8007b24 <UART_SetConfig+0x68c>)
 800789e:	e00c      	b.n	80078ba <UART_SetConfig+0x422>
 80078a0:	4ba1      	ldr	r3, [pc, #644]	; (8007b28 <UART_SetConfig+0x690>)
 80078a2:	e00a      	b.n	80078ba <UART_SetConfig+0x422>
 80078a4:	4ba1      	ldr	r3, [pc, #644]	; (8007b2c <UART_SetConfig+0x694>)
 80078a6:	e008      	b.n	80078ba <UART_SetConfig+0x422>
 80078a8:	4ba1      	ldr	r3, [pc, #644]	; (8007b30 <UART_SetConfig+0x698>)
 80078aa:	e006      	b.n	80078ba <UART_SetConfig+0x422>
 80078ac:	4ba1      	ldr	r3, [pc, #644]	; (8007b34 <UART_SetConfig+0x69c>)
 80078ae:	e004      	b.n	80078ba <UART_SetConfig+0x422>
 80078b0:	4ba1      	ldr	r3, [pc, #644]	; (8007b38 <UART_SetConfig+0x6a0>)
 80078b2:	e002      	b.n	80078ba <UART_SetConfig+0x422>
 80078b4:	4ba1      	ldr	r3, [pc, #644]	; (8007b3c <UART_SetConfig+0x6a4>)
 80078b6:	e000      	b.n	80078ba <UART_SetConfig+0x422>
 80078b8:	4b96      	ldr	r3, [pc, #600]	; (8007b14 <UART_SetConfig+0x67c>)
 80078ba:	617b      	str	r3, [r7, #20]
        break;
 80078bc:	e0aa      	b.n	8007a14 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078be:	f7fd fee9 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 80078c2:	4602      	mov	r2, r0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d044      	beq.n	8007956 <UART_SetConfig+0x4be>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d03e      	beq.n	8007952 <UART_SetConfig+0x4ba>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d038      	beq.n	800794e <UART_SetConfig+0x4b6>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d032      	beq.n	800794a <UART_SetConfig+0x4b2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d02c      	beq.n	8007946 <UART_SetConfig+0x4ae>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b05      	cmp	r3, #5
 80078f2:	d026      	beq.n	8007942 <UART_SetConfig+0x4aa>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	2b06      	cmp	r3, #6
 80078fa:	d020      	beq.n	800793e <UART_SetConfig+0x4a6>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	2b07      	cmp	r3, #7
 8007902:	d01a      	beq.n	800793a <UART_SetConfig+0x4a2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b08      	cmp	r3, #8
 800790a:	d014      	beq.n	8007936 <UART_SetConfig+0x49e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	2b09      	cmp	r3, #9
 8007912:	d00e      	beq.n	8007932 <UART_SetConfig+0x49a>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b0a      	cmp	r3, #10
 800791a:	d008      	beq.n	800792e <UART_SetConfig+0x496>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	2b0b      	cmp	r3, #11
 8007922:	d102      	bne.n	800792a <UART_SetConfig+0x492>
 8007924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007928:	e016      	b.n	8007958 <UART_SetConfig+0x4c0>
 800792a:	2301      	movs	r3, #1
 800792c:	e014      	b.n	8007958 <UART_SetConfig+0x4c0>
 800792e:	2380      	movs	r3, #128	; 0x80
 8007930:	e012      	b.n	8007958 <UART_SetConfig+0x4c0>
 8007932:	2340      	movs	r3, #64	; 0x40
 8007934:	e010      	b.n	8007958 <UART_SetConfig+0x4c0>
 8007936:	2320      	movs	r3, #32
 8007938:	e00e      	b.n	8007958 <UART_SetConfig+0x4c0>
 800793a:	2310      	movs	r3, #16
 800793c:	e00c      	b.n	8007958 <UART_SetConfig+0x4c0>
 800793e:	230c      	movs	r3, #12
 8007940:	e00a      	b.n	8007958 <UART_SetConfig+0x4c0>
 8007942:	230a      	movs	r3, #10
 8007944:	e008      	b.n	8007958 <UART_SetConfig+0x4c0>
 8007946:	2308      	movs	r3, #8
 8007948:	e006      	b.n	8007958 <UART_SetConfig+0x4c0>
 800794a:	2306      	movs	r3, #6
 800794c:	e004      	b.n	8007958 <UART_SetConfig+0x4c0>
 800794e:	2304      	movs	r3, #4
 8007950:	e002      	b.n	8007958 <UART_SetConfig+0x4c0>
 8007952:	2302      	movs	r3, #2
 8007954:	e000      	b.n	8007958 <UART_SetConfig+0x4c0>
 8007956:	2301      	movs	r3, #1
 8007958:	fbb2 f3f3 	udiv	r3, r2, r3
 800795c:	617b      	str	r3, [r7, #20]
        break;
 800795e:	e059      	b.n	8007a14 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	d04e      	beq.n	8007a06 <UART_SetConfig+0x56e>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	2b01      	cmp	r3, #1
 800796e:	d047      	beq.n	8007a00 <UART_SetConfig+0x568>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2b02      	cmp	r3, #2
 8007976:	d040      	beq.n	80079fa <UART_SetConfig+0x562>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	2b03      	cmp	r3, #3
 800797e:	d039      	beq.n	80079f4 <UART_SetConfig+0x55c>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b04      	cmp	r3, #4
 8007986:	d032      	beq.n	80079ee <UART_SetConfig+0x556>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b05      	cmp	r3, #5
 800798e:	d02b      	beq.n	80079e8 <UART_SetConfig+0x550>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	2b06      	cmp	r3, #6
 8007996:	d024      	beq.n	80079e2 <UART_SetConfig+0x54a>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	2b07      	cmp	r3, #7
 800799e:	d01d      	beq.n	80079dc <UART_SetConfig+0x544>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d016      	beq.n	80079d6 <UART_SetConfig+0x53e>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b09      	cmp	r3, #9
 80079ae:	d00f      	beq.n	80079d0 <UART_SetConfig+0x538>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	2b0a      	cmp	r3, #10
 80079b6:	d008      	beq.n	80079ca <UART_SetConfig+0x532>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	2b0b      	cmp	r3, #11
 80079be:	d101      	bne.n	80079c4 <UART_SetConfig+0x52c>
 80079c0:	2380      	movs	r3, #128	; 0x80
 80079c2:	e022      	b.n	8007a0a <UART_SetConfig+0x572>
 80079c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c8:	e01f      	b.n	8007a0a <UART_SetConfig+0x572>
 80079ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079ce:	e01c      	b.n	8007a0a <UART_SetConfig+0x572>
 80079d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d4:	e019      	b.n	8007a0a <UART_SetConfig+0x572>
 80079d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079da:	e016      	b.n	8007a0a <UART_SetConfig+0x572>
 80079dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079e0:	e013      	b.n	8007a0a <UART_SetConfig+0x572>
 80079e2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80079e6:	e010      	b.n	8007a0a <UART_SetConfig+0x572>
 80079e8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80079ec:	e00d      	b.n	8007a0a <UART_SetConfig+0x572>
 80079ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079f2:	e00a      	b.n	8007a0a <UART_SetConfig+0x572>
 80079f4:	f241 5355 	movw	r3, #5461	; 0x1555
 80079f8:	e007      	b.n	8007a0a <UART_SetConfig+0x572>
 80079fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079fe:	e004      	b.n	8007a0a <UART_SetConfig+0x572>
 8007a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a04:	e001      	b.n	8007a0a <UART_SetConfig+0x572>
 8007a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a0a:	617b      	str	r3, [r7, #20]
        break;
 8007a0c:	e002      	b.n	8007a14 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	76fb      	strb	r3, [r7, #27]
        break;
 8007a12:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 86cd 	beq.w	80087b6 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	4413      	add	r3, r2
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d305      	bcc.n	8007a38 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d903      	bls.n	8007a40 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	76fb      	strb	r3, [r7, #27]
 8007a3c:	f000 bebb 	b.w	80087b6 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8007a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	f200 828d 	bhi.w	8007f64 <UART_SetConfig+0xacc>
 8007a4a:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <UART_SetConfig+0x5b8>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007f65 	.word	0x08007f65
 8007a58:	08007bdf 	.word	0x08007bdf
 8007a5c:	08007f65 	.word	0x08007f65
 8007a60:	08007cd5 	.word	0x08007cd5
 8007a64:	08007f65 	.word	0x08007f65
 8007a68:	08007f65 	.word	0x08007f65
 8007a6c:	08007f65 	.word	0x08007f65
 8007a70:	08007e13 	.word	0x08007e13
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007a74:	f7fd fe7c 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8007a78:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f04f 0100 	mov.w	r1, #0
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d07d      	beq.n	8007b86 <UART_SetConfig+0x6ee>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d074      	beq.n	8007b7c <UART_SetConfig+0x6e4>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d06b      	beq.n	8007b72 <UART_SetConfig+0x6da>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d062      	beq.n	8007b68 <UART_SetConfig+0x6d0>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d059      	beq.n	8007b5e <UART_SetConfig+0x6c6>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	d050      	beq.n	8007b54 <UART_SetConfig+0x6bc>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b06      	cmp	r3, #6
 8007ab8:	d047      	beq.n	8007b4a <UART_SetConfig+0x6b2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b07      	cmp	r3, #7
 8007ac0:	d03e      	beq.n	8007b40 <UART_SetConfig+0x6a8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b08      	cmp	r3, #8
 8007ac8:	d01f      	beq.n	8007b0a <UART_SetConfig+0x672>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b09      	cmp	r3, #9
 8007ad0:	d016      	beq.n	8007b00 <UART_SetConfig+0x668>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b0a      	cmp	r3, #10
 8007ad8:	d00d      	beq.n	8007af6 <UART_SetConfig+0x65e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b0b      	cmp	r3, #11
 8007ae0:	d104      	bne.n	8007aec <UART_SetConfig+0x654>
 8007ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ae6:	f04f 0400 	mov.w	r4, #0
 8007aea:	e050      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007aec:	f04f 0301 	mov.w	r3, #1
 8007af0:	f04f 0400 	mov.w	r4, #0
 8007af4:	e04b      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007af6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007afa:	f04f 0400 	mov.w	r4, #0
 8007afe:	e046      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b00:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007b04:	f04f 0400 	mov.w	r4, #0
 8007b08:	e041      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b0a:	f04f 0320 	mov.w	r3, #32
 8007b0e:	f04f 0400 	mov.w	r4, #0
 8007b12:	e03c      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b14:	00f42400 	.word	0x00f42400
 8007b18:	0001e848 	.word	0x0001e848
 8007b1c:	0003d090 	.word	0x0003d090
 8007b20:	0007a120 	.word	0x0007a120
 8007b24:	000f4240 	.word	0x000f4240
 8007b28:	00145855 	.word	0x00145855
 8007b2c:	00186a00 	.word	0x00186a00
 8007b30:	001e8480 	.word	0x001e8480
 8007b34:	0028b0aa 	.word	0x0028b0aa
 8007b38:	003d0900 	.word	0x003d0900
 8007b3c:	007a1200 	.word	0x007a1200
 8007b40:	f04f 0310 	mov.w	r3, #16
 8007b44:	f04f 0400 	mov.w	r4, #0
 8007b48:	e021      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b4a:	f04f 030c 	mov.w	r3, #12
 8007b4e:	f04f 0400 	mov.w	r4, #0
 8007b52:	e01c      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b54:	f04f 030a 	mov.w	r3, #10
 8007b58:	f04f 0400 	mov.w	r4, #0
 8007b5c:	e017      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b5e:	f04f 0308 	mov.w	r3, #8
 8007b62:	f04f 0400 	mov.w	r4, #0
 8007b66:	e012      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b68:	f04f 0306 	mov.w	r3, #6
 8007b6c:	f04f 0400 	mov.w	r4, #0
 8007b70:	e00d      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b72:	f04f 0304 	mov.w	r3, #4
 8007b76:	f04f 0400 	mov.w	r4, #0
 8007b7a:	e008      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b7c:	f04f 0302 	mov.w	r3, #2
 8007b80:	f04f 0400 	mov.w	r4, #0
 8007b84:	e003      	b.n	8007b8e <UART_SetConfig+0x6f6>
 8007b86:	f04f 0301 	mov.w	r3, #1
 8007b8a:	f04f 0400 	mov.w	r4, #0
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4623      	mov	r3, r4
 8007b92:	f7f8 ff5f 	bl	8000a54 <__aeabi_uldivmod>
 8007b96:	4603      	mov	r3, r0
 8007b98:	460c      	mov	r4, r1
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	f04f 0400 	mov.w	r4, #0
 8007ba6:	0214      	lsls	r4, r2, #8
 8007ba8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007bac:	020b      	lsls	r3, r1, #8
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6852      	ldr	r2, [r2, #4]
 8007bb2:	0852      	lsrs	r2, r2, #1
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	eb13 0b01 	adds.w	fp, r3, r1
 8007bbe:	eb44 0c02 	adc.w	ip, r4, r2
 8007bc2:	4658      	mov	r0, fp
 8007bc4:	4661      	mov	r1, ip
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f04f 0400 	mov.w	r4, #0
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	f7f8 ff3f 	bl	8000a54 <__aeabi_uldivmod>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	460c      	mov	r4, r1
 8007bda:	61fb      	str	r3, [r7, #28]
            break;
 8007bdc:	e1c5      	b.n	8007f6a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d05b      	beq.n	8007c9e <UART_SetConfig+0x806>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d053      	beq.n	8007c96 <UART_SetConfig+0x7fe>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d04b      	beq.n	8007c8e <UART_SetConfig+0x7f6>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d043      	beq.n	8007c86 <UART_SetConfig+0x7ee>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d03b      	beq.n	8007c7e <UART_SetConfig+0x7e6>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	2b05      	cmp	r3, #5
 8007c0c:	d033      	beq.n	8007c76 <UART_SetConfig+0x7de>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	2b06      	cmp	r3, #6
 8007c14:	d02b      	beq.n	8007c6e <UART_SetConfig+0x7d6>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	2b07      	cmp	r3, #7
 8007c1c:	d023      	beq.n	8007c66 <UART_SetConfig+0x7ce>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d01b      	beq.n	8007c5e <UART_SetConfig+0x7c6>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	2b09      	cmp	r3, #9
 8007c2c:	d013      	beq.n	8007c56 <UART_SetConfig+0x7be>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b0a      	cmp	r3, #10
 8007c34:	d00b      	beq.n	8007c4e <UART_SetConfig+0x7b6>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	2b0b      	cmp	r3, #11
 8007c3c:	d103      	bne.n	8007c46 <UART_SetConfig+0x7ae>
 8007c3e:	4bae      	ldr	r3, [pc, #696]	; (8007ef8 <UART_SetConfig+0xa60>)
 8007c40:	f04f 0400 	mov.w	r4, #0
 8007c44:	e02e      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c46:	4bad      	ldr	r3, [pc, #692]	; (8007efc <UART_SetConfig+0xa64>)
 8007c48:	f04f 0400 	mov.w	r4, #0
 8007c4c:	e02a      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c4e:	4bac      	ldr	r3, [pc, #688]	; (8007f00 <UART_SetConfig+0xa68>)
 8007c50:	f04f 0400 	mov.w	r4, #0
 8007c54:	e026      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c56:	4bab      	ldr	r3, [pc, #684]	; (8007f04 <UART_SetConfig+0xa6c>)
 8007c58:	f04f 0400 	mov.w	r4, #0
 8007c5c:	e022      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c5e:	4baa      	ldr	r3, [pc, #680]	; (8007f08 <UART_SetConfig+0xa70>)
 8007c60:	f04f 0400 	mov.w	r4, #0
 8007c64:	e01e      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c66:	4ba9      	ldr	r3, [pc, #676]	; (8007f0c <UART_SetConfig+0xa74>)
 8007c68:	f04f 0400 	mov.w	r4, #0
 8007c6c:	e01a      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c6e:	a49e      	add	r4, pc, #632	; (adr r4, 8007ee8 <UART_SetConfig+0xa50>)
 8007c70:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c74:	e016      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c76:	4ba6      	ldr	r3, [pc, #664]	; (8007f10 <UART_SetConfig+0xa78>)
 8007c78:	f04f 0400 	mov.w	r4, #0
 8007c7c:	e012      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c7e:	4ba5      	ldr	r3, [pc, #660]	; (8007f14 <UART_SetConfig+0xa7c>)
 8007c80:	f04f 0400 	mov.w	r4, #0
 8007c84:	e00e      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c86:	a49a      	add	r4, pc, #616	; (adr r4, 8007ef0 <UART_SetConfig+0xa58>)
 8007c88:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c8c:	e00a      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c8e:	4ba2      	ldr	r3, [pc, #648]	; (8007f18 <UART_SetConfig+0xa80>)
 8007c90:	f04f 0400 	mov.w	r4, #0
 8007c94:	e006      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c96:	4ba1      	ldr	r3, [pc, #644]	; (8007f1c <UART_SetConfig+0xa84>)
 8007c98:	f04f 0400 	mov.w	r4, #0
 8007c9c:	e002      	b.n	8007ca4 <UART_SetConfig+0x80c>
 8007c9e:	4b97      	ldr	r3, [pc, #604]	; (8007efc <UART_SetConfig+0xa64>)
 8007ca0:	f04f 0400 	mov.w	r4, #0
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6852      	ldr	r2, [r2, #4]
 8007ca8:	0852      	lsrs	r2, r2, #1
 8007caa:	4611      	mov	r1, r2
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	eb13 0b01 	adds.w	fp, r3, r1
 8007cb4:	eb44 0c02 	adc.w	ip, r4, r2
 8007cb8:	4658      	mov	r0, fp
 8007cba:	4661      	mov	r1, ip
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f04f 0400 	mov.w	r4, #0
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4623      	mov	r3, r4
 8007cc8:	f7f8 fec4 	bl	8000a54 <__aeabi_uldivmod>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	61fb      	str	r3, [r7, #28]
            break;
 8007cd2:	e14a      	b.n	8007f6a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007cd4:	f7fd fcde 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 8007cd8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f04f 0100 	mov.w	r1, #0
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d067      	beq.n	8007dba <UART_SetConfig+0x922>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d05e      	beq.n	8007db0 <UART_SetConfig+0x918>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d055      	beq.n	8007da6 <UART_SetConfig+0x90e>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d04c      	beq.n	8007d9c <UART_SetConfig+0x904>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d043      	beq.n	8007d92 <UART_SetConfig+0x8fa>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d03a      	beq.n	8007d88 <UART_SetConfig+0x8f0>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	2b06      	cmp	r3, #6
 8007d18:	d031      	beq.n	8007d7e <UART_SetConfig+0x8e6>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	2b07      	cmp	r3, #7
 8007d20:	d028      	beq.n	8007d74 <UART_SetConfig+0x8dc>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	2b08      	cmp	r3, #8
 8007d28:	d01f      	beq.n	8007d6a <UART_SetConfig+0x8d2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	2b09      	cmp	r3, #9
 8007d30:	d016      	beq.n	8007d60 <UART_SetConfig+0x8c8>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	2b0a      	cmp	r3, #10
 8007d38:	d00d      	beq.n	8007d56 <UART_SetConfig+0x8be>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	2b0b      	cmp	r3, #11
 8007d40:	d104      	bne.n	8007d4c <UART_SetConfig+0x8b4>
 8007d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d46:	f04f 0400 	mov.w	r4, #0
 8007d4a:	e03a      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007d4c:	f04f 0301 	mov.w	r3, #1
 8007d50:	f04f 0400 	mov.w	r4, #0
 8007d54:	e035      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007d56:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007d5a:	f04f 0400 	mov.w	r4, #0
 8007d5e:	e030      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007d60:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007d64:	f04f 0400 	mov.w	r4, #0
 8007d68:	e02b      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007d6a:	f04f 0320 	mov.w	r3, #32
 8007d6e:	f04f 0400 	mov.w	r4, #0
 8007d72:	e026      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007d74:	f04f 0310 	mov.w	r3, #16
 8007d78:	f04f 0400 	mov.w	r4, #0
 8007d7c:	e021      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007d7e:	f04f 030c 	mov.w	r3, #12
 8007d82:	f04f 0400 	mov.w	r4, #0
 8007d86:	e01c      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007d88:	f04f 030a 	mov.w	r3, #10
 8007d8c:	f04f 0400 	mov.w	r4, #0
 8007d90:	e017      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007d92:	f04f 0308 	mov.w	r3, #8
 8007d96:	f04f 0400 	mov.w	r4, #0
 8007d9a:	e012      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007d9c:	f04f 0306 	mov.w	r3, #6
 8007da0:	f04f 0400 	mov.w	r4, #0
 8007da4:	e00d      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007da6:	f04f 0304 	mov.w	r3, #4
 8007daa:	f04f 0400 	mov.w	r4, #0
 8007dae:	e008      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007db0:	f04f 0302 	mov.w	r3, #2
 8007db4:	f04f 0400 	mov.w	r4, #0
 8007db8:	e003      	b.n	8007dc2 <UART_SetConfig+0x92a>
 8007dba:	f04f 0301 	mov.w	r3, #1
 8007dbe:	f04f 0400 	mov.w	r4, #0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	f7f8 fe45 	bl	8000a54 <__aeabi_uldivmod>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4622      	mov	r2, r4
 8007dd2:	f04f 0300 	mov.w	r3, #0
 8007dd6:	f04f 0400 	mov.w	r4, #0
 8007dda:	0214      	lsls	r4, r2, #8
 8007ddc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007de0:	020b      	lsls	r3, r1, #8
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	6852      	ldr	r2, [r2, #4]
 8007de6:	0852      	lsrs	r2, r2, #1
 8007de8:	4611      	mov	r1, r2
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	eb13 0b01 	adds.w	fp, r3, r1
 8007df2:	eb44 0c02 	adc.w	ip, r4, r2
 8007df6:	4658      	mov	r0, fp
 8007df8:	4661      	mov	r1, ip
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f04f 0400 	mov.w	r4, #0
 8007e02:	461a      	mov	r2, r3
 8007e04:	4623      	mov	r3, r4
 8007e06:	f7f8 fe25 	bl	8000a54 <__aeabi_uldivmod>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	61fb      	str	r3, [r7, #28]
            break;
 8007e10:	e0ab      	b.n	8007f6a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 8088 	beq.w	8007f2c <UART_SetConfig+0xa94>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d05b      	beq.n	8007edc <UART_SetConfig+0xa44>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d052      	beq.n	8007ed2 <UART_SetConfig+0xa3a>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d04a      	beq.n	8007eca <UART_SetConfig+0xa32>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d041      	beq.n	8007ec0 <UART_SetConfig+0xa28>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	2b05      	cmp	r3, #5
 8007e42:	d039      	beq.n	8007eb8 <UART_SetConfig+0xa20>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d031      	beq.n	8007eb0 <UART_SetConfig+0xa18>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	2b07      	cmp	r3, #7
 8007e52:	d028      	beq.n	8007ea6 <UART_SetConfig+0xa0e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d01f      	beq.n	8007e9c <UART_SetConfig+0xa04>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b09      	cmp	r3, #9
 8007e62:	d016      	beq.n	8007e92 <UART_SetConfig+0x9fa>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b0a      	cmp	r3, #10
 8007e6a:	d00d      	beq.n	8007e88 <UART_SetConfig+0x9f0>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b0b      	cmp	r3, #11
 8007e72:	d104      	bne.n	8007e7e <UART_SetConfig+0x9e6>
 8007e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e78:	f04f 0400 	mov.w	r4, #0
 8007e7c:	e05a      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007e7e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e82:	f04f 0400 	mov.w	r4, #0
 8007e86:	e055      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e8c:	f04f 0400 	mov.w	r4, #0
 8007e90:	e050      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e96:	f04f 0400 	mov.w	r4, #0
 8007e9a:	e04b      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007e9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ea0:	f04f 0400 	mov.w	r4, #0
 8007ea4:	e046      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007ea6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007eaa:	f04f 0400 	mov.w	r4, #0
 8007eae:	e041      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007eb0:	4b1b      	ldr	r3, [pc, #108]	; (8007f20 <UART_SetConfig+0xa88>)
 8007eb2:	f04f 0400 	mov.w	r4, #0
 8007eb6:	e03d      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007eb8:	4b1a      	ldr	r3, [pc, #104]	; (8007f24 <UART_SetConfig+0xa8c>)
 8007eba:	f04f 0400 	mov.w	r4, #0
 8007ebe:	e039      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007ec0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ec4:	f04f 0400 	mov.w	r4, #0
 8007ec8:	e034      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007eca:	4b17      	ldr	r3, [pc, #92]	; (8007f28 <UART_SetConfig+0xa90>)
 8007ecc:	f04f 0400 	mov.w	r4, #0
 8007ed0:	e030      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007ed2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ed6:	f04f 0400 	mov.w	r4, #0
 8007eda:	e02b      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007edc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ee0:	f04f 0400 	mov.w	r4, #0
 8007ee4:	e026      	b.n	8007f34 <UART_SetConfig+0xa9c>
 8007ee6:	bf00      	nop
 8007ee8:	14585500 	.word	0x14585500
 8007eec:	00000000 	.word	0x00000000
 8007ef0:	28b0aa00 	.word	0x28b0aa00
 8007ef4:	00000000 	.word	0x00000000
 8007ef8:	00f42400 	.word	0x00f42400
 8007efc:	f4240000 	.word	0xf4240000
 8007f00:	01e84800 	.word	0x01e84800
 8007f04:	03d09000 	.word	0x03d09000
 8007f08:	07a12000 	.word	0x07a12000
 8007f0c:	0f424000 	.word	0x0f424000
 8007f10:	186a0000 	.word	0x186a0000
 8007f14:	1e848000 	.word	0x1e848000
 8007f18:	3d090000 	.word	0x3d090000
 8007f1c:	7a120000 	.word	0x7a120000
 8007f20:	000aaa00 	.word	0x000aaa00
 8007f24:	000ccc00 	.word	0x000ccc00
 8007f28:	00155500 	.word	0x00155500
 8007f2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007f30:	f04f 0400 	mov.w	r4, #0
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6852      	ldr	r2, [r2, #4]
 8007f38:	0852      	lsrs	r2, r2, #1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	eb13 0b01 	adds.w	fp, r3, r1
 8007f44:	eb44 0c02 	adc.w	ip, r4, r2
 8007f48:	4658      	mov	r0, fp
 8007f4a:	4661      	mov	r1, ip
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f04f 0400 	mov.w	r4, #0
 8007f54:	461a      	mov	r2, r3
 8007f56:	4623      	mov	r3, r4
 8007f58:	f7f8 fd7c 	bl	8000a54 <__aeabi_uldivmod>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	61fb      	str	r3, [r7, #28]
            break;
 8007f62:	e002      	b.n	8007f6a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	76fb      	strb	r3, [r7, #27]
            break;
 8007f68:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f70:	d309      	bcc.n	8007f86 <UART_SetConfig+0xaee>
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f78:	d205      	bcs.n	8007f86 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	60da      	str	r2, [r3, #12]
 8007f82:	f000 bc18 	b.w	80087b6 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	76fb      	strb	r3, [r7, #27]
 8007f8a:	f000 bc14 	b.w	80087b6 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f96:	f040 8204 	bne.w	80083a2 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8007f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	f200 81df 	bhi.w	8008362 <UART_SetConfig+0xeca>
 8007fa4:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <UART_SetConfig+0xb14>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fd1 	.word	0x08007fd1
 8007fb0:	08008089 	.word	0x08008089
 8007fb4:	08008141 	.word	0x08008141
 8007fb8:	08008363 	.word	0x08008363
 8007fbc:	080081e9 	.word	0x080081e9
 8007fc0:	08008363 	.word	0x08008363
 8007fc4:	08008363 	.word	0x08008363
 8007fc8:	08008363 	.word	0x08008363
 8007fcc:	080082a1 	.word	0x080082a1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fd0:	f7fd fbce 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8007fd4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d044      	beq.n	8008068 <UART_SetConfig+0xbd0>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d03e      	beq.n	8008064 <UART_SetConfig+0xbcc>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d038      	beq.n	8008060 <UART_SetConfig+0xbc8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d032      	beq.n	800805c <UART_SetConfig+0xbc4>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d02c      	beq.n	8008058 <UART_SetConfig+0xbc0>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	2b05      	cmp	r3, #5
 8008004:	d026      	beq.n	8008054 <UART_SetConfig+0xbbc>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	2b06      	cmp	r3, #6
 800800c:	d020      	beq.n	8008050 <UART_SetConfig+0xbb8>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	2b07      	cmp	r3, #7
 8008014:	d01a      	beq.n	800804c <UART_SetConfig+0xbb4>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	2b08      	cmp	r3, #8
 800801c:	d014      	beq.n	8008048 <UART_SetConfig+0xbb0>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	2b09      	cmp	r3, #9
 8008024:	d00e      	beq.n	8008044 <UART_SetConfig+0xbac>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	2b0a      	cmp	r3, #10
 800802c:	d008      	beq.n	8008040 <UART_SetConfig+0xba8>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	2b0b      	cmp	r3, #11
 8008034:	d102      	bne.n	800803c <UART_SetConfig+0xba4>
 8008036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800803a:	e016      	b.n	800806a <UART_SetConfig+0xbd2>
 800803c:	2301      	movs	r3, #1
 800803e:	e014      	b.n	800806a <UART_SetConfig+0xbd2>
 8008040:	2380      	movs	r3, #128	; 0x80
 8008042:	e012      	b.n	800806a <UART_SetConfig+0xbd2>
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	e010      	b.n	800806a <UART_SetConfig+0xbd2>
 8008048:	2320      	movs	r3, #32
 800804a:	e00e      	b.n	800806a <UART_SetConfig+0xbd2>
 800804c:	2310      	movs	r3, #16
 800804e:	e00c      	b.n	800806a <UART_SetConfig+0xbd2>
 8008050:	230c      	movs	r3, #12
 8008052:	e00a      	b.n	800806a <UART_SetConfig+0xbd2>
 8008054:	230a      	movs	r3, #10
 8008056:	e008      	b.n	800806a <UART_SetConfig+0xbd2>
 8008058:	2308      	movs	r3, #8
 800805a:	e006      	b.n	800806a <UART_SetConfig+0xbd2>
 800805c:	2306      	movs	r3, #6
 800805e:	e004      	b.n	800806a <UART_SetConfig+0xbd2>
 8008060:	2304      	movs	r3, #4
 8008062:	e002      	b.n	800806a <UART_SetConfig+0xbd2>
 8008064:	2302      	movs	r3, #2
 8008066:	e000      	b.n	800806a <UART_SetConfig+0xbd2>
 8008068:	2301      	movs	r3, #1
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008070:	005a      	lsls	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	441a      	add	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008082:	b29b      	uxth	r3, r3
 8008084:	61fb      	str	r3, [r7, #28]
        break;
 8008086:	e16f      	b.n	8008368 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008088:	f7fd fb88 	bl	800579c <HAL_RCC_GetPCLK2Freq>
 800808c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d044      	beq.n	8008120 <UART_SetConfig+0xc88>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	2b01      	cmp	r3, #1
 800809c:	d03e      	beq.n	800811c <UART_SetConfig+0xc84>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d038      	beq.n	8008118 <UART_SetConfig+0xc80>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d032      	beq.n	8008114 <UART_SetConfig+0xc7c>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d02c      	beq.n	8008110 <UART_SetConfig+0xc78>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	d026      	beq.n	800810c <UART_SetConfig+0xc74>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	2b06      	cmp	r3, #6
 80080c4:	d020      	beq.n	8008108 <UART_SetConfig+0xc70>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b07      	cmp	r3, #7
 80080cc:	d01a      	beq.n	8008104 <UART_SetConfig+0xc6c>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b08      	cmp	r3, #8
 80080d4:	d014      	beq.n	8008100 <UART_SetConfig+0xc68>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	2b09      	cmp	r3, #9
 80080dc:	d00e      	beq.n	80080fc <UART_SetConfig+0xc64>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	2b0a      	cmp	r3, #10
 80080e4:	d008      	beq.n	80080f8 <UART_SetConfig+0xc60>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	2b0b      	cmp	r3, #11
 80080ec:	d102      	bne.n	80080f4 <UART_SetConfig+0xc5c>
 80080ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080f2:	e016      	b.n	8008122 <UART_SetConfig+0xc8a>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e014      	b.n	8008122 <UART_SetConfig+0xc8a>
 80080f8:	2380      	movs	r3, #128	; 0x80
 80080fa:	e012      	b.n	8008122 <UART_SetConfig+0xc8a>
 80080fc:	2340      	movs	r3, #64	; 0x40
 80080fe:	e010      	b.n	8008122 <UART_SetConfig+0xc8a>
 8008100:	2320      	movs	r3, #32
 8008102:	e00e      	b.n	8008122 <UART_SetConfig+0xc8a>
 8008104:	2310      	movs	r3, #16
 8008106:	e00c      	b.n	8008122 <UART_SetConfig+0xc8a>
 8008108:	230c      	movs	r3, #12
 800810a:	e00a      	b.n	8008122 <UART_SetConfig+0xc8a>
 800810c:	230a      	movs	r3, #10
 800810e:	e008      	b.n	8008122 <UART_SetConfig+0xc8a>
 8008110:	2308      	movs	r3, #8
 8008112:	e006      	b.n	8008122 <UART_SetConfig+0xc8a>
 8008114:	2306      	movs	r3, #6
 8008116:	e004      	b.n	8008122 <UART_SetConfig+0xc8a>
 8008118:	2304      	movs	r3, #4
 800811a:	e002      	b.n	8008122 <UART_SetConfig+0xc8a>
 800811c:	2302      	movs	r3, #2
 800811e:	e000      	b.n	8008122 <UART_SetConfig+0xc8a>
 8008120:	2301      	movs	r3, #1
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	fbb2 f3f3 	udiv	r3, r2, r3
 8008128:	005a      	lsls	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	085b      	lsrs	r3, r3, #1
 8008130:	441a      	add	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	fbb2 f3f3 	udiv	r3, r2, r3
 800813a:	b29b      	uxth	r3, r3
 800813c:	61fb      	str	r3, [r7, #28]
        break;
 800813e:	e113      	b.n	8008368 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	d043      	beq.n	80081d0 <UART_SetConfig+0xd38>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	2b01      	cmp	r3, #1
 800814e:	d03d      	beq.n	80081cc <UART_SetConfig+0xd34>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	2b02      	cmp	r3, #2
 8008156:	d037      	beq.n	80081c8 <UART_SetConfig+0xd30>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	2b03      	cmp	r3, #3
 800815e:	d031      	beq.n	80081c4 <UART_SetConfig+0xd2c>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	2b04      	cmp	r3, #4
 8008166:	d02b      	beq.n	80081c0 <UART_SetConfig+0xd28>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	2b05      	cmp	r3, #5
 800816e:	d025      	beq.n	80081bc <UART_SetConfig+0xd24>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	2b06      	cmp	r3, #6
 8008176:	d01f      	beq.n	80081b8 <UART_SetConfig+0xd20>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	2b07      	cmp	r3, #7
 800817e:	d019      	beq.n	80081b4 <UART_SetConfig+0xd1c>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	2b08      	cmp	r3, #8
 8008186:	d013      	beq.n	80081b0 <UART_SetConfig+0xd18>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2b09      	cmp	r3, #9
 800818e:	d00d      	beq.n	80081ac <UART_SetConfig+0xd14>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	2b0a      	cmp	r3, #10
 8008196:	d007      	beq.n	80081a8 <UART_SetConfig+0xd10>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	2b0b      	cmp	r3, #11
 800819e:	d101      	bne.n	80081a4 <UART_SetConfig+0xd0c>
 80081a0:	4b8d      	ldr	r3, [pc, #564]	; (80083d8 <UART_SetConfig+0xf40>)
 80081a2:	e016      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081a4:	4b8d      	ldr	r3, [pc, #564]	; (80083dc <UART_SetConfig+0xf44>)
 80081a6:	e014      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081a8:	4b8d      	ldr	r3, [pc, #564]	; (80083e0 <UART_SetConfig+0xf48>)
 80081aa:	e012      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081ac:	4b8d      	ldr	r3, [pc, #564]	; (80083e4 <UART_SetConfig+0xf4c>)
 80081ae:	e010      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081b0:	4b8d      	ldr	r3, [pc, #564]	; (80083e8 <UART_SetConfig+0xf50>)
 80081b2:	e00e      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081b4:	4b8d      	ldr	r3, [pc, #564]	; (80083ec <UART_SetConfig+0xf54>)
 80081b6:	e00c      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081b8:	4b8d      	ldr	r3, [pc, #564]	; (80083f0 <UART_SetConfig+0xf58>)
 80081ba:	e00a      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081bc:	4b8d      	ldr	r3, [pc, #564]	; (80083f4 <UART_SetConfig+0xf5c>)
 80081be:	e008      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081c0:	4b8d      	ldr	r3, [pc, #564]	; (80083f8 <UART_SetConfig+0xf60>)
 80081c2:	e006      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081c4:	4b8d      	ldr	r3, [pc, #564]	; (80083fc <UART_SetConfig+0xf64>)
 80081c6:	e004      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081c8:	4b8d      	ldr	r3, [pc, #564]	; (8008400 <UART_SetConfig+0xf68>)
 80081ca:	e002      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081cc:	4b8d      	ldr	r3, [pc, #564]	; (8008404 <UART_SetConfig+0xf6c>)
 80081ce:	e000      	b.n	80081d2 <UART_SetConfig+0xd3a>
 80081d0:	4b82      	ldr	r3, [pc, #520]	; (80083dc <UART_SetConfig+0xf44>)
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6852      	ldr	r2, [r2, #4]
 80081d6:	0852      	lsrs	r2, r2, #1
 80081d8:	441a      	add	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	61fb      	str	r3, [r7, #28]
        break;
 80081e6:	e0bf      	b.n	8008368 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081e8:	f7fd fa54 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 80081ec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d044      	beq.n	8008280 <UART_SetConfig+0xde8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d03e      	beq.n	800827c <UART_SetConfig+0xde4>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	2b02      	cmp	r3, #2
 8008204:	d038      	beq.n	8008278 <UART_SetConfig+0xde0>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2b03      	cmp	r3, #3
 800820c:	d032      	beq.n	8008274 <UART_SetConfig+0xddc>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	2b04      	cmp	r3, #4
 8008214:	d02c      	beq.n	8008270 <UART_SetConfig+0xdd8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	2b05      	cmp	r3, #5
 800821c:	d026      	beq.n	800826c <UART_SetConfig+0xdd4>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	2b06      	cmp	r3, #6
 8008224:	d020      	beq.n	8008268 <UART_SetConfig+0xdd0>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	2b07      	cmp	r3, #7
 800822c:	d01a      	beq.n	8008264 <UART_SetConfig+0xdcc>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	2b08      	cmp	r3, #8
 8008234:	d014      	beq.n	8008260 <UART_SetConfig+0xdc8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b09      	cmp	r3, #9
 800823c:	d00e      	beq.n	800825c <UART_SetConfig+0xdc4>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	2b0a      	cmp	r3, #10
 8008244:	d008      	beq.n	8008258 <UART_SetConfig+0xdc0>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	2b0b      	cmp	r3, #11
 800824c:	d102      	bne.n	8008254 <UART_SetConfig+0xdbc>
 800824e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008252:	e016      	b.n	8008282 <UART_SetConfig+0xdea>
 8008254:	2301      	movs	r3, #1
 8008256:	e014      	b.n	8008282 <UART_SetConfig+0xdea>
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	e012      	b.n	8008282 <UART_SetConfig+0xdea>
 800825c:	2340      	movs	r3, #64	; 0x40
 800825e:	e010      	b.n	8008282 <UART_SetConfig+0xdea>
 8008260:	2320      	movs	r3, #32
 8008262:	e00e      	b.n	8008282 <UART_SetConfig+0xdea>
 8008264:	2310      	movs	r3, #16
 8008266:	e00c      	b.n	8008282 <UART_SetConfig+0xdea>
 8008268:	230c      	movs	r3, #12
 800826a:	e00a      	b.n	8008282 <UART_SetConfig+0xdea>
 800826c:	230a      	movs	r3, #10
 800826e:	e008      	b.n	8008282 <UART_SetConfig+0xdea>
 8008270:	2308      	movs	r3, #8
 8008272:	e006      	b.n	8008282 <UART_SetConfig+0xdea>
 8008274:	2306      	movs	r3, #6
 8008276:	e004      	b.n	8008282 <UART_SetConfig+0xdea>
 8008278:	2304      	movs	r3, #4
 800827a:	e002      	b.n	8008282 <UART_SetConfig+0xdea>
 800827c:	2302      	movs	r3, #2
 800827e:	e000      	b.n	8008282 <UART_SetConfig+0xdea>
 8008280:	2301      	movs	r3, #1
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	fbb2 f3f3 	udiv	r3, r2, r3
 8008288:	005a      	lsls	r2, r3, #1
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	085b      	lsrs	r3, r3, #1
 8008290:	441a      	add	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	fbb2 f3f3 	udiv	r3, r2, r3
 800829a:	b29b      	uxth	r3, r3
 800829c:	61fb      	str	r3, [r7, #28]
        break;
 800829e:	e063      	b.n	8008368 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d04f      	beq.n	8008348 <UART_SetConfig+0xeb0>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d048      	beq.n	8008342 <UART_SetConfig+0xeaa>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d041      	beq.n	800833c <UART_SetConfig+0xea4>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d03a      	beq.n	8008336 <UART_SetConfig+0xe9e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d033      	beq.n	8008330 <UART_SetConfig+0xe98>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	2b05      	cmp	r3, #5
 80082ce:	d02c      	beq.n	800832a <UART_SetConfig+0xe92>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	2b06      	cmp	r3, #6
 80082d6:	d025      	beq.n	8008324 <UART_SetConfig+0xe8c>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	2b07      	cmp	r3, #7
 80082de:	d01e      	beq.n	800831e <UART_SetConfig+0xe86>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d017      	beq.n	8008318 <UART_SetConfig+0xe80>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	2b09      	cmp	r3, #9
 80082ee:	d010      	beq.n	8008312 <UART_SetConfig+0xe7a>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b0a      	cmp	r3, #10
 80082f6:	d009      	beq.n	800830c <UART_SetConfig+0xe74>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	2b0b      	cmp	r3, #11
 80082fe:	d102      	bne.n	8008306 <UART_SetConfig+0xe6e>
 8008300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008304:	e022      	b.n	800834c <UART_SetConfig+0xeb4>
 8008306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800830a:	e01f      	b.n	800834c <UART_SetConfig+0xeb4>
 800830c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008310:	e01c      	b.n	800834c <UART_SetConfig+0xeb4>
 8008312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008316:	e019      	b.n	800834c <UART_SetConfig+0xeb4>
 8008318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800831c:	e016      	b.n	800834c <UART_SetConfig+0xeb4>
 800831e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008322:	e013      	b.n	800834c <UART_SetConfig+0xeb4>
 8008324:	f241 5354 	movw	r3, #5460	; 0x1554
 8008328:	e010      	b.n	800834c <UART_SetConfig+0xeb4>
 800832a:	f641 1398 	movw	r3, #6552	; 0x1998
 800832e:	e00d      	b.n	800834c <UART_SetConfig+0xeb4>
 8008330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008334:	e00a      	b.n	800834c <UART_SetConfig+0xeb4>
 8008336:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800833a:	e007      	b.n	800834c <UART_SetConfig+0xeb4>
 800833c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008340:	e004      	b.n	800834c <UART_SetConfig+0xeb4>
 8008342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008346:	e001      	b.n	800834c <UART_SetConfig+0xeb4>
 8008348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6852      	ldr	r2, [r2, #4]
 8008350:	0852      	lsrs	r2, r2, #1
 8008352:	441a      	add	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	fbb2 f3f3 	udiv	r3, r2, r3
 800835c:	b29b      	uxth	r3, r3
 800835e:	61fb      	str	r3, [r7, #28]
        break;
 8008360:	e002      	b.n	8008368 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	76fb      	strb	r3, [r7, #27]
        break;
 8008366:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	2b0f      	cmp	r3, #15
 800836c:	d916      	bls.n	800839c <UART_SetConfig+0xf04>
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008374:	d212      	bcs.n	800839c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	b29b      	uxth	r3, r3
 800837a:	f023 030f 	bic.w	r3, r3, #15
 800837e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	085b      	lsrs	r3, r3, #1
 8008384:	b29b      	uxth	r3, r3
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	b29a      	uxth	r2, r3
 800838c:	89fb      	ldrh	r3, [r7, #14]
 800838e:	4313      	orrs	r3, r2
 8008390:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	89fa      	ldrh	r2, [r7, #14]
 8008398:	60da      	str	r2, [r3, #12]
 800839a:	e20c      	b.n	80087b6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	76fb      	strb	r3, [r7, #27]
 80083a0:	e209      	b.n	80087b6 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 80083a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	f200 81f4 	bhi.w	8008794 <UART_SetConfig+0x12fc>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <UART_SetConfig+0xf1c>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	08008409 	.word	0x08008409
 80083b8:	080084bf 	.word	0x080084bf
 80083bc:	08008575 	.word	0x08008575
 80083c0:	08008795 	.word	0x08008795
 80083c4:	0800861f 	.word	0x0800861f
 80083c8:	08008795 	.word	0x08008795
 80083cc:	08008795 	.word	0x08008795
 80083d0:	08008795 	.word	0x08008795
 80083d4:	080086d5 	.word	0x080086d5
 80083d8:	0001e848 	.word	0x0001e848
 80083dc:	01e84800 	.word	0x01e84800
 80083e0:	0003d090 	.word	0x0003d090
 80083e4:	0007a120 	.word	0x0007a120
 80083e8:	000f4240 	.word	0x000f4240
 80083ec:	001e8480 	.word	0x001e8480
 80083f0:	0028b0aa 	.word	0x0028b0aa
 80083f4:	0030d400 	.word	0x0030d400
 80083f8:	003d0900 	.word	0x003d0900
 80083fc:	00516154 	.word	0x00516154
 8008400:	007a1200 	.word	0x007a1200
 8008404:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008408:	f7fd f9b2 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 800840c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	d044      	beq.n	80084a0 <UART_SetConfig+0x1008>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	2b01      	cmp	r3, #1
 800841c:	d03e      	beq.n	800849c <UART_SetConfig+0x1004>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	2b02      	cmp	r3, #2
 8008424:	d038      	beq.n	8008498 <UART_SetConfig+0x1000>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	2b03      	cmp	r3, #3
 800842c:	d032      	beq.n	8008494 <UART_SetConfig+0xffc>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	2b04      	cmp	r3, #4
 8008434:	d02c      	beq.n	8008490 <UART_SetConfig+0xff8>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	2b05      	cmp	r3, #5
 800843c:	d026      	beq.n	800848c <UART_SetConfig+0xff4>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	2b06      	cmp	r3, #6
 8008444:	d020      	beq.n	8008488 <UART_SetConfig+0xff0>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	2b07      	cmp	r3, #7
 800844c:	d01a      	beq.n	8008484 <UART_SetConfig+0xfec>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008452:	2b08      	cmp	r3, #8
 8008454:	d014      	beq.n	8008480 <UART_SetConfig+0xfe8>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	2b09      	cmp	r3, #9
 800845c:	d00e      	beq.n	800847c <UART_SetConfig+0xfe4>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	2b0a      	cmp	r3, #10
 8008464:	d008      	beq.n	8008478 <UART_SetConfig+0xfe0>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	2b0b      	cmp	r3, #11
 800846c:	d102      	bne.n	8008474 <UART_SetConfig+0xfdc>
 800846e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008472:	e016      	b.n	80084a2 <UART_SetConfig+0x100a>
 8008474:	2301      	movs	r3, #1
 8008476:	e014      	b.n	80084a2 <UART_SetConfig+0x100a>
 8008478:	2380      	movs	r3, #128	; 0x80
 800847a:	e012      	b.n	80084a2 <UART_SetConfig+0x100a>
 800847c:	2340      	movs	r3, #64	; 0x40
 800847e:	e010      	b.n	80084a2 <UART_SetConfig+0x100a>
 8008480:	2320      	movs	r3, #32
 8008482:	e00e      	b.n	80084a2 <UART_SetConfig+0x100a>
 8008484:	2310      	movs	r3, #16
 8008486:	e00c      	b.n	80084a2 <UART_SetConfig+0x100a>
 8008488:	230c      	movs	r3, #12
 800848a:	e00a      	b.n	80084a2 <UART_SetConfig+0x100a>
 800848c:	230a      	movs	r3, #10
 800848e:	e008      	b.n	80084a2 <UART_SetConfig+0x100a>
 8008490:	2308      	movs	r3, #8
 8008492:	e006      	b.n	80084a2 <UART_SetConfig+0x100a>
 8008494:	2306      	movs	r3, #6
 8008496:	e004      	b.n	80084a2 <UART_SetConfig+0x100a>
 8008498:	2304      	movs	r3, #4
 800849a:	e002      	b.n	80084a2 <UART_SetConfig+0x100a>
 800849c:	2302      	movs	r3, #2
 800849e:	e000      	b.n	80084a2 <UART_SetConfig+0x100a>
 80084a0:	2301      	movs	r3, #1
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	085b      	lsrs	r3, r3, #1
 80084ae:	441a      	add	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	61fb      	str	r3, [r7, #28]
        break;
 80084bc:	e16d      	b.n	800879a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084be:	f7fd f96d 	bl	800579c <HAL_RCC_GetPCLK2Freq>
 80084c2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d044      	beq.n	8008556 <UART_SetConfig+0x10be>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d03e      	beq.n	8008552 <UART_SetConfig+0x10ba>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d038      	beq.n	800854e <UART_SetConfig+0x10b6>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d032      	beq.n	800854a <UART_SetConfig+0x10b2>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d02c      	beq.n	8008546 <UART_SetConfig+0x10ae>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	2b05      	cmp	r3, #5
 80084f2:	d026      	beq.n	8008542 <UART_SetConfig+0x10aa>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	2b06      	cmp	r3, #6
 80084fa:	d020      	beq.n	800853e <UART_SetConfig+0x10a6>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	2b07      	cmp	r3, #7
 8008502:	d01a      	beq.n	800853a <UART_SetConfig+0x10a2>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	2b08      	cmp	r3, #8
 800850a:	d014      	beq.n	8008536 <UART_SetConfig+0x109e>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	2b09      	cmp	r3, #9
 8008512:	d00e      	beq.n	8008532 <UART_SetConfig+0x109a>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	2b0a      	cmp	r3, #10
 800851a:	d008      	beq.n	800852e <UART_SetConfig+0x1096>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	2b0b      	cmp	r3, #11
 8008522:	d102      	bne.n	800852a <UART_SetConfig+0x1092>
 8008524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008528:	e016      	b.n	8008558 <UART_SetConfig+0x10c0>
 800852a:	2301      	movs	r3, #1
 800852c:	e014      	b.n	8008558 <UART_SetConfig+0x10c0>
 800852e:	2380      	movs	r3, #128	; 0x80
 8008530:	e012      	b.n	8008558 <UART_SetConfig+0x10c0>
 8008532:	2340      	movs	r3, #64	; 0x40
 8008534:	e010      	b.n	8008558 <UART_SetConfig+0x10c0>
 8008536:	2320      	movs	r3, #32
 8008538:	e00e      	b.n	8008558 <UART_SetConfig+0x10c0>
 800853a:	2310      	movs	r3, #16
 800853c:	e00c      	b.n	8008558 <UART_SetConfig+0x10c0>
 800853e:	230c      	movs	r3, #12
 8008540:	e00a      	b.n	8008558 <UART_SetConfig+0x10c0>
 8008542:	230a      	movs	r3, #10
 8008544:	e008      	b.n	8008558 <UART_SetConfig+0x10c0>
 8008546:	2308      	movs	r3, #8
 8008548:	e006      	b.n	8008558 <UART_SetConfig+0x10c0>
 800854a:	2306      	movs	r3, #6
 800854c:	e004      	b.n	8008558 <UART_SetConfig+0x10c0>
 800854e:	2304      	movs	r3, #4
 8008550:	e002      	b.n	8008558 <UART_SetConfig+0x10c0>
 8008552:	2302      	movs	r3, #2
 8008554:	e000      	b.n	8008558 <UART_SetConfig+0x10c0>
 8008556:	2301      	movs	r3, #1
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	fbb2 f2f3 	udiv	r2, r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	441a      	add	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	fbb2 f3f3 	udiv	r3, r2, r3
 800856e:	b29b      	uxth	r3, r3
 8008570:	61fb      	str	r3, [r7, #28]
        break;
 8008572:	e112      	b.n	800879a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	d044      	beq.n	8008606 <UART_SetConfig+0x116e>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b01      	cmp	r3, #1
 8008582:	d03e      	beq.n	8008602 <UART_SetConfig+0x116a>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	2b02      	cmp	r3, #2
 800858a:	d038      	beq.n	80085fe <UART_SetConfig+0x1166>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	2b03      	cmp	r3, #3
 8008592:	d032      	beq.n	80085fa <UART_SetConfig+0x1162>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b04      	cmp	r3, #4
 800859a:	d02c      	beq.n	80085f6 <UART_SetConfig+0x115e>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b05      	cmp	r3, #5
 80085a2:	d026      	beq.n	80085f2 <UART_SetConfig+0x115a>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b06      	cmp	r3, #6
 80085aa:	d020      	beq.n	80085ee <UART_SetConfig+0x1156>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	d01a      	beq.n	80085ea <UART_SetConfig+0x1152>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d014      	beq.n	80085e6 <UART_SetConfig+0x114e>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b09      	cmp	r3, #9
 80085c2:	d00e      	beq.n	80085e2 <UART_SetConfig+0x114a>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b0a      	cmp	r3, #10
 80085ca:	d008      	beq.n	80085de <UART_SetConfig+0x1146>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	2b0b      	cmp	r3, #11
 80085d2:	d102      	bne.n	80085da <UART_SetConfig+0x1142>
 80085d4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80085d8:	e016      	b.n	8008608 <UART_SetConfig+0x1170>
 80085da:	4b81      	ldr	r3, [pc, #516]	; (80087e0 <UART_SetConfig+0x1348>)
 80085dc:	e014      	b.n	8008608 <UART_SetConfig+0x1170>
 80085de:	4b81      	ldr	r3, [pc, #516]	; (80087e4 <UART_SetConfig+0x134c>)
 80085e0:	e012      	b.n	8008608 <UART_SetConfig+0x1170>
 80085e2:	4b81      	ldr	r3, [pc, #516]	; (80087e8 <UART_SetConfig+0x1350>)
 80085e4:	e010      	b.n	8008608 <UART_SetConfig+0x1170>
 80085e6:	4b81      	ldr	r3, [pc, #516]	; (80087ec <UART_SetConfig+0x1354>)
 80085e8:	e00e      	b.n	8008608 <UART_SetConfig+0x1170>
 80085ea:	4b81      	ldr	r3, [pc, #516]	; (80087f0 <UART_SetConfig+0x1358>)
 80085ec:	e00c      	b.n	8008608 <UART_SetConfig+0x1170>
 80085ee:	4b81      	ldr	r3, [pc, #516]	; (80087f4 <UART_SetConfig+0x135c>)
 80085f0:	e00a      	b.n	8008608 <UART_SetConfig+0x1170>
 80085f2:	4b81      	ldr	r3, [pc, #516]	; (80087f8 <UART_SetConfig+0x1360>)
 80085f4:	e008      	b.n	8008608 <UART_SetConfig+0x1170>
 80085f6:	4b81      	ldr	r3, [pc, #516]	; (80087fc <UART_SetConfig+0x1364>)
 80085f8:	e006      	b.n	8008608 <UART_SetConfig+0x1170>
 80085fa:	4b81      	ldr	r3, [pc, #516]	; (8008800 <UART_SetConfig+0x1368>)
 80085fc:	e004      	b.n	8008608 <UART_SetConfig+0x1170>
 80085fe:	4b81      	ldr	r3, [pc, #516]	; (8008804 <UART_SetConfig+0x136c>)
 8008600:	e002      	b.n	8008608 <UART_SetConfig+0x1170>
 8008602:	4b81      	ldr	r3, [pc, #516]	; (8008808 <UART_SetConfig+0x1370>)
 8008604:	e000      	b.n	8008608 <UART_SetConfig+0x1170>
 8008606:	4b76      	ldr	r3, [pc, #472]	; (80087e0 <UART_SetConfig+0x1348>)
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6852      	ldr	r2, [r2, #4]
 800860c:	0852      	lsrs	r2, r2, #1
 800860e:	441a      	add	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	fbb2 f3f3 	udiv	r3, r2, r3
 8008618:	b29b      	uxth	r3, r3
 800861a:	61fb      	str	r3, [r7, #28]
        break;
 800861c:	e0bd      	b.n	800879a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800861e:	f7fd f839 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 8008622:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	d044      	beq.n	80086b6 <UART_SetConfig+0x121e>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b01      	cmp	r3, #1
 8008632:	d03e      	beq.n	80086b2 <UART_SetConfig+0x121a>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	2b02      	cmp	r3, #2
 800863a:	d038      	beq.n	80086ae <UART_SetConfig+0x1216>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	2b03      	cmp	r3, #3
 8008642:	d032      	beq.n	80086aa <UART_SetConfig+0x1212>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	2b04      	cmp	r3, #4
 800864a:	d02c      	beq.n	80086a6 <UART_SetConfig+0x120e>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	2b05      	cmp	r3, #5
 8008652:	d026      	beq.n	80086a2 <UART_SetConfig+0x120a>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b06      	cmp	r3, #6
 800865a:	d020      	beq.n	800869e <UART_SetConfig+0x1206>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	2b07      	cmp	r3, #7
 8008662:	d01a      	beq.n	800869a <UART_SetConfig+0x1202>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008668:	2b08      	cmp	r3, #8
 800866a:	d014      	beq.n	8008696 <UART_SetConfig+0x11fe>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	2b09      	cmp	r3, #9
 8008672:	d00e      	beq.n	8008692 <UART_SetConfig+0x11fa>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	2b0a      	cmp	r3, #10
 800867a:	d008      	beq.n	800868e <UART_SetConfig+0x11f6>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	2b0b      	cmp	r3, #11
 8008682:	d102      	bne.n	800868a <UART_SetConfig+0x11f2>
 8008684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008688:	e016      	b.n	80086b8 <UART_SetConfig+0x1220>
 800868a:	2301      	movs	r3, #1
 800868c:	e014      	b.n	80086b8 <UART_SetConfig+0x1220>
 800868e:	2380      	movs	r3, #128	; 0x80
 8008690:	e012      	b.n	80086b8 <UART_SetConfig+0x1220>
 8008692:	2340      	movs	r3, #64	; 0x40
 8008694:	e010      	b.n	80086b8 <UART_SetConfig+0x1220>
 8008696:	2320      	movs	r3, #32
 8008698:	e00e      	b.n	80086b8 <UART_SetConfig+0x1220>
 800869a:	2310      	movs	r3, #16
 800869c:	e00c      	b.n	80086b8 <UART_SetConfig+0x1220>
 800869e:	230c      	movs	r3, #12
 80086a0:	e00a      	b.n	80086b8 <UART_SetConfig+0x1220>
 80086a2:	230a      	movs	r3, #10
 80086a4:	e008      	b.n	80086b8 <UART_SetConfig+0x1220>
 80086a6:	2308      	movs	r3, #8
 80086a8:	e006      	b.n	80086b8 <UART_SetConfig+0x1220>
 80086aa:	2306      	movs	r3, #6
 80086ac:	e004      	b.n	80086b8 <UART_SetConfig+0x1220>
 80086ae:	2304      	movs	r3, #4
 80086b0:	e002      	b.n	80086b8 <UART_SetConfig+0x1220>
 80086b2:	2302      	movs	r3, #2
 80086b4:	e000      	b.n	80086b8 <UART_SetConfig+0x1220>
 80086b6:	2301      	movs	r3, #1
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	441a      	add	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	61fb      	str	r3, [r7, #28]
        break;
 80086d2:	e062      	b.n	800879a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d04e      	beq.n	800877a <UART_SetConfig+0x12e2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d047      	beq.n	8008774 <UART_SetConfig+0x12dc>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d040      	beq.n	800876e <UART_SetConfig+0x12d6>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d039      	beq.n	8008768 <UART_SetConfig+0x12d0>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d032      	beq.n	8008762 <UART_SetConfig+0x12ca>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	2b05      	cmp	r3, #5
 8008702:	d02b      	beq.n	800875c <UART_SetConfig+0x12c4>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	2b06      	cmp	r3, #6
 800870a:	d024      	beq.n	8008756 <UART_SetConfig+0x12be>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b07      	cmp	r3, #7
 8008712:	d01d      	beq.n	8008750 <UART_SetConfig+0x12b8>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	2b08      	cmp	r3, #8
 800871a:	d016      	beq.n	800874a <UART_SetConfig+0x12b2>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b09      	cmp	r3, #9
 8008722:	d00f      	beq.n	8008744 <UART_SetConfig+0x12ac>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	2b0a      	cmp	r3, #10
 800872a:	d008      	beq.n	800873e <UART_SetConfig+0x12a6>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	2b0b      	cmp	r3, #11
 8008732:	d101      	bne.n	8008738 <UART_SetConfig+0x12a0>
 8008734:	2380      	movs	r3, #128	; 0x80
 8008736:	e022      	b.n	800877e <UART_SetConfig+0x12e6>
 8008738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800873c:	e01f      	b.n	800877e <UART_SetConfig+0x12e6>
 800873e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008742:	e01c      	b.n	800877e <UART_SetConfig+0x12e6>
 8008744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008748:	e019      	b.n	800877e <UART_SetConfig+0x12e6>
 800874a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800874e:	e016      	b.n	800877e <UART_SetConfig+0x12e6>
 8008750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008754:	e013      	b.n	800877e <UART_SetConfig+0x12e6>
 8008756:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800875a:	e010      	b.n	800877e <UART_SetConfig+0x12e6>
 800875c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008760:	e00d      	b.n	800877e <UART_SetConfig+0x12e6>
 8008762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008766:	e00a      	b.n	800877e <UART_SetConfig+0x12e6>
 8008768:	f241 5355 	movw	r3, #5461	; 0x1555
 800876c:	e007      	b.n	800877e <UART_SetConfig+0x12e6>
 800876e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008772:	e004      	b.n	800877e <UART_SetConfig+0x12e6>
 8008774:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008778:	e001      	b.n	800877e <UART_SetConfig+0x12e6>
 800877a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6852      	ldr	r2, [r2, #4]
 8008782:	0852      	lsrs	r2, r2, #1
 8008784:	441a      	add	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	fbb2 f3f3 	udiv	r3, r2, r3
 800878e:	b29b      	uxth	r3, r3
 8008790:	61fb      	str	r3, [r7, #28]
        break;
 8008792:	e002      	b.n	800879a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	76fb      	strb	r3, [r7, #27]
        break;
 8008798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	2b0f      	cmp	r3, #15
 800879e:	d908      	bls.n	80087b2 <UART_SetConfig+0x131a>
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a6:	d204      	bcs.n	80087b2 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	60da      	str	r2, [r3, #12]
 80087b0:	e001      	b.n	80087b6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80087d2:	7efb      	ldrb	r3, [r7, #27]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3728      	adds	r7, #40	; 0x28
 80087d8:	46bd      	mov	sp, r7
 80087da:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80087de:	bf00      	nop
 80087e0:	00f42400 	.word	0x00f42400
 80087e4:	0001e848 	.word	0x0001e848
 80087e8:	0003d090 	.word	0x0003d090
 80087ec:	0007a120 	.word	0x0007a120
 80087f0:	000f4240 	.word	0x000f4240
 80087f4:	00145855 	.word	0x00145855
 80087f8:	00186a00 	.word	0x00186a00
 80087fc:	001e8480 	.word	0x001e8480
 8008800:	0028b0aa 	.word	0x0028b0aa
 8008804:	003d0900 	.word	0x003d0900
 8008808:	007a1200 	.word	0x007a1200

0800880c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00a      	beq.n	8008836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887e:	f003 0308 	and.w	r3, r3, #8
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00a      	beq.n	80088be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00a      	beq.n	80088e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01a      	beq.n	8008922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800890a:	d10a      	bne.n	8008922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	605a      	str	r2, [r3, #4]
  }
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af02      	add	r7, sp, #8
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008960:	f7f9 fb8c 	bl	800207c <HAL_GetTick>
 8008964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0308 	and.w	r3, r3, #8
 8008970:	2b08      	cmp	r3, #8
 8008972:	d10e      	bne.n	8008992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f82c 	bl	80089e0 <UART_WaitOnFlagUntilTimeout>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e022      	b.n	80089d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b04      	cmp	r3, #4
 800899e:	d10e      	bne.n	80089be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f816 	bl	80089e0 <UART_WaitOnFlagUntilTimeout>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e00c      	b.n	80089d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	4613      	mov	r3, r2
 80089ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089f0:	e02c      	b.n	8008a4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d028      	beq.n	8008a4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fa:	f7f9 fb3f 	bl	800207c <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d302      	bcc.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d11d      	bne.n	8008a4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a1e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689a      	ldr	r2, [r3, #8]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0201 	bic.w	r2, r2, #1
 8008a2e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e00f      	b.n	8008a6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	69da      	ldr	r2, [r3, #28]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	4013      	ands	r3, r2
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	bf0c      	ite	eq
 8008a5c:	2301      	moveq	r3, #1
 8008a5e:	2300      	movne	r3, #0
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	461a      	mov	r2, r3
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d0c3      	beq.n	80089f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6812      	ldr	r2, [r2, #0]
 8008a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a9a:	f023 0301 	bic.w	r3, r3, #1
 8008a9e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f7fe fcd1 	bl	8007480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008afc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7fe fcad 	bl	800746c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b085      	sub	sp, #20
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <HAL_UARTEx_DisableFifoMode+0x16>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e027      	b.n	8008bbc <HAL_UARTEx_DisableFifoMode+0x66>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2224      	movs	r2, #36	; 0x24
 8008b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0201 	bic.w	r2, r2, #1
 8008b92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2220      	movs	r2, #32
 8008bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d101      	bne.n	8008be0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e02d      	b.n	8008c3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2224      	movs	r2, #36	; 0x24
 8008bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 0201 	bic.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f84f 	bl	8008cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e02d      	b.n	8008cb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2224      	movs	r2, #36	; 0x24
 8008c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 0201 	bic.w	r2, r2, #1
 8008c82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f811 	bl	8008cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b089      	sub	sp, #36	; 0x24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008cc8:	4a2f      	ldr	r2, [pc, #188]	; (8008d88 <UARTEx_SetNbDataToProcess+0xc8>)
 8008cca:	f107 0314 	add.w	r3, r7, #20
 8008cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cd2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008cd6:	4a2d      	ldr	r2, [pc, #180]	; (8008d8c <UARTEx_SetNbDataToProcess+0xcc>)
 8008cd8:	f107 030c 	add.w	r3, r7, #12
 8008cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ce0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d108      	bne.n	8008cfe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cfc:	e03d      	b.n	8008d7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cfe:	2308      	movs	r3, #8
 8008d00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d02:	2308      	movs	r3, #8
 8008d04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	0e5b      	lsrs	r3, r3, #25
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 0307 	and.w	r3, r3, #7
 8008d14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	0f5b      	lsrs	r3, r3, #29
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008d26:	7fbb      	ldrb	r3, [r7, #30]
 8008d28:	7f3a      	ldrb	r2, [r7, #28]
 8008d2a:	f107 0120 	add.w	r1, r7, #32
 8008d2e:	440a      	add	r2, r1
 8008d30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d34:	fb02 f303 	mul.w	r3, r2, r3
 8008d38:	7f3a      	ldrb	r2, [r7, #28]
 8008d3a:	f107 0120 	add.w	r1, r7, #32
 8008d3e:	440a      	add	r2, r1
 8008d40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008d50:	7ffb      	ldrb	r3, [r7, #31]
 8008d52:	7f7a      	ldrb	r2, [r7, #29]
 8008d54:	f107 0120 	add.w	r1, r7, #32
 8008d58:	440a      	add	r2, r1
 8008d5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d5e:	fb02 f303 	mul.w	r3, r2, r3
 8008d62:	7f7a      	ldrb	r2, [r7, #29]
 8008d64:	f107 0120 	add.w	r1, r7, #32
 8008d68:	440a      	add	r2, r1
 8008d6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d7a:	bf00      	nop
 8008d7c:	3724      	adds	r7, #36	; 0x24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	08008e00 	.word	0x08008e00
 8008d8c:	08008e08 	.word	0x08008e08

08008d90 <__libc_init_array>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	4e0d      	ldr	r6, [pc, #52]	; (8008dc8 <__libc_init_array+0x38>)
 8008d94:	4c0d      	ldr	r4, [pc, #52]	; (8008dcc <__libc_init_array+0x3c>)
 8008d96:	1ba4      	subs	r4, r4, r6
 8008d98:	10a4      	asrs	r4, r4, #2
 8008d9a:	2500      	movs	r5, #0
 8008d9c:	42a5      	cmp	r5, r4
 8008d9e:	d109      	bne.n	8008db4 <__libc_init_array+0x24>
 8008da0:	4e0b      	ldr	r6, [pc, #44]	; (8008dd0 <__libc_init_array+0x40>)
 8008da2:	4c0c      	ldr	r4, [pc, #48]	; (8008dd4 <__libc_init_array+0x44>)
 8008da4:	f000 f820 	bl	8008de8 <_init>
 8008da8:	1ba4      	subs	r4, r4, r6
 8008daa:	10a4      	asrs	r4, r4, #2
 8008dac:	2500      	movs	r5, #0
 8008dae:	42a5      	cmp	r5, r4
 8008db0:	d105      	bne.n	8008dbe <__libc_init_array+0x2e>
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008db8:	4798      	blx	r3
 8008dba:	3501      	adds	r5, #1
 8008dbc:	e7ee      	b.n	8008d9c <__libc_init_array+0xc>
 8008dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dc2:	4798      	blx	r3
 8008dc4:	3501      	adds	r5, #1
 8008dc6:	e7f2      	b.n	8008dae <__libc_init_array+0x1e>
 8008dc8:	08008e30 	.word	0x08008e30
 8008dcc:	08008e30 	.word	0x08008e30
 8008dd0:	08008e30 	.word	0x08008e30
 8008dd4:	08008e34 	.word	0x08008e34

08008dd8 <memset>:
 8008dd8:	4402      	add	r2, r0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d100      	bne.n	8008de2 <memset+0xa>
 8008de0:	4770      	bx	lr
 8008de2:	f803 1b01 	strb.w	r1, [r3], #1
 8008de6:	e7f9      	b.n	8008ddc <memset+0x4>

08008de8 <_init>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr

08008df4 <_fini>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	bf00      	nop
 8008df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfa:	bc08      	pop	{r3}
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	4770      	bx	lr
