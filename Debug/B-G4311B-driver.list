
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009988  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08009b60  08009b60  00019b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3ac  0800a3ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3ac  0800a3ac  0001a3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b4  0800a3b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a3bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000000c  0800a3c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800a3c8  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001accb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003098  00000000  00000000  0003ad07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  0003dda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  0003f370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b3b  00000000  00000000  000407a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001339a  00000000  00000000  000622db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de8ad  00000000  00000000  00075675  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153f22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e74  00000000  00000000  00153fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b48 	.word	0x08009b48

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08009b48 	.word	0x08009b48

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b092      	sub	sp, #72	; 0x48
 8000e68:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	223c      	movs	r2, #60	; 0x3c
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f008 fccf 	bl	8009820 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e82:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e92:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb0:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4827      	ldr	r0, [pc, #156]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ee2:	f001 fde3 	bl	8002aac <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f000 fed8 	bl	8001ca0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4821      	ldr	r0, [pc, #132]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000efc:	f003 f9d8 	bl	80042b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f06:	f000 fecb 	bl	8001ca0 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_ADC1_Init+0x120>)
 8000f0c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000f38:	2384      	movs	r3, #132	; 0x84
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000f4c:	f002 fd58 	bl	8003a00 <HAL_ADCEx_InjectedConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f56:	f000 fea3 	bl	8001ca0 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_ADC1_Init+0x124>)
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f5e:	f240 130f 	movw	r3, #271	; 0x10f
 8000f62:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000f6a:	f002 fd49 	bl	8003a00 <HAL_ADCEx_InjectedConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000f74:	f000 fe94 	bl	8001ca0 <Error_Handler>
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3748      	adds	r7, #72	; 0x48
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000098 	.word	0x20000098
 8000f84:	0c900008 	.word	0x0c900008
 8000f88:	32601000 	.word	0x32601000

08000f8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	223c      	movs	r2, #60	; 0x3c
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f008 fc41 	bl	8009820 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000f9e:	4b38      	ldr	r3, [pc, #224]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fa0:	4a38      	ldr	r2, [pc, #224]	; (8001084 <MX_ADC2_Init+0xf8>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fa4:	4b36      	ldr	r3, [pc, #216]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fa6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000faa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fac:	4b34      	ldr	r3, [pc, #208]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b33      	ldr	r3, [pc, #204]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fbe:	4b30      	ldr	r3, [pc, #192]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ffa:	4821      	ldr	r0, [pc, #132]	; (8001080 <MX_ADC2_Init+0xf4>)
 8000ffc:	f001 fd56 	bl	8002aac <HAL_ADC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001006:	f000 fe4b 	bl	8001ca0 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_ADC2_Init+0xfc>)
 800100c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800100e:	2309      	movs	r3, #9
 8001010:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001012:	2301      	movs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001016:	237f      	movs	r3, #127	; 0x7f
 8001018:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800101a:	2304      	movs	r3, #4
 800101c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001022:	2302      	movs	r3, #2
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001038:	2384      	movs	r3, #132	; 0x84
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_ADC2_Init+0xf4>)
 800104c:	f002 fcd8 	bl	8003a00 <HAL_ADCEx_InjectedConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001056:	f000 fe23 	bl	8001ca0 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_ADC2_Init+0x100>)
 800105c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800105e:	f240 130f 	movw	r3, #271	; 0x10f
 8001062:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_ADC2_Init+0xf4>)
 800106a:	f002 fcc9 	bl	8003a00 <HAL_ADCEx_InjectedConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 8001074:	f000 fe14 	bl	8001ca0 <Error_Handler>
  }

}
 8001078:	bf00      	nop
 800107a:	3740      	adds	r7, #64	; 0x40
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000002c 	.word	0x2000002c
 8001084:	50000100 	.word	0x50000100
 8001088:	0c900008 	.word	0x0c900008
 800108c:	cb8c0000 	.word	0xcb8c0000

08001090 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b0:	d14e      	bne.n	8001150 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80010b2:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <HAL_ADC_MspInit+0x140>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	4a45      	ldr	r2, [pc, #276]	; (80011d0 <HAL_ADC_MspInit+0x140>)
 80010ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010bc:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <HAL_ADC_MspInit+0x140>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10b      	bne.n	80010dc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010c4:	4b43      	ldr	r3, [pc, #268]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c8:	4a42      	ldr	r2, [pc, #264]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 80010ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d0:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	4a3c      	ldr	r2, [pc, #240]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	4a36      	ldr	r2, [pc, #216]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800110c:	2305      	movs	r3, #5
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f003 fadb 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4827      	ldr	r0, [pc, #156]	; (80011d8 <HAL_ADC_MspInit+0x148>)
 800113a:	f003 facf 	bl	80046dc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2102      	movs	r1, #2
 8001142:	2012      	movs	r0, #18
 8001144:	f003 fa2f 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001148:	2012      	movs	r0, #18
 800114a:	f003 fa46 	bl	80045da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800114e:	e03a      	b.n	80011c6 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a21      	ldr	r2, [pc, #132]	; (80011dc <HAL_ADC_MspInit+0x14c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d135      	bne.n	80011c6 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_ADC_MspInit+0x140>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_ADC_MspInit+0x140>)
 8001162:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_ADC_MspInit+0x140>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10b      	bne.n	8001184 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 8001172:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_ADC_MspInit+0x144>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800119c:	2340      	movs	r3, #64	; 0x40
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f003 fa93 	bl	80046dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2102      	movs	r1, #2
 80011ba:	2012      	movs	r0, #18
 80011bc:	f003 f9f3 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011c0:	2012      	movs	r0, #18
 80011c2:	f003 fa0a 	bl	80045da <HAL_NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3730      	adds	r7, #48	; 0x30
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000028 	.word	0x20000028
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	50000100 	.word	0x50000100

080011e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <MX_GPIO_Init+0xa8>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a23      	ldr	r2, [pc, #140]	; (8001288 <MX_GPIO_Init+0xa8>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_GPIO_Init+0xa8>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_GPIO_Init+0xa8>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <MX_GPIO_Init+0xa8>)
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_GPIO_Init+0xa8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_GPIO_Init+0xa8>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <MX_GPIO_Init+0xa8>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_GPIO_Init+0xa8>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_GPIO_Init+0xa8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <MX_GPIO_Init+0xa8>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_GPIO_Init+0xa8>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_GPIO_Init+0xac>)
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4809      	ldr	r0, [pc, #36]	; (8001290 <MX_GPIO_Init+0xb0>)
 800126c:	f003 fa36 	bl	80046dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2107      	movs	r1, #7
 8001274:	2028      	movs	r0, #40	; 0x28
 8001276:	f003 f996 	bl	80045a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800127a:	2028      	movs	r0, #40	; 0x28
 800127c:	f003 f9ad 	bl	80045da <HAL_NVIC_EnableIRQ>

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	10110000 	.word	0x10110000
 8001290:	48000800 	.word	0x48000800

08001294 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 8001298:	217f      	movs	r1, #127	; 0x7f
 800129a:	4836      	ldr	r0, [pc, #216]	; (8001374 <start_up+0xe0>)
 800129c:	f002 fa0e 	bl	80036bc <HAL_ADCEx_Calibration_Start>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d008      	beq.n	80012b8 <start_up+0x24>
 80012a6:	217f      	movs	r1, #127	; 0x7f
 80012a8:	4833      	ldr	r0, [pc, #204]	; (8001378 <start_up+0xe4>)
 80012aa:	f002 fa07 	bl	80036bc <HAL_ADCEx_Calibration_Start>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <start_up+0x24>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <start_up+0x26>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d157      	bne.n	800136e <start_up+0xda>
	   {
		//////// start ADC 1 2 ///////////////////////////////////
	    HAL_ADCEx_InjectedStart_IT(&hadc1);
 80012be:	482d      	ldr	r0, [pc, #180]	; (8001374 <start_up+0xe0>)
 80012c0:	f002 fa5e 	bl	8003780 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 80012c4:	482c      	ldr	r0, [pc, #176]	; (8001378 <start_up+0xe4>)
 80012c6:	f002 fa5b 	bl	8003780 <HAL_ADCEx_InjectedStart_IT>

	    //////// konfiguracja Timer 1  //////////////////////////
	    TIM1->ARR= TIM1_ARR;
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <start_up+0xe8>)
 80012cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
	    TIM1->PSC= TIM1_PSC;
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <start_up+0xe8>)
 80012d4:	220a      	movs	r2, #10
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012d8:	2100      	movs	r1, #0
 80012da:	4829      	ldr	r0, [pc, #164]	; (8001380 <start_up+0xec>)
 80012dc:	f004 fd38 	bl	8005d50 <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80012e0:	2100      	movs	r1, #0
 80012e2:	4827      	ldr	r0, [pc, #156]	; (8001380 <start_up+0xec>)
 80012e4:	f005 ff0c 	bl	8007100 <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012e8:	2104      	movs	r1, #4
 80012ea:	4825      	ldr	r0, [pc, #148]	; (8001380 <start_up+0xec>)
 80012ec:	f004 fd30 	bl	8005d50 <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80012f0:	2104      	movs	r1, #4
 80012f2:	4823      	ldr	r0, [pc, #140]	; (8001380 <start_up+0xec>)
 80012f4:	f005 ff04 	bl	8007100 <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012f8:	2108      	movs	r1, #8
 80012fa:	4821      	ldr	r0, [pc, #132]	; (8001380 <start_up+0xec>)
 80012fc:	f004 fd28 	bl	8005d50 <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001300:	2108      	movs	r1, #8
 8001302:	481f      	ldr	r0, [pc, #124]	; (8001380 <start_up+0xec>)
 8001304:	f005 fefc 	bl	8007100 <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001308:	210c      	movs	r1, #12
 800130a:	481d      	ldr	r0, [pc, #116]	; (8001380 <start_up+0xec>)
 800130c:	f004 fd20 	bl	8005d50 <HAL_TIM_PWM_Start>

	    TIM1->CCR1=(TIM1->ARR/20);
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <start_up+0xe8>)
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <start_up+0xe8>)
 8001316:	491b      	ldr	r1, [pc, #108]	; (8001384 <start_up+0xf0>)
 8001318:	fba1 1303 	umull	r1, r3, r1, r3
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	6353      	str	r3, [r2, #52]	; 0x34
	    TIM1->CCR2=0;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <start_up+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	639a      	str	r2, [r3, #56]	; 0x38
	    TIM1->CCR3=0;
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <start_up+0xe8>)
 8001328:	2200      	movs	r2, #0
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c

	    HAL_Delay(1000);
 800132c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001330:	f001 fa82 	bl	8002838 <HAL_Delay>

	    TIM1->CCR1=0;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <start_up+0xe8>)
 8001336:	2200      	movs	r2, #0
 8001338:	635a      	str	r2, [r3, #52]	; 0x34
	    TIM1->CCR2=0;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <start_up+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	639a      	str	r2, [r3, #56]	; 0x38
	    TIM1->CCR3=0;
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <start_up+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	63da      	str	r2, [r3, #60]	; 0x3c

	    //////// konfiguracja Timer 4 - encoder ///////////////////
	     TIM4->ARR= TIM4_ARR;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <start_up+0xf4>)
 8001348:	f240 1267 	movw	r2, #359	; 0x167
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
	     TIM4->PSC= TIM4_PSC;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <start_up+0xf4>)
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
	     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001354:	2100      	movs	r1, #0
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <start_up+0xf8>)
 8001358:	f004 fe72 	bl	8006040 <HAL_TIM_Encoder_Start>
	     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 800135c:	2104      	movs	r1, #4
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <start_up+0xf8>)
 8001360:	f004 fe6e 	bl	8006040 <HAL_TIM_Encoder_Start>

	     ////////  UASRT 2 /////////////////////////////////////////
	     HAL_UART_Receive_IT(&huart2, &recive, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	490a      	ldr	r1, [pc, #40]	; (8001390 <start_up+0xfc>)
 8001368:	480a      	ldr	r0, [pc, #40]	; (8001394 <start_up+0x100>)
 800136a:	f006 f927 	bl	80075bc <HAL_UART_Receive_IT>


	   }

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000098 	.word	0x20000098
 8001378:	2000002c 	.word	0x2000002c
 800137c:	40012c00 	.word	0x40012c00
 8001380:	200002a0 	.word	0x200002a0
 8001384:	cccccccd 	.word	0xcccccccd
 8001388:	40000800 	.word	0x40000800
 800138c:	20000254 	.word	0x20000254
 8001390:	20000174 	.word	0x20000174
 8001394:	20000338 	.word	0x20000338

08001398 <Angle_To_Sector>:
{


}
void Angle_To_Sector(float32_t angle_current_rad,uint8_t *sector)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	ed87 0a01 	vstr	s0, [r7, #4]
 80013a2:	6038      	str	r0, [r7, #0]


	if((angle_current_rad>0) && (angle_current_rad<=1.047197)) // pi/3
 80013a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	dd0e      	ble.n	80013d0 <Angle_To_Sector+0x38>
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff f894 	bl	80004e0 <__aeabi_f2d>
 80013b8:	a347      	add	r3, pc, #284	; (adr r3, 80014d8 <Angle_To_Sector+0x140>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff fb63 	bl	8000a88 <__aeabi_dcmple>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <Angle_To_Sector+0x38>
		*sector=1;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e07f      	b.n	80014d0 <Angle_To_Sector+0x138>
	else if((angle_current_rad>1.047197) && (angle_current_rad<=2.094395)) //2/3*pi
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff f885 	bl	80004e0 <__aeabi_f2d>
 80013d6:	a340      	add	r3, pc, #256	; (adr r3, 80014d8 <Angle_To_Sector+0x140>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff fb68 	bl	8000ab0 <__aeabi_dcmpgt>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00e      	beq.n	8001404 <Angle_To_Sector+0x6c>
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff f87a 	bl	80004e0 <__aeabi_f2d>
 80013ec:	a33c      	add	r3, pc, #240	; (adr r3, 80014e0 <Angle_To_Sector+0x148>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff fb49 	bl	8000a88 <__aeabi_dcmple>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <Angle_To_Sector+0x6c>
		*sector=2;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2202      	movs	r2, #2
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e065      	b.n	80014d0 <Angle_To_Sector+0x138>
	else if((angle_current_rad>2.094395) && (angle_current_rad<=3.141593))
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff f86b 	bl	80004e0 <__aeabi_f2d>
 800140a:	a335      	add	r3, pc, #212	; (adr r3, 80014e0 <Angle_To_Sector+0x148>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff fb4e 	bl	8000ab0 <__aeabi_dcmpgt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00e      	beq.n	8001438 <Angle_To_Sector+0xa0>
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff f860 	bl	80004e0 <__aeabi_f2d>
 8001420:	a331      	add	r3, pc, #196	; (adr r3, 80014e8 <Angle_To_Sector+0x150>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff fb2f 	bl	8000a88 <__aeabi_dcmple>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <Angle_To_Sector+0xa0>
		*sector=3;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2203      	movs	r2, #3
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e04b      	b.n	80014d0 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-3.141593) && (angle_current_rad<=-2.094395))
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff f851 	bl	80004e0 <__aeabi_f2d>
 800143e:	a32c      	add	r3, pc, #176	; (adr r3, 80014f0 <Angle_To_Sector+0x158>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff fb34 	bl	8000ab0 <__aeabi_dcmpgt>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00e      	beq.n	800146c <Angle_To_Sector+0xd4>
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff f846 	bl	80004e0 <__aeabi_f2d>
 8001454:	a328      	add	r3, pc, #160	; (adr r3, 80014f8 <Angle_To_Sector+0x160>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fb15 	bl	8000a88 <__aeabi_dcmple>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <Angle_To_Sector+0xd4>
		*sector=4;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2204      	movs	r2, #4
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	e031      	b.n	80014d0 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-2.094395) && (angle_current_rad<=-1.047197))
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff f837 	bl	80004e0 <__aeabi_f2d>
 8001472:	a321      	add	r3, pc, #132	; (adr r3, 80014f8 <Angle_To_Sector+0x160>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff fb1a 	bl	8000ab0 <__aeabi_dcmpgt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00e      	beq.n	80014a0 <Angle_To_Sector+0x108>
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff f82c 	bl	80004e0 <__aeabi_f2d>
 8001488:	a31d      	add	r3, pc, #116	; (adr r3, 8001500 <Angle_To_Sector+0x168>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff fafb 	bl	8000a88 <__aeabi_dcmple>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <Angle_To_Sector+0x108>
		*sector=5;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2205      	movs	r2, #5
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e017      	b.n	80014d0 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff f81d 	bl	80004e0 <__aeabi_f2d>
 80014a6:	a316      	add	r3, pc, #88	; (adr r3, 8001500 <Angle_To_Sector+0x168>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff fb00 	bl	8000ab0 <__aeabi_dcmpgt>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d100      	bne.n	80014b8 <Angle_To_Sector+0x120>
	else{}




}
 80014b6:	e00b      	b.n	80014d0 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 80014b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	d900      	bls.n	80014c8 <Angle_To_Sector+0x130>
}
 80014c6:	e003      	b.n	80014d0 <Angle_To_Sector+0x138>
		*sector=6;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2206      	movs	r2, #6
 80014cc:	701a      	strb	r2, [r3, #0]
}
 80014ce:	e7ff      	b.n	80014d0 <Angle_To_Sector+0x138>
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	a437824d 	.word	0xa437824d
 80014dc:	3ff0c151 	.word	0x3ff0c151
 80014e0:	2a6f3f53 	.word	0x2a6f3f53
 80014e4:	4000c152 	.word	0x4000c152
 80014e8:	82c2bd7f 	.word	0x82c2bd7f
 80014ec:	400921fb 	.word	0x400921fb
 80014f0:	82c2bd7f 	.word	0x82c2bd7f
 80014f4:	c00921fb 	.word	0xc00921fb
 80014f8:	2a6f3f53 	.word	0x2a6f3f53
 80014fc:	c000c152 	.word	0xc000c152
 8001500:	a437824d 	.word	0xa437824d
 8001504:	bff0c151 	.word	0xbff0c151

08001508 <SVPWM>:


void SVPWM(uint8_t sector,float32_t angle_current_rad,float32_t Vref, float32_t T[], float32_t T_gate[], float32_t S[])
{
 8001508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	ed87 0a04 	vstr	s0, [r7, #16]
 8001514:	edc7 0a03 	vstr	s1, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4603      	mov	r3, r0
 8001520:	75fb      	strb	r3, [r7, #23]


	T[1]=((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((sector * 1.0472) - (angle_current_rad)); /// pi/3 = 1,0472
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7fe ffdc 	bl	80004e0 <__aeabi_f2d>
 8001528:	a3a8      	add	r3, pc, #672	; (adr r3, 80017cc <SVPWM+0x2c4>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f959 	bl	80007e4 <__aeabi_ddiv>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	4625      	mov	r5, r4
 8001538:	461c      	mov	r4, r3
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ffbd 	bl	80004bc <__aeabi_i2d>
 8001542:	a3a4      	add	r3, pc, #656	; (adr r3, 80017d4 <SVPWM+0x2cc>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f822 	bl	8000590 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4690      	mov	r8, r2
 8001552:	4699      	mov	r9, r3
 8001554:	6938      	ldr	r0, [r7, #16]
 8001556:	f7fe ffc3 	bl	80004e0 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4640      	mov	r0, r8
 8001560:	4649      	mov	r1, r9
 8001562:	f7fe fe5d 	bl	8000220 <__aeabi_dsub>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff faa9 	bl	8000ac4 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	ee00 3a10 	vmov	s0, r3
 8001578:	f008 f8a2 	bl	80096c0 <arm_sin_f32>
 800157c:	ee10 3a10 	vmov	r3, s0
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffad 	bl	80004e0 <__aeabi_f2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4620      	mov	r0, r4
 800158c:	4629      	mov	r1, r5
 800158e:	f7fe ffff 	bl	8000590 <__aeabi_dmul>
 8001592:	4603      	mov	r3, r0
 8001594:	460c      	mov	r4, r1
 8001596:	4619      	mov	r1, r3
 8001598:	4622      	mov	r2, r4
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1d1c      	adds	r4, r3, #4
 800159e:	4608      	mov	r0, r1
 80015a0:	4611      	mov	r1, r2
 80015a2:	f7ff fa8f 	bl	8000ac4 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	6023      	str	r3, [r4, #0]
	T[2]=((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((-(sector-1) * 1.0472) +  angle_current_rad) ;
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7fe ff98 	bl	80004e0 <__aeabi_f2d>
 80015b0:	a386      	add	r3, pc, #536	; (adr r3, 80017cc <SVPWM+0x2c4>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f915 	bl	80007e4 <__aeabi_ddiv>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	4625      	mov	r5, r4
 80015c0:	461c      	mov	r4, r3
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	f1c3 0301 	rsb	r3, r3, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ff77 	bl	80004bc <__aeabi_i2d>
 80015ce:	a381      	add	r3, pc, #516	; (adr r3, 80017d4 <SVPWM+0x2cc>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4690      	mov	r8, r2
 80015de:	4699      	mov	r9, r3
 80015e0:	6938      	ldr	r0, [r7, #16]
 80015e2:	f7fe ff7d 	bl	80004e0 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4640      	mov	r0, r8
 80015ec:	4649      	mov	r1, r9
 80015ee:	f7fe fe19 	bl	8000224 <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff fa63 	bl	8000ac4 <__aeabi_d2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	ee00 3a10 	vmov	s0, r3
 8001604:	f008 f85c 	bl	80096c0 <arm_sin_f32>
 8001608:	ee10 3a10 	vmov	r3, s0
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff67 	bl	80004e0 <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4620      	mov	r0, r4
 8001618:	4629      	mov	r1, r5
 800161a:	f7fe ffb9 	bl	8000590 <__aeabi_dmul>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	4619      	mov	r1, r3
 8001624:	4622      	mov	r2, r4
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f103 0408 	add.w	r4, r3, #8
 800162c:	4608      	mov	r0, r1
 800162e:	4611      	mov	r1, r2
 8001630:	f7ff fa48 	bl	8000ac4 <__aeabi_d2f>
 8001634:	4603      	mov	r3, r0
 8001636:	6023      	str	r3, [r4, #0]
	T[0]=sv_Tz-T[1]-T[2];
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3304      	adds	r3, #4
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001644:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3308      	adds	r3, #8
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	edc3 7a00 	vstr	s15, [r3]

	T_gate[0]= (T[0]/2);
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edc3 7a00 	vstr	s15, [r3]
	T_gate[1]= T[1]+(T_gate[0]);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	3304      	adds	r3, #4
 8001672:	ed93 7a00 	vldr	s14, [r3]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3304      	adds	r3, #4
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	edc3 7a00 	vstr	s15, [r3]
	T_gate[2]= T[2]+(T_gate[0]);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3308      	adds	r3, #8
 800168c:	ed93 7a00 	vldr	s14, [r3]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3308      	adds	r3, #8
 800169a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169e:	edc3 7a00 	vstr	s15, [r3]
	T_gate[3]= T[1]+T[2]+(T_gate[0]);
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3304      	adds	r3, #4
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	3308      	adds	r3, #8
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	330c      	adds	r3, #12
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	edc3 7a00 	vstr	s15, [r3]


	if(sector == 1)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10e      	bne.n	80016ec <SVPWM+0x1e4>
	{
		S[0]=T_gate[3];
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	601a      	str	r2, [r3, #0]
		S[1]=T_gate[2];
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	3304      	adds	r3, #4
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6892      	ldr	r2, [r2, #8]
 80016de:	601a      	str	r2, [r3, #0]
		S[2]=T_gate[0];
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	3308      	adds	r3, #8
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e058      	b.n	800179e <SVPWM+0x296>
	}
	else if(sector == 2)
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d10e      	bne.n	8001710 <SVPWM+0x208>
	{
		S[0]=T_gate[1];
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	601a      	str	r2, [r3, #0]
		S[1]=T_gate[3];
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3304      	adds	r3, #4
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68d2      	ldr	r2, [r2, #12]
 8001702:	601a      	str	r2, [r3, #0]
		S[2]=T_gate[0];
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	3308      	adds	r3, #8
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e046      	b.n	800179e <SVPWM+0x296>
	}
	else if(sector == 3)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d10e      	bne.n	8001734 <SVPWM+0x22c>
	{
		S[0]=T_gate[0];
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	601a      	str	r2, [r3, #0]
		S[1]=T_gate[3];
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	3304      	adds	r3, #4
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68d2      	ldr	r2, [r2, #12]
 8001726:	601a      	str	r2, [r3, #0]
		S[2]=T_gate[2];
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	3308      	adds	r3, #8
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6892      	ldr	r2, [r2, #8]
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e034      	b.n	800179e <SVPWM+0x296>
	}
	else if(sector == 4)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b04      	cmp	r3, #4
 8001738:	d10e      	bne.n	8001758 <SVPWM+0x250>
	{
		S[0]=T_gate[0];
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	601a      	str	r2, [r3, #0]
		S[1]=T_gate[1];
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3304      	adds	r3, #4
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6852      	ldr	r2, [r2, #4]
 800174a:	601a      	str	r2, [r3, #0]
		S[2]=T_gate[3];
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3308      	adds	r3, #8
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68d2      	ldr	r2, [r2, #12]
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e022      	b.n	800179e <SVPWM+0x296>
	}
	else if(sector == 5)
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d10e      	bne.n	800177c <SVPWM+0x274>
	{
		S[0]=T_gate[2];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	601a      	str	r2, [r3, #0]
		S[1]=T_gate[0];
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3304      	adds	r3, #4
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	601a      	str	r2, [r3, #0]
		S[2]=T_gate[3];
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	3308      	adds	r3, #8
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	68d2      	ldr	r2, [r2, #12]
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e010      	b.n	800179e <SVPWM+0x296>
	}
	else if(sector == 6)
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b06      	cmp	r3, #6
 8001780:	d10d      	bne.n	800179e <SVPWM+0x296>
	{
		S[0]=T_gate[3];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	601a      	str	r2, [r3, #0]
		S[1]=T_gate[0];
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3304      	adds	r3, #4
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	601a      	str	r2, [r3, #0]
		S[2]=T_gate[1];
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	3308      	adds	r3, #8
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6852      	ldr	r2, [r2, #4]
 800179c:	601a      	str	r2, [r3, #0]
	}
	else{}


	sv_S1=S[0];
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <SVPWM+0x2b8>)
 80017a4:	6013      	str	r3, [r2, #0]
	sv_S2=S[1];
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <SVPWM+0x2bc>)
 80017ac:	6013      	str	r3, [r2, #0]
	sv_S3=S[2];
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <SVPWM+0x2c0>)
 80017b4:	6013      	str	r3, [r2, #0]




}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017c0:	2000014c 	.word	0x2000014c
 80017c4:	20000128 	.word	0x20000128
 80017c8:	20000124 	.word	0x20000124
 80017cc:	58e21966 	.word	0x58e21966
 80017d0:	402bb717 	.word	0x402bb717
 80017d4:	c985f06f 	.word	0xc985f06f
 80017d8:	3ff0c154 	.word	0x3ff0c154

080017dc <HAL_ADCEx_InjectedConvCpltCallback>:


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]


	z++;
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a2b      	ldr	r2, [pc, #172]	; (8001898 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 80017ec:	6013      	str	r3, [r2, #0]
	adc_measure[0]= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80017ee:	2109      	movs	r1, #9
 80017f0:	482a      	ldr	r0, [pc, #168]	; (800189c <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 80017f2:	f002 f8ab 	bl	800394c <HAL_ADCEx_InjectedGetValue>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 80017fa:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 80017fc:	bf00      	nop
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a25      	ldr	r2, [pc, #148]	; (800189c <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f5      	bne.n	80017fe <HAL_ADCEx_InjectedConvCpltCallback+0x22>
    adc_measure[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001812:	f240 110f 	movw	r1, #271	; 0x10f
 8001816:	4821      	ldr	r0, [pc, #132]	; (800189c <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8001818:	f002 f898 	bl	800394c <HAL_ADCEx_InjectedGetValue>
 800181c:	4602      	mov	r2, r0
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8001820:	605a      	str	r2, [r3, #4]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8001822:	bf00      	nop
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f5      	bne.n	8001824 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
	adc_measure[2] =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001838:	2109      	movs	r1, #9
 800183a:	481a      	ldr	r0, [pc, #104]	; (80018a4 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 800183c:	f002 f886 	bl	800394c <HAL_ADCEx_InjectedGetValue>
 8001840:	4602      	mov	r2, r0
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8001844:	609a      	str	r2, [r3, #8]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8001846:	bf00      	nop
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f5      	bne.n	8001848 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
	adc_measure[3] =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 800185c:	f240 110f 	movw	r1, #271	; 0x10f
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8001862:	f002 f873 	bl	800394c <HAL_ADCEx_InjectedGetValue>
 8001866:	4602      	mov	r2, r0
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 800186a:	60da      	str	r2, [r3, #12]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 800186c:	bf00      	nop
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	f003 0320 	and.w	r3, r3, #32
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f5      	bne.n	800186e <HAL_ADCEx_InjectedConvCpltCallback+0x92>

	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001882:	4806      	ldr	r0, [pc, #24]	; (800189c <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8001884:	f001 ff7c 	bl	8003780 <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 800188a:	f001 ff79 	bl	8003780 <HAL_ADCEx_InjectedStart_IT>

}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000150 	.word	0x20000150
 800189c:	20000098 	.word	0x20000098
 80018a0:	20000130 	.word	0x20000130
 80018a4:	2000002c 	.word	0x2000002c

080018a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
	{



	}
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]



		}

	if(htim->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	f040 808c 	bne.w	80019ec <HAL_TIM_PeriodElapsedCallback+0x12c>
		{
		t=t+0.001;
 80018d4:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe01 	bl	80004e0 <__aeabi_f2d>
 80018de:	a346      	add	r3, pc, #280	; (adr r3, 80019f8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fc9e 	bl	8000224 <__adddf3>
 80018e8:	4603      	mov	r3, r0
 80018ea:	460c      	mov	r4, r1
 80018ec:	4618      	mov	r0, r3
 80018ee:	4621      	mov	r1, r4
 80018f0:	f7ff f8e8 	bl	8000ac4 <__aeabi_d2f>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80018f8:	601a      	str	r2, [r3, #0]
		Ia=arm_sin_f32( PI * t); //
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001a0c <HAL_TIM_PeriodElapsedCallback+0x14c>
 8001904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001908:	eeb0 0a67 	vmov.f32	s0, s15
 800190c:	f007 fed8 	bl	80096c0 <arm_sin_f32>
 8001910:	eef0 7a40 	vmov.f32	s15, s0
 8001914:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001916:	edc3 7a00 	vstr	s15, [r3]
		Ib=arm_sin_f32( ( PI *t) - 2.094395);  // 2/3*pi = 2.094395
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001a0c <HAL_TIM_PeriodElapsedCallback+0x14c>
 8001924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fdd8 	bl	80004e0 <__aeabi_f2d>
 8001930:	a333      	add	r3, pc, #204	; (adr r3, 8001a00 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fc73 	bl	8000220 <__aeabi_dsub>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	4618      	mov	r0, r3
 8001940:	4621      	mov	r1, r4
 8001942:	f7ff f8bf 	bl	8000ac4 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	ee00 3a10 	vmov	s0, r3
 800194c:	f007 feb8 	bl	80096c0 <arm_sin_f32>
 8001950:	eef0 7a40 	vmov.f32	s15, s0
 8001954:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
		arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	617a      	str	r2, [r7, #20]
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800196c:	60bb      	str	r3, [r7, #8]
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	601a      	str	r2, [r3, #0]

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8001974:	edd7 7a05 	vldr	s15, [r7, #20]
 8001978:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001a20 <HAL_TIM_PeriodElapsedCallback+0x160>
 800197c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001980:	edd7 7a04 	vldr	s15, [r7, #16]
 8001984:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001a24 <HAL_TIM_PeriodElapsedCallback+0x164>
 8001988:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	edc3 7a00 	vstr	s15, [r3]

		kat= atan2f(Ibeta,Ialpha);
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800199e:	ed93 7a00 	vldr	s14, [r3]
 80019a2:	eef0 0a47 	vmov.f32	s1, s14
 80019a6:	eeb0 0a67 	vmov.f32	s0, s15
 80019aa:	f007 ff41 	bl	8009830 <atan2f>
 80019ae:	eef0 7a40 	vmov.f32	s15, s0
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]


		 Angle_To_Sector(kat , &sector);
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	481b      	ldr	r0, [pc, #108]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019c0:	eeb0 0a67 	vmov.f32	s0, s15
 80019c4:	f7ff fce8 	bl	8001398 <Angle_To_Sector>

				  SVPWM(sector, kat , Vref, sv_T, sv_T_gate, sv_S);
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2d8      	uxtb	r0, r3
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80019d6:	ed93 7a00 	vldr	s14, [r3]
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80019dc:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80019de:	4917      	ldr	r1, [pc, #92]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80019e0:	eef0 0a47 	vmov.f32	s1, s14
 80019e4:	eeb0 0a67 	vmov.f32	s0, s15
 80019e8:	f7ff fd8e 	bl	8001508 <SVPWM>



		}

}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	f3af 8000 	nop.w
 80019f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019fc:	3f50624d 	.word	0x3f50624d
 8001a00:	2a6f3f53 	.word	0x2a6f3f53
 8001a04:	4000c152 	.word	0x4000c152
 8001a08:	20000108 	.word	0x20000108
 8001a0c:	40490fdb 	.word	0x40490fdb
 8001a10:	20000110 	.word	0x20000110
 8001a14:	20000168 	.word	0x20000168
 8001a18:	20000180 	.word	0x20000180
 8001a1c:	20000178 	.word	0x20000178
 8001a20:	3f13cd3a 	.word	0x3f13cd3a
 8001a24:	3f93cd3a 	.word	0x3f93cd3a
 8001a28:	20000104 	.word	0x20000104
 8001a2c:	2000016c 	.word	0x2000016c
 8001a30:	20000170 	.word	0x20000170
 8001a34:	20000188 	.word	0x20000188
 8001a38:	20000114 	.word	0x20000114
 8001a3c:	20000140 	.word	0x20000140

08001a40 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		//  TIM1->CCR2=TIM2->CCR2;
		//  TIM1->CCR3=TIM2->CCR2;
		}
	}

}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
	{
		//HAL_UART_Receive_IT(&huart2, &recive, 1);

	}
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a74:	f000 fe6f 	bl	8002756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a78:	f000 f8ac 	bl	8001bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7c:	f7ff fbb0 	bl	80011e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001a80:	f000 fad6 	bl	8002030 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001a84:	f000 fbfe 	bl	8002284 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001a88:	f000 fda4 	bl	80025d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001a8c:	f000 fbae 	bl	80021ec <MX_TIM2_Init>
  MX_ADC1_Init();
 8001a90:	f7ff f9e8 	bl	8000e64 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a94:	f7ff fa7a 	bl	8000f8c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8001a98:	f000 f90a 	bl	8001cb0 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001a9c:	f000 f936 	bl	8001d0c <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001aa0:	f000 f962 	bl	8001d68 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */

  TIM2->PSC=3;
 8001aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->ARR=39999;
 8001aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  Vref= sv_Vdc * sv_limit_max_voltage;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <main+0x134>)
 8001ab8:	4a3b      	ldr	r2, [pc, #236]	; (8001ba8 <main+0x138>)
 8001aba:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 8001abc:	483b      	ldr	r0, [pc, #236]	; (8001bac <main+0x13c>)
 8001abe:	f004 f8af 	bl	8005c20 <HAL_TIM_Base_Start_IT>

    start_up();
 8001ac2:	f7ff fbe7 	bl	8001294 <start_up>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8001ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ace:	f002 ff87 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <main+0x70>
	 	 		  tim1_ch1=1;
 8001ad8:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <main+0x140>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e002      	b.n	8001ae6 <main+0x76>
	 	 	  else
	 	 		  tim1_ch1=0;
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <main+0x140>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8001ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aea:	4832      	ldr	r0, [pc, #200]	; (8001bb4 <main+0x144>)
 8001aec:	f002 ff78 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <main+0x8e>
	 	 		  tim1_ch1n=1;
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <main+0x148>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e002      	b.n	8001b04 <main+0x94>
	 	 	  else
	 	 		  tim1_ch1n=0;
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <main+0x148>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8001b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0c:	f002 ff68 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <main+0xae>
	 	 		  tim1_ch2=1;
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <main+0x14c>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e002      	b.n	8001b24 <main+0xb4>
	 	 	  else
	 	 		  tim1_ch2=0;
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <main+0x14c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]

	  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8001b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f002 ff58 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <main+0xce>
	 	 		  tim1_ch2n=1;
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <main+0x150>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e002      	b.n	8001b44 <main+0xd4>
	 	 	  else
	 	 		  tim1_ch2n=0;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <main+0x150>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8001b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4c:	f002 ff48 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <main+0xee>
	 	 		  tim1_ch3=1;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <main+0x154>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e002      	b.n	8001b64 <main+0xf4>
	 	 	  else
	 	 		  tim1_ch3=0;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <main+0x154>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 8001b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b68:	4817      	ldr	r0, [pc, #92]	; (8001bc8 <main+0x158>)
 8001b6a:	f002 ff39 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <main+0x10c>
	 	 		  tim1_ch3n=1;
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <main+0x15c>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e002      	b.n	8001b82 <main+0x112>
	 	 	  else
	 	 		  tim1_ch3n=0;
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <main+0x15c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8001b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	f002 ff29 	bl	80049e0 <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <main+0x12c>
	 	 		  tim1_ch4=1;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <main+0x160>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e794      	b.n	8001ac6 <main+0x56>
	 	 	  else
	 	 		  tim1_ch4=0;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <main+0x160>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
	  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8001ba2:	e790      	b.n	8001ac6 <main+0x56>
 8001ba4:	20000170 	.word	0x20000170
 8001ba8:	415db8bb 	.word	0x415db8bb
 8001bac:	200002ec 	.word	0x200002ec
 8001bb0:	2000015c 	.word	0x2000015c
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	20000194 	.word	0x20000194
 8001bbc:	20000196 	.word	0x20000196
 8001bc0:	2000017c 	.word	0x2000017c
 8001bc4:	20000184 	.word	0x20000184
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	20000154 	.word	0x20000154
 8001bd0:	2000019c 	.word	0x2000019c

08001bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b0a4      	sub	sp, #144	; 0x90
 8001bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bde:	2238      	movs	r2, #56	; 0x38
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f007 fe1c 	bl	8009820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	2244      	movs	r2, #68	; 0x44
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 fe0e 	bl	8009820 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f002 ffeb 	bl	8004be0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c14:	2302      	movs	r3, #2
 8001c16:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001c20:	2350      	movs	r3, #80	; 0x50
 8001c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 f873 	bl	8004d28 <HAL_RCC_OscConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001c48:	f000 f82a 	bl	8001ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c50:	2303      	movs	r3, #3
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c64:	2107      	movs	r1, #7
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fb76 	bl	8005358 <HAL_RCC_ClockConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c72:	f000 f815 	bl	8001ca0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001c76:	f248 0302 	movw	r3, #32770	; 0x8002
 8001c7a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c80:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c86:	463b      	mov	r3, r7
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fd81 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c94:	f000 f804 	bl	8001ca0 <Error_Handler>
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3790      	adds	r7, #144	; 0x90
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001cb6:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <MX_OPAMP1_Init+0x58>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001cda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001ce2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_OPAMP1_Init+0x54>)
 8001cf0:	f002 fea6 	bl	8004a40 <HAL_OPAMP_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8001cfa:	f7ff ffd1 	bl	8001ca0 <Error_Handler>
  }

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000218 	.word	0x20000218
 8001d08:	40010300 	.word	0x40010300

08001d0c <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d12:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <MX_OPAMP2_Init+0x58>)
 8001d14:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d3e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_OPAMP2_Init+0x54>)
 8001d4c:	f002 fe78 	bl	8004a40 <HAL_OPAMP_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8001d56:	f7ff ffa3 	bl	8001ca0 <Error_Handler>
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200001a0 	.word	0x200001a0
 8001d64:	40010304 	.word	0x40010304

08001d68 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001d6e:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <MX_OPAMP3_Init+0x58>)
 8001d70:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001d7a:	2240      	movs	r2, #64	; 0x40
 8001d7c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001d9a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_OPAMP3_Init+0x54>)
 8001da8:	f002 fe4a 	bl	8004a40 <HAL_OPAMP_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8001db2:	f7ff ff75 	bl	8001ca0 <Error_Handler>
  }

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200001dc 	.word	0x200001dc
 8001dc0:	40010308 	.word	0x40010308

08001dc4 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2e      	ldr	r2, [pc, #184]	; (8001e9c <HAL_OPAMP_MspInit+0xd8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d119      	bne.n	8001e1a <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_OPAMP_MspInit+0xdc>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a2d      	ldr	r2, [pc, #180]	; (8001ea0 <HAL_OPAMP_MspInit+0xdc>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_OPAMP_MspInit+0xdc>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001dfe:	230e      	movs	r3, #14
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e02:	2303      	movs	r3, #3
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e14:	f002 fc62 	bl	80046dc <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001e18:	e03b      	b.n	8001e92 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <HAL_OPAMP_MspInit+0xe0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d119      	bne.n	8001e58 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_OPAMP_MspInit+0xdc>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_OPAMP_MspInit+0xdc>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_OPAMP_MspInit+0xdc>)
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e3c:	23e0      	movs	r3, #224	; 0xe0
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e40:	2303      	movs	r3, #3
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e52:	f002 fc43 	bl	80046dc <HAL_GPIO_Init>
}
 8001e56:	e01c      	b.n	8001e92 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_OPAMP_MspInit+0xe4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d117      	bne.n	8001e92 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_OPAMP_MspInit+0xdc>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_OPAMP_MspInit+0xdc>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_OPAMP_MspInit+0xdc>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4807      	ldr	r0, [pc, #28]	; (8001eac <HAL_OPAMP_MspInit+0xe8>)
 8001e8e:	f002 fc25 	bl	80046dc <HAL_GPIO_Init>
}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40010300 	.word	0x40010300
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010304 	.word	0x40010304
 8001ea8:	40010308 	.word	0x40010308
 8001eac:	48000400 	.word	0x48000400

08001eb0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebe:	6093      	str	r3, [r2, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_MspInit+0x44>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_MspInit+0x44>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <HAL_MspInit+0x44>)
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_MspInit+0x44>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <HAL_MspInit+0x44>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_MspInit+0x44>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001f06:	f7ff ffd3 	bl	8001eb0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <MemManage_Handler+0x4>

08001f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 fc46 	bl	80027fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <ADC1_2_IRQHandler+0x14>)
 8001f7a:	f000 ff1f 	bl	8002dbc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <ADC1_2_IRQHandler+0x18>)
 8001f80:	f000 ff1c 	bl	8002dbc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000098 	.word	0x20000098
 8001f8c:	2000002c 	.word	0x2000002c

08001f90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f96:	f004 f8e0 	bl	800615a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200002a0 	.word	0x200002a0

08001fa4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001faa:	f004 f8d6 	bl	800615a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200002a0 	.word	0x200002a0

08001fb8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <TIM1_CC_IRQHandler+0x10>)
 8001fbe:	f004 f8cc 	bl	800615a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200002a0 	.word	0x200002a0

08001fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <TIM2_IRQHandler+0x10>)
 8001fd2:	f004 f8c2 	bl	800615a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200002ec 	.word	0x200002ec

08001fe0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <USART2_IRQHandler+0x10>)
 8001fe6:	f005 fbc1 	bl	800776c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000338 	.word	0x20000338

08001ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ff8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ffc:	f002 fd08 	bl	8004a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}

08002004 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <SystemInit+0x28>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	4a07      	ldr	r2, [pc, #28]	; (800202c <SystemInit+0x28>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <SystemInit+0x28>)
 800201a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800201e:	609a      	str	r2, [r3, #8]
#endif
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b09c      	sub	sp, #112	; 0x70
 8002034:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002050:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
 8002060:	615a      	str	r2, [r3, #20]
 8002062:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	2234      	movs	r2, #52	; 0x34
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f007 fbd8 	bl	8009820 <memset>

  htim1.Instance = TIM1;
 8002070:	4b5c      	ldr	r3, [pc, #368]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 8002072:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <MX_TIM1_Init+0x1b8>)
 8002074:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002076:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 800207e:	2220      	movs	r2, #32
 8002080:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002082:	4b58      	ldr	r3, [pc, #352]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002088:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800208e:	4b55      	ldr	r3, [pc, #340]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 8002090:	2201      	movs	r2, #1
 8002092:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800209a:	4852      	ldr	r0, [pc, #328]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 800209c:	f003 fd68 	bl	8005b70 <HAL_TIM_Base_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020a6:	f7ff fdfb 	bl	8001ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ae:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020b4:	4619      	mov	r1, r3
 80020b6:	484b      	ldr	r0, [pc, #300]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 80020b8:	f004 fade 	bl	8006678 <HAL_TIM_ConfigClockSource>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020c2:	f7ff fded 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020c6:	4847      	ldr	r0, [pc, #284]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 80020c8:	f003 fde0 	bl	8005c8c <HAL_TIM_PWM_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020d2:	f7ff fde5 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80020d6:	2370      	movs	r3, #112	; 0x70
 80020d8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020e6:	4619      	mov	r1, r3
 80020e8:	483e      	ldr	r0, [pc, #248]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 80020ea:	f005 f889 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80020f4:	f7ff fdd4 	bl	8001ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f8:	2360      	movs	r3, #96	; 0x60
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002104:	2300      	movs	r3, #0
 8002106:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002114:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002118:	2200      	movs	r2, #0
 800211a:	4619      	mov	r1, r3
 800211c:	4831      	ldr	r0, [pc, #196]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 800211e:	f004 f99b 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002128:	f7ff fdba 	bl	8001ca0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002130:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002134:	2204      	movs	r2, #4
 8002136:	4619      	mov	r1, r3
 8002138:	482a      	ldr	r0, [pc, #168]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 800213a:	f004 f98d 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002144:	f7ff fdac 	bl	8001ca0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800214c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002150:	2208      	movs	r2, #8
 8002152:	4619      	mov	r1, r3
 8002154:	4823      	ldr	r0, [pc, #140]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 8002156:	f004 f97f 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8002160:	f7ff fd9e 	bl	8001ca0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002168:	2300      	movs	r3, #0
 800216a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800216c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002170:	220c      	movs	r2, #12
 8002172:	4619      	mov	r1, r3
 8002174:	481b      	ldr	r0, [pc, #108]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 8002176:	f004 f96f 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8002180:	f7ff fd8e 	bl	8001ca0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002188:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800218a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800218e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8002194:	2344      	movs	r3, #68	; 0x44
 8002196:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800219c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 80021b4:	2303      	movs	r3, #3
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	4807      	ldr	r0, [pc, #28]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 80021c6:	f005 f89d 	bl	8007304 <HAL_TIMEx_ConfigBreakDeadTime>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM1_Init+0x1a4>
  {
    Error_Handler();
 80021d0:	f7ff fd66 	bl	8001ca0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <MX_TIM1_Init+0x1b4>)
 80021d6:	f000 f975 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 80021da:	bf00      	nop
 80021dc:	3770      	adds	r7, #112	; 0x70
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200002a0 	.word	0x200002a0
 80021e8:	40012c00 	.word	0x40012c00

080021ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f2:	f107 0310 	add.w	r3, r7, #16
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <MX_TIM2_Init+0x94>)
 800220c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002210:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <MX_TIM2_Init+0x94>)
 8002214:	2200      	movs	r2, #0
 8002216:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <MX_TIM2_Init+0x94>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <MX_TIM2_Init+0x94>)
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <MX_TIM2_Init+0x94>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_TIM2_Init+0x94>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002230:	4813      	ldr	r0, [pc, #76]	; (8002280 <MX_TIM2_Init+0x94>)
 8002232:	f003 fc9d 	bl	8005b70 <HAL_TIM_Base_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800223c:	f7ff fd30 	bl	8001ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002244:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002246:	f107 0310 	add.w	r3, r7, #16
 800224a:	4619      	mov	r1, r3
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <MX_TIM2_Init+0x94>)
 800224e:	f004 fa13 	bl	8006678 <HAL_TIM_ConfigClockSource>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002258:	f7ff fd22 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_TIM2_Init+0x94>)
 800226a:	f004 ffc9 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002274:	f7ff fd14 	bl	8001ca0 <Error_Handler>
  }

}
 8002278:	bf00      	nop
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200002ec 	.word	0x200002ec

08002284 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	2224      	movs	r2, #36	; 0x24
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f007 fac4 	bl	8009820 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <MX_TIM4_Init+0xa0>)
 80022a4:	4a20      	ldr	r2, [pc, #128]	; (8002328 <MX_TIM4_Init+0xa4>)
 80022a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <MX_TIM4_Init+0xa0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_TIM4_Init+0xa0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <MX_TIM4_Init+0xa0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_TIM4_Init+0xa0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <MX_TIM4_Init+0xa0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <MX_TIM4_Init+0xa8>)
 80022c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022ce:	2301      	movs	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022de:	2301      	movs	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	4619      	mov	r1, r3
 80022f0:	480c      	ldr	r0, [pc, #48]	; (8002324 <MX_TIM4_Init+0xa0>)
 80022f2:	f003 fdff 	bl	8005ef4 <HAL_TIM_Encoder_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80022fc:	f7ff fcd0 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002308:	463b      	mov	r3, r7
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_TIM4_Init+0xa0>)
 800230e:	f004 ff77 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002318:	f7ff fcc2 	bl	8001ca0 <Error_Handler>
  }

}
 800231c:	bf00      	nop
 800231e:	3730      	adds	r7, #48	; 0x30
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000254 	.word	0x20000254
 8002328:	40000800 	.word	0x40000800
 800232c:	00010006 	.word	0x00010006

08002330 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a31      	ldr	r2, [pc, #196]	; (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d124      	bne.n	800239c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002352:	4b31      	ldr	r3, [pc, #196]	; (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	4a30      	ldr	r2, [pc, #192]	; (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 8002358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800235c:	6613      	str	r3, [r2, #96]	; 0x60
 800235e:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2101      	movs	r1, #1
 800236e:	2019      	movs	r0, #25
 8002370:	f002 f919 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002374:	2019      	movs	r0, #25
 8002376:	f002 f930 	bl	80045da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2105      	movs	r1, #5
 800237e:	201a      	movs	r0, #26
 8002380:	f002 f911 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002384:	201a      	movs	r0, #26
 8002386:	f002 f928 	bl	80045da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2103      	movs	r1, #3
 800238e:	201b      	movs	r0, #27
 8002390:	f002 f909 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002394:	201b      	movs	r0, #27
 8002396:	f002 f920 	bl	80045da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800239a:	e036      	b.n	800240a <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d131      	bne.n	800240a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6593      	str	r3, [r2, #88]	; 0x58
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	4a15      	ldr	r2, [pc, #84]	; (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 80023d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e4:	2303      	movs	r3, #3
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023e8:	2301      	movs	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	4619      	mov	r1, r3
 80023f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f6:	f002 f971 	bl	80046dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	201c      	movs	r0, #28
 8002400:	f002 f8d1 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002404:	201c      	movs	r0, #28
 8002406:	f002 f8e8 	bl	80045da <HAL_NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40021000 	.word	0x40021000

0800241c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_TIM_Encoder_MspInit+0x9c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d138      	bne.n	80024b0 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_TIM_Encoder_MspInit+0xa0>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_TIM_Encoder_MspInit+0xa0>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_TIM_Encoder_MspInit+0xa0>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_TIM_Encoder_MspInit+0xa0>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_TIM_Encoder_MspInit+0xa0>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_TIM_Encoder_MspInit+0xa0>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 800246e:	23c0      	movs	r3, #192	; 0xc0
 8002470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002476:	2302      	movs	r3, #2
 8002478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247a:	2302      	movs	r3, #2
 800247c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800247e:	2302      	movs	r3, #2
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	4619      	mov	r1, r3
 8002488:	480d      	ldr	r0, [pc, #52]	; (80024c0 <HAL_TIM_Encoder_MspInit+0xa4>)
 800248a:	f002 f927 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 800248e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002498:	2301      	movs	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800249c:	2302      	movs	r3, #2
 800249e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024a0:	2302      	movs	r3, #2
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <HAL_TIM_Encoder_MspInit+0xa4>)
 80024ac:	f002 f916 	bl	80046dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024b0:	bf00      	nop
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40000800 	.word	0x40000800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	48000400 	.word	0x48000400

080024c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a38      	ldr	r2, [pc, #224]	; (80025c4 <HAL_TIM_MspPostInit+0x100>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d169      	bne.n	80025ba <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <HAL_TIM_MspPostInit+0x104>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a37      	ldr	r2, [pc, #220]	; (80025c8 <HAL_TIM_MspPostInit+0x104>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f2:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_TIM_MspPostInit+0x104>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <HAL_TIM_MspPostInit+0x104>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <HAL_TIM_MspPostInit+0x104>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250a:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <HAL_TIM_MspPostInit+0x104>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_TIM_MspPostInit+0x104>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <HAL_TIM_MspPostInit+0x104>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002522:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <HAL_TIM_MspPostInit+0x104>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800252e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002538:	2302      	movs	r3, #2
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002540:	2304      	movs	r3, #4
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	4820      	ldr	r0, [pc, #128]	; (80025cc <HAL_TIM_MspPostInit+0x108>)
 800254c:	f002 f8c6 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800255a:	2302      	movs	r3, #2
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800255e:	2302      	movs	r3, #2
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002562:	2304      	movs	r3, #4
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	4818      	ldr	r0, [pc, #96]	; (80025d0 <HAL_TIM_MspPostInit+0x10c>)
 800256e:	f002 f8b5 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8002572:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800257c:	2302      	movs	r3, #2
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002580:	2302      	movs	r3, #2
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002584:	2306      	movs	r3, #6
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002592:	f002 f8a3 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002596:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80025a8:	230b      	movs	r3, #11
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b6:	f002 f891 	bl	80046dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025ba:	bf00      	nop
 80025bc:	3728      	adds	r7, #40	; 0x28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	48000800 	.word	0x48000800
 80025d0:	48000400 	.word	0x48000400

080025d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <MX_USART2_UART_Init+0x90>)
 80025da:	4a23      	ldr	r2, [pc, #140]	; (8002668 <MX_USART2_UART_Init+0x94>)
 80025dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025de:	4b21      	ldr	r3, [pc, #132]	; (8002664 <MX_USART2_UART_Init+0x90>)
 80025e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <MX_USART2_UART_Init+0x90>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <MX_USART2_UART_Init+0x90>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <MX_USART2_UART_Init+0x90>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <MX_USART2_UART_Init+0x90>)
 80025fa:	220c      	movs	r2, #12
 80025fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <MX_USART2_UART_Init+0x90>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <MX_USART2_UART_Init+0x90>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <MX_USART2_UART_Init+0x90>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <MX_USART2_UART_Init+0x90>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <MX_USART2_UART_Init+0x90>)
 8002618:	2200      	movs	r2, #0
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800261c:	4811      	ldr	r0, [pc, #68]	; (8002664 <MX_USART2_UART_Init+0x90>)
 800261e:	f004 ff7c 	bl	800751a <HAL_UART_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002628:	f7ff fb3a 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800262c:	2100      	movs	r1, #0
 800262e:	480d      	ldr	r0, [pc, #52]	; (8002664 <MX_USART2_UART_Init+0x90>)
 8002630:	f006 ff61 	bl	80094f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800263a:	f7ff fb31 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800263e:	2100      	movs	r1, #0
 8002640:	4808      	ldr	r0, [pc, #32]	; (8002664 <MX_USART2_UART_Init+0x90>)
 8002642:	f006 ff96 	bl	8009572 <HAL_UARTEx_SetRxFifoThreshold>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800264c:	f7ff fb28 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002650:	4804      	ldr	r0, [pc, #16]	; (8002664 <MX_USART2_UART_Init+0x90>)
 8002652:	f006 ff17 	bl	8009484 <HAL_UARTEx_DisableFifoMode>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800265c:	f7ff fb20 	bl	8001ca0 <Error_Handler>
  }

}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000338 	.word	0x20000338
 8002668:	40004400 	.word	0x40004400

0800266c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <HAL_UART_MspInit+0x8c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d12f      	bne.n	80026ee <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_UART_MspInit+0x90>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <HAL_UART_MspInit+0x90>)
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_UART_MspInit+0x90>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_UART_MspInit+0x90>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	4a14      	ldr	r2, [pc, #80]	; (80026fc <HAL_UART_MspInit+0x90>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_UART_MspInit+0x90>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80026be:	2318      	movs	r3, #24
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ce:	2307      	movs	r3, #7
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	4809      	ldr	r0, [pc, #36]	; (8002700 <HAL_UART_MspInit+0x94>)
 80026da:	f001 ffff 	bl	80046dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 4, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2104      	movs	r1, #4
 80026e2:	2026      	movs	r0, #38	; 0x26
 80026e4:	f001 ff5f 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026e8:	2026      	movs	r0, #38	; 0x26
 80026ea:	f001 ff76 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40004400 	.word	0x40004400
 80026fc:	40021000 	.word	0x40021000
 8002700:	48000400 	.word	0x48000400

08002704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002704:	480d      	ldr	r0, [pc, #52]	; (800273c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002706:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002708:	480d      	ldr	r0, [pc, #52]	; (8002740 <LoopForever+0x6>)
  ldr r1, =_edata
 800270a:	490e      	ldr	r1, [pc, #56]	; (8002744 <LoopForever+0xa>)
  ldr r2, =_sidata
 800270c:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <LoopForever+0xe>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a0b      	ldr	r2, [pc, #44]	; (800274c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002720:	4c0b      	ldr	r4, [pc, #44]	; (8002750 <LoopForever+0x16>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800272e:	f7ff fc69 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002732:	f007 f851 	bl	80097d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002736:	f7ff f99b 	bl	8001a70 <main>

0800273a <LoopForever>:

LoopForever:
    b LoopForever
 800273a:	e7fe      	b.n	800273a <LoopForever>
  ldr   r0, =_estack
 800273c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002744:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002748:	0800a3bc 	.word	0x0800a3bc
  ldr r2, =_sbss
 800274c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002750:	200003c8 	.word	0x200003c8

08002754 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <COMP1_2_3_IRQHandler>

08002756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002760:	2003      	movs	r0, #3
 8002762:	f001 ff15 	bl	8004590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002766:	2000      	movs	r0, #0
 8002768:	f000 f80e 	bl	8002788 <HAL_InitTick>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	71fb      	strb	r3, [r7, #7]
 8002776:	e001      	b.n	800277c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002778:	f7ff fbaa 	bl	8001ed0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800277c:	79fb      	ldrb	r3, [r7, #7]

}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_InitTick+0x68>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d022      	beq.n	80027e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_InitTick+0x6c>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_InitTick+0x68>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 ff20 	bl	80045f6 <HAL_SYSTICK_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10f      	bne.n	80027dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	d809      	bhi.n	80027d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c2:	2200      	movs	r2, #0
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ca:	f001 feec 	bl	80045a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_InitTick+0x70>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e007      	b.n	80027e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e004      	b.n	80027e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e001      	b.n	80027e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_IncTick+0x1c>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_IncTick+0x20>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4413      	add	r3, r2
 800280a:	4a03      	ldr	r2, [pc, #12]	; (8002818 <HAL_IncTick+0x1c>)
 800280c:	6013      	str	r3, [r2, #0]
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	200003c4 	.word	0x200003c4
 800281c:	20000008 	.word	0x20000008

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	200003c4 	.word	0x200003c4

08002838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff ffee 	bl	8002820 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d004      	beq.n	800285c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_Delay+0x40>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285c:	bf00      	nop
 800285e:	f7ff ffdf 	bl	8002820 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	429a      	cmp	r2, r3
 800286c:	d8f7      	bhi.n	800285e <HAL_Delay+0x26>
  {
  }
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000008 	.word	0x20000008

0800287c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	609a      	str	r2, [r3, #8]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 031f 	and.w	r3, r3, #31
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002936:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6093      	str	r3, [r2, #8]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800295a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295e:	d101      	bne.n	8002964 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002982:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002986:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ae:	d101      	bne.n	80029b4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029fe:	f043 0202 	orr.w	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <LL_ADC_IsEnabled+0x18>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_ADC_IsEnabled+0x1a>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d101      	bne.n	8002a50 <LL_ADC_IsDisableOngoing+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_ADC_IsDisableOngoing+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d101      	bne.n	8002a76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d101      	bne.n	8002a9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e16b      	b.n	8002d9e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7fe fadb 	bl	8001090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff2c 	bl	800294a <LL_ADC_IsDeepPowerDownEnabled>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff12 	bl	8002926 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff47 	bl	800299a <LL_ADC_IsInternalRegulatorEnabled>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d113      	bne.n	8002b3a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ff2b 	bl	8002972 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b1c:	4ba2      	ldr	r3, [pc, #648]	; (8002da8 <HAL_ADC_Init+0x2fc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	4aa2      	ldr	r2, [pc, #648]	; (8002dac <HAL_ADC_Init+0x300>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff2b 	bl	800299a <LL_ADC_IsInternalRegulatorEnabled>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff77 	bl	8002a5e <LL_ADC_REG_IsConversionOngoing>
 8002b70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 8106 	bne.w	8002d8c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 8102 	bne.w	8002d8c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b90:	f043 0202 	orr.w	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff38 	bl	8002a12 <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d111      	bne.n	8002bcc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bac:	f7ff ff31 	bl	8002a12 <LL_ADC_IsEnabled>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	487f      	ldr	r0, [pc, #508]	; (8002db0 <HAL_ADC_Init+0x304>)
 8002bb4:	f7ff ff2d 	bl	8002a12 <LL_ADC_IsEnabled>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	487b      	ldr	r0, [pc, #492]	; (8002db4 <HAL_ADC_Init+0x308>)
 8002bc8:	f7ff fe58 	bl	800287c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7f5b      	ldrb	r3, [r3, #29]
 8002bd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002bdc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002be2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d106      	bne.n	8002c08 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	045b      	lsls	r3, r3, #17
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d009      	beq.n	8002c24 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_ADC_Init+0x30c>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff03 	bl	8002a5e <LL_ADC_REG_IsConversionOngoing>
 8002c58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff10 	bl	8002a84 <LL_ADC_INJ_IsConversionOngoing>
 8002c64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d16d      	bne.n	8002d48 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d16a      	bne.n	8002d48 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c76:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c7e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c8e:	f023 0302 	bic.w	r3, r3, #2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	69b9      	ldr	r1, [r7, #24]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d017      	beq.n	8002cd4 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cbc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6911      	ldr	r1, [r2, #16]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cd2:	e013      	b.n	8002cfc <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ce2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d118      	bne.n	8002d38 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d1c:	4311      	orrs	r1, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d22:	4311      	orrs	r1, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
 8002d36:	e007      	b.n	8002d48 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10c      	bne.n	8002d6a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f023 010f 	bic.w	r1, r3, #15
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
 8002d68:	e007      	b.n	8002d7a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 020f 	bic.w	r2, r2, #15
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	f023 0303 	bic.w	r3, r3, #3
 8002d82:	f043 0201 	orr.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d8a:	e007      	b.n	8002d9c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	f043 0210 	orr.w	r2, r3, #16
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000000 	.word	0x20000000
 8002dac:	053e2d63 	.word	0x053e2d63
 8002db0:	50000100 	.word	0x50000100
 8002db4:	50000300 	.word	0x50000300
 8002db8:	fff04007 	.word	0xfff04007

08002dbc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd8:	4883      	ldr	r0, [pc, #524]	; (8002fe8 <HAL_ADC_IRQHandler+0x22c>)
 8002dda:	f7ff fd88 	bl	80028ee <LL_ADC_GetMultimode>
 8002dde:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d017      	beq.n	8002e1a <HAL_ADC_IRQHandler+0x5e>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d012      	beq.n	8002e1a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fded 	bl	80039ec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2202      	movs	r2, #2
 8002e18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <HAL_ADC_IRQHandler+0x72>
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8085 	beq.w	8002f44 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d07f      	beq.n	8002f44 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fd1e 	bl	80028a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d064      	beq.n	8002f36 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a5e      	ldr	r2, [pc, #376]	; (8002fec <HAL_ADC_IRQHandler+0x230>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d002      	beq.n	8002e7c <HAL_ADC_IRQHandler+0xc0>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	e001      	b.n	8002e80 <HAL_ADC_IRQHandler+0xc4>
 8002e7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d008      	beq.n	8002e9a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d002      	beq.n	8002e9a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b09      	cmp	r3, #9
 8002e98:	d104      	bne.n	8002ea4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	623b      	str	r3, [r7, #32]
 8002ea2:	e00d      	b.n	8002ec0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a50      	ldr	r2, [pc, #320]	; (8002fec <HAL_ADC_IRQHandler+0x230>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d002      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0xf8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	e001      	b.n	8002eb8 <HAL_ADC_IRQHandler+0xfc>
 8002eb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eb8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d135      	bne.n	8002f36 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d12e      	bne.n	8002f36 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fdbe 	bl	8002a5e <LL_ADC_REG_IsConversionOngoing>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d11a      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 020c 	bic.w	r2, r2, #12
 8002ef6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d112      	bne.n	8002f36 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f1c:	e00b      	b.n	8002f36 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	f043 0210 	orr.w	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f95a 	bl	80031f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	220c      	movs	r2, #12
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x19c>
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10b      	bne.n	8002f70 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 809e 	beq.w	80030a0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8098 	beq.w	80030a0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fc9b 	bl	80028c8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f92:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fc82 	bl	80028a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f9e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a11      	ldr	r2, [pc, #68]	; (8002fec <HAL_ADC_IRQHandler+0x230>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d002      	beq.n	8002fb0 <HAL_ADC_IRQHandler+0x1f4>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	e001      	b.n	8002fb4 <HAL_ADC_IRQHandler+0x1f8>
 8002fb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d008      	beq.n	8002fce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d002      	beq.n	8002fce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b07      	cmp	r3, #7
 8002fcc:	d104      	bne.n	8002fd8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	e011      	b.n	8002ffc <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a03      	ldr	r2, [pc, #12]	; (8002fec <HAL_ADC_IRQHandler+0x230>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d006      	beq.n	8002ff0 <HAL_ADC_IRQHandler+0x234>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	e005      	b.n	8002ff4 <HAL_ADC_IRQHandler+0x238>
 8002fe8:	50000300 	.word	0x50000300
 8002fec:	50000100 	.word	0x50000100
 8002ff0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ff4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003008:	2b00      	cmp	r3, #0
 800300a:	d142      	bne.n	8003092 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d03f      	beq.n	8003092 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003018:	2b00      	cmp	r3, #0
 800301a:	d13a      	bne.n	8003092 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d133      	bne.n	8003092 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d12e      	bne.n	8003092 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fd23 	bl	8002a84 <LL_ADC_INJ_IsConversionOngoing>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11a      	bne.n	800307a <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003052:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d112      	bne.n	8003092 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	65da      	str	r2, [r3, #92]	; 0x5c
 8003078:	e00b      	b.n	8003092 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307e:	f043 0210 	orr.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe fba2 	bl	80017dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2260      	movs	r2, #96	; 0x60
 800309e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d011      	beq.n	80030ce <HAL_ADC_IRQHandler+0x312>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00c      	beq.n	80030ce <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f89f 	bl	8003204 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <HAL_ADC_IRQHandler+0x342>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fc68 	bl	80039c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003104:	2b00      	cmp	r3, #0
 8003106:	d012      	beq.n	800312e <HAL_ADC_IRQHandler+0x372>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fc5a 	bl	80039d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800312c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d036      	beq.n	80031a6 <HAL_ADC_IRQHandler+0x3ea>
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	d031      	beq.n	80031a6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800314a:	2301      	movs	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
 800314e:	e014      	b.n	800317a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003156:	4825      	ldr	r0, [pc, #148]	; (80031ec <HAL_ADC_IRQHandler+0x430>)
 8003158:	f7ff fbd7 	bl	800290a <LL_ADC_GetMultiDMATransfer>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003162:	2301      	movs	r3, #1
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	e008      	b.n	800317a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003176:	2301      	movs	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	2b01      	cmp	r3, #1
 800317e:	d10e      	bne.n	800319e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	f043 0202 	orr.w	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f83d 	bl	8003218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2210      	movs	r2, #16
 80031a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d018      	beq.n	80031e2 <HAL_ADC_IRQHandler+0x426>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d013      	beq.n	80031e2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ca:	f043 0208 	orr.w	r2, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031da:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fbe7 	bl	80039b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031e2:	bf00      	nop
 80031e4:	3728      	adds	r7, #40	; 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	50000300 	.word	0x50000300

080031f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fbea 	bl	8002a12 <LL_ADC_IsEnabled>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d146      	bne.n	80032d2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <ADC_Enable+0xb0>)
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e032      	b.n	80032d4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fba5 	bl	80029c2 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003278:	f7ff fad2 	bl	8002820 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800327e:	e021      	b.n	80032c4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fbc4 	bl	8002a12 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fb94 	bl	80029c2 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800329a:	f7ff fac1 	bl	8002820 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d90d      	bls.n	80032c4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	f043 0210 	orr.w	r2, r3, #16
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b8:	f043 0201 	orr.w	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e007      	b.n	80032d4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d1d6      	bne.n	8003280 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	8000003f 	.word	0x8000003f

080032e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fba3 	bl	8002a38 <LL_ADC_IsDisableOngoing>
 80032f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fb8a 	bl	8002a12 <LL_ADC_IsEnabled>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d040      	beq.n	8003386 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d13d      	bne.n	8003386 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030d 	and.w	r3, r3, #13
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10c      	bne.n	8003332 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fb64 	bl	80029ea <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2203      	movs	r2, #3
 8003328:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800332a:	f7ff fa79 	bl	8002820 <HAL_GetTick>
 800332e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003330:	e022      	b.n	8003378 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e01c      	b.n	8003388 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800334e:	f7ff fa67 	bl	8002820 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d90d      	bls.n	8003378 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f043 0210 	orr.w	r2, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e007      	b.n	8003388 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e3      	bne.n	800334e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <LL_ADC_SetCommonPathInternalCh>:
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_ADC_GetCommonPathInternalCh>:
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <LL_ADC_SetOffset>:
{
 80033d4:	b490      	push	{r4, r7}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3360      	adds	r3, #96	; 0x60
 80033e6:	461a      	mov	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <LL_ADC_SetOffset+0x40>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	4313      	orrs	r3, r2
 8003402:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003406:	6023      	str	r3, [r4, #0]
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bc90      	pop	{r4, r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	03fff000 	.word	0x03fff000

08003418 <LL_ADC_GetOffsetChannel>:
{
 8003418:	b490      	push	{r4, r7}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3360      	adds	r3, #96	; 0x60
 8003426:	461a      	mov	r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bc90      	pop	{r4, r7}
 800343e:	4770      	bx	lr

08003440 <LL_ADC_SetOffsetState>:
{
 8003440:	b490      	push	{r4, r7}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3360      	adds	r3, #96	; 0x60
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4313      	orrs	r3, r2
 8003464:	6023      	str	r3, [r4, #0]
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bc90      	pop	{r4, r7}
 800346e:	4770      	bx	lr

08003470 <LL_ADC_SetOffsetSign>:
{
 8003470:	b490      	push	{r4, r7}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3360      	adds	r3, #96	; 0x60
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4313      	orrs	r3, r2
 8003494:	6023      	str	r3, [r4, #0]
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bc90      	pop	{r4, r7}
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_SetOffsetSaturation>:
{
 80034a0:	b490      	push	{r4, r7}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3360      	adds	r3, #96	; 0x60
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	6023      	str	r3, [r4, #0]
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc90      	pop	{r4, r7}
 80034ce:	4770      	bx	lr

080034d0 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	615a      	str	r2, [r3, #20]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <LL_ADC_INJ_GetTrigAuto>:
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <LL_ADC_SetChannelSamplingTime>:
{
 8003512:	b490      	push	{r4, r7}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3314      	adds	r3, #20
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	0e5b      	lsrs	r3, r3, #25
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	4413      	add	r3, r2
 8003530:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	0d1b      	lsrs	r3, r3, #20
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	2107      	movs	r1, #7
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	401a      	ands	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	0d1b      	lsrs	r3, r3, #20
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	4313      	orrs	r3, r2
 8003556:	6023      	str	r3, [r4, #0]
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bc90      	pop	{r4, r7}
 8003560:	4770      	bx	lr
	...

08003564 <LL_ADC_SetChannelSingleDiff>:
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	43db      	mvns	r3, r3
 800357e:	401a      	ands	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0318 	and.w	r3, r3, #24
 8003586:	4908      	ldr	r1, [pc, #32]	; (80035a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003588:	40d9      	lsrs	r1, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	400b      	ands	r3, r1
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	431a      	orrs	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	0007ffff 	.word	0x0007ffff

080035ac <LL_ADC_GetMultimode>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 031f 	and.w	r3, r3, #31
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_ADC_IsEnabled>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <LL_ADC_IsEnabled+0x18>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <LL_ADC_IsEnabled+0x1a>
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_ADC_StartCalibration>:
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800360a:	4313      	orrs	r3, r2
 800360c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	609a      	str	r2, [r3, #8]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_IsCalibrationOnGoing>:
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003634:	d101      	bne.n	800363a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_ADC_REG_IsConversionOngoing>:
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d101      	bne.n	8003660 <LL_ADC_REG_IsConversionOngoing+0x18>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_ADC_INJ_StartConversion>:
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800367e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003682:	f043 0208 	orr.w	r2, r3, #8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d101      	bne.n	80036ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e04d      	b.n	8003774 <HAL_ADCEx_Calibration_Start+0xb8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff fdfd 	bl	80032e0 <ADC_Disable>
 80036e6:	4603      	mov	r3, r0
 80036e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d136      	bne.n	800375e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036f8:	f023 0302 	bic.w	r3, r3, #2
 80036fc:	f043 0202 	orr.w	r2, r3, #2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff6f 	bl	80035ee <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003710:	e014      	b.n	800373c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3301      	adds	r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a18      	ldr	r2, [pc, #96]	; (800377c <HAL_ADCEx_Calibration_Start+0xc0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d90d      	bls.n	800373c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	f023 0312 	bic.w	r3, r3, #18
 8003728:	f043 0210 	orr.w	r2, r3, #16
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e01b      	b.n	8003774 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff6d 	bl	8003620 <LL_ADC_IsCalibrationOnGoing>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e2      	bne.n	8003712 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	f023 0303 	bic.w	r3, r3, #3
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	65da      	str	r2, [r3, #92]	; 0x5c
 800375c:	e005      	b.n	800376a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	f043 0210 	orr.w	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	0004de01 	.word	0x0004de01

08003780 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003788:	486e      	ldr	r0, [pc, #440]	; (8003944 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800378a:	f7ff ff0f 	bl	80035ac <LL_ADC_GetMultimode>
 800378e:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff7e 	bl	8003696 <LL_ADC_INJ_IsConversionOngoing>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0ca      	b.n	800393a <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037ae:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0b2      	b.n	800393a <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_ADCEx_InjectedStart_IT+0x62>
 80037de:	2302      	movs	r3, #2
 80037e0:	e0ab      	b.n	800393a <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fd1e 	bl	800322c <ADC_Enable>
 80037f0:	4603      	mov	r3, r0
 80037f2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 809a 	bne.w	8003930 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380c:	f023 0208 	bic.w	r2, r3, #8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	661a      	str	r2, [r3, #96]	; 0x60
 8003814:	e002      	b.n	800381c <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a44      	ldr	r2, [pc, #272]	; (8003948 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d002      	beq.n	8003840 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e001      	b.n	8003844 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8003840:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	4293      	cmp	r3, r2
 800384a:	d002      	beq.n	8003852 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2260      	movs	r2, #96	; 0x60
 8003864:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800388a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d110      	bne.n	80038b6 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0220 	bic.w	r2, r2, #32
 80038a2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b2:	605a      	str	r2, [r3, #4]
          break;
 80038b4:	e010      	b.n	80038d8 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c4:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0220 	orr.w	r2, r2, #32
 80038d4:	605a      	str	r2, [r3, #4]
          break;
 80038d6:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d002      	beq.n	80038e8 <HAL_ADCEx_InjectedStart_IT+0x168>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	e001      	b.n	80038ec <HAL_ADCEx_InjectedStart_IT+0x16c>
 80038e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d008      	beq.n	8003906 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d002      	beq.n	8003906 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b07      	cmp	r3, #7
 8003904:	d10d      	bne.n	8003922 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fdf3 	bl	80034f6 <LL_ADC_INJ_GetTrigAuto>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d110      	bne.n	8003938 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fea7 	bl	800366e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003920:	e00a      	b.n	8003938 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	65da      	str	r2, [r3, #92]	; 0x5c
 800392e:	e003      	b.n	8003938 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003938:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	50000300 	.word	0x50000300
 8003948:	50000100 	.word	0x50000100

0800394c <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f240 2215 	movw	r2, #533	; 0x215
 800395c:	4293      	cmp	r3, r2
 800395e:	d00e      	beq.n	800397e <HAL_ADCEx_InjectedGetValue+0x32>
 8003960:	f240 321b 	movw	r2, #795	; 0x31b
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_ADCEx_InjectedGetValue+0x26>
 8003968:	f240 120f 	movw	r2, #271	; 0x10f
 800396c:	4293      	cmp	r3, r2
 800396e:	d00c      	beq.n	800398a <HAL_ADCEx_InjectedGetValue+0x3e>
 8003970:	e011      	b.n	8003996 <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800397a:	60fb      	str	r3, [r7, #12]
      break;
 800397c:	e011      	b.n	80039a2 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	60fb      	str	r3, [r7, #12]
      break;
 8003988:	e00b      	b.n	80039a2 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003992:	60fb      	str	r3, [r7, #12]
      break;
 8003994:	e005      	b.n	80039a2 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399e:	60fb      	str	r3, [r7, #12]
      break;
 80039a0:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b0a8      	sub	sp, #160	; 0xa0
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003a24:	2302      	movs	r3, #2
 8003a26:	f000 bc39 	b.w	800429c <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d130      	bne.n	8003aa4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b09      	cmp	r3, #9
 8003a48:	d179      	bne.n	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d010      	beq.n	8003a74 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	0e9b      	lsrs	r3, r3, #26
 8003a58:	025b      	lsls	r3, r3, #9
 8003a5a:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003a66:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a72:	e007      	b.n	8003a84 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	0e9b      	lsrs	r3, r3, #26
 8003a7a:	025b      	lsls	r3, r3, #9
 8003a7c:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a8a:	4ba3      	ldr	r3, [pc, #652]	; (8003d18 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003a96:	430b      	orrs	r3, r1
 8003a98:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003aa0:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003aa2:	e04c      	b.n	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11d      	bne.n	8003ae8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003ad0:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003adc:	e004      	b.n	8003ae8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	0e9b      	lsrs	r3, r3, #26
 8003aee:	f003 021f 	and.w	r2, r3, #31
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0c:	1e5a      	subs	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b2e:	4b7a      	ldr	r3, [pc, #488]	; (8003d18 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fda7 	bl	8003696 <LL_ADC_INJ_IsConversionOngoing>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d124      	bne.n	8003b98 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d112      	bne.n	8003b7e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b68:	055a      	lsls	r2, r3, #21
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b70:	051b      	lsls	r3, r3, #20
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	60da      	str	r2, [r3, #12]
 8003b7c:	e00c      	b.n	8003b98 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b8e:	055a      	lsls	r2, r3, #21
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fd53 	bl	8003648 <LL_ADC_REG_IsConversionOngoing>
 8003ba2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fd73 	bl	8003696 <LL_ADC_INJ_IsConversionOngoing>
 8003bb0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f040 81d4 	bne.w	8003f66 <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 81cf 	bne.w	8003f66 <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d116      	bne.n	8003c06 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d108      	bne.n	8003bf4 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003bf0:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003bf2:	e01f      	b.n	8003c34 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003c02:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c04:	e016      	b.n	8003c34 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d109      	bne.n	8003c24 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	f043 0220 	orr.w	r2, r3, #32
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003c22:	e007      	b.n	8003c34 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003c32:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d110      	bne.n	8003c60 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	430b      	orrs	r3, r1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0202 	orr.w	r2, r2, #2
 8003c5c:	611a      	str	r2, [r3, #16]
 8003c5e:	e007      	b.n	8003c70 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0202 	bic.w	r2, r2, #2
 8003c6e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c78:	d10f      	bne.n	8003c9a <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2200      	movs	r2, #0
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7ff fc44 	bl	8003512 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fc1c 	bl	80034d0 <LL_ADC_SetSamplingTimeCommonConfig>
 8003c98:	e00e      	b.n	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f7ff fc33 	bl	8003512 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fc0c 	bl	80034d0 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	08db      	lsrs	r3, r3, #3
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d025      	beq.n	8003d26 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6919      	ldr	r1, [r3, #16]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cea:	f7ff fb73 	bl	80033d4 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6919      	ldr	r1, [r3, #16]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f7ff fbb8 	bl	8003470 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d14:	e003      	b.n	8003d1e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003d16:	bf00      	nop
 8003d18:	04104000 	.word	0x04104000
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f7ff fbbe 	bl	80034a0 <LL_ADC_SetOffsetSaturation>
 8003d24:	e11f      	b.n	8003f66 <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fb73 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fb68 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	0e9b      	lsrs	r3, r3, #26
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	e014      	b.n	8003d7c <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fb5d 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	0e9b      	lsrs	r3, r3, #26
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	e00a      	b.n	8003daa <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d106      	bne.n	8003dbc <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fb42 	bl	8003440 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fb28 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fb1d 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003dde:	4603      	mov	r3, r0
 8003de0:	0e9b      	lsrs	r3, r3, #26
 8003de2:	f003 021f 	and.w	r2, r3, #31
 8003de6:	e010      	b.n	8003e0a <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fb12 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003df4:	4603      	mov	r3, r0
 8003df6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d105      	bne.n	8003e22 <HAL_ADCEx_InjectedConfigChannel+0x422>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	0e9b      	lsrs	r3, r3, #26
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	e00a      	b.n	8003e38 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8003e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d106      	bne.n	8003e4a <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2101      	movs	r1, #1
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fafb 	bl	8003440 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fae1 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <HAL_ADCEx_InjectedConfigChannel+0x476>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fad6 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	0e9b      	lsrs	r3, r3, #26
 8003e70:	f003 021f 	and.w	r2, r3, #31
 8003e74:	e010      	b.n	8003e98 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff facb 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003e82:	4603      	mov	r3, r0
 8003e84:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	0e9b      	lsrs	r3, r3, #26
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	e00a      	b.n	8003ec6 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d106      	bne.n	8003ed8 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fab4 	bl	8003440 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2103      	movs	r1, #3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fa9a 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_ADCEx_InjectedConfigChannel+0x504>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2103      	movs	r1, #3
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fa8f 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	0e9b      	lsrs	r3, r3, #26
 8003efe:	f003 021f 	and.w	r2, r3, #31
 8003f02:	e010      	b.n	8003f26 <HAL_ADCEx_InjectedConfigChannel+0x526>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2103      	movs	r1, #3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fa84 	bl	8003418 <LL_ADC_GetOffsetChannel>
 8003f10:	4603      	mov	r3, r0
 8003f12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8003f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <HAL_ADCEx_InjectedConfigChannel+0x53e>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	e00a      	b.n	8003f54 <HAL_ADCEx_InjectedConfigChannel+0x554>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d106      	bne.n	8003f66 <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2103      	movs	r1, #3
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fa6d 	bl	8003440 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fb2c 	bl	80035c8 <LL_ADC_IsEnabled>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 810c 	bne.w	8004190 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	461a      	mov	r2, r3
 8003f86:	f7ff faed 	bl	8003564 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4aab      	ldr	r2, [pc, #684]	; (800423c <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	f040 80fd 	bne.w	8004190 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	0e9b      	lsrs	r3, r3, #26
 8003fac:	3301      	adds	r3, #1
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	bf94      	ite	ls
 8003fb6:	2301      	movls	r3, #1
 8003fb8:	2300      	movhi	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	e012      	b.n	8003fe4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc6:	fa93 f3a3 	rbit	r3, r3
 8003fca:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	2b09      	cmp	r3, #9
 8003fdc:	bf94      	ite	ls
 8003fde:	2301      	movls	r3, #1
 8003fe0:	2300      	movhi	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d064      	beq.n	80040b2 <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	0e9b      	lsrs	r3, r3, #26
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	069b      	lsls	r3, r3, #26
 8003ffe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004002:	e00e      	b.n	8004022 <HAL_ADCEx_InjectedConfigChannel+0x622>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	fab3 f383 	clz	r3, r3
 8004018:	b2db      	uxtb	r3, r3
 800401a:	3301      	adds	r3, #1
 800401c:	069b      	lsls	r3, r3, #26
 800401e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <HAL_ADCEx_InjectedConfigChannel+0x642>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0e9b      	lsrs	r3, r3, #26
 8004034:	3301      	adds	r3, #1
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2101      	movs	r1, #1
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	e010      	b.n	8004064 <HAL_ADCEx_InjectedConfigChannel+0x664>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2101      	movs	r1, #1
 8004060:	fa01 f303 	lsl.w	r3, r1, r3
 8004064:	ea42 0103 	orr.w	r1, r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <HAL_ADCEx_InjectedConfigChannel+0x68a>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	0e9b      	lsrs	r3, r3, #26
 800407a:	3301      	adds	r3, #1
 800407c:	f003 021f 	and.w	r2, r3, #31
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	051b      	lsls	r3, r3, #20
 8004088:	e011      	b.n	80040ae <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	3301      	adds	r3, #1
 80040a2:	f003 021f 	and.w	r2, r3, #31
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	051b      	lsls	r3, r3, #20
 80040ae:	430b      	orrs	r3, r1
 80040b0:	e069      	b.n	8004186 <HAL_ADCEx_InjectedConfigChannel+0x786>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0e9b      	lsrs	r3, r3, #26
 80040c4:	3301      	adds	r3, #1
 80040c6:	069b      	lsls	r3, r3, #26
 80040c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040cc:	e00e      	b.n	80040ec <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	623b      	str	r3, [r7, #32]
  return result;
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	069b      	lsls	r3, r3, #26
 80040e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_ADCEx_InjectedConfigChannel+0x70c>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	0e9b      	lsrs	r3, r3, #26
 80040fe:	3301      	adds	r3, #1
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2101      	movs	r1, #1
 8004106:	fa01 f303 	lsl.w	r3, r1, r3
 800410a:	e010      	b.n	800412e <HAL_ADCEx_InjectedConfigChannel+0x72e>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	61bb      	str	r3, [r7, #24]
  return result;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	3301      	adds	r3, #1
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	ea42 0103 	orr.w	r1, r2, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10d      	bne.n	800415a <HAL_ADCEx_InjectedConfigChannel+0x75a>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	0e9b      	lsrs	r3, r3, #26
 8004144:	3301      	adds	r3, #1
 8004146:	f003 021f 	and.w	r2, r3, #31
 800414a:	4613      	mov	r3, r2
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4413      	add	r3, r2
 8004150:	3b1e      	subs	r3, #30
 8004152:	051b      	lsls	r3, r3, #20
 8004154:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004158:	e014      	b.n	8004184 <HAL_ADCEx_InjectedConfigChannel+0x784>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	613b      	str	r3, [r7, #16]
  return result;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	3301      	adds	r3, #1
 8004172:	f003 021f 	and.w	r2, r3, #31
 8004176:	4613      	mov	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	3b1e      	subs	r3, #30
 800417e:	051b      	lsls	r3, r3, #20
 8004180:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004184:	430b      	orrs	r3, r1
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	6892      	ldr	r2, [r2, #8]
 800418a:	4619      	mov	r1, r3
 800418c:	f7ff f9c1 	bl	8003512 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d079      	beq.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800419c:	4829      	ldr	r0, [pc, #164]	; (8004244 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800419e:	f7ff f90a 	bl	80033b6 <LL_ADC_GetCommonPathInternalCh>
 80041a2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a27      	ldr	r2, [pc, #156]	; (8004248 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a25      	ldr	r2, [pc, #148]	; (800424c <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d126      	bne.n	8004208 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d120      	bne.n	8004208 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ce:	d15f      	bne.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041d8:	4619      	mov	r1, r3
 80041da:	481a      	ldr	r0, [pc, #104]	; (8004244 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80041dc:	f7ff f8d8 	bl	8003390 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	099a      	lsrs	r2, r3, #6
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 80041f8:	e002      	b.n	8004200 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f9      	bne.n	80041fa <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004206:	e043      	b.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a12      	ldr	r2, [pc, #72]	; (8004258 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d126      	bne.n	8004260 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d120      	bne.n	8004260 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a0e      	ldr	r2, [pc, #56]	; (800425c <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d033      	beq.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800422c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004230:	4619      	mov	r1, r3
 8004232:	4804      	ldr	r0, [pc, #16]	; (8004244 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8004234:	f7ff f8ac 	bl	8003390 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004238:	e02a      	b.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x890>
 800423a:	bf00      	nop
 800423c:	407f0000 	.word	0x407f0000
 8004240:	80080000 	.word	0x80080000
 8004244:	50000300 	.word	0x50000300
 8004248:	c3210000 	.word	0xc3210000
 800424c:	90c00010 	.word	0x90c00010
 8004250:	20000000 	.word	0x20000000
 8004254:	053e2d63 	.word	0x053e2d63
 8004258:	c7520000 	.word	0xc7520000
 800425c:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0f      	ldr	r2, [pc, #60]	; (80042a4 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d112      	bne.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800426a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10c      	bne.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a0b      	ldr	r2, [pc, #44]	; (80042a8 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004288:	4619      	mov	r1, r3
 800428a:	4808      	ldr	r0, [pc, #32]	; (80042ac <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 800428c:	f7ff f880 	bl	8003390 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004298:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800429c:	4618      	mov	r0, r3
 800429e:	37a0      	adds	r7, #160	; 0xa0
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	cb840000 	.word	0xcb840000
 80042a8:	50000100 	.word	0x50000100
 80042ac:	50000300 	.word	0x50000300

080042b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b0a1      	sub	sp, #132	; 0x84
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e087      	b.n	80043de <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042de:	d102      	bne.n	80042e6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80042e0:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	e001      	b.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e06a      	b.n	80043de <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f99c 	bl	8003648 <LL_ADC_REG_IsConversionOngoing>
 8004310:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff f996 	bl	8003648 <LL_ADC_REG_IsConversionOngoing>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d14c      	bne.n	80043bc <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004324:	2b00      	cmp	r3, #0
 8004326:	d149      	bne.n	80043bc <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004328:	4b30      	ldr	r3, [pc, #192]	; (80043ec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800432a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d028      	beq.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004346:	035b      	lsls	r3, r3, #13
 8004348:	430b      	orrs	r3, r1
 800434a:	431a      	orrs	r2, r3
 800434c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004350:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004354:	f7ff f938 	bl	80035c8 <LL_ADC_IsEnabled>
 8004358:	4604      	mov	r4, r0
 800435a:	4823      	ldr	r0, [pc, #140]	; (80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800435c:	f7ff f934 	bl	80035c8 <LL_ADC_IsEnabled>
 8004360:	4603      	mov	r3, r0
 8004362:	4323      	orrs	r3, r4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d133      	bne.n	80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004370:	f023 030f 	bic.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	6811      	ldr	r1, [r2, #0]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	6892      	ldr	r2, [r2, #8]
 800437c:	430a      	orrs	r2, r1
 800437e:	431a      	orrs	r2, r3
 8004380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004382:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004384:	e024      	b.n	80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800438e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004390:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004392:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004396:	f7ff f917 	bl	80035c8 <LL_ADC_IsEnabled>
 800439a:	4604      	mov	r4, r0
 800439c:	4812      	ldr	r0, [pc, #72]	; (80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800439e:	f7ff f913 	bl	80035c8 <LL_ADC_IsEnabled>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4323      	orrs	r3, r4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d112      	bne.n	80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043b2:	f023 030f 	bic.w	r3, r3, #15
 80043b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80043b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043ba:	e009      	b.n	80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80043ce:	e000      	b.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80043da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3784      	adds	r7, #132	; 0x84
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}
 80043e6:	bf00      	nop
 80043e8:	50000100 	.word	0x50000100
 80043ec:	50000300 	.word	0x50000300

080043f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <__NVIC_SetPriorityGrouping+0x44>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800440c:	4013      	ands	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800441c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004422:	4a04      	ldr	r2, [pc, #16]	; (8004434 <__NVIC_SetPriorityGrouping+0x44>)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	60d3      	str	r3, [r2, #12]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <__NVIC_GetPriorityGrouping+0x18>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	0a1b      	lsrs	r3, r3, #8
 8004442:	f003 0307 	and.w	r3, r3, #7
}
 8004446:	4618      	mov	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004462:	2b00      	cmp	r3, #0
 8004464:	db0b      	blt.n	800447e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	4907      	ldr	r1, [pc, #28]	; (800448c <__NVIC_EnableIRQ+0x38>)
 800446e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2001      	movs	r0, #1
 8004476:	fa00 f202 	lsl.w	r2, r0, r2
 800447a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000e100 	.word	0xe000e100

08004490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	6039      	str	r1, [r7, #0]
 800449a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800449c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	db0a      	blt.n	80044ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	490c      	ldr	r1, [pc, #48]	; (80044dc <__NVIC_SetPriority+0x4c>)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	0112      	lsls	r2, r2, #4
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	440b      	add	r3, r1
 80044b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044b8:	e00a      	b.n	80044d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	4908      	ldr	r1, [pc, #32]	; (80044e0 <__NVIC_SetPriority+0x50>)
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	3b04      	subs	r3, #4
 80044c8:	0112      	lsls	r2, r2, #4
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	440b      	add	r3, r1
 80044ce:	761a      	strb	r2, [r3, #24]
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000e100 	.word	0xe000e100
 80044e0:	e000ed00 	.word	0xe000ed00

080044e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b089      	sub	sp, #36	; 0x24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f1c3 0307 	rsb	r3, r3, #7
 80044fe:	2b04      	cmp	r3, #4
 8004500:	bf28      	it	cs
 8004502:	2304      	movcs	r3, #4
 8004504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3304      	adds	r3, #4
 800450a:	2b06      	cmp	r3, #6
 800450c:	d902      	bls.n	8004514 <NVIC_EncodePriority+0x30>
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3b03      	subs	r3, #3
 8004512:	e000      	b.n	8004516 <NVIC_EncodePriority+0x32>
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004518:	f04f 32ff 	mov.w	r2, #4294967295
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43da      	mvns	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	401a      	ands	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800452c:	f04f 31ff 	mov.w	r1, #4294967295
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	43d9      	mvns	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800453c:	4313      	orrs	r3, r2
         );
}
 800453e:	4618      	mov	r0, r3
 8004540:	3724      	adds	r7, #36	; 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3b01      	subs	r3, #1
 8004558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800455c:	d301      	bcc.n	8004562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800455e:	2301      	movs	r3, #1
 8004560:	e00f      	b.n	8004582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <SysTick_Config+0x40>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3b01      	subs	r3, #1
 8004568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800456a:	210f      	movs	r1, #15
 800456c:	f04f 30ff 	mov.w	r0, #4294967295
 8004570:	f7ff ff8e 	bl	8004490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <SysTick_Config+0x40>)
 8004576:	2200      	movs	r2, #0
 8004578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <SysTick_Config+0x40>)
 800457c:	2207      	movs	r2, #7
 800457e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	e000e010 	.word	0xe000e010

08004590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff29 	bl	80043f0 <__NVIC_SetPriorityGrouping>
}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	4603      	mov	r3, r0
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045b4:	f7ff ff40 	bl	8004438 <__NVIC_GetPriorityGrouping>
 80045b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	6978      	ldr	r0, [r7, #20]
 80045c0:	f7ff ff90 	bl	80044e4 <NVIC_EncodePriority>
 80045c4:	4602      	mov	r2, r0
 80045c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff ff5f 	bl	8004490 <__NVIC_SetPriority>
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	4603      	mov	r3, r0
 80045e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ff33 	bl	8004454 <__NVIC_EnableIRQ>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ffa4 	bl	800454c <SysTick_Config>
 8004604:	4603      	mov	r3, r0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d00d      	beq.n	8004642 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2204      	movs	r2, #4
 800462a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	e047      	b.n	80046d2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 020e 	bic.w	r2, r2, #14
 8004650:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004670:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f003 021f 	and.w	r2, r3, #31
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2101      	movs	r1, #1
 8004680:	fa01 f202 	lsl.w	r2, r1, r2
 8004684:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800468e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00c      	beq.n	80046b2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
    }
  }
  return status;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ea:	e15a      	b.n	80049a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2101      	movs	r1, #1
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	4013      	ands	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 814c 	beq.w	800499c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d00b      	beq.n	8004724 <HAL_GPIO_Init+0x48>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d007      	beq.n	8004724 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004718:	2b11      	cmp	r3, #17
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b12      	cmp	r3, #18
 8004722:	d130      	bne.n	8004786 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	2203      	movs	r2, #3
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4013      	ands	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800475a:	2201      	movs	r2, #1
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 0201 	and.w	r2, r3, #1
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	2203      	movs	r2, #3
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0xea>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b12      	cmp	r3, #18
 80047c4:	d123      	bne.n	800480e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	08da      	lsrs	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3208      	adds	r2, #8
 8004808:	6939      	ldr	r1, [r7, #16]
 800480a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	2203      	movs	r2, #3
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4013      	ands	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 0203 	and.w	r2, r3, #3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80a6 	beq.w	800499c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004850:	4b5b      	ldr	r3, [pc, #364]	; (80049c0 <HAL_GPIO_Init+0x2e4>)
 8004852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004854:	4a5a      	ldr	r2, [pc, #360]	; (80049c0 <HAL_GPIO_Init+0x2e4>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6613      	str	r3, [r2, #96]	; 0x60
 800485c:	4b58      	ldr	r3, [pc, #352]	; (80049c0 <HAL_GPIO_Init+0x2e4>)
 800485e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004868:	4a56      	ldr	r2, [pc, #344]	; (80049c4 <HAL_GPIO_Init+0x2e8>)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	3302      	adds	r3, #2
 8004870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	220f      	movs	r2, #15
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004892:	d01f      	beq.n	80048d4 <HAL_GPIO_Init+0x1f8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a4c      	ldr	r2, [pc, #304]	; (80049c8 <HAL_GPIO_Init+0x2ec>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d019      	beq.n	80048d0 <HAL_GPIO_Init+0x1f4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a4b      	ldr	r2, [pc, #300]	; (80049cc <HAL_GPIO_Init+0x2f0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <HAL_GPIO_Init+0x1f0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a4a      	ldr	r2, [pc, #296]	; (80049d0 <HAL_GPIO_Init+0x2f4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00d      	beq.n	80048c8 <HAL_GPIO_Init+0x1ec>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a49      	ldr	r2, [pc, #292]	; (80049d4 <HAL_GPIO_Init+0x2f8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <HAL_GPIO_Init+0x1e8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a48      	ldr	r2, [pc, #288]	; (80049d8 <HAL_GPIO_Init+0x2fc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d101      	bne.n	80048c0 <HAL_GPIO_Init+0x1e4>
 80048bc:	2305      	movs	r3, #5
 80048be:	e00a      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048c0:	2306      	movs	r3, #6
 80048c2:	e008      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048c4:	2304      	movs	r3, #4
 80048c6:	e006      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048c8:	2303      	movs	r3, #3
 80048ca:	e004      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e002      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_GPIO_Init+0x1fa>
 80048d4:	2300      	movs	r3, #0
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	f002 0203 	and.w	r2, r2, #3
 80048dc:	0092      	lsls	r2, r2, #2
 80048de:	4093      	lsls	r3, r2
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e6:	4937      	ldr	r1, [pc, #220]	; (80049c4 <HAL_GPIO_Init+0x2e8>)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	3302      	adds	r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048f4:	4b39      	ldr	r3, [pc, #228]	; (80049dc <HAL_GPIO_Init+0x300>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004918:	4a30      	ldr	r2, [pc, #192]	; (80049dc <HAL_GPIO_Init+0x300>)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800491e:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <HAL_GPIO_Init+0x300>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	43db      	mvns	r3, r3
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004942:	4a26      	ldr	r2, [pc, #152]	; (80049dc <HAL_GPIO_Init+0x300>)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_GPIO_Init+0x300>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	43db      	mvns	r3, r3
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4013      	ands	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <HAL_GPIO_Init+0x300>)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004972:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <HAL_GPIO_Init+0x300>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	43db      	mvns	r3, r3
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4013      	ands	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004996:	4a11      	ldr	r2, [pc, #68]	; (80049dc <HAL_GPIO_Init+0x300>)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	3301      	adds	r3, #1
 80049a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f47f ae9d 	bne.w	80046ec <HAL_GPIO_Init+0x10>
  }
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40010000 	.word	0x40010000
 80049c8:	48000400 	.word	0x48000400
 80049cc:	48000800 	.word	0x48000800
 80049d0:	48000c00 	.word	0x48000c00
 80049d4:	48001000 	.word	0x48001000
 80049d8:	48001400 	.word	0x48001400
 80049dc:	40010400 	.word	0x40010400

080049e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e001      	b.n	8004a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d006      	beq.n	8004a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a26:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc ff3a 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40010400 	.word	0x40010400

08004a40 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0bb      	b.n	8004bce <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b05      	cmp	r3, #5
 8004a60:	d101      	bne.n	8004a66 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0b3      	b.n	8004bce <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d101      	bne.n	8004a76 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0ab      	b.n	8004bce <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a76:	4b58      	ldr	r3, [pc, #352]	; (8004bd8 <HAL_OPAMP_Init+0x198>)
 8004a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7a:	4a57      	ldr	r2, [pc, #348]	; (8004bd8 <HAL_OPAMP_Init+0x198>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	6613      	str	r3, [r2, #96]	; 0x60
 8004a82:	4b55      	ldr	r3, [pc, #340]	; (8004bd8 <HAL_OPAMP_Init+0x198>)
 8004a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fd f98e 	bl	8001dc4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d003      	beq.n	8004ab8 <HAL_OPAMP_Init+0x78>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b60      	cmp	r3, #96	; 0x60
 8004ab6:	d133      	bne.n	8004b20 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 0110 	bic.w	r1, r3, #16
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_OPAMP_Init+0x19c>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6851      	ldr	r1, [r2, #4]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6892      	ldr	r2, [r2, #8]
 8004ae0:	4311      	orrs	r1, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6912      	ldr	r2, [r2, #16]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	7d09      	ldrb	r1, [r1, #20]
 8004aec:	2901      	cmp	r1, #1
 8004aee:	d102      	bne.n	8004af6 <HAL_OPAMP_Init+0xb6>
 8004af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004af4:	e000      	b.n	8004af8 <HAL_OPAMP_Init+0xb8>
 8004af6:	2100      	movs	r1, #0
 8004af8:	4311      	orrs	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b04:	4311      	orrs	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b0a:	04d2      	lsls	r2, r2, #19
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b12:	0612      	lsls	r2, r2, #24
 8004b14:	4311      	orrs	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e035      	b.n	8004b8c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 0110 	bic.w	r1, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b27      	ldr	r3, [pc, #156]	; (8004bdc <HAL_OPAMP_Init+0x19c>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6851      	ldr	r1, [r2, #4]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6892      	ldr	r2, [r2, #8]
 8004b48:	4311      	orrs	r1, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68d2      	ldr	r2, [r2, #12]
 8004b4e:	4311      	orrs	r1, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6912      	ldr	r2, [r2, #16]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	7d09      	ldrb	r1, [r1, #20]
 8004b5a:	2901      	cmp	r1, #1
 8004b5c:	d102      	bne.n	8004b64 <HAL_OPAMP_Init+0x124>
 8004b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b62:	e000      	b.n	8004b66 <HAL_OPAMP_Init+0x126>
 8004b64:	2100      	movs	r1, #0
 8004b66:	4311      	orrs	r1, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b6c:	4311      	orrs	r1, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b78:	04d2      	lsls	r2, r2, #19
 8004b7a:	4311      	orrs	r1, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b80:	0612      	lsls	r2, r2, #24
 8004b82:	4311      	orrs	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	db10      	blt.n	8004bb8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	e0003e11 	.word	0xe0003e11

08004be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d141      	bne.n	8004c72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bee:	4b4b      	ldr	r3, [pc, #300]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfa:	d131      	bne.n	8004c60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bfc:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c02:	4a46      	ldr	r2, [pc, #280]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c0c:	4b43      	ldr	r3, [pc, #268]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c14:	4a41      	ldr	r2, [pc, #260]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c1c:	4b40      	ldr	r3, [pc, #256]	; (8004d20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2232      	movs	r2, #50	; 0x32
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	4a3f      	ldr	r2, [pc, #252]	; (8004d24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	0c9b      	lsrs	r3, r3, #18
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c32:	e002      	b.n	8004c3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c3a:	4b38      	ldr	r3, [pc, #224]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d102      	bne.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f2      	bne.n	8004c34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c4e:	4b33      	ldr	r3, [pc, #204]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5a:	d158      	bne.n	8004d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e057      	b.n	8004d10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c60:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c66:	4a2d      	ldr	r2, [pc, #180]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c70:	e04d      	b.n	8004d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c78:	d141      	bne.n	8004cfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c7a:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c86:	d131      	bne.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c88:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8e:	4a23      	ldr	r2, [pc, #140]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2232      	movs	r2, #50	; 0x32
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	0c9b      	lsrs	r3, r3, #18
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cbe:	e002      	b.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cc6:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd2:	d102      	bne.n	8004cda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f2      	bne.n	8004cc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cda:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce6:	d112      	bne.n	8004d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e011      	b.n	8004d10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cfc:	e007      	b.n	8004d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d06:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	20000000 	.word	0x20000000
 8004d24:	431bde83 	.word	0x431bde83

08004d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e308      	b.n	800534c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d075      	beq.n	8004e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d46:	4ba3      	ldr	r3, [pc, #652]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d50:	4ba0      	ldr	r3, [pc, #640]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	d102      	bne.n	8004d66 <HAL_RCC_OscConfig+0x3e>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d002      	beq.n	8004d6c <HAL_RCC_OscConfig+0x44>
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d10b      	bne.n	8004d84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	4b99      	ldr	r3, [pc, #612]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d05b      	beq.n	8004e30 <HAL_RCC_OscConfig+0x108>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d157      	bne.n	8004e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e2e3      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	d106      	bne.n	8004d9c <HAL_RCC_OscConfig+0x74>
 8004d8e:	4b91      	ldr	r3, [pc, #580]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a90      	ldr	r2, [pc, #576]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e01d      	b.n	8004dd8 <HAL_RCC_OscConfig+0xb0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x98>
 8004da6:	4b8b      	ldr	r3, [pc, #556]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a8a      	ldr	r2, [pc, #552]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4b88      	ldr	r3, [pc, #544]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a87      	ldr	r2, [pc, #540]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e00b      	b.n	8004dd8 <HAL_RCC_OscConfig+0xb0>
 8004dc0:	4b84      	ldr	r3, [pc, #528]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a83      	ldr	r2, [pc, #524]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a80      	ldr	r2, [pc, #512]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d013      	beq.n	8004e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fd fd1e 	bl	8002820 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de8:	f7fd fd1a 	bl	8002820 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b64      	cmp	r3, #100	; 0x64
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e2a8      	b.n	800534c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dfa:	4b76      	ldr	r3, [pc, #472]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0xc0>
 8004e06:	e014      	b.n	8004e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd fd0a 	bl	8002820 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e10:	f7fd fd06 	bl	8002820 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	; 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e294      	b.n	800534c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e22:	4b6c      	ldr	r3, [pc, #432]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0xe8>
 8004e2e:	e000      	b.n	8004e32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d075      	beq.n	8004f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3e:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
 8004e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e48:	4b62      	ldr	r3, [pc, #392]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b0c      	cmp	r3, #12
 8004e56:	d102      	bne.n	8004e5e <HAL_RCC_OscConfig+0x136>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d002      	beq.n	8004e64 <HAL_RCC_OscConfig+0x13c>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d11f      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e64:	4b5b      	ldr	r3, [pc, #364]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_RCC_OscConfig+0x154>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e267      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	4b55      	ldr	r3, [pc, #340]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	061b      	lsls	r3, r3, #24
 8004e8a:	4952      	ldr	r1, [pc, #328]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e90:	4b51      	ldr	r3, [pc, #324]	; (8004fd8 <HAL_RCC_OscConfig+0x2b0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fd fc77 	bl	8002788 <HAL_InitTick>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d043      	beq.n	8004f28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e253      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d023      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eac:	4b49      	ldr	r3, [pc, #292]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a48      	ldr	r2, [pc, #288]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fd fcb2 	bl	8002820 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec0:	f7fd fcae 	bl	8002820 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e23c      	b.n	800534c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed2:	4b40      	ldr	r3, [pc, #256]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ede:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	061b      	lsls	r3, r3, #24
 8004eec:	4939      	ldr	r1, [pc, #228]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	604b      	str	r3, [r1, #4]
 8004ef2:	e01a      	b.n	8004f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef4:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a36      	ldr	r2, [pc, #216]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fd fc8e 	bl	8002820 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f08:	f7fd fc8a 	bl	8002820 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e218      	b.n	800534c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x1e0>
 8004f26:	e000      	b.n	8004f2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d03c      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3e:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f44:	4a23      	ldr	r2, [pc, #140]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fd fc67 	bl	8002820 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f56:	f7fd fc63 	bl	8002820 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e1f1      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f68:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ef      	beq.n	8004f56 <HAL_RCC_OscConfig+0x22e>
 8004f76:	e01b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f78:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7e:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fc4a 	bl	8002820 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f90:	f7fd fc46 	bl	8002820 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1d4      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ef      	bne.n	8004f90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80ab 	beq.w	8005114 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fc2:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_RCC_OscConfig+0x2b4>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e005      	b.n	8004fde <HAL_RCC_OscConfig+0x2b6>
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	20000004 	.word	0x20000004
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00d      	beq.n	8004ffe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe2:	4baf      	ldr	r3, [pc, #700]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	4aae      	ldr	r2, [pc, #696]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6593      	str	r3, [r2, #88]	; 0x58
 8004fee:	4bac      	ldr	r3, [pc, #688]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffe:	4ba9      	ldr	r3, [pc, #676]	; (80052a4 <HAL_RCC_OscConfig+0x57c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d118      	bne.n	800503c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800500a:	4ba6      	ldr	r3, [pc, #664]	; (80052a4 <HAL_RCC_OscConfig+0x57c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4aa5      	ldr	r2, [pc, #660]	; (80052a4 <HAL_RCC_OscConfig+0x57c>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005016:	f7fd fc03 	bl	8002820 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501e:	f7fd fbff 	bl	8002820 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e18d      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005030:	4b9c      	ldr	r3, [pc, #624]	; (80052a4 <HAL_RCC_OscConfig+0x57c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d108      	bne.n	8005056 <HAL_RCC_OscConfig+0x32e>
 8005044:	4b96      	ldr	r3, [pc, #600]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	4a95      	ldr	r2, [pc, #596]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005054:	e024      	b.n	80050a0 <HAL_RCC_OscConfig+0x378>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b05      	cmp	r3, #5
 800505c:	d110      	bne.n	8005080 <HAL_RCC_OscConfig+0x358>
 800505e:	4b90      	ldr	r3, [pc, #576]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	4a8e      	ldr	r2, [pc, #568]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005066:	f043 0304 	orr.w	r3, r3, #4
 800506a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800506e:	4b8c      	ldr	r3, [pc, #560]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005074:	4a8a      	ldr	r2, [pc, #552]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800507e:	e00f      	b.n	80050a0 <HAL_RCC_OscConfig+0x378>
 8005080:	4b87      	ldr	r3, [pc, #540]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	4a86      	ldr	r2, [pc, #536]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005090:	4b83      	ldr	r3, [pc, #524]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	4a82      	ldr	r2, [pc, #520]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d016      	beq.n	80050d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fd fbba 	bl	8002820 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b0:	f7fd fbb6 	bl	8002820 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e142      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c6:	4b76      	ldr	r3, [pc, #472]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0ed      	beq.n	80050b0 <HAL_RCC_OscConfig+0x388>
 80050d4:	e015      	b.n	8005102 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7fd fba3 	bl	8002820 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fd fb9f 	bl	8002820 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e12b      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f4:	4b6a      	ldr	r3, [pc, #424]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1ed      	bne.n	80050de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005102:	7ffb      	ldrb	r3, [r7, #31]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005108:	4b65      	ldr	r3, [pc, #404]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	4a64      	ldr	r2, [pc, #400]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800510e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005112:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d03c      	beq.n	800519a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01c      	beq.n	8005162 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005128:	4b5d      	ldr	r3, [pc, #372]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800512a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800512e:	4a5c      	ldr	r2, [pc, #368]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fd fb72 	bl	8002820 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005140:	f7fd fb6e 	bl	8002820 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e0fc      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005152:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ef      	beq.n	8005140 <HAL_RCC_OscConfig+0x418>
 8005160:	e01b      	b.n	800519a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005162:	4b4f      	ldr	r3, [pc, #316]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005168:	4a4d      	ldr	r2, [pc, #308]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fd fb55 	bl	8002820 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800517a:	f7fd fb51 	bl	8002820 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e0df      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800518c:	4b44      	ldr	r3, [pc, #272]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800518e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1ef      	bne.n	800517a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80d3 	beq.w	800534a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a4:	4b3e      	ldr	r3, [pc, #248]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	f000 808d 	beq.w	80052cc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d15a      	bne.n	8005270 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ba:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a38      	ldr	r2, [pc, #224]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 80051c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c6:	f7fd fb2b 	bl	8002820 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ce:	f7fd fb27 	bl	8002820 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e0b5      	b.n	800534c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f0      	bne.n	80051ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ec:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	4b2d      	ldr	r3, [pc, #180]	; (80052a8 <HAL_RCC_OscConfig+0x580>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6a11      	ldr	r1, [r2, #32]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051fc:	3a01      	subs	r2, #1
 80051fe:	0112      	lsls	r2, r2, #4
 8005200:	4311      	orrs	r1, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005206:	0212      	lsls	r2, r2, #8
 8005208:	4311      	orrs	r1, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800520e:	0852      	lsrs	r2, r2, #1
 8005210:	3a01      	subs	r2, #1
 8005212:	0552      	lsls	r2, r2, #21
 8005214:	4311      	orrs	r1, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800521a:	0852      	lsrs	r2, r2, #1
 800521c:	3a01      	subs	r2, #1
 800521e:	0652      	lsls	r2, r2, #25
 8005220:	4311      	orrs	r1, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005226:	06d2      	lsls	r2, r2, #27
 8005228:	430a      	orrs	r2, r1
 800522a:	491d      	ldr	r1, [pc, #116]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800522c:	4313      	orrs	r3, r2
 800522e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800523a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800523c:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005246:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fd faea 	bl	8002820 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005250:	f7fd fae6 	bl	8002820 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e074      	b.n	800534c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0x528>
 800526e:	e06c      	b.n	800534a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a0a      	ldr	r2, [pc, #40]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800527c:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a07      	ldr	r2, [pc, #28]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <HAL_RCC_OscConfig+0x578>)
 800528e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005296:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fd fac2 	bl	8002820 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529e:	e00e      	b.n	80052be <HAL_RCC_OscConfig+0x596>
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40007000 	.word	0x40007000
 80052a8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fd fab8 	bl	8002820 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e046      	b.n	800534c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052be:	4b25      	ldr	r3, [pc, #148]	; (8005354 <HAL_RCC_OscConfig+0x62c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x584>
 80052ca:	e03e      	b.n	800534a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e039      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052d8:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <HAL_RCC_OscConfig+0x62c>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f003 0203 	and.w	r2, r3, #3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d12c      	bne.n	8005346 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	3b01      	subs	r3, #1
 80052f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d123      	bne.n	8005346 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d11b      	bne.n	8005346 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d113      	bne.n	8005346 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	3b01      	subs	r3, #1
 800532c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d109      	bne.n	8005346 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	3b01      	subs	r3, #1
 8005340:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d001      	beq.n	800534a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40021000 	.word	0x40021000

08005358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e11e      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005370:	4b91      	ldr	r3, [pc, #580]	; (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d910      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b8e      	ldr	r3, [pc, #568]	; (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	498c      	ldr	r1, [pc, #560]	; (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b8a      	ldr	r3, [pc, #552]	; (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e106      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d073      	beq.n	8005494 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d129      	bne.n	8005408 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053b4:	4b81      	ldr	r3, [pc, #516]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0f4      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053c4:	f000 f99e 	bl	8005704 <RCC_GetSysClockFreqFromPLLSource>
 80053c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4a7c      	ldr	r2, [pc, #496]	; (80055c0 <HAL_RCC_ClockConfig+0x268>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d93f      	bls.n	8005452 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053d2:	4b7a      	ldr	r3, [pc, #488]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d033      	beq.n	8005452 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d12f      	bne.n	8005452 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053f2:	4b72      	ldr	r3, [pc, #456]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053fa:	4a70      	ldr	r2, [pc, #448]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	e024      	b.n	8005452 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d107      	bne.n	8005420 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005410:	4b6a      	ldr	r3, [pc, #424]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0c6      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005420:	4b66      	ldr	r3, [pc, #408]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0be      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005430:	f000 f8ce 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8005434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4a61      	ldr	r2, [pc, #388]	; (80055c0 <HAL_RCC_ClockConfig+0x268>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d909      	bls.n	8005452 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800543e:	4b5f      	ldr	r3, [pc, #380]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005446:	4a5d      	ldr	r2, [pc, #372]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005452:	4b5a      	ldr	r3, [pc, #360]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 0203 	bic.w	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4957      	ldr	r1, [pc, #348]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005464:	f7fd f9dc 	bl	8002820 <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	e00a      	b.n	8005482 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7fd f9d8 	bl	8002820 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	; 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e095      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005482:	4b4e      	ldr	r3, [pc, #312]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 020c 	and.w	r2, r3, #12
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	429a      	cmp	r2, r3
 8005492:	d1eb      	bne.n	800546c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d023      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054ac:	4b43      	ldr	r3, [pc, #268]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4a42      	ldr	r2, [pc, #264]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054c4:	4b3d      	ldr	r3, [pc, #244]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054cc:	4a3b      	ldr	r2, [pc, #236]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d4:	4b39      	ldr	r3, [pc, #228]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4936      	ldr	r1, [pc, #216]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
 80054e6:	e008      	b.n	80054fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d105      	bne.n	80054fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054ee:	4b33      	ldr	r3, [pc, #204]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	4a32      	ldr	r2, [pc, #200]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054fa:	4b2f      	ldr	r3, [pc, #188]	; (80055b8 <HAL_RCC_ClockConfig+0x260>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d21d      	bcs.n	8005544 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005508:	4b2b      	ldr	r3, [pc, #172]	; (80055b8 <HAL_RCC_ClockConfig+0x260>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f023 020f 	bic.w	r2, r3, #15
 8005510:	4929      	ldr	r1, [pc, #164]	; (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005518:	f7fd f982 	bl	8002820 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005520:	f7fd f97e 	bl	8002820 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e03b      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d1ed      	bne.n	8005520 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005550:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4917      	ldr	r1, [pc, #92]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	490f      	ldr	r1, [pc, #60]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 800557e:	4313      	orrs	r3, r2
 8005580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005582:	f000 f825 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8005586:	4601      	mov	r1, r0
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <HAL_RCC_ClockConfig+0x264>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <HAL_RCC_ClockConfig+0x26c>)
 8005594:	5cd3      	ldrb	r3, [r2, r3]
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	fa21 f303 	lsr.w	r3, r1, r3
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <HAL_RCC_ClockConfig+0x270>)
 80055a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <HAL_RCC_ClockConfig+0x274>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd f8ee 	bl	8002788 <HAL_InitTick>
 80055ac:	4603      	mov	r3, r0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40022000 	.word	0x40022000
 80055bc:	40021000 	.word	0x40021000
 80055c0:	04c4b400 	.word	0x04c4b400
 80055c4:	08009b70 	.word	0x08009b70
 80055c8:	20000000 	.word	0x20000000
 80055cc:	20000004 	.word	0x20000004

080055d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055d6:	4b2c      	ldr	r3, [pc, #176]	; (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d102      	bne.n	80055e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055e2:	4b2a      	ldr	r3, [pc, #168]	; (800568c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e047      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055e8:	4b27      	ldr	r3, [pc, #156]	; (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 030c 	and.w	r3, r3, #12
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d102      	bne.n	80055fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055f4:	4b26      	ldr	r3, [pc, #152]	; (8005690 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e03e      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055fa:	4b23      	ldr	r3, [pc, #140]	; (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d136      	bne.n	8005674 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005610:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3301      	adds	r3, #1
 800561c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d10c      	bne.n	800563e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005624:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	4a16      	ldr	r2, [pc, #88]	; (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800562e:	68d2      	ldr	r2, [r2, #12]
 8005630:	0a12      	lsrs	r2, r2, #8
 8005632:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	617b      	str	r3, [r7, #20]
      break;
 800563c:	e00c      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800563e:	4a13      	ldr	r2, [pc, #76]	; (800568c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	4a10      	ldr	r2, [pc, #64]	; (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005648:	68d2      	ldr	r2, [r2, #12]
 800564a:	0a12      	lsrs	r2, r2, #8
 800564c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
      break;
 8005656:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	0e5b      	lsrs	r3, r3, #25
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	e001      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005678:	693b      	ldr	r3, [r7, #16]
}
 800567a:	4618      	mov	r0, r3
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	00f42400 	.word	0x00f42400
 8005690:	007a1200 	.word	0x007a1200

08005694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056b0:	f7ff fff0 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056b4:	4601      	mov	r1, r0
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4a04      	ldr	r2, [pc, #16]	; (80056d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056c2:	5cd3      	ldrb	r3, [r2, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40021000 	.word	0x40021000
 80056d4:	08009b80 	.word	0x08009b80

080056d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056dc:	f7ff ffda 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056e0:	4601      	mov	r1, r0
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	0adb      	lsrs	r3, r3, #11
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	4a04      	ldr	r2, [pc, #16]	; (8005700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ee:	5cd3      	ldrb	r3, [r2, r3]
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40021000 	.word	0x40021000
 8005700:	08009b80 	.word	0x08009b80

08005704 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800570a:	4b1e      	ldr	r3, [pc, #120]	; (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005714:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b03      	cmp	r3, #3
 8005726:	d10c      	bne.n	8005742 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005728:	4a17      	ldr	r2, [pc, #92]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	4a14      	ldr	r2, [pc, #80]	; (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005732:	68d2      	ldr	r2, [r2, #12]
 8005734:	0a12      	lsrs	r2, r2, #8
 8005736:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	617b      	str	r3, [r7, #20]
    break;
 8005740:	e00c      	b.n	800575c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005742:	4a12      	ldr	r2, [pc, #72]	; (800578c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	fbb2 f3f3 	udiv	r3, r2, r3
 800574a:	4a0e      	ldr	r2, [pc, #56]	; (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800574c:	68d2      	ldr	r2, [r2, #12]
 800574e:	0a12      	lsrs	r2, r2, #8
 8005750:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
    break;
 800575a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	0e5b      	lsrs	r3, r3, #25
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	3301      	adds	r3, #1
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005776:	687b      	ldr	r3, [r7, #4]
}
 8005778:	4618      	mov	r0, r3
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	40021000 	.word	0x40021000
 8005788:	007a1200 	.word	0x007a1200
 800578c:	00f42400 	.word	0x00f42400

08005790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005798:	2300      	movs	r3, #0
 800579a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800579c:	2300      	movs	r3, #0
 800579e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8098 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ae:	2300      	movs	r3, #0
 80057b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b2:	4b43      	ldr	r3, [pc, #268]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10d      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057be:	4b40      	ldr	r3, [pc, #256]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	4a3f      	ldr	r2, [pc, #252]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ca:	4b3d      	ldr	r3, [pc, #244]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d6:	2301      	movs	r3, #1
 80057d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057da:	4b3a      	ldr	r3, [pc, #232]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a39      	ldr	r2, [pc, #228]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057e6:	f7fd f81b 	bl	8002820 <HAL_GetTick>
 80057ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ec:	e009      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ee:	f7fd f817 	bl	8002820 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d902      	bls.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	74fb      	strb	r3, [r7, #19]
        break;
 8005800:	e005      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005802:	4b30      	ldr	r3, [pc, #192]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ef      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d159      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005814:	4b2a      	ldr	r3, [pc, #168]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01e      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	429a      	cmp	r2, r3
 800582e:	d019      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005830:	4b23      	ldr	r3, [pc, #140]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800583c:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	4a1f      	ldr	r2, [pc, #124]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800584c:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	4a1b      	ldr	r2, [pc, #108]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800585c:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d016      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fc ffd7 	bl	8002820 <HAL_GetTick>
 8005872:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005874:	e00b      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fc ffd3 	bl	8002820 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	; 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d902      	bls.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	74fb      	strb	r3, [r7, #19]
            break;
 800588c:	e006      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588e:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0ec      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058a2:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	4903      	ldr	r1, [pc, #12]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058b8:	e008      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	74bb      	strb	r3, [r7, #18]
 80058be:	e005      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058cc:	7c7b      	ldrb	r3, [r7, #17]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d105      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d2:	4ba6      	ldr	r3, [pc, #664]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d6:	4aa5      	ldr	r2, [pc, #660]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ea:	4ba0      	ldr	r3, [pc, #640]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f023 0203 	bic.w	r2, r3, #3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	499c      	ldr	r1, [pc, #624]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800590c:	4b97      	ldr	r3, [pc, #604]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005912:	f023 020c 	bic.w	r2, r3, #12
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	4994      	ldr	r1, [pc, #592]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800592e:	4b8f      	ldr	r3, [pc, #572]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	498b      	ldr	r1, [pc, #556]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005950:	4b86      	ldr	r3, [pc, #536]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	4983      	ldr	r1, [pc, #524]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005972:	4b7e      	ldr	r3, [pc, #504]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	497a      	ldr	r1, [pc, #488]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005994:	4b75      	ldr	r3, [pc, #468]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	4972      	ldr	r1, [pc, #456]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059b6:	4b6d      	ldr	r3, [pc, #436]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	4969      	ldr	r1, [pc, #420]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059d8:	4b64      	ldr	r3, [pc, #400]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	4961      	ldr	r1, [pc, #388]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059fa:	4b5c      	ldr	r3, [pc, #368]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	4958      	ldr	r1, [pc, #352]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d015      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a1c:	4b53      	ldr	r3, [pc, #332]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	4950      	ldr	r1, [pc, #320]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a3a:	d105      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a3c:	4b4b      	ldr	r3, [pc, #300]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4a4a      	ldr	r2, [pc, #296]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d015      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a54:	4b45      	ldr	r3, [pc, #276]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4942      	ldr	r1, [pc, #264]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a72:	d105      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a74:	4b3d      	ldr	r3, [pc, #244]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4a3c      	ldr	r2, [pc, #240]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d015      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a8c:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	4934      	ldr	r1, [pc, #208]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aac:	4b2f      	ldr	r3, [pc, #188]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a2e      	ldr	r2, [pc, #184]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d015      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ac4:	4b29      	ldr	r3, [pc, #164]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	4926      	ldr	r1, [pc, #152]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ae2:	d105      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae4:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a20      	ldr	r2, [pc, #128]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d015      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005afc:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	4918      	ldr	r1, [pc, #96]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b1a:	d105      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b1c:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d015      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b34:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	490a      	ldr	r1, [pc, #40]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b52:	d105      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a04      	ldr	r2, [pc, #16]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b60:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40021000 	.word	0x40021000

08005b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e049      	b.n	8005c16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fc fbca 	bl	8002330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 fe5e 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d001      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e021      	b.n	8005c7c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <HAL_TIM_Base_Start_IT+0x68>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d00b      	beq.n	8005c7a <HAL_TIM_Base_Start_IT+0x5a>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c68:	d007      	beq.n	8005c7a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	00010007 	.word	0x00010007

08005c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e049      	b.n	8005d32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f841 	bl	8005d3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f000 fdd0 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d109      	bne.n	8005d74 <HAL_TIM_PWM_Start+0x24>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	e03c      	b.n	8005dee <HAL_TIM_PWM_Start+0x9e>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d109      	bne.n	8005d8e <HAL_TIM_PWM_Start+0x3e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	bf14      	ite	ne
 8005d86:	2301      	movne	r3, #1
 8005d88:	2300      	moveq	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	e02f      	b.n	8005dee <HAL_TIM_PWM_Start+0x9e>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d109      	bne.n	8005da8 <HAL_TIM_PWM_Start+0x58>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	bf14      	ite	ne
 8005da0:	2301      	movne	r3, #1
 8005da2:	2300      	moveq	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	e022      	b.n	8005dee <HAL_TIM_PWM_Start+0x9e>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b0c      	cmp	r3, #12
 8005dac:	d109      	bne.n	8005dc2 <HAL_TIM_PWM_Start+0x72>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	bf14      	ite	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	2300      	moveq	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e015      	b.n	8005dee <HAL_TIM_PWM_Start+0x9e>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d109      	bne.n	8005ddc <HAL_TIM_PWM_Start+0x8c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	bf14      	ite	ne
 8005dd4:	2301      	movne	r3, #1
 8005dd6:	2300      	moveq	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e008      	b.n	8005dee <HAL_TIM_PWM_Start+0x9e>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	bf14      	ite	ne
 8005de8:	2301      	movne	r3, #1
 8005dea:	2300      	moveq	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e06e      	b.n	8005ed4 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <HAL_TIM_PWM_Start+0xb6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e04:	e023      	b.n	8005e4e <HAL_TIM_PWM_Start+0xfe>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d104      	bne.n	8005e16 <HAL_TIM_PWM_Start+0xc6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e14:	e01b      	b.n	8005e4e <HAL_TIM_PWM_Start+0xfe>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d104      	bne.n	8005e26 <HAL_TIM_PWM_Start+0xd6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e24:	e013      	b.n	8005e4e <HAL_TIM_PWM_Start+0xfe>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_PWM_Start+0xe6>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e34:	e00b      	b.n	8005e4e <HAL_TIM_PWM_Start+0xfe>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d104      	bne.n	8005e46 <HAL_TIM_PWM_Start+0xf6>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e44:	e003      	b.n	8005e4e <HAL_TIM_PWM_Start+0xfe>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 f92c 	bl	80070b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <HAL_TIM_PWM_Start+0x18c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x13e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_TIM_PWM_Start+0x190>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x13e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <HAL_TIM_PWM_Start+0x194>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x13e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <HAL_TIM_PWM_Start+0x198>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x13e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a18      	ldr	r2, [pc, #96]	; (8005eec <HAL_TIM_PWM_Start+0x19c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d101      	bne.n	8005e92 <HAL_TIM_PWM_Start+0x142>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <HAL_TIM_PWM_Start+0x144>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <HAL_TIM_PWM_Start+0x1a0>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b06      	cmp	r3, #6
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0x182>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec0:	d007      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0201 	orr.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800
 8005ef0:	00010007 	.word	0x00010007

08005ef4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e097      	b.n	8006038 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d106      	bne.n	8005f22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7fc fa7d 	bl	800241c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2202      	movs	r2, #2
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005f38:	f023 0307 	bic.w	r3, r3, #7
 8005f3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3304      	adds	r3, #4
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f000 fc91 	bl	8006870 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	4313      	orrs	r3, r2
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f94:	f023 030c 	bic.w	r3, r3, #12
 8005f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	011a      	lsls	r2, r3, #4
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	031b      	lsls	r3, r3, #12
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fd2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006050:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006058:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006060:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006068:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d110      	bne.n	8006092 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d102      	bne.n	800607c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006076:	7b7b      	ldrb	r3, [r7, #13]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e068      	b.n	8006152 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006090:	e031      	b.n	80060f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b04      	cmp	r3, #4
 8006096:	d110      	bne.n	80060ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d102      	bne.n	80060a4 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800609e:	7b3b      	ldrb	r3, [r7, #12]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d001      	beq.n	80060a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e054      	b.n	8006152 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b8:	e01d      	b.n	80060f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d108      	bne.n	80060d2 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d105      	bne.n	80060d2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c6:	7b7b      	ldrb	r3, [r7, #13]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d102      	bne.n	80060d2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060cc:	7b3b      	ldrb	r3, [r7, #12]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d001      	beq.n	80060d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e03d      	b.n	8006152 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <HAL_TIM_Encoder_Start+0xc2>
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d008      	beq.n	8006112 <HAL_TIM_Encoder_Start+0xd2>
 8006100:	e00f      	b.n	8006122 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2201      	movs	r2, #1
 8006108:	2100      	movs	r1, #0
 800610a:	4618      	mov	r0, r3
 800610c:	f000 ffd2 	bl	80070b4 <TIM_CCxChannelCmd>
      break;
 8006110:	e016      	b.n	8006140 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2201      	movs	r2, #1
 8006118:	2104      	movs	r1, #4
 800611a:	4618      	mov	r0, r3
 800611c:	f000 ffca 	bl	80070b4 <TIM_CCxChannelCmd>
      break;
 8006120:	e00e      	b.n	8006140 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2201      	movs	r2, #1
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f000 ffc2 	bl	80070b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2201      	movs	r2, #1
 8006136:	2104      	movs	r1, #4
 8006138:	4618      	mov	r0, r3
 800613a:	f000 ffbb 	bl	80070b4 <TIM_CCxChannelCmd>
      break;
 800613e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b02      	cmp	r3, #2
 800616e:	d122      	bne.n	80061b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b02      	cmp	r3, #2
 800617c:	d11b      	bne.n	80061b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f06f 0202 	mvn.w	r2, #2
 8006186:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fb fc4f 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 80061a2:	e005      	b.n	80061b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fb45 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fb4c 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d122      	bne.n	800620a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d11b      	bne.n	800620a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f06f 0204 	mvn.w	r2, #4
 80061da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fb fc25 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 80061f6:	e005      	b.n	8006204 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb1b 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fb22 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b08      	cmp	r3, #8
 8006216:	d122      	bne.n	800625e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b08      	cmp	r3, #8
 8006224:	d11b      	bne.n	800625e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f06f 0208 	mvn.w	r2, #8
 800622e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2204      	movs	r2, #4
 8006234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f003 0303 	and.w	r3, r3, #3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7fb fbfb 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 800624a:	e005      	b.n	8006258 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 faf1 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 faf8 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b10      	cmp	r3, #16
 800626a:	d122      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2b10      	cmp	r3, #16
 8006278:	d11b      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f06f 0210 	mvn.w	r2, #16
 8006282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2208      	movs	r2, #8
 8006288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7fb fbd1 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 800629e:	e005      	b.n	80062ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fac7 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 face 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d10e      	bne.n	80062de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d107      	bne.n	80062de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f06f 0201 	mvn.w	r2, #1
 80062d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fb faf1 	bl	80018c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b80      	cmp	r3, #128	; 0x80
 80062ea:	d10e      	bne.n	800630a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f6:	2b80      	cmp	r3, #128	; 0x80
 80062f8:	d107      	bne.n	800630a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f8a7 	bl	8007458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006318:	d10e      	bne.n	8006338 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	2b80      	cmp	r3, #128	; 0x80
 8006326:	d107      	bne.n	8006338 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 f89a 	bl	800746c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d10e      	bne.n	8006364 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006350:	2b40      	cmp	r3, #64	; 0x40
 8006352:	d107      	bne.n	8006364 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800635c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fa7c 	bl	800685c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b20      	cmp	r3, #32
 8006370:	d10e      	bne.n	8006390 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b20      	cmp	r3, #32
 800637e:	d107      	bne.n	8006390 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0220 	mvn.w	r2, #32
 8006388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 f85a 	bl	8007444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800639a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800639e:	d10f      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ae:	d107      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80063b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 f860 	bl	8007480 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063ce:	d10f      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063de:	d107      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80063e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 f852 	bl	8007494 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063fe:	d10f      	bne.n	8006420 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800640a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800640e:	d107      	bne.n	8006420 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 f844 	bl	80074a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800642a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800642e:	d10f      	bne.n	8006450 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800643a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800643e:	d107      	bne.n	8006450 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 f836 	bl	80074bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800646e:	2302      	movs	r3, #2
 8006470:	e0fd      	b.n	800666e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b14      	cmp	r3, #20
 800647e:	f200 80f0 	bhi.w	8006662 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006482:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064dd 	.word	0x080064dd
 800648c:	08006663 	.word	0x08006663
 8006490:	08006663 	.word	0x08006663
 8006494:	08006663 	.word	0x08006663
 8006498:	0800651d 	.word	0x0800651d
 800649c:	08006663 	.word	0x08006663
 80064a0:	08006663 	.word	0x08006663
 80064a4:	08006663 	.word	0x08006663
 80064a8:	0800655f 	.word	0x0800655f
 80064ac:	08006663 	.word	0x08006663
 80064b0:	08006663 	.word	0x08006663
 80064b4:	08006663 	.word	0x08006663
 80064b8:	0800659f 	.word	0x0800659f
 80064bc:	08006663 	.word	0x08006663
 80064c0:	08006663 	.word	0x08006663
 80064c4:	08006663 	.word	0x08006663
 80064c8:	080065e1 	.word	0x080065e1
 80064cc:	08006663 	.word	0x08006663
 80064d0:	08006663 	.word	0x08006663
 80064d4:	08006663 	.word	0x08006663
 80064d8:	08006621 	.word	0x08006621
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fa54 	bl	8006990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0208 	orr.w	r2, r2, #8
 80064f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0204 	bic.w	r2, r2, #4
 8006506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6999      	ldr	r1, [r3, #24]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	619a      	str	r2, [r3, #24]
      break;
 800651a:	e0a3      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fac4 	bl	8006ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6999      	ldr	r1, [r3, #24]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	619a      	str	r2, [r3, #24]
      break;
 800655c:	e082      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fb2d 	bl	8006bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0208 	orr.w	r2, r2, #8
 8006578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0204 	bic.w	r2, r2, #4
 8006588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	61da      	str	r2, [r3, #28]
      break;
 800659c:	e062      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fb95 	bl	8006cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69d9      	ldr	r1, [r3, #28]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	021a      	lsls	r2, r3, #8
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	61da      	str	r2, [r3, #28]
      break;
 80065de:	e041      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fbfe 	bl	8006de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0208 	orr.w	r2, r2, #8
 80065fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800661e:	e021      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fc42 	bl	8006eb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	021a      	lsls	r2, r3, #8
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006660:	e000      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006662:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop

08006678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_TIM_ConfigClockSource+0x18>
 800668c:	2302      	movs	r3, #2
 800668e:	e0c3      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x1a0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80066ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b70      	cmp	r3, #112	; 0x70
 80066ca:	d038      	beq.n	800673e <HAL_TIM_ConfigClockSource+0xc6>
 80066cc:	2b70      	cmp	r3, #112	; 0x70
 80066ce:	d815      	bhi.n	80066fc <HAL_TIM_ConfigClockSource+0x84>
 80066d0:	2b30      	cmp	r3, #48	; 0x30
 80066d2:	f000 808e 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
 80066d6:	2b30      	cmp	r3, #48	; 0x30
 80066d8:	d809      	bhi.n	80066ee <HAL_TIM_ConfigClockSource+0x76>
 80066da:	2b10      	cmp	r3, #16
 80066dc:	f000 8089 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	f000 8086 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8083 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80066ec:	e08b      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80066ee:	2b50      	cmp	r3, #80	; 0x50
 80066f0:	d04f      	beq.n	8006792 <HAL_TIM_ConfigClockSource+0x11a>
 80066f2:	2b60      	cmp	r3, #96	; 0x60
 80066f4:	d05d      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0x13a>
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d06b      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80066fa:	e084      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80066fc:	4a48      	ldr	r2, [pc, #288]	; (8006820 <HAL_TIM_ConfigClockSource+0x1a8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d077      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
 8006702:	4a47      	ldr	r2, [pc, #284]	; (8006820 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d809      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0xa4>
 8006708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670c:	d02e      	beq.n	800676c <HAL_TIM_ConfigClockSource+0xf4>
 800670e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006712:	d06e      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
 8006714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006718:	d074      	beq.n	8006804 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 800671a:	e074      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800671c:	4a41      	ldr	r2, [pc, #260]	; (8006824 <HAL_TIM_ConfigClockSource+0x1ac>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d067      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
 8006722:	4a40      	ldr	r2, [pc, #256]	; (8006824 <HAL_TIM_ConfigClockSource+0x1ac>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d803      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0xb8>
 8006728:	4a3f      	ldr	r2, [pc, #252]	; (8006828 <HAL_TIM_ConfigClockSource+0x1b0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d061      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800672e:	e06a      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006730:	4a3e      	ldr	r2, [pc, #248]	; (800682c <HAL_TIM_ConfigClockSource+0x1b4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d05d      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
 8006736:	4a3e      	ldr	r2, [pc, #248]	; (8006830 <HAL_TIM_ConfigClockSource+0x1b8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d05a      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800673c:	e063      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6899      	ldr	r1, [r3, #8]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f000 fc91 	bl	8007074 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006760:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	609a      	str	r2, [r3, #8]
      break;
 800676a:	e04c      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	6899      	ldr	r1, [r3, #8]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f000 fc7a 	bl	8007074 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800678e:	609a      	str	r2, [r3, #8]
      break;
 8006790:	e039      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6859      	ldr	r1, [r3, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	461a      	mov	r2, r3
 80067a0:	f000 fbec 	bl	8006f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2150      	movs	r1, #80	; 0x50
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fc45 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 80067b0:	e029      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6859      	ldr	r1, [r3, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	461a      	mov	r2, r3
 80067c0:	f000 fc0b 	bl	8006fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2160      	movs	r1, #96	; 0x60
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fc35 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 80067d0:	e019      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6859      	ldr	r1, [r3, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	461a      	mov	r2, r3
 80067e0:	f000 fbcc 	bl	8006f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2140      	movs	r1, #64	; 0x40
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fc25 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 80067f0:	e009      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f000 fc1c 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 8006802:	e000      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8006804:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	00100020 	.word	0x00100020
 8006824:	00100040 	.word	0x00100040
 8006828:	00100030 	.word	0x00100030
 800682c:	00100060 	.word	0x00100060
 8006830:	00100070 	.word	0x00100070

08006834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3c      	ldr	r2, [pc, #240]	; (8006974 <TIM_Base_SetConfig+0x104>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00f      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688e:	d00b      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a39      	ldr	r2, [pc, #228]	; (8006978 <TIM_Base_SetConfig+0x108>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a38      	ldr	r2, [pc, #224]	; (800697c <TIM_Base_SetConfig+0x10c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a37      	ldr	r2, [pc, #220]	; (8006980 <TIM_Base_SetConfig+0x110>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d108      	bne.n	80068ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2d      	ldr	r2, [pc, #180]	; (8006974 <TIM_Base_SetConfig+0x104>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01b      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d017      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a2a      	ldr	r2, [pc, #168]	; (8006978 <TIM_Base_SetConfig+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a29      	ldr	r2, [pc, #164]	; (800697c <TIM_Base_SetConfig+0x10c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00f      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a28      	ldr	r2, [pc, #160]	; (8006980 <TIM_Base_SetConfig+0x110>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00b      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a27      	ldr	r2, [pc, #156]	; (8006984 <TIM_Base_SetConfig+0x114>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d007      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a26      	ldr	r2, [pc, #152]	; (8006988 <TIM_Base_SetConfig+0x118>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d003      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a25      	ldr	r2, [pc, #148]	; (800698c <TIM_Base_SetConfig+0x11c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d108      	bne.n	800690c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <TIM_Base_SetConfig+0x104>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00f      	beq.n	8006958 <TIM_Base_SetConfig+0xe8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a11      	ldr	r2, [pc, #68]	; (8006980 <TIM_Base_SetConfig+0x110>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00b      	beq.n	8006958 <TIM_Base_SetConfig+0xe8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a10      	ldr	r2, [pc, #64]	; (8006984 <TIM_Base_SetConfig+0x114>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d007      	beq.n	8006958 <TIM_Base_SetConfig+0xe8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a0f      	ldr	r2, [pc, #60]	; (8006988 <TIM_Base_SetConfig+0x118>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_Base_SetConfig+0xe8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a0e      	ldr	r2, [pc, #56]	; (800698c <TIM_Base_SetConfig+0x11c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d103      	bne.n	8006960 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	615a      	str	r2, [r3, #20]
}
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40000400 	.word	0x40000400
 800697c:	40000800 	.word	0x40000800
 8006980:	40013400 	.word	0x40013400
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800

08006990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f023 0201 	bic.w	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 0302 	bic.w	r3, r3, #2
 80069dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a2c      	ldr	r2, [pc, #176]	; (8006a9c <TIM_OC1_SetConfig+0x10c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00f      	beq.n	8006a10 <TIM_OC1_SetConfig+0x80>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a2b      	ldr	r2, [pc, #172]	; (8006aa0 <TIM_OC1_SetConfig+0x110>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_OC1_SetConfig+0x80>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a2a      	ldr	r2, [pc, #168]	; (8006aa4 <TIM_OC1_SetConfig+0x114>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_OC1_SetConfig+0x80>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a29      	ldr	r2, [pc, #164]	; (8006aa8 <TIM_OC1_SetConfig+0x118>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC1_SetConfig+0x80>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a28      	ldr	r2, [pc, #160]	; (8006aac <TIM_OC1_SetConfig+0x11c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10c      	bne.n	8006a2a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f023 0308 	bic.w	r3, r3, #8
 8006a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f023 0304 	bic.w	r3, r3, #4
 8006a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <TIM_OC1_SetConfig+0x10c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00f      	beq.n	8006a52 <TIM_OC1_SetConfig+0xc2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1a      	ldr	r2, [pc, #104]	; (8006aa0 <TIM_OC1_SetConfig+0x110>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00b      	beq.n	8006a52 <TIM_OC1_SetConfig+0xc2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a19      	ldr	r2, [pc, #100]	; (8006aa4 <TIM_OC1_SetConfig+0x114>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d007      	beq.n	8006a52 <TIM_OC1_SetConfig+0xc2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <TIM_OC1_SetConfig+0x118>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d003      	beq.n	8006a52 <TIM_OC1_SetConfig+0xc2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a17      	ldr	r2, [pc, #92]	; (8006aac <TIM_OC1_SetConfig+0x11c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d111      	bne.n	8006a76 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	621a      	str	r2, [r3, #32]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40013400 	.word	0x40013400
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	40014400 	.word	0x40014400
 8006aac:	40014800 	.word	0x40014800

08006ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f023 0210 	bic.w	r2, r3, #16
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0320 	bic.w	r3, r3, #32
 8006afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a28      	ldr	r2, [pc, #160]	; (8006bb0 <TIM_OC2_SetConfig+0x100>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_OC2_SetConfig+0x6c>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a27      	ldr	r2, [pc, #156]	; (8006bb4 <TIM_OC2_SetConfig+0x104>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d10d      	bne.n	8006b38 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <TIM_OC2_SetConfig+0x100>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00f      	beq.n	8006b60 <TIM_OC2_SetConfig+0xb0>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a1c      	ldr	r2, [pc, #112]	; (8006bb4 <TIM_OC2_SetConfig+0x104>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00b      	beq.n	8006b60 <TIM_OC2_SetConfig+0xb0>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <TIM_OC2_SetConfig+0x108>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d007      	beq.n	8006b60 <TIM_OC2_SetConfig+0xb0>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1a      	ldr	r2, [pc, #104]	; (8006bbc <TIM_OC2_SetConfig+0x10c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_OC2_SetConfig+0xb0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a19      	ldr	r2, [pc, #100]	; (8006bc0 <TIM_OC2_SetConfig+0x110>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d113      	bne.n	8006b88 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	40012c00 	.word	0x40012c00
 8006bb4:	40013400 	.word	0x40013400
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40014400 	.word	0x40014400
 8006bc0:	40014800 	.word	0x40014800

08006bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0303 	bic.w	r3, r3, #3
 8006bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a27      	ldr	r2, [pc, #156]	; (8006cc0 <TIM_OC3_SetConfig+0xfc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_OC3_SetConfig+0x6a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a26      	ldr	r2, [pc, #152]	; (8006cc4 <TIM_OC3_SetConfig+0x100>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d10d      	bne.n	8006c4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1c      	ldr	r2, [pc, #112]	; (8006cc0 <TIM_OC3_SetConfig+0xfc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00f      	beq.n	8006c72 <TIM_OC3_SetConfig+0xae>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <TIM_OC3_SetConfig+0x100>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00b      	beq.n	8006c72 <TIM_OC3_SetConfig+0xae>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <TIM_OC3_SetConfig+0x104>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d007      	beq.n	8006c72 <TIM_OC3_SetConfig+0xae>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <TIM_OC3_SetConfig+0x108>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d003      	beq.n	8006c72 <TIM_OC3_SetConfig+0xae>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <TIM_OC3_SetConfig+0x10c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d113      	bne.n	8006c9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	621a      	str	r2, [r3, #32]
}
 8006cb4:	bf00      	nop
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40013400 	.word	0x40013400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800

08006cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	031b      	lsls	r3, r3, #12
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a28      	ldr	r2, [pc, #160]	; (8006dd4 <TIM_OC4_SetConfig+0x100>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_OC4_SetConfig+0x6c>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a27      	ldr	r2, [pc, #156]	; (8006dd8 <TIM_OC4_SetConfig+0x104>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10d      	bne.n	8006d5c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	031b      	lsls	r3, r3, #12
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <TIM_OC4_SetConfig+0x100>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00f      	beq.n	8006d84 <TIM_OC4_SetConfig+0xb0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a1c      	ldr	r2, [pc, #112]	; (8006dd8 <TIM_OC4_SetConfig+0x104>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_OC4_SetConfig+0xb0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <TIM_OC4_SetConfig+0x108>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <TIM_OC4_SetConfig+0xb0>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a1a      	ldr	r2, [pc, #104]	; (8006de0 <TIM_OC4_SetConfig+0x10c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC4_SetConfig+0xb0>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <TIM_OC4_SetConfig+0x110>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d113      	bne.n	8006dac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	019b      	lsls	r3, r3, #6
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	019b      	lsls	r3, r3, #6
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40013400 	.word	0x40013400
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	40014400 	.word	0x40014400
 8006de4:	40014800 	.word	0x40014800

08006de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <TIM_OC5_SetConfig+0xb4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00f      	beq.n	8006e62 <TIM_OC5_SetConfig+0x7a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a16      	ldr	r2, [pc, #88]	; (8006ea0 <TIM_OC5_SetConfig+0xb8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00b      	beq.n	8006e62 <TIM_OC5_SetConfig+0x7a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <TIM_OC5_SetConfig+0xbc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d007      	beq.n	8006e62 <TIM_OC5_SetConfig+0x7a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <TIM_OC5_SetConfig+0xc0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d003      	beq.n	8006e62 <TIM_OC5_SetConfig+0x7a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a13      	ldr	r2, [pc, #76]	; (8006eac <TIM_OC5_SetConfig+0xc4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d109      	bne.n	8006e76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	621a      	str	r2, [r3, #32]
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800

08006eb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	051b      	lsls	r3, r3, #20
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <TIM_OC6_SetConfig+0xb8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00f      	beq.n	8006f2c <TIM_OC6_SetConfig+0x7c>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <TIM_OC6_SetConfig+0xbc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00b      	beq.n	8006f2c <TIM_OC6_SetConfig+0x7c>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <TIM_OC6_SetConfig+0xc0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_OC6_SetConfig+0x7c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a15      	ldr	r2, [pc, #84]	; (8006f74 <TIM_OC6_SetConfig+0xc4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_OC6_SetConfig+0x7c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a14      	ldr	r2, [pc, #80]	; (8006f78 <TIM_OC6_SetConfig+0xc8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d109      	bne.n	8006f40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	029b      	lsls	r3, r3, #10
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40013400 	.word	0x40013400
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800

08006f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0201 	bic.w	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 030a 	bic.w	r3, r3, #10
 8006fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b087      	sub	sp, #28
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f023 0210 	bic.w	r2, r3, #16
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	031b      	lsls	r3, r3, #12
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	f043 0307 	orr.w	r3, r3, #7
 8007060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	609a      	str	r2, [r3, #8]
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800708e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	021a      	lsls	r2, r3, #8
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	431a      	orrs	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4313      	orrs	r3, r2
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	609a      	str	r2, [r3, #8]
}
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	2201      	movs	r2, #1
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	43db      	mvns	r3, r3
 80070d6:	401a      	ands	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1a      	ldr	r2, [r3, #32]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d109      	bne.n	8007124 <HAL_TIMEx_PWMN_Start+0x24>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b01      	cmp	r3, #1
 800711a:	bf14      	ite	ne
 800711c:	2301      	movne	r3, #1
 800711e:	2300      	moveq	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	e022      	b.n	800716a <HAL_TIMEx_PWMN_Start+0x6a>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b04      	cmp	r3, #4
 8007128:	d109      	bne.n	800713e <HAL_TIMEx_PWMN_Start+0x3e>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b01      	cmp	r3, #1
 8007134:	bf14      	ite	ne
 8007136:	2301      	movne	r3, #1
 8007138:	2300      	moveq	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	e015      	b.n	800716a <HAL_TIMEx_PWMN_Start+0x6a>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b08      	cmp	r3, #8
 8007142:	d109      	bne.n	8007158 <HAL_TIMEx_PWMN_Start+0x58>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b01      	cmp	r3, #1
 800714e:	bf14      	ite	ne
 8007150:	2301      	movne	r3, #1
 8007152:	2300      	moveq	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	e008      	b.n	800716a <HAL_TIMEx_PWMN_Start+0x6a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b01      	cmp	r3, #1
 8007162:	bf14      	ite	ne
 8007164:	2301      	movne	r3, #1
 8007166:	2300      	moveq	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e040      	b.n	80071f4 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d104      	bne.n	8007182 <HAL_TIMEx_PWMN_Start+0x82>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007180:	e013      	b.n	80071aa <HAL_TIMEx_PWMN_Start+0xaa>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d104      	bne.n	8007192 <HAL_TIMEx_PWMN_Start+0x92>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007190:	e00b      	b.n	80071aa <HAL_TIMEx_PWMN_Start+0xaa>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d104      	bne.n	80071a2 <HAL_TIMEx_PWMN_Start+0xa2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071a0:	e003      	b.n	80071aa <HAL_TIMEx_PWMN_Start+0xaa>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2204      	movs	r2, #4
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 f98c 	bl	80074d0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <HAL_TIMEx_PWMN_Start+0xfc>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b06      	cmp	r3, #6
 80071d8:	d00b      	beq.n	80071f2 <HAL_TIMEx_PWMN_Start+0xf2>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e0:	d007      	beq.n	80071f2 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0201 	orr.w	r2, r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	00010007 	.word	0x00010007

08007200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007214:	2302      	movs	r3, #2
 8007216:	e065      	b.n	80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a2c      	ldr	r2, [pc, #176]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d004      	beq.n	800724c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a2b      	ldr	r2, [pc, #172]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d108      	bne.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007252:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007268:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1b      	ldr	r2, [pc, #108]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d018      	beq.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800728e:	d013      	beq.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a18      	ldr	r2, [pc, #96]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00e      	beq.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d009      	beq.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a12      	ldr	r2, [pc, #72]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a13      	ldr	r2, [pc, #76]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d10c      	bne.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	40013400 	.word	0x40013400
 80072f8:	40000400 	.word	0x40000400
 80072fc:	40000800 	.word	0x40000800
 8007300:	40014000 	.word	0x40014000

08007304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800731c:	2302      	movs	r3, #2
 800731e:	e087      	b.n	8007430 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	041b      	lsls	r3, r3, #16
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a27      	ldr	r2, [pc, #156]	; (800743c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a25      	ldr	r2, [pc, #148]	; (8007440 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d106      	bne.n	80073bc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1e      	ldr	r2, [pc, #120]	; (800743c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1d      	ldr	r2, [pc, #116]	; (8007440 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d126      	bne.n	800741e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	051b      	lsls	r3, r3, #20
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a0e      	ldr	r2, [pc, #56]	; (800743c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d004      	beq.n	8007410 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a0d      	ldr	r2, [pc, #52]	; (8007440 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d106      	bne.n	800741e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	40012c00 	.word	0x40012c00
 8007440:	40013400 	.word	0x40013400

08007444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f003 031f 	and.w	r3, r3, #31
 80074e2:	2204      	movs	r2, #4
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a1a      	ldr	r2, [r3, #32]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	43db      	mvns	r3, r3
 80074f2:	401a      	ands	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a1a      	ldr	r2, [r3, #32]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	fa01 f303 	lsl.w	r3, r1, r3
 8007508:	431a      	orrs	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e042      	b.n	80075b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fb f894 	bl	800266c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2224      	movs	r2, #36	; 0x24
 8007548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fa7f 	bl	8007a60 <UART_SetConfig>
 8007562:	4603      	mov	r3, r0
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e022      	b.n	80075b2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 fc2d 	bl	8008dd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007588:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007598:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 fcb4 	bl	8008f18 <UART_CheckIdleState>
 80075b0:	4603      	mov	r3, r0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	f040 80bc 	bne.w	800774e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <HAL_UART_Receive_IT+0x26>
 80075dc:	88fb      	ldrh	r3, [r7, #6]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e0b4      	b.n	8007750 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_UART_Receive_IT+0x38>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e0ad      	b.n	8007750 <HAL_UART_Receive_IT+0x194>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	88fa      	ldrh	r2, [r7, #6]
 8007606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	88fa      	ldrh	r2, [r7, #6]
 800760e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007620:	d10e      	bne.n	8007640 <HAL_UART_Receive_IT+0x84>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <HAL_UART_Receive_IT+0x7a>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007634:	e02d      	b.n	8007692 <HAL_UART_Receive_IT+0xd6>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	22ff      	movs	r2, #255	; 0xff
 800763a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800763e:	e028      	b.n	8007692 <HAL_UART_Receive_IT+0xd6>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10d      	bne.n	8007664 <HAL_UART_Receive_IT+0xa8>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <HAL_UART_Receive_IT+0x9e>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	22ff      	movs	r2, #255	; 0xff
 8007654:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007658:	e01b      	b.n	8007692 <HAL_UART_Receive_IT+0xd6>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	227f      	movs	r2, #127	; 0x7f
 800765e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007662:	e016      	b.n	8007692 <HAL_UART_Receive_IT+0xd6>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800766c:	d10d      	bne.n	800768a <HAL_UART_Receive_IT+0xce>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <HAL_UART_Receive_IT+0xc4>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	227f      	movs	r2, #127	; 0x7f
 800767a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800767e:	e008      	b.n	8007692 <HAL_UART_Receive_IT+0xd6>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	223f      	movs	r2, #63	; 0x3f
 8007684:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007688:	e003      	b.n	8007692 <HAL_UART_Receive_IT+0xd6>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2222      	movs	r2, #34	; 0x22
 800769e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f042 0201 	orr.w	r2, r2, #1
 80076b0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ba:	d12a      	bne.n	8007712 <HAL_UART_Receive_IT+0x156>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d324      	bcc.n	8007712 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d0:	d107      	bne.n	80076e2 <HAL_UART_Receive_IT+0x126>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d103      	bne.n	80076e2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a1f      	ldr	r2, [pc, #124]	; (800775c <HAL_UART_Receive_IT+0x1a0>)
 80076de:	66da      	str	r2, [r3, #108]	; 0x6c
 80076e0:	e002      	b.n	80076e8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4a1e      	ldr	r2, [pc, #120]	; (8007760 <HAL_UART_Receive_IT+0x1a4>)
 80076e6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076fe:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	e01b      	b.n	800774a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800771a:	d107      	bne.n	800772c <HAL_UART_Receive_IT+0x170>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d103      	bne.n	800772c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4a0f      	ldr	r2, [pc, #60]	; (8007764 <HAL_UART_Receive_IT+0x1a8>)
 8007728:	66da      	str	r2, [r3, #108]	; 0x6c
 800772a:	e002      	b.n	8007732 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4a0e      	ldr	r2, [pc, #56]	; (8007768 <HAL_UART_Receive_IT+0x1ac>)
 8007730:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007748:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	e000      	b.n	8007750 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800774e:	2302      	movs	r3, #2
  }
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	08009341 	.word	0x08009341
 8007760:	08009239 	.word	0x08009239
 8007764:	0800918d 	.word	0x0800918d
 8007768:	080090e3 	.word	0x080090e3

0800776c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d118      	bne.n	80077cc <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d013      	beq.n	80077cc <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d009      	beq.n	80077cc <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 812e 	beq.w	8007a1e <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4798      	blx	r3
      }
      return;
 80077ca:	e128      	b.n	8007a1e <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 80d1 	beq.w	8007976 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	4b96      	ldr	r3, [pc, #600]	; (8007a30 <HAL_UART_IRQHandler+0x2c4>)
 80077d8:	4013      	ands	r3, r2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d105      	bne.n	80077ea <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 80c6 	beq.w	8007976 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d010      	beq.n	8007816 <HAL_UART_IRQHandler+0xaa>
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2201      	movs	r2, #1
 8007804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780c:	f043 0201 	orr.w	r2, r3, #1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d010      	beq.n	8007842 <HAL_UART_IRQHandler+0xd6>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2202      	movs	r2, #2
 8007830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007838:	f043 0204 	orr.w	r2, r3, #4
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d010      	beq.n	800786e <HAL_UART_IRQHandler+0x102>
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2204      	movs	r2, #4
 800785c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007864:	f043 0202 	orr.w	r2, r3, #2
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d015      	beq.n	80078a4 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d104      	bne.n	800788c <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4b6a      	ldr	r3, [pc, #424]	; (8007a30 <HAL_UART_IRQHandler+0x2c4>)
 8007886:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2208      	movs	r2, #8
 8007892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789a:	f043 0208 	orr.w	r2, r3, #8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 80b9 	beq.w	8007a22 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d011      	beq.n	80078de <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f0:	2b40      	cmp	r3, #64	; 0x40
 80078f2:	d004      	beq.n	80078fe <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d031      	beq.n	8007962 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 fb9c 	bl	800903c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d123      	bne.n	800795a <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007920:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007926:	2b00      	cmp	r3, #0
 8007928:	d013      	beq.n	8007952 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800792e:	4a41      	ldr	r2, [pc, #260]	; (8007a34 <HAL_UART_IRQHandler+0x2c8>)
 8007930:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007936:	4618      	mov	r0, r3
 8007938:	f7fc fe69 	bl	800460e <HAL_DMA_Abort_IT>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d017      	beq.n	8007972 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	e00f      	b.n	8007972 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f87a 	bl	8007a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	e00b      	b.n	8007972 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f876 	bl	8007a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	e007      	b.n	8007972 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f872 	bl	8007a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007970:	e057      	b.n	8007a22 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007972:	bf00      	nop
    return;
 8007974:	e055      	b.n	8007a22 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <HAL_UART_IRQHandler+0x230>
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d008      	beq.n	800799c <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007992:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 fd57 	bl	8009448 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800799a:	e045      	b.n	8007a28 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d012      	beq.n	80079cc <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d104      	bne.n	80079ba <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d031      	beq.n	8007a26 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
    }
    return;
 80079ca:	e02c      	b.n	8007a26 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d008      	beq.n	80079e8 <HAL_UART_IRQHandler+0x27c>
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fb64 	bl	80090ae <UART_EndTransmit_IT>
    return;
 80079e6:	e01f      	b.n	8007a28 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d008      	beq.n	8007a04 <HAL_UART_IRQHandler+0x298>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 fd37 	bl	8009470 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a02:	e011      	b.n	8007a28 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <HAL_UART_IRQHandler+0x2bc>
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	da09      	bge.n	8007a28 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fd21 	bl	800945c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a1a:	bf00      	nop
 8007a1c:	e004      	b.n	8007a28 <HAL_UART_IRQHandler+0x2bc>
      return;
 8007a1e:	bf00      	nop
 8007a20:	e002      	b.n	8007a28 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007a22:	bf00      	nop
 8007a24:	e000      	b.n	8007a28 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007a26:	bf00      	nop
  }
}
 8007a28:	3720      	adds	r7, #32
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	10000001 	.word	0x10000001
 8007a34:	08009083 	.word	0x08009083

08007a38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a60:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007a64:	b08a      	sub	sp, #40	; 0x28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a94:	4313      	orrs	r3, r2
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4ba4      	ldr	r3, [pc, #656]	; (8007d30 <UART_SetConfig+0x2d0>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a99      	ldr	r2, [pc, #612]	; (8007d34 <UART_SetConfig+0x2d4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d004      	beq.n	8007adc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ae6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6812      	ldr	r2, [r2, #0]
 8007aee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007af0:	430b      	orrs	r3, r1
 8007af2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	f023 010f 	bic.w	r1, r3, #15
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a8a      	ldr	r2, [pc, #552]	; (8007d38 <UART_SetConfig+0x2d8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d126      	bne.n	8007b62 <UART_SetConfig+0x102>
 8007b14:	4b89      	ldr	r3, [pc, #548]	; (8007d3c <UART_SetConfig+0x2dc>)
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d81a      	bhi.n	8007b58 <UART_SetConfig+0xf8>
 8007b22:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <UART_SetConfig+0xc8>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b39 	.word	0x08007b39
 8007b2c:	08007b49 	.word	0x08007b49
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b3e:	e0d6      	b.n	8007cee <UART_SetConfig+0x28e>
 8007b40:	2302      	movs	r3, #2
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b46:	e0d2      	b.n	8007cee <UART_SetConfig+0x28e>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b4e:	e0ce      	b.n	8007cee <UART_SetConfig+0x28e>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b56:	e0ca      	b.n	8007cee <UART_SetConfig+0x28e>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b5e:	bf00      	nop
 8007b60:	e0c5      	b.n	8007cee <UART_SetConfig+0x28e>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a76      	ldr	r2, [pc, #472]	; (8007d40 <UART_SetConfig+0x2e0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d138      	bne.n	8007bde <UART_SetConfig+0x17e>
 8007b6c:	4b73      	ldr	r3, [pc, #460]	; (8007d3c <UART_SetConfig+0x2dc>)
 8007b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b72:	f003 030c 	and.w	r3, r3, #12
 8007b76:	2b0c      	cmp	r3, #12
 8007b78:	d82c      	bhi.n	8007bd4 <UART_SetConfig+0x174>
 8007b7a:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <UART_SetConfig+0x120>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007bb5 	.word	0x08007bb5
 8007b84:	08007bd5 	.word	0x08007bd5
 8007b88:	08007bd5 	.word	0x08007bd5
 8007b8c:	08007bd5 	.word	0x08007bd5
 8007b90:	08007bc5 	.word	0x08007bc5
 8007b94:	08007bd5 	.word	0x08007bd5
 8007b98:	08007bd5 	.word	0x08007bd5
 8007b9c:	08007bd5 	.word	0x08007bd5
 8007ba0:	08007bbd 	.word	0x08007bbd
 8007ba4:	08007bd5 	.word	0x08007bd5
 8007ba8:	08007bd5 	.word	0x08007bd5
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bcd 	.word	0x08007bcd
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bba:	e098      	b.n	8007cee <UART_SetConfig+0x28e>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bc2:	e094      	b.n	8007cee <UART_SetConfig+0x28e>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bca:	e090      	b.n	8007cee <UART_SetConfig+0x28e>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd2:	e08c      	b.n	8007cee <UART_SetConfig+0x28e>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bda:	bf00      	nop
 8007bdc:	e087      	b.n	8007cee <UART_SetConfig+0x28e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a58      	ldr	r2, [pc, #352]	; (8007d44 <UART_SetConfig+0x2e4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d125      	bne.n	8007c34 <UART_SetConfig+0x1d4>
 8007be8:	4b54      	ldr	r3, [pc, #336]	; (8007d3c <UART_SetConfig+0x2dc>)
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bf2:	2b10      	cmp	r3, #16
 8007bf4:	d011      	beq.n	8007c1a <UART_SetConfig+0x1ba>
 8007bf6:	2b10      	cmp	r3, #16
 8007bf8:	d802      	bhi.n	8007c00 <UART_SetConfig+0x1a0>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <UART_SetConfig+0x1aa>
 8007bfe:	e014      	b.n	8007c2a <UART_SetConfig+0x1ca>
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	d006      	beq.n	8007c12 <UART_SetConfig+0x1b2>
 8007c04:	2b30      	cmp	r3, #48	; 0x30
 8007c06:	d00c      	beq.n	8007c22 <UART_SetConfig+0x1c2>
 8007c08:	e00f      	b.n	8007c2a <UART_SetConfig+0x1ca>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c10:	e06d      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c12:	2302      	movs	r3, #2
 8007c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c18:	e069      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c1a:	2304      	movs	r3, #4
 8007c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c20:	e065      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c22:	2308      	movs	r3, #8
 8007c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c28:	e061      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c2a:	2310      	movs	r3, #16
 8007c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c30:	bf00      	nop
 8007c32:	e05c      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a43      	ldr	r2, [pc, #268]	; (8007d48 <UART_SetConfig+0x2e8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d125      	bne.n	8007c8a <UART_SetConfig+0x22a>
 8007c3e:	4b3f      	ldr	r3, [pc, #252]	; (8007d3c <UART_SetConfig+0x2dc>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d011      	beq.n	8007c70 <UART_SetConfig+0x210>
 8007c4c:	2b40      	cmp	r3, #64	; 0x40
 8007c4e:	d802      	bhi.n	8007c56 <UART_SetConfig+0x1f6>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <UART_SetConfig+0x200>
 8007c54:	e014      	b.n	8007c80 <UART_SetConfig+0x220>
 8007c56:	2b80      	cmp	r3, #128	; 0x80
 8007c58:	d006      	beq.n	8007c68 <UART_SetConfig+0x208>
 8007c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c5c:	d00c      	beq.n	8007c78 <UART_SetConfig+0x218>
 8007c5e:	e00f      	b.n	8007c80 <UART_SetConfig+0x220>
 8007c60:	2300      	movs	r3, #0
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c66:	e042      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c6e:	e03e      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c76:	e03a      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c7e:	e036      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c86:	bf00      	nop
 8007c88:	e031      	b.n	8007cee <UART_SetConfig+0x28e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a29      	ldr	r2, [pc, #164]	; (8007d34 <UART_SetConfig+0x2d4>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d129      	bne.n	8007ce8 <UART_SetConfig+0x288>
 8007c94:	4b29      	ldr	r3, [pc, #164]	; (8007d3c <UART_SetConfig+0x2dc>)
 8007c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca2:	d014      	beq.n	8007cce <UART_SetConfig+0x26e>
 8007ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca8:	d802      	bhi.n	8007cb0 <UART_SetConfig+0x250>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d007      	beq.n	8007cbe <UART_SetConfig+0x25e>
 8007cae:	e016      	b.n	8007cde <UART_SetConfig+0x27e>
 8007cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb4:	d007      	beq.n	8007cc6 <UART_SetConfig+0x266>
 8007cb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cba:	d00c      	beq.n	8007cd6 <UART_SetConfig+0x276>
 8007cbc:	e00f      	b.n	8007cde <UART_SetConfig+0x27e>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc4:	e013      	b.n	8007cee <UART_SetConfig+0x28e>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ccc:	e00f      	b.n	8007cee <UART_SetConfig+0x28e>
 8007cce:	2304      	movs	r3, #4
 8007cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cd4:	e00b      	b.n	8007cee <UART_SetConfig+0x28e>
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cdc:	e007      	b.n	8007cee <UART_SetConfig+0x28e>
 8007cde:	2310      	movs	r3, #16
 8007ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ce4:	bf00      	nop
 8007ce6:	e002      	b.n	8007cee <UART_SetConfig+0x28e>
 8007ce8:	2310      	movs	r3, #16
 8007cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a10      	ldr	r2, [pc, #64]	; (8007d34 <UART_SetConfig+0x2d4>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	f040 842e 	bne.w	8008556 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cfe:	2b08      	cmp	r3, #8
 8007d00:	f200 8169 	bhi.w	8007fd6 <UART_SetConfig+0x576>
 8007d04:	a201      	add	r2, pc, #4	; (adr r2, 8007d0c <UART_SetConfig+0x2ac>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d4d 	.word	0x08007d4d
 8007d10:	08007fd7 	.word	0x08007fd7
 8007d14:	08007def 	.word	0x08007def
 8007d18:	08007fd7 	.word	0x08007fd7
 8007d1c:	08007e87 	.word	0x08007e87
 8007d20:	08007fd7 	.word	0x08007fd7
 8007d24:	08007fd7 	.word	0x08007fd7
 8007d28:	08007fd7 	.word	0x08007fd7
 8007d2c:	08007f29 	.word	0x08007f29
 8007d30:	cfff69f3 	.word	0xcfff69f3
 8007d34:	40008000 	.word	0x40008000
 8007d38:	40013800 	.word	0x40013800
 8007d3c:	40021000 	.word	0x40021000
 8007d40:	40004400 	.word	0x40004400
 8007d44:	40004800 	.word	0x40004800
 8007d48:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007d4c:	f7fd fcae 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8007d50:	4602      	mov	r2, r0
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d044      	beq.n	8007de4 <UART_SetConfig+0x384>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d03e      	beq.n	8007de0 <UART_SetConfig+0x380>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d038      	beq.n	8007ddc <UART_SetConfig+0x37c>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d032      	beq.n	8007dd8 <UART_SetConfig+0x378>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d02c      	beq.n	8007dd4 <UART_SetConfig+0x374>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	d026      	beq.n	8007dd0 <UART_SetConfig+0x370>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	2b06      	cmp	r3, #6
 8007d88:	d020      	beq.n	8007dcc <UART_SetConfig+0x36c>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	2b07      	cmp	r3, #7
 8007d90:	d01a      	beq.n	8007dc8 <UART_SetConfig+0x368>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d014      	beq.n	8007dc4 <UART_SetConfig+0x364>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	d00e      	beq.n	8007dc0 <UART_SetConfig+0x360>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b0a      	cmp	r3, #10
 8007da8:	d008      	beq.n	8007dbc <UART_SetConfig+0x35c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b0b      	cmp	r3, #11
 8007db0:	d102      	bne.n	8007db8 <UART_SetConfig+0x358>
 8007db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007db6:	e016      	b.n	8007de6 <UART_SetConfig+0x386>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e014      	b.n	8007de6 <UART_SetConfig+0x386>
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	e012      	b.n	8007de6 <UART_SetConfig+0x386>
 8007dc0:	2340      	movs	r3, #64	; 0x40
 8007dc2:	e010      	b.n	8007de6 <UART_SetConfig+0x386>
 8007dc4:	2320      	movs	r3, #32
 8007dc6:	e00e      	b.n	8007de6 <UART_SetConfig+0x386>
 8007dc8:	2310      	movs	r3, #16
 8007dca:	e00c      	b.n	8007de6 <UART_SetConfig+0x386>
 8007dcc:	230c      	movs	r3, #12
 8007dce:	e00a      	b.n	8007de6 <UART_SetConfig+0x386>
 8007dd0:	230a      	movs	r3, #10
 8007dd2:	e008      	b.n	8007de6 <UART_SetConfig+0x386>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	e006      	b.n	8007de6 <UART_SetConfig+0x386>
 8007dd8:	2306      	movs	r3, #6
 8007dda:	e004      	b.n	8007de6 <UART_SetConfig+0x386>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	e002      	b.n	8007de6 <UART_SetConfig+0x386>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e000      	b.n	8007de6 <UART_SetConfig+0x386>
 8007de4:	2301      	movs	r3, #1
 8007de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dea:	617b      	str	r3, [r7, #20]
        break;
 8007dec:	e0f6      	b.n	8007fdc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d044      	beq.n	8007e80 <UART_SetConfig+0x420>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d03e      	beq.n	8007e7c <UART_SetConfig+0x41c>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d038      	beq.n	8007e78 <UART_SetConfig+0x418>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d032      	beq.n	8007e74 <UART_SetConfig+0x414>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d02c      	beq.n	8007e70 <UART_SetConfig+0x410>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	d026      	beq.n	8007e6c <UART_SetConfig+0x40c>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	2b06      	cmp	r3, #6
 8007e24:	d020      	beq.n	8007e68 <UART_SetConfig+0x408>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2b07      	cmp	r3, #7
 8007e2c:	d01a      	beq.n	8007e64 <UART_SetConfig+0x404>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d014      	beq.n	8007e60 <UART_SetConfig+0x400>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b09      	cmp	r3, #9
 8007e3c:	d00e      	beq.n	8007e5c <UART_SetConfig+0x3fc>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b0a      	cmp	r3, #10
 8007e44:	d008      	beq.n	8007e58 <UART_SetConfig+0x3f8>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b0b      	cmp	r3, #11
 8007e4c:	d102      	bne.n	8007e54 <UART_SetConfig+0x3f4>
 8007e4e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007e52:	e016      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e54:	4ba1      	ldr	r3, [pc, #644]	; (80080dc <UART_SetConfig+0x67c>)
 8007e56:	e014      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e58:	4ba1      	ldr	r3, [pc, #644]	; (80080e0 <UART_SetConfig+0x680>)
 8007e5a:	e012      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e5c:	4ba1      	ldr	r3, [pc, #644]	; (80080e4 <UART_SetConfig+0x684>)
 8007e5e:	e010      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e60:	4ba1      	ldr	r3, [pc, #644]	; (80080e8 <UART_SetConfig+0x688>)
 8007e62:	e00e      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e64:	4ba1      	ldr	r3, [pc, #644]	; (80080ec <UART_SetConfig+0x68c>)
 8007e66:	e00c      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e68:	4ba1      	ldr	r3, [pc, #644]	; (80080f0 <UART_SetConfig+0x690>)
 8007e6a:	e00a      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e6c:	4ba1      	ldr	r3, [pc, #644]	; (80080f4 <UART_SetConfig+0x694>)
 8007e6e:	e008      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e70:	4ba1      	ldr	r3, [pc, #644]	; (80080f8 <UART_SetConfig+0x698>)
 8007e72:	e006      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e74:	4ba1      	ldr	r3, [pc, #644]	; (80080fc <UART_SetConfig+0x69c>)
 8007e76:	e004      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e78:	4ba1      	ldr	r3, [pc, #644]	; (8008100 <UART_SetConfig+0x6a0>)
 8007e7a:	e002      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e7c:	4ba1      	ldr	r3, [pc, #644]	; (8008104 <UART_SetConfig+0x6a4>)
 8007e7e:	e000      	b.n	8007e82 <UART_SetConfig+0x422>
 8007e80:	4b96      	ldr	r3, [pc, #600]	; (80080dc <UART_SetConfig+0x67c>)
 8007e82:	617b      	str	r3, [r7, #20]
        break;
 8007e84:	e0aa      	b.n	8007fdc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e86:	f7fd fba3 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d044      	beq.n	8007f1e <UART_SetConfig+0x4be>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d03e      	beq.n	8007f1a <UART_SetConfig+0x4ba>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d038      	beq.n	8007f16 <UART_SetConfig+0x4b6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d032      	beq.n	8007f12 <UART_SetConfig+0x4b2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d02c      	beq.n	8007f0e <UART_SetConfig+0x4ae>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	2b05      	cmp	r3, #5
 8007eba:	d026      	beq.n	8007f0a <UART_SetConfig+0x4aa>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	2b06      	cmp	r3, #6
 8007ec2:	d020      	beq.n	8007f06 <UART_SetConfig+0x4a6>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	2b07      	cmp	r3, #7
 8007eca:	d01a      	beq.n	8007f02 <UART_SetConfig+0x4a2>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d014      	beq.n	8007efe <UART_SetConfig+0x49e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	2b09      	cmp	r3, #9
 8007eda:	d00e      	beq.n	8007efa <UART_SetConfig+0x49a>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	2b0a      	cmp	r3, #10
 8007ee2:	d008      	beq.n	8007ef6 <UART_SetConfig+0x496>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	2b0b      	cmp	r3, #11
 8007eea:	d102      	bne.n	8007ef2 <UART_SetConfig+0x492>
 8007eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ef0:	e016      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e014      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007ef6:	2380      	movs	r3, #128	; 0x80
 8007ef8:	e012      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007efa:	2340      	movs	r3, #64	; 0x40
 8007efc:	e010      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007efe:	2320      	movs	r3, #32
 8007f00:	e00e      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007f02:	2310      	movs	r3, #16
 8007f04:	e00c      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007f06:	230c      	movs	r3, #12
 8007f08:	e00a      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	e008      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007f0e:	2308      	movs	r3, #8
 8007f10:	e006      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007f12:	2306      	movs	r3, #6
 8007f14:	e004      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007f16:	2304      	movs	r3, #4
 8007f18:	e002      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e000      	b.n	8007f20 <UART_SetConfig+0x4c0>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	617b      	str	r3, [r7, #20]
        break;
 8007f26:	e059      	b.n	8007fdc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d04e      	beq.n	8007fce <UART_SetConfig+0x56e>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d047      	beq.n	8007fc8 <UART_SetConfig+0x568>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d040      	beq.n	8007fc2 <UART_SetConfig+0x562>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d039      	beq.n	8007fbc <UART_SetConfig+0x55c>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d032      	beq.n	8007fb6 <UART_SetConfig+0x556>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b05      	cmp	r3, #5
 8007f56:	d02b      	beq.n	8007fb0 <UART_SetConfig+0x550>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	2b06      	cmp	r3, #6
 8007f5e:	d024      	beq.n	8007faa <UART_SetConfig+0x54a>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	2b07      	cmp	r3, #7
 8007f66:	d01d      	beq.n	8007fa4 <UART_SetConfig+0x544>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d016      	beq.n	8007f9e <UART_SetConfig+0x53e>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	2b09      	cmp	r3, #9
 8007f76:	d00f      	beq.n	8007f98 <UART_SetConfig+0x538>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2b0a      	cmp	r3, #10
 8007f7e:	d008      	beq.n	8007f92 <UART_SetConfig+0x532>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	2b0b      	cmp	r3, #11
 8007f86:	d101      	bne.n	8007f8c <UART_SetConfig+0x52c>
 8007f88:	2380      	movs	r3, #128	; 0x80
 8007f8a:	e022      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f90:	e01f      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f96:	e01c      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f9c:	e019      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa2:	e016      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007fa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fa8:	e013      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007faa:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007fae:	e010      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007fb0:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007fb4:	e00d      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fba:	e00a      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007fbc:	f241 5355 	movw	r3, #5461	; 0x1555
 8007fc0:	e007      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fc6:	e004      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007fc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fcc:	e001      	b.n	8007fd2 <UART_SetConfig+0x572>
 8007fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fd2:	617b      	str	r3, [r7, #20]
        break;
 8007fd4:	e002      	b.n	8007fdc <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	76fb      	strb	r3, [r7, #27]
        break;
 8007fda:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 86cd 	beq.w	8008d7e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	4413      	add	r3, r2
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d305      	bcc.n	8008000 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d903      	bls.n	8008008 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	76fb      	strb	r3, [r7, #27]
 8008004:	f000 bebb 	b.w	8008d7e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8008008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800800c:	2b08      	cmp	r3, #8
 800800e:	f200 828d 	bhi.w	800852c <UART_SetConfig+0xacc>
 8008012:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <UART_SetConfig+0x5b8>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	0800803d 	.word	0x0800803d
 800801c:	0800852d 	.word	0x0800852d
 8008020:	080081a7 	.word	0x080081a7
 8008024:	0800852d 	.word	0x0800852d
 8008028:	0800829d 	.word	0x0800829d
 800802c:	0800852d 	.word	0x0800852d
 8008030:	0800852d 	.word	0x0800852d
 8008034:	0800852d 	.word	0x0800852d
 8008038:	080083db 	.word	0x080083db
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800803c:	f7fd fb36 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8008040:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	4618      	mov	r0, r3
 8008046:	f04f 0100 	mov.w	r1, #0
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	2b00      	cmp	r3, #0
 8008050:	d07d      	beq.n	800814e <UART_SetConfig+0x6ee>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b01      	cmp	r3, #1
 8008058:	d074      	beq.n	8008144 <UART_SetConfig+0x6e4>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b02      	cmp	r3, #2
 8008060:	d06b      	beq.n	800813a <UART_SetConfig+0x6da>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b03      	cmp	r3, #3
 8008068:	d062      	beq.n	8008130 <UART_SetConfig+0x6d0>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	2b04      	cmp	r3, #4
 8008070:	d059      	beq.n	8008126 <UART_SetConfig+0x6c6>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b05      	cmp	r3, #5
 8008078:	d050      	beq.n	800811c <UART_SetConfig+0x6bc>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b06      	cmp	r3, #6
 8008080:	d047      	beq.n	8008112 <UART_SetConfig+0x6b2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	2b07      	cmp	r3, #7
 8008088:	d03e      	beq.n	8008108 <UART_SetConfig+0x6a8>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	2b08      	cmp	r3, #8
 8008090:	d01f      	beq.n	80080d2 <UART_SetConfig+0x672>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	2b09      	cmp	r3, #9
 8008098:	d016      	beq.n	80080c8 <UART_SetConfig+0x668>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	2b0a      	cmp	r3, #10
 80080a0:	d00d      	beq.n	80080be <UART_SetConfig+0x65e>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	2b0b      	cmp	r3, #11
 80080a8:	d104      	bne.n	80080b4 <UART_SetConfig+0x654>
 80080aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080ae:	f04f 0400 	mov.w	r4, #0
 80080b2:	e050      	b.n	8008156 <UART_SetConfig+0x6f6>
 80080b4:	f04f 0301 	mov.w	r3, #1
 80080b8:	f04f 0400 	mov.w	r4, #0
 80080bc:	e04b      	b.n	8008156 <UART_SetConfig+0x6f6>
 80080be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80080c2:	f04f 0400 	mov.w	r4, #0
 80080c6:	e046      	b.n	8008156 <UART_SetConfig+0x6f6>
 80080c8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80080cc:	f04f 0400 	mov.w	r4, #0
 80080d0:	e041      	b.n	8008156 <UART_SetConfig+0x6f6>
 80080d2:	f04f 0320 	mov.w	r3, #32
 80080d6:	f04f 0400 	mov.w	r4, #0
 80080da:	e03c      	b.n	8008156 <UART_SetConfig+0x6f6>
 80080dc:	00f42400 	.word	0x00f42400
 80080e0:	0001e848 	.word	0x0001e848
 80080e4:	0003d090 	.word	0x0003d090
 80080e8:	0007a120 	.word	0x0007a120
 80080ec:	000f4240 	.word	0x000f4240
 80080f0:	00145855 	.word	0x00145855
 80080f4:	00186a00 	.word	0x00186a00
 80080f8:	001e8480 	.word	0x001e8480
 80080fc:	0028b0aa 	.word	0x0028b0aa
 8008100:	003d0900 	.word	0x003d0900
 8008104:	007a1200 	.word	0x007a1200
 8008108:	f04f 0310 	mov.w	r3, #16
 800810c:	f04f 0400 	mov.w	r4, #0
 8008110:	e021      	b.n	8008156 <UART_SetConfig+0x6f6>
 8008112:	f04f 030c 	mov.w	r3, #12
 8008116:	f04f 0400 	mov.w	r4, #0
 800811a:	e01c      	b.n	8008156 <UART_SetConfig+0x6f6>
 800811c:	f04f 030a 	mov.w	r3, #10
 8008120:	f04f 0400 	mov.w	r4, #0
 8008124:	e017      	b.n	8008156 <UART_SetConfig+0x6f6>
 8008126:	f04f 0308 	mov.w	r3, #8
 800812a:	f04f 0400 	mov.w	r4, #0
 800812e:	e012      	b.n	8008156 <UART_SetConfig+0x6f6>
 8008130:	f04f 0306 	mov.w	r3, #6
 8008134:	f04f 0400 	mov.w	r4, #0
 8008138:	e00d      	b.n	8008156 <UART_SetConfig+0x6f6>
 800813a:	f04f 0304 	mov.w	r3, #4
 800813e:	f04f 0400 	mov.w	r4, #0
 8008142:	e008      	b.n	8008156 <UART_SetConfig+0x6f6>
 8008144:	f04f 0302 	mov.w	r3, #2
 8008148:	f04f 0400 	mov.w	r4, #0
 800814c:	e003      	b.n	8008156 <UART_SetConfig+0x6f6>
 800814e:	f04f 0301 	mov.w	r3, #1
 8008152:	f04f 0400 	mov.w	r4, #0
 8008156:	461a      	mov	r2, r3
 8008158:	4623      	mov	r3, r4
 800815a:	f7f8 fd03 	bl	8000b64 <__aeabi_uldivmod>
 800815e:	4603      	mov	r3, r0
 8008160:	460c      	mov	r4, r1
 8008162:	4619      	mov	r1, r3
 8008164:	4622      	mov	r2, r4
 8008166:	f04f 0300 	mov.w	r3, #0
 800816a:	f04f 0400 	mov.w	r4, #0
 800816e:	0214      	lsls	r4, r2, #8
 8008170:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008174:	020b      	lsls	r3, r1, #8
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6852      	ldr	r2, [r2, #4]
 800817a:	0852      	lsrs	r2, r2, #1
 800817c:	4611      	mov	r1, r2
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	eb13 0b01 	adds.w	fp, r3, r1
 8008186:	eb44 0c02 	adc.w	ip, r4, r2
 800818a:	4658      	mov	r0, fp
 800818c:	4661      	mov	r1, ip
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f04f 0400 	mov.w	r4, #0
 8008196:	461a      	mov	r2, r3
 8008198:	4623      	mov	r3, r4
 800819a:	f7f8 fce3 	bl	8000b64 <__aeabi_uldivmod>
 800819e:	4603      	mov	r3, r0
 80081a0:	460c      	mov	r4, r1
 80081a2:	61fb      	str	r3, [r7, #28]
            break;
 80081a4:	e1c5      	b.n	8008532 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d05b      	beq.n	8008266 <UART_SetConfig+0x806>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d053      	beq.n	800825e <UART_SetConfig+0x7fe>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d04b      	beq.n	8008256 <UART_SetConfig+0x7f6>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d043      	beq.n	800824e <UART_SetConfig+0x7ee>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d03b      	beq.n	8008246 <UART_SetConfig+0x7e6>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d033      	beq.n	800823e <UART_SetConfig+0x7de>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	2b06      	cmp	r3, #6
 80081dc:	d02b      	beq.n	8008236 <UART_SetConfig+0x7d6>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	2b07      	cmp	r3, #7
 80081e4:	d023      	beq.n	800822e <UART_SetConfig+0x7ce>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	2b08      	cmp	r3, #8
 80081ec:	d01b      	beq.n	8008226 <UART_SetConfig+0x7c6>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d013      	beq.n	800821e <UART_SetConfig+0x7be>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b0a      	cmp	r3, #10
 80081fc:	d00b      	beq.n	8008216 <UART_SetConfig+0x7b6>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	2b0b      	cmp	r3, #11
 8008204:	d103      	bne.n	800820e <UART_SetConfig+0x7ae>
 8008206:	4bae      	ldr	r3, [pc, #696]	; (80084c0 <UART_SetConfig+0xa60>)
 8008208:	f04f 0400 	mov.w	r4, #0
 800820c:	e02e      	b.n	800826c <UART_SetConfig+0x80c>
 800820e:	4bad      	ldr	r3, [pc, #692]	; (80084c4 <UART_SetConfig+0xa64>)
 8008210:	f04f 0400 	mov.w	r4, #0
 8008214:	e02a      	b.n	800826c <UART_SetConfig+0x80c>
 8008216:	4bac      	ldr	r3, [pc, #688]	; (80084c8 <UART_SetConfig+0xa68>)
 8008218:	f04f 0400 	mov.w	r4, #0
 800821c:	e026      	b.n	800826c <UART_SetConfig+0x80c>
 800821e:	4bab      	ldr	r3, [pc, #684]	; (80084cc <UART_SetConfig+0xa6c>)
 8008220:	f04f 0400 	mov.w	r4, #0
 8008224:	e022      	b.n	800826c <UART_SetConfig+0x80c>
 8008226:	4baa      	ldr	r3, [pc, #680]	; (80084d0 <UART_SetConfig+0xa70>)
 8008228:	f04f 0400 	mov.w	r4, #0
 800822c:	e01e      	b.n	800826c <UART_SetConfig+0x80c>
 800822e:	4ba9      	ldr	r3, [pc, #676]	; (80084d4 <UART_SetConfig+0xa74>)
 8008230:	f04f 0400 	mov.w	r4, #0
 8008234:	e01a      	b.n	800826c <UART_SetConfig+0x80c>
 8008236:	a49e      	add	r4, pc, #632	; (adr r4, 80084b0 <UART_SetConfig+0xa50>)
 8008238:	e9d4 3400 	ldrd	r3, r4, [r4]
 800823c:	e016      	b.n	800826c <UART_SetConfig+0x80c>
 800823e:	4ba6      	ldr	r3, [pc, #664]	; (80084d8 <UART_SetConfig+0xa78>)
 8008240:	f04f 0400 	mov.w	r4, #0
 8008244:	e012      	b.n	800826c <UART_SetConfig+0x80c>
 8008246:	4ba5      	ldr	r3, [pc, #660]	; (80084dc <UART_SetConfig+0xa7c>)
 8008248:	f04f 0400 	mov.w	r4, #0
 800824c:	e00e      	b.n	800826c <UART_SetConfig+0x80c>
 800824e:	a49a      	add	r4, pc, #616	; (adr r4, 80084b8 <UART_SetConfig+0xa58>)
 8008250:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008254:	e00a      	b.n	800826c <UART_SetConfig+0x80c>
 8008256:	4ba2      	ldr	r3, [pc, #648]	; (80084e0 <UART_SetConfig+0xa80>)
 8008258:	f04f 0400 	mov.w	r4, #0
 800825c:	e006      	b.n	800826c <UART_SetConfig+0x80c>
 800825e:	4ba1      	ldr	r3, [pc, #644]	; (80084e4 <UART_SetConfig+0xa84>)
 8008260:	f04f 0400 	mov.w	r4, #0
 8008264:	e002      	b.n	800826c <UART_SetConfig+0x80c>
 8008266:	4b97      	ldr	r3, [pc, #604]	; (80084c4 <UART_SetConfig+0xa64>)
 8008268:	f04f 0400 	mov.w	r4, #0
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6852      	ldr	r2, [r2, #4]
 8008270:	0852      	lsrs	r2, r2, #1
 8008272:	4611      	mov	r1, r2
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	eb13 0b01 	adds.w	fp, r3, r1
 800827c:	eb44 0c02 	adc.w	ip, r4, r2
 8008280:	4658      	mov	r0, fp
 8008282:	4661      	mov	r1, ip
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f04f 0400 	mov.w	r4, #0
 800828c:	461a      	mov	r2, r3
 800828e:	4623      	mov	r3, r4
 8008290:	f7f8 fc68 	bl	8000b64 <__aeabi_uldivmod>
 8008294:	4603      	mov	r3, r0
 8008296:	460c      	mov	r4, r1
 8008298:	61fb      	str	r3, [r7, #28]
            break;
 800829a:	e14a      	b.n	8008532 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800829c:	f7fd f998 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 80082a0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f04f 0100 	mov.w	r1, #0
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d067      	beq.n	8008382 <UART_SetConfig+0x922>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d05e      	beq.n	8008378 <UART_SetConfig+0x918>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d055      	beq.n	800836e <UART_SetConfig+0x90e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d04c      	beq.n	8008364 <UART_SetConfig+0x904>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d043      	beq.n	800835a <UART_SetConfig+0x8fa>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	2b05      	cmp	r3, #5
 80082d8:	d03a      	beq.n	8008350 <UART_SetConfig+0x8f0>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	2b06      	cmp	r3, #6
 80082e0:	d031      	beq.n	8008346 <UART_SetConfig+0x8e6>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	2b07      	cmp	r3, #7
 80082e8:	d028      	beq.n	800833c <UART_SetConfig+0x8dc>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b08      	cmp	r3, #8
 80082f0:	d01f      	beq.n	8008332 <UART_SetConfig+0x8d2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	2b09      	cmp	r3, #9
 80082f8:	d016      	beq.n	8008328 <UART_SetConfig+0x8c8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	2b0a      	cmp	r3, #10
 8008300:	d00d      	beq.n	800831e <UART_SetConfig+0x8be>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	2b0b      	cmp	r3, #11
 8008308:	d104      	bne.n	8008314 <UART_SetConfig+0x8b4>
 800830a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800830e:	f04f 0400 	mov.w	r4, #0
 8008312:	e03a      	b.n	800838a <UART_SetConfig+0x92a>
 8008314:	f04f 0301 	mov.w	r3, #1
 8008318:	f04f 0400 	mov.w	r4, #0
 800831c:	e035      	b.n	800838a <UART_SetConfig+0x92a>
 800831e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008322:	f04f 0400 	mov.w	r4, #0
 8008326:	e030      	b.n	800838a <UART_SetConfig+0x92a>
 8008328:	f04f 0340 	mov.w	r3, #64	; 0x40
 800832c:	f04f 0400 	mov.w	r4, #0
 8008330:	e02b      	b.n	800838a <UART_SetConfig+0x92a>
 8008332:	f04f 0320 	mov.w	r3, #32
 8008336:	f04f 0400 	mov.w	r4, #0
 800833a:	e026      	b.n	800838a <UART_SetConfig+0x92a>
 800833c:	f04f 0310 	mov.w	r3, #16
 8008340:	f04f 0400 	mov.w	r4, #0
 8008344:	e021      	b.n	800838a <UART_SetConfig+0x92a>
 8008346:	f04f 030c 	mov.w	r3, #12
 800834a:	f04f 0400 	mov.w	r4, #0
 800834e:	e01c      	b.n	800838a <UART_SetConfig+0x92a>
 8008350:	f04f 030a 	mov.w	r3, #10
 8008354:	f04f 0400 	mov.w	r4, #0
 8008358:	e017      	b.n	800838a <UART_SetConfig+0x92a>
 800835a:	f04f 0308 	mov.w	r3, #8
 800835e:	f04f 0400 	mov.w	r4, #0
 8008362:	e012      	b.n	800838a <UART_SetConfig+0x92a>
 8008364:	f04f 0306 	mov.w	r3, #6
 8008368:	f04f 0400 	mov.w	r4, #0
 800836c:	e00d      	b.n	800838a <UART_SetConfig+0x92a>
 800836e:	f04f 0304 	mov.w	r3, #4
 8008372:	f04f 0400 	mov.w	r4, #0
 8008376:	e008      	b.n	800838a <UART_SetConfig+0x92a>
 8008378:	f04f 0302 	mov.w	r3, #2
 800837c:	f04f 0400 	mov.w	r4, #0
 8008380:	e003      	b.n	800838a <UART_SetConfig+0x92a>
 8008382:	f04f 0301 	mov.w	r3, #1
 8008386:	f04f 0400 	mov.w	r4, #0
 800838a:	461a      	mov	r2, r3
 800838c:	4623      	mov	r3, r4
 800838e:	f7f8 fbe9 	bl	8000b64 <__aeabi_uldivmod>
 8008392:	4603      	mov	r3, r0
 8008394:	460c      	mov	r4, r1
 8008396:	4619      	mov	r1, r3
 8008398:	4622      	mov	r2, r4
 800839a:	f04f 0300 	mov.w	r3, #0
 800839e:	f04f 0400 	mov.w	r4, #0
 80083a2:	0214      	lsls	r4, r2, #8
 80083a4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80083a8:	020b      	lsls	r3, r1, #8
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6852      	ldr	r2, [r2, #4]
 80083ae:	0852      	lsrs	r2, r2, #1
 80083b0:	4611      	mov	r1, r2
 80083b2:	f04f 0200 	mov.w	r2, #0
 80083b6:	eb13 0b01 	adds.w	fp, r3, r1
 80083ba:	eb44 0c02 	adc.w	ip, r4, r2
 80083be:	4658      	mov	r0, fp
 80083c0:	4661      	mov	r1, ip
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f04f 0400 	mov.w	r4, #0
 80083ca:	461a      	mov	r2, r3
 80083cc:	4623      	mov	r3, r4
 80083ce:	f7f8 fbc9 	bl	8000b64 <__aeabi_uldivmod>
 80083d2:	4603      	mov	r3, r0
 80083d4:	460c      	mov	r4, r1
 80083d6:	61fb      	str	r3, [r7, #28]
            break;
 80083d8:	e0ab      	b.n	8008532 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 8088 	beq.w	80084f4 <UART_SetConfig+0xa94>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d05b      	beq.n	80084a4 <UART_SetConfig+0xa44>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d052      	beq.n	800849a <UART_SetConfig+0xa3a>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d04a      	beq.n	8008492 <UART_SetConfig+0xa32>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2b04      	cmp	r3, #4
 8008402:	d041      	beq.n	8008488 <UART_SetConfig+0xa28>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b05      	cmp	r3, #5
 800840a:	d039      	beq.n	8008480 <UART_SetConfig+0xa20>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	2b06      	cmp	r3, #6
 8008412:	d031      	beq.n	8008478 <UART_SetConfig+0xa18>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	2b07      	cmp	r3, #7
 800841a:	d028      	beq.n	800846e <UART_SetConfig+0xa0e>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	2b08      	cmp	r3, #8
 8008422:	d01f      	beq.n	8008464 <UART_SetConfig+0xa04>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	2b09      	cmp	r3, #9
 800842a:	d016      	beq.n	800845a <UART_SetConfig+0x9fa>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	2b0a      	cmp	r3, #10
 8008432:	d00d      	beq.n	8008450 <UART_SetConfig+0x9f0>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b0b      	cmp	r3, #11
 800843a:	d104      	bne.n	8008446 <UART_SetConfig+0x9e6>
 800843c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008440:	f04f 0400 	mov.w	r4, #0
 8008444:	e05a      	b.n	80084fc <UART_SetConfig+0xa9c>
 8008446:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800844a:	f04f 0400 	mov.w	r4, #0
 800844e:	e055      	b.n	80084fc <UART_SetConfig+0xa9c>
 8008450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008454:	f04f 0400 	mov.w	r4, #0
 8008458:	e050      	b.n	80084fc <UART_SetConfig+0xa9c>
 800845a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800845e:	f04f 0400 	mov.w	r4, #0
 8008462:	e04b      	b.n	80084fc <UART_SetConfig+0xa9c>
 8008464:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008468:	f04f 0400 	mov.w	r4, #0
 800846c:	e046      	b.n	80084fc <UART_SetConfig+0xa9c>
 800846e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008472:	f04f 0400 	mov.w	r4, #0
 8008476:	e041      	b.n	80084fc <UART_SetConfig+0xa9c>
 8008478:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <UART_SetConfig+0xa88>)
 800847a:	f04f 0400 	mov.w	r4, #0
 800847e:	e03d      	b.n	80084fc <UART_SetConfig+0xa9c>
 8008480:	4b1a      	ldr	r3, [pc, #104]	; (80084ec <UART_SetConfig+0xa8c>)
 8008482:	f04f 0400 	mov.w	r4, #0
 8008486:	e039      	b.n	80084fc <UART_SetConfig+0xa9c>
 8008488:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800848c:	f04f 0400 	mov.w	r4, #0
 8008490:	e034      	b.n	80084fc <UART_SetConfig+0xa9c>
 8008492:	4b17      	ldr	r3, [pc, #92]	; (80084f0 <UART_SetConfig+0xa90>)
 8008494:	f04f 0400 	mov.w	r4, #0
 8008498:	e030      	b.n	80084fc <UART_SetConfig+0xa9c>
 800849a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800849e:	f04f 0400 	mov.w	r4, #0
 80084a2:	e02b      	b.n	80084fc <UART_SetConfig+0xa9c>
 80084a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80084a8:	f04f 0400 	mov.w	r4, #0
 80084ac:	e026      	b.n	80084fc <UART_SetConfig+0xa9c>
 80084ae:	bf00      	nop
 80084b0:	14585500 	.word	0x14585500
 80084b4:	00000000 	.word	0x00000000
 80084b8:	28b0aa00 	.word	0x28b0aa00
 80084bc:	00000000 	.word	0x00000000
 80084c0:	00f42400 	.word	0x00f42400
 80084c4:	f4240000 	.word	0xf4240000
 80084c8:	01e84800 	.word	0x01e84800
 80084cc:	03d09000 	.word	0x03d09000
 80084d0:	07a12000 	.word	0x07a12000
 80084d4:	0f424000 	.word	0x0f424000
 80084d8:	186a0000 	.word	0x186a0000
 80084dc:	1e848000 	.word	0x1e848000
 80084e0:	3d090000 	.word	0x3d090000
 80084e4:	7a120000 	.word	0x7a120000
 80084e8:	000aaa00 	.word	0x000aaa00
 80084ec:	000ccc00 	.word	0x000ccc00
 80084f0:	00155500 	.word	0x00155500
 80084f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80084f8:	f04f 0400 	mov.w	r4, #0
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	6852      	ldr	r2, [r2, #4]
 8008500:	0852      	lsrs	r2, r2, #1
 8008502:	4611      	mov	r1, r2
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	eb13 0b01 	adds.w	fp, r3, r1
 800850c:	eb44 0c02 	adc.w	ip, r4, r2
 8008510:	4658      	mov	r0, fp
 8008512:	4661      	mov	r1, ip
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f04f 0400 	mov.w	r4, #0
 800851c:	461a      	mov	r2, r3
 800851e:	4623      	mov	r3, r4
 8008520:	f7f8 fb20 	bl	8000b64 <__aeabi_uldivmod>
 8008524:	4603      	mov	r3, r0
 8008526:	460c      	mov	r4, r1
 8008528:	61fb      	str	r3, [r7, #28]
            break;
 800852a:	e002      	b.n	8008532 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	76fb      	strb	r3, [r7, #27]
            break;
 8008530:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008538:	d309      	bcc.n	800854e <UART_SetConfig+0xaee>
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008540:	d205      	bcs.n	800854e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	f000 bc18 	b.w	8008d7e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	76fb      	strb	r3, [r7, #27]
 8008552:	f000 bc14 	b.w	8008d7e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855e:	f040 8204 	bne.w	800896a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8008562:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008566:	2b08      	cmp	r3, #8
 8008568:	f200 81df 	bhi.w	800892a <UART_SetConfig+0xeca>
 800856c:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <UART_SetConfig+0xb14>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	08008599 	.word	0x08008599
 8008578:	08008651 	.word	0x08008651
 800857c:	08008709 	.word	0x08008709
 8008580:	0800892b 	.word	0x0800892b
 8008584:	080087b1 	.word	0x080087b1
 8008588:	0800892b 	.word	0x0800892b
 800858c:	0800892b 	.word	0x0800892b
 8008590:	0800892b 	.word	0x0800892b
 8008594:	08008869 	.word	0x08008869
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008598:	f7fd f888 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 800859c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d044      	beq.n	8008630 <UART_SetConfig+0xbd0>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d03e      	beq.n	800862c <UART_SetConfig+0xbcc>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d038      	beq.n	8008628 <UART_SetConfig+0xbc8>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d032      	beq.n	8008624 <UART_SetConfig+0xbc4>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d02c      	beq.n	8008620 <UART_SetConfig+0xbc0>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	d026      	beq.n	800861c <UART_SetConfig+0xbbc>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	2b06      	cmp	r3, #6
 80085d4:	d020      	beq.n	8008618 <UART_SetConfig+0xbb8>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	2b07      	cmp	r3, #7
 80085dc:	d01a      	beq.n	8008614 <UART_SetConfig+0xbb4>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	2b08      	cmp	r3, #8
 80085e4:	d014      	beq.n	8008610 <UART_SetConfig+0xbb0>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	2b09      	cmp	r3, #9
 80085ec:	d00e      	beq.n	800860c <UART_SetConfig+0xbac>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	2b0a      	cmp	r3, #10
 80085f4:	d008      	beq.n	8008608 <UART_SetConfig+0xba8>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	2b0b      	cmp	r3, #11
 80085fc:	d102      	bne.n	8008604 <UART_SetConfig+0xba4>
 80085fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008602:	e016      	b.n	8008632 <UART_SetConfig+0xbd2>
 8008604:	2301      	movs	r3, #1
 8008606:	e014      	b.n	8008632 <UART_SetConfig+0xbd2>
 8008608:	2380      	movs	r3, #128	; 0x80
 800860a:	e012      	b.n	8008632 <UART_SetConfig+0xbd2>
 800860c:	2340      	movs	r3, #64	; 0x40
 800860e:	e010      	b.n	8008632 <UART_SetConfig+0xbd2>
 8008610:	2320      	movs	r3, #32
 8008612:	e00e      	b.n	8008632 <UART_SetConfig+0xbd2>
 8008614:	2310      	movs	r3, #16
 8008616:	e00c      	b.n	8008632 <UART_SetConfig+0xbd2>
 8008618:	230c      	movs	r3, #12
 800861a:	e00a      	b.n	8008632 <UART_SetConfig+0xbd2>
 800861c:	230a      	movs	r3, #10
 800861e:	e008      	b.n	8008632 <UART_SetConfig+0xbd2>
 8008620:	2308      	movs	r3, #8
 8008622:	e006      	b.n	8008632 <UART_SetConfig+0xbd2>
 8008624:	2306      	movs	r3, #6
 8008626:	e004      	b.n	8008632 <UART_SetConfig+0xbd2>
 8008628:	2304      	movs	r3, #4
 800862a:	e002      	b.n	8008632 <UART_SetConfig+0xbd2>
 800862c:	2302      	movs	r3, #2
 800862e:	e000      	b.n	8008632 <UART_SetConfig+0xbd2>
 8008630:	2301      	movs	r3, #1
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	fbb2 f3f3 	udiv	r3, r2, r3
 8008638:	005a      	lsls	r2, r3, #1
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	441a      	add	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	fbb2 f3f3 	udiv	r3, r2, r3
 800864a:	b29b      	uxth	r3, r3
 800864c:	61fb      	str	r3, [r7, #28]
        break;
 800864e:	e16f      	b.n	8008930 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008650:	f7fd f842 	bl	80056d8 <HAL_RCC_GetPCLK2Freq>
 8008654:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d044      	beq.n	80086e8 <UART_SetConfig+0xc88>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b01      	cmp	r3, #1
 8008664:	d03e      	beq.n	80086e4 <UART_SetConfig+0xc84>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	2b02      	cmp	r3, #2
 800866c:	d038      	beq.n	80086e0 <UART_SetConfig+0xc80>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b03      	cmp	r3, #3
 8008674:	d032      	beq.n	80086dc <UART_SetConfig+0xc7c>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	2b04      	cmp	r3, #4
 800867c:	d02c      	beq.n	80086d8 <UART_SetConfig+0xc78>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	2b05      	cmp	r3, #5
 8008684:	d026      	beq.n	80086d4 <UART_SetConfig+0xc74>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b06      	cmp	r3, #6
 800868c:	d020      	beq.n	80086d0 <UART_SetConfig+0xc70>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	2b07      	cmp	r3, #7
 8008694:	d01a      	beq.n	80086cc <UART_SetConfig+0xc6c>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	2b08      	cmp	r3, #8
 800869c:	d014      	beq.n	80086c8 <UART_SetConfig+0xc68>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	2b09      	cmp	r3, #9
 80086a4:	d00e      	beq.n	80086c4 <UART_SetConfig+0xc64>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	2b0a      	cmp	r3, #10
 80086ac:	d008      	beq.n	80086c0 <UART_SetConfig+0xc60>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	2b0b      	cmp	r3, #11
 80086b4:	d102      	bne.n	80086bc <UART_SetConfig+0xc5c>
 80086b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ba:	e016      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086bc:	2301      	movs	r3, #1
 80086be:	e014      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	e012      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086c4:	2340      	movs	r3, #64	; 0x40
 80086c6:	e010      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086c8:	2320      	movs	r3, #32
 80086ca:	e00e      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086cc:	2310      	movs	r3, #16
 80086ce:	e00c      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086d0:	230c      	movs	r3, #12
 80086d2:	e00a      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086d4:	230a      	movs	r3, #10
 80086d6:	e008      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086d8:	2308      	movs	r3, #8
 80086da:	e006      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086dc:	2306      	movs	r3, #6
 80086de:	e004      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086e0:	2304      	movs	r3, #4
 80086e2:	e002      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e000      	b.n	80086ea <UART_SetConfig+0xc8a>
 80086e8:	2301      	movs	r3, #1
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f0:	005a      	lsls	r2, r3, #1
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	085b      	lsrs	r3, r3, #1
 80086f8:	441a      	add	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008702:	b29b      	uxth	r3, r3
 8008704:	61fb      	str	r3, [r7, #28]
        break;
 8008706:	e113      	b.n	8008930 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	d043      	beq.n	8008798 <UART_SetConfig+0xd38>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	2b01      	cmp	r3, #1
 8008716:	d03d      	beq.n	8008794 <UART_SetConfig+0xd34>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	2b02      	cmp	r3, #2
 800871e:	d037      	beq.n	8008790 <UART_SetConfig+0xd30>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	2b03      	cmp	r3, #3
 8008726:	d031      	beq.n	800878c <UART_SetConfig+0xd2c>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b04      	cmp	r3, #4
 800872e:	d02b      	beq.n	8008788 <UART_SetConfig+0xd28>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	2b05      	cmp	r3, #5
 8008736:	d025      	beq.n	8008784 <UART_SetConfig+0xd24>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b06      	cmp	r3, #6
 800873e:	d01f      	beq.n	8008780 <UART_SetConfig+0xd20>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b07      	cmp	r3, #7
 8008746:	d019      	beq.n	800877c <UART_SetConfig+0xd1c>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b08      	cmp	r3, #8
 800874e:	d013      	beq.n	8008778 <UART_SetConfig+0xd18>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b09      	cmp	r3, #9
 8008756:	d00d      	beq.n	8008774 <UART_SetConfig+0xd14>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b0a      	cmp	r3, #10
 800875e:	d007      	beq.n	8008770 <UART_SetConfig+0xd10>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b0b      	cmp	r3, #11
 8008766:	d101      	bne.n	800876c <UART_SetConfig+0xd0c>
 8008768:	4b8d      	ldr	r3, [pc, #564]	; (80089a0 <UART_SetConfig+0xf40>)
 800876a:	e016      	b.n	800879a <UART_SetConfig+0xd3a>
 800876c:	4b8d      	ldr	r3, [pc, #564]	; (80089a4 <UART_SetConfig+0xf44>)
 800876e:	e014      	b.n	800879a <UART_SetConfig+0xd3a>
 8008770:	4b8d      	ldr	r3, [pc, #564]	; (80089a8 <UART_SetConfig+0xf48>)
 8008772:	e012      	b.n	800879a <UART_SetConfig+0xd3a>
 8008774:	4b8d      	ldr	r3, [pc, #564]	; (80089ac <UART_SetConfig+0xf4c>)
 8008776:	e010      	b.n	800879a <UART_SetConfig+0xd3a>
 8008778:	4b8d      	ldr	r3, [pc, #564]	; (80089b0 <UART_SetConfig+0xf50>)
 800877a:	e00e      	b.n	800879a <UART_SetConfig+0xd3a>
 800877c:	4b8d      	ldr	r3, [pc, #564]	; (80089b4 <UART_SetConfig+0xf54>)
 800877e:	e00c      	b.n	800879a <UART_SetConfig+0xd3a>
 8008780:	4b8d      	ldr	r3, [pc, #564]	; (80089b8 <UART_SetConfig+0xf58>)
 8008782:	e00a      	b.n	800879a <UART_SetConfig+0xd3a>
 8008784:	4b8d      	ldr	r3, [pc, #564]	; (80089bc <UART_SetConfig+0xf5c>)
 8008786:	e008      	b.n	800879a <UART_SetConfig+0xd3a>
 8008788:	4b8d      	ldr	r3, [pc, #564]	; (80089c0 <UART_SetConfig+0xf60>)
 800878a:	e006      	b.n	800879a <UART_SetConfig+0xd3a>
 800878c:	4b8d      	ldr	r3, [pc, #564]	; (80089c4 <UART_SetConfig+0xf64>)
 800878e:	e004      	b.n	800879a <UART_SetConfig+0xd3a>
 8008790:	4b8d      	ldr	r3, [pc, #564]	; (80089c8 <UART_SetConfig+0xf68>)
 8008792:	e002      	b.n	800879a <UART_SetConfig+0xd3a>
 8008794:	4b8d      	ldr	r3, [pc, #564]	; (80089cc <UART_SetConfig+0xf6c>)
 8008796:	e000      	b.n	800879a <UART_SetConfig+0xd3a>
 8008798:	4b82      	ldr	r3, [pc, #520]	; (80089a4 <UART_SetConfig+0xf44>)
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6852      	ldr	r2, [r2, #4]
 800879e:	0852      	lsrs	r2, r2, #1
 80087a0:	441a      	add	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	61fb      	str	r3, [r7, #28]
        break;
 80087ae:	e0bf      	b.n	8008930 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087b0:	f7fc ff0e 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 80087b4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d044      	beq.n	8008848 <UART_SetConfig+0xde8>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d03e      	beq.n	8008844 <UART_SetConfig+0xde4>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d038      	beq.n	8008840 <UART_SetConfig+0xde0>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d032      	beq.n	800883c <UART_SetConfig+0xddc>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d02c      	beq.n	8008838 <UART_SetConfig+0xdd8>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	2b05      	cmp	r3, #5
 80087e4:	d026      	beq.n	8008834 <UART_SetConfig+0xdd4>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ea:	2b06      	cmp	r3, #6
 80087ec:	d020      	beq.n	8008830 <UART_SetConfig+0xdd0>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f2:	2b07      	cmp	r3, #7
 80087f4:	d01a      	beq.n	800882c <UART_SetConfig+0xdcc>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	d014      	beq.n	8008828 <UART_SetConfig+0xdc8>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	2b09      	cmp	r3, #9
 8008804:	d00e      	beq.n	8008824 <UART_SetConfig+0xdc4>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	2b0a      	cmp	r3, #10
 800880c:	d008      	beq.n	8008820 <UART_SetConfig+0xdc0>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	2b0b      	cmp	r3, #11
 8008814:	d102      	bne.n	800881c <UART_SetConfig+0xdbc>
 8008816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800881a:	e016      	b.n	800884a <UART_SetConfig+0xdea>
 800881c:	2301      	movs	r3, #1
 800881e:	e014      	b.n	800884a <UART_SetConfig+0xdea>
 8008820:	2380      	movs	r3, #128	; 0x80
 8008822:	e012      	b.n	800884a <UART_SetConfig+0xdea>
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	e010      	b.n	800884a <UART_SetConfig+0xdea>
 8008828:	2320      	movs	r3, #32
 800882a:	e00e      	b.n	800884a <UART_SetConfig+0xdea>
 800882c:	2310      	movs	r3, #16
 800882e:	e00c      	b.n	800884a <UART_SetConfig+0xdea>
 8008830:	230c      	movs	r3, #12
 8008832:	e00a      	b.n	800884a <UART_SetConfig+0xdea>
 8008834:	230a      	movs	r3, #10
 8008836:	e008      	b.n	800884a <UART_SetConfig+0xdea>
 8008838:	2308      	movs	r3, #8
 800883a:	e006      	b.n	800884a <UART_SetConfig+0xdea>
 800883c:	2306      	movs	r3, #6
 800883e:	e004      	b.n	800884a <UART_SetConfig+0xdea>
 8008840:	2304      	movs	r3, #4
 8008842:	e002      	b.n	800884a <UART_SetConfig+0xdea>
 8008844:	2302      	movs	r3, #2
 8008846:	e000      	b.n	800884a <UART_SetConfig+0xdea>
 8008848:	2301      	movs	r3, #1
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008850:	005a      	lsls	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	085b      	lsrs	r3, r3, #1
 8008858:	441a      	add	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008862:	b29b      	uxth	r3, r3
 8008864:	61fb      	str	r3, [r7, #28]
        break;
 8008866:	e063      	b.n	8008930 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	2b00      	cmp	r3, #0
 800886e:	d04f      	beq.n	8008910 <UART_SetConfig+0xeb0>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	2b01      	cmp	r3, #1
 8008876:	d048      	beq.n	800890a <UART_SetConfig+0xeaa>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2b02      	cmp	r3, #2
 800887e:	d041      	beq.n	8008904 <UART_SetConfig+0xea4>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	2b03      	cmp	r3, #3
 8008886:	d03a      	beq.n	80088fe <UART_SetConfig+0xe9e>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2b04      	cmp	r3, #4
 800888e:	d033      	beq.n	80088f8 <UART_SetConfig+0xe98>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	2b05      	cmp	r3, #5
 8008896:	d02c      	beq.n	80088f2 <UART_SetConfig+0xe92>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	2b06      	cmp	r3, #6
 800889e:	d025      	beq.n	80088ec <UART_SetConfig+0xe8c>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	2b07      	cmp	r3, #7
 80088a6:	d01e      	beq.n	80088e6 <UART_SetConfig+0xe86>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	2b08      	cmp	r3, #8
 80088ae:	d017      	beq.n	80088e0 <UART_SetConfig+0xe80>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	2b09      	cmp	r3, #9
 80088b6:	d010      	beq.n	80088da <UART_SetConfig+0xe7a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	2b0a      	cmp	r3, #10
 80088be:	d009      	beq.n	80088d4 <UART_SetConfig+0xe74>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	2b0b      	cmp	r3, #11
 80088c6:	d102      	bne.n	80088ce <UART_SetConfig+0xe6e>
 80088c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088cc:	e022      	b.n	8008914 <UART_SetConfig+0xeb4>
 80088ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088d2:	e01f      	b.n	8008914 <UART_SetConfig+0xeb4>
 80088d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088d8:	e01c      	b.n	8008914 <UART_SetConfig+0xeb4>
 80088da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088de:	e019      	b.n	8008914 <UART_SetConfig+0xeb4>
 80088e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088e4:	e016      	b.n	8008914 <UART_SetConfig+0xeb4>
 80088e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ea:	e013      	b.n	8008914 <UART_SetConfig+0xeb4>
 80088ec:	f241 5354 	movw	r3, #5460	; 0x1554
 80088f0:	e010      	b.n	8008914 <UART_SetConfig+0xeb4>
 80088f2:	f641 1398 	movw	r3, #6552	; 0x1998
 80088f6:	e00d      	b.n	8008914 <UART_SetConfig+0xeb4>
 80088f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088fc:	e00a      	b.n	8008914 <UART_SetConfig+0xeb4>
 80088fe:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008902:	e007      	b.n	8008914 <UART_SetConfig+0xeb4>
 8008904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008908:	e004      	b.n	8008914 <UART_SetConfig+0xeb4>
 800890a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800890e:	e001      	b.n	8008914 <UART_SetConfig+0xeb4>
 8008910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	6852      	ldr	r2, [r2, #4]
 8008918:	0852      	lsrs	r2, r2, #1
 800891a:	441a      	add	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	fbb2 f3f3 	udiv	r3, r2, r3
 8008924:	b29b      	uxth	r3, r3
 8008926:	61fb      	str	r3, [r7, #28]
        break;
 8008928:	e002      	b.n	8008930 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	76fb      	strb	r3, [r7, #27]
        break;
 800892e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2b0f      	cmp	r3, #15
 8008934:	d916      	bls.n	8008964 <UART_SetConfig+0xf04>
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893c:	d212      	bcs.n	8008964 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	b29b      	uxth	r3, r3
 8008942:	f023 030f 	bic.w	r3, r3, #15
 8008946:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	085b      	lsrs	r3, r3, #1
 800894c:	b29b      	uxth	r3, r3
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	b29a      	uxth	r2, r3
 8008954:	89fb      	ldrh	r3, [r7, #14]
 8008956:	4313      	orrs	r3, r2
 8008958:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	89fa      	ldrh	r2, [r7, #14]
 8008960:	60da      	str	r2, [r3, #12]
 8008962:	e20c      	b.n	8008d7e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	76fb      	strb	r3, [r7, #27]
 8008968:	e209      	b.n	8008d7e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 800896a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800896e:	2b08      	cmp	r3, #8
 8008970:	f200 81f4 	bhi.w	8008d5c <UART_SetConfig+0x12fc>
 8008974:	a201      	add	r2, pc, #4	; (adr r2, 800897c <UART_SetConfig+0xf1c>)
 8008976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897a:	bf00      	nop
 800897c:	080089d1 	.word	0x080089d1
 8008980:	08008a87 	.word	0x08008a87
 8008984:	08008b3d 	.word	0x08008b3d
 8008988:	08008d5d 	.word	0x08008d5d
 800898c:	08008be7 	.word	0x08008be7
 8008990:	08008d5d 	.word	0x08008d5d
 8008994:	08008d5d 	.word	0x08008d5d
 8008998:	08008d5d 	.word	0x08008d5d
 800899c:	08008c9d 	.word	0x08008c9d
 80089a0:	0001e848 	.word	0x0001e848
 80089a4:	01e84800 	.word	0x01e84800
 80089a8:	0003d090 	.word	0x0003d090
 80089ac:	0007a120 	.word	0x0007a120
 80089b0:	000f4240 	.word	0x000f4240
 80089b4:	001e8480 	.word	0x001e8480
 80089b8:	0028b0aa 	.word	0x0028b0aa
 80089bc:	0030d400 	.word	0x0030d400
 80089c0:	003d0900 	.word	0x003d0900
 80089c4:	00516154 	.word	0x00516154
 80089c8:	007a1200 	.word	0x007a1200
 80089cc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089d0:	f7fc fe6c 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80089d4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d044      	beq.n	8008a68 <UART_SetConfig+0x1008>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d03e      	beq.n	8008a64 <UART_SetConfig+0x1004>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d038      	beq.n	8008a60 <UART_SetConfig+0x1000>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d032      	beq.n	8008a5c <UART_SetConfig+0xffc>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d02c      	beq.n	8008a58 <UART_SetConfig+0xff8>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	2b05      	cmp	r3, #5
 8008a04:	d026      	beq.n	8008a54 <UART_SetConfig+0xff4>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	2b06      	cmp	r3, #6
 8008a0c:	d020      	beq.n	8008a50 <UART_SetConfig+0xff0>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	2b07      	cmp	r3, #7
 8008a14:	d01a      	beq.n	8008a4c <UART_SetConfig+0xfec>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	2b08      	cmp	r3, #8
 8008a1c:	d014      	beq.n	8008a48 <UART_SetConfig+0xfe8>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	2b09      	cmp	r3, #9
 8008a24:	d00e      	beq.n	8008a44 <UART_SetConfig+0xfe4>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	2b0a      	cmp	r3, #10
 8008a2c:	d008      	beq.n	8008a40 <UART_SetConfig+0xfe0>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	2b0b      	cmp	r3, #11
 8008a34:	d102      	bne.n	8008a3c <UART_SetConfig+0xfdc>
 8008a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a3a:	e016      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e014      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	e012      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a44:	2340      	movs	r3, #64	; 0x40
 8008a46:	e010      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a48:	2320      	movs	r3, #32
 8008a4a:	e00e      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	e00c      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a50:	230c      	movs	r3, #12
 8008a52:	e00a      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a54:	230a      	movs	r3, #10
 8008a56:	e008      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	e006      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a5c:	2306      	movs	r3, #6
 8008a5e:	e004      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a60:	2304      	movs	r3, #4
 8008a62:	e002      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e000      	b.n	8008a6a <UART_SetConfig+0x100a>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	085b      	lsrs	r3, r3, #1
 8008a76:	441a      	add	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	61fb      	str	r3, [r7, #28]
        break;
 8008a84:	e16d      	b.n	8008d62 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a86:	f7fc fe27 	bl	80056d8 <HAL_RCC_GetPCLK2Freq>
 8008a8a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d044      	beq.n	8008b1e <UART_SetConfig+0x10be>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d03e      	beq.n	8008b1a <UART_SetConfig+0x10ba>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d038      	beq.n	8008b16 <UART_SetConfig+0x10b6>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d032      	beq.n	8008b12 <UART_SetConfig+0x10b2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	d02c      	beq.n	8008b0e <UART_SetConfig+0x10ae>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	2b05      	cmp	r3, #5
 8008aba:	d026      	beq.n	8008b0a <UART_SetConfig+0x10aa>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	2b06      	cmp	r3, #6
 8008ac2:	d020      	beq.n	8008b06 <UART_SetConfig+0x10a6>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac8:	2b07      	cmp	r3, #7
 8008aca:	d01a      	beq.n	8008b02 <UART_SetConfig+0x10a2>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	2b08      	cmp	r3, #8
 8008ad2:	d014      	beq.n	8008afe <UART_SetConfig+0x109e>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad8:	2b09      	cmp	r3, #9
 8008ada:	d00e      	beq.n	8008afa <UART_SetConfig+0x109a>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae0:	2b0a      	cmp	r3, #10
 8008ae2:	d008      	beq.n	8008af6 <UART_SetConfig+0x1096>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	2b0b      	cmp	r3, #11
 8008aea:	d102      	bne.n	8008af2 <UART_SetConfig+0x1092>
 8008aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008af0:	e016      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e014      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008af6:	2380      	movs	r3, #128	; 0x80
 8008af8:	e012      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008afa:	2340      	movs	r3, #64	; 0x40
 8008afc:	e010      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008afe:	2320      	movs	r3, #32
 8008b00:	e00e      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008b02:	2310      	movs	r3, #16
 8008b04:	e00c      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008b06:	230c      	movs	r3, #12
 8008b08:	e00a      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008b0a:	230a      	movs	r3, #10
 8008b0c:	e008      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008b0e:	2308      	movs	r3, #8
 8008b10:	e006      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008b12:	2306      	movs	r3, #6
 8008b14:	e004      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008b16:	2304      	movs	r3, #4
 8008b18:	e002      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	e000      	b.n	8008b20 <UART_SetConfig+0x10c0>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	085b      	lsrs	r3, r3, #1
 8008b2c:	441a      	add	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	61fb      	str	r3, [r7, #28]
        break;
 8008b3a:	e112      	b.n	8008d62 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d044      	beq.n	8008bce <UART_SetConfig+0x116e>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d03e      	beq.n	8008bca <UART_SetConfig+0x116a>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d038      	beq.n	8008bc6 <UART_SetConfig+0x1166>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d032      	beq.n	8008bc2 <UART_SetConfig+0x1162>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d02c      	beq.n	8008bbe <UART_SetConfig+0x115e>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b05      	cmp	r3, #5
 8008b6a:	d026      	beq.n	8008bba <UART_SetConfig+0x115a>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b06      	cmp	r3, #6
 8008b72:	d020      	beq.n	8008bb6 <UART_SetConfig+0x1156>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2b07      	cmp	r3, #7
 8008b7a:	d01a      	beq.n	8008bb2 <UART_SetConfig+0x1152>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d014      	beq.n	8008bae <UART_SetConfig+0x114e>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b09      	cmp	r3, #9
 8008b8a:	d00e      	beq.n	8008baa <UART_SetConfig+0x114a>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b0a      	cmp	r3, #10
 8008b92:	d008      	beq.n	8008ba6 <UART_SetConfig+0x1146>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	2b0b      	cmp	r3, #11
 8008b9a:	d102      	bne.n	8008ba2 <UART_SetConfig+0x1142>
 8008b9c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008ba0:	e016      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008ba2:	4b81      	ldr	r3, [pc, #516]	; (8008da8 <UART_SetConfig+0x1348>)
 8008ba4:	e014      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008ba6:	4b81      	ldr	r3, [pc, #516]	; (8008dac <UART_SetConfig+0x134c>)
 8008ba8:	e012      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008baa:	4b81      	ldr	r3, [pc, #516]	; (8008db0 <UART_SetConfig+0x1350>)
 8008bac:	e010      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008bae:	4b81      	ldr	r3, [pc, #516]	; (8008db4 <UART_SetConfig+0x1354>)
 8008bb0:	e00e      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008bb2:	4b81      	ldr	r3, [pc, #516]	; (8008db8 <UART_SetConfig+0x1358>)
 8008bb4:	e00c      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008bb6:	4b81      	ldr	r3, [pc, #516]	; (8008dbc <UART_SetConfig+0x135c>)
 8008bb8:	e00a      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008bba:	4b81      	ldr	r3, [pc, #516]	; (8008dc0 <UART_SetConfig+0x1360>)
 8008bbc:	e008      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008bbe:	4b81      	ldr	r3, [pc, #516]	; (8008dc4 <UART_SetConfig+0x1364>)
 8008bc0:	e006      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008bc2:	4b81      	ldr	r3, [pc, #516]	; (8008dc8 <UART_SetConfig+0x1368>)
 8008bc4:	e004      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008bc6:	4b81      	ldr	r3, [pc, #516]	; (8008dcc <UART_SetConfig+0x136c>)
 8008bc8:	e002      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008bca:	4b81      	ldr	r3, [pc, #516]	; (8008dd0 <UART_SetConfig+0x1370>)
 8008bcc:	e000      	b.n	8008bd0 <UART_SetConfig+0x1170>
 8008bce:	4b76      	ldr	r3, [pc, #472]	; (8008da8 <UART_SetConfig+0x1348>)
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6852      	ldr	r2, [r2, #4]
 8008bd4:	0852      	lsrs	r2, r2, #1
 8008bd6:	441a      	add	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	61fb      	str	r3, [r7, #28]
        break;
 8008be4:	e0bd      	b.n	8008d62 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008be6:	f7fc fcf3 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8008bea:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d044      	beq.n	8008c7e <UART_SetConfig+0x121e>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d03e      	beq.n	8008c7a <UART_SetConfig+0x121a>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d038      	beq.n	8008c76 <UART_SetConfig+0x1216>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d032      	beq.n	8008c72 <UART_SetConfig+0x1212>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	d02c      	beq.n	8008c6e <UART_SetConfig+0x120e>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b05      	cmp	r3, #5
 8008c1a:	d026      	beq.n	8008c6a <UART_SetConfig+0x120a>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	2b06      	cmp	r3, #6
 8008c22:	d020      	beq.n	8008c66 <UART_SetConfig+0x1206>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	2b07      	cmp	r3, #7
 8008c2a:	d01a      	beq.n	8008c62 <UART_SetConfig+0x1202>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d014      	beq.n	8008c5e <UART_SetConfig+0x11fe>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	2b09      	cmp	r3, #9
 8008c3a:	d00e      	beq.n	8008c5a <UART_SetConfig+0x11fa>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	2b0a      	cmp	r3, #10
 8008c42:	d008      	beq.n	8008c56 <UART_SetConfig+0x11f6>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	2b0b      	cmp	r3, #11
 8008c4a:	d102      	bne.n	8008c52 <UART_SetConfig+0x11f2>
 8008c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c50:	e016      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e014      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c56:	2380      	movs	r3, #128	; 0x80
 8008c58:	e012      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c5a:	2340      	movs	r3, #64	; 0x40
 8008c5c:	e010      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c5e:	2320      	movs	r3, #32
 8008c60:	e00e      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c62:	2310      	movs	r3, #16
 8008c64:	e00c      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c66:	230c      	movs	r3, #12
 8008c68:	e00a      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c6a:	230a      	movs	r3, #10
 8008c6c:	e008      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c6e:	2308      	movs	r3, #8
 8008c70:	e006      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c72:	2306      	movs	r3, #6
 8008c74:	e004      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c76:	2304      	movs	r3, #4
 8008c78:	e002      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	e000      	b.n	8008c80 <UART_SetConfig+0x1220>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	085b      	lsrs	r3, r3, #1
 8008c8c:	441a      	add	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	61fb      	str	r3, [r7, #28]
        break;
 8008c9a:	e062      	b.n	8008d62 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d04e      	beq.n	8008d42 <UART_SetConfig+0x12e2>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d047      	beq.n	8008d3c <UART_SetConfig+0x12dc>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d040      	beq.n	8008d36 <UART_SetConfig+0x12d6>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d039      	beq.n	8008d30 <UART_SetConfig+0x12d0>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d032      	beq.n	8008d2a <UART_SetConfig+0x12ca>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	2b05      	cmp	r3, #5
 8008cca:	d02b      	beq.n	8008d24 <UART_SetConfig+0x12c4>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2b06      	cmp	r3, #6
 8008cd2:	d024      	beq.n	8008d1e <UART_SetConfig+0x12be>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	2b07      	cmp	r3, #7
 8008cda:	d01d      	beq.n	8008d18 <UART_SetConfig+0x12b8>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d016      	beq.n	8008d12 <UART_SetConfig+0x12b2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	2b09      	cmp	r3, #9
 8008cea:	d00f      	beq.n	8008d0c <UART_SetConfig+0x12ac>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	2b0a      	cmp	r3, #10
 8008cf2:	d008      	beq.n	8008d06 <UART_SetConfig+0x12a6>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2b0b      	cmp	r3, #11
 8008cfa:	d101      	bne.n	8008d00 <UART_SetConfig+0x12a0>
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	e022      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d04:	e01f      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d0a:	e01c      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d10:	e019      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d16:	e016      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d1c:	e013      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d1e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008d22:	e010      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d24:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008d28:	e00d      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d2e:	e00a      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d30:	f241 5355 	movw	r3, #5461	; 0x1555
 8008d34:	e007      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d3a:	e004      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d40:	e001      	b.n	8008d46 <UART_SetConfig+0x12e6>
 8008d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6852      	ldr	r2, [r2, #4]
 8008d4a:	0852      	lsrs	r2, r2, #1
 8008d4c:	441a      	add	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	61fb      	str	r3, [r7, #28]
        break;
 8008d5a:	e002      	b.n	8008d62 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	76fb      	strb	r3, [r7, #27]
        break;
 8008d60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	2b0f      	cmp	r3, #15
 8008d66:	d908      	bls.n	8008d7a <UART_SetConfig+0x131a>
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d6e:	d204      	bcs.n	8008d7a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	60da      	str	r2, [r3, #12]
 8008d78:	e001      	b.n	8008d7e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008d9a:	7efb      	ldrb	r3, [r7, #27]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3728      	adds	r7, #40	; 0x28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008da6:	bf00      	nop
 8008da8:	00f42400 	.word	0x00f42400
 8008dac:	0001e848 	.word	0x0001e848
 8008db0:	0003d090 	.word	0x0003d090
 8008db4:	0007a120 	.word	0x0007a120
 8008db8:	000f4240 	.word	0x000f4240
 8008dbc:	00145855 	.word	0x00145855
 8008dc0:	00186a00 	.word	0x00186a00
 8008dc4:	001e8480 	.word	0x001e8480
 8008dc8:	0028b0aa 	.word	0x0028b0aa
 8008dcc:	003d0900 	.word	0x003d0900
 8008dd0:	007a1200 	.word	0x007a1200

08008dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01a      	beq.n	8008eea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed2:	d10a      	bne.n	8008eea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	605a      	str	r2, [r3, #4]
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008f28:	f7f9 fc7a 	bl	8002820 <HAL_GetTick>
 8008f2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0308 	and.w	r3, r3, #8
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d10e      	bne.n	8008f5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f82c 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e022      	b.n	8008fa0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d10e      	bne.n	8008f86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f816 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e00c      	b.n	8008fa0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb8:	e02c      	b.n	8009014 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d028      	beq.n	8009014 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fc2:	f7f9 fc2d 	bl	8002820 <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d302      	bcc.n	8008fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d11d      	bne.n	8009014 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008fe6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 0201 	bic.w	r2, r2, #1
 8008ff6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e00f      	b.n	8009034 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69da      	ldr	r2, [r3, #28]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	4013      	ands	r3, r2
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	429a      	cmp	r2, r3
 8009022:	bf0c      	ite	eq
 8009024:	2301      	moveq	r3, #1
 8009026:	2300      	movne	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	461a      	mov	r2, r3
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	429a      	cmp	r2, r3
 8009030:	d0c3      	beq.n	8008fba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009052:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	6812      	ldr	r2, [r2, #0]
 800905e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009062:	f023 0301 	bic.w	r3, r3, #1
 8009066:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7fe fcd3 	bl	8007a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2220      	movs	r2, #32
 80090ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7fe fcaf 	bl	8007a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090f0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f8:	2b22      	cmp	r3, #34	; 0x22
 80090fa:	d13b      	bne.n	8009174 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009104:	89bb      	ldrh	r3, [r7, #12]
 8009106:	b2d9      	uxtb	r1, r3
 8009108:	89fb      	ldrh	r3, [r7, #14]
 800910a:	b2da      	uxtb	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009110:	400a      	ands	r2, r1
 8009112:	b2d2      	uxtb	r2, r2
 8009114:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009126:	b29b      	uxth	r3, r3
 8009128:	3b01      	subs	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009138:	b29b      	uxth	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d122      	bne.n	8009184 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800914c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0201 	bic.w	r2, r2, #1
 800915c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7f8 fc75 	bl	8001a5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009172:	e007      	b.n	8009184 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	699a      	ldr	r2, [r3, #24]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0208 	orr.w	r2, r2, #8
 8009182:	619a      	str	r2, [r3, #24]
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800919a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a2:	2b22      	cmp	r3, #34	; 0x22
 80091a4:	d13b      	bne.n	800921e <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80091b4:	89ba      	ldrh	r2, [r7, #12]
 80091b6:	89fb      	ldrh	r3, [r7, #14]
 80091b8:	4013      	ands	r3, r2
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c4:	1c9a      	adds	r2, r3, #2
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d122      	bne.n	800922e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80091f6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689a      	ldr	r2, [r3, #8]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0201 	bic.w	r2, r2, #1
 8009206:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2220      	movs	r2, #32
 800920c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7f8 fc20 	bl	8001a5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800921c:	e007      	b.n	800922e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	699a      	ldr	r2, [r3, #24]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f042 0208 	orr.w	r2, r2, #8
 800922c:	619a      	str	r2, [r3, #24]
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009246:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800924e:	2b22      	cmp	r3, #34	; 0x22
 8009250:	d168      	bne.n	8009324 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009258:	81fb      	strh	r3, [r7, #14]
 800925a:	e03f      	b.n	80092dc <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009264:	893b      	ldrh	r3, [r7, #8]
 8009266:	b2d9      	uxtb	r1, r3
 8009268:	89bb      	ldrh	r3, [r7, #12]
 800926a:	b2da      	uxtb	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009270:	400a      	ands	r2, r1
 8009272:	b2d2      	uxtb	r2, r2
 8009274:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009286:	b29b      	uxth	r3, r3
 8009288:	3b01      	subs	r3, #1
 800928a:	b29a      	uxth	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009298:	b29b      	uxth	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d11b      	bne.n	80092d6 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	6812      	ldr	r2, [r2, #0]
 80092b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092bc:	f023 0301 	bic.w	r3, r3, #1
 80092c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7f8 fbc3 	bl	8001a5c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80092d6:	89fb      	ldrh	r3, [r7, #14]
 80092d8:	3b01      	subs	r3, #1
 80092da:	81fb      	strh	r3, [r7, #14]
 80092dc:	89fb      	ldrh	r3, [r7, #14]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1bc      	bne.n	800925c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092e8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80092ea:	897b      	ldrh	r3, [r7, #10]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d021      	beq.n	8009334 <UART_RxISR_8BIT_FIFOEN+0xfc>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092f6:	897a      	ldrh	r2, [r7, #10]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d21b      	bcs.n	8009334 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800930a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a0b      	ldr	r2, [pc, #44]	; (800933c <UART_RxISR_8BIT_FIFOEN+0x104>)
 8009310:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f042 0220 	orr.w	r2, r2, #32
 8009320:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009322:	e007      	b.n	8009334 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	699a      	ldr	r2, [r3, #24]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0208 	orr.w	r2, r2, #8
 8009332:	619a      	str	r2, [r3, #24]
}
 8009334:	bf00      	nop
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	080090e3 	.word	0x080090e3

08009340 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800934e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009356:	2b22      	cmp	r3, #34	; 0x22
 8009358:	d168      	bne.n	800942c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009360:	82fb      	strh	r3, [r7, #22]
 8009362:	e03f      	b.n	80093e4 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009370:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8009372:	8a3a      	ldrh	r2, [r7, #16]
 8009374:	8abb      	ldrh	r3, [r7, #20]
 8009376:	4013      	ands	r3, r2
 8009378:	b29a      	uxth	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009382:	1c9a      	adds	r2, r3, #2
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800938e:	b29b      	uxth	r3, r3
 8009390:	3b01      	subs	r3, #1
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d11b      	bne.n	80093de <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093b4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093c4:	f023 0301 	bic.w	r3, r3, #1
 80093c8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7f8 fb3f 	bl	8001a5c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80093de:	8afb      	ldrh	r3, [r7, #22]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	82fb      	strh	r3, [r7, #22]
 80093e4:	8afb      	ldrh	r3, [r7, #22]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1bc      	bne.n	8009364 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093f0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093f2:	8a7b      	ldrh	r3, [r7, #18]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d021      	beq.n	800943c <UART_RxISR_16BIT_FIFOEN+0xfc>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093fe:	8a7a      	ldrh	r2, [r7, #18]
 8009400:	429a      	cmp	r2, r3
 8009402:	d21b      	bcs.n	800943c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689a      	ldr	r2, [r3, #8]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009412:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a0b      	ldr	r2, [pc, #44]	; (8009444 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8009418:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f042 0220 	orr.w	r2, r2, #32
 8009428:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800942a:	e007      	b.n	800943c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	699a      	ldr	r2, [r3, #24]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0208 	orr.w	r2, r2, #8
 800943a:	619a      	str	r2, [r3, #24]
}
 800943c:	bf00      	nop
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	0800918d 	.word	0x0800918d

08009448 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009492:	2b01      	cmp	r3, #1
 8009494:	d101      	bne.n	800949a <HAL_UARTEx_DisableFifoMode+0x16>
 8009496:	2302      	movs	r3, #2
 8009498:	e027      	b.n	80094ea <HAL_UARTEx_DisableFifoMode+0x66>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2224      	movs	r2, #36	; 0x24
 80094a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0201 	bic.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2220      	movs	r2, #32
 80094dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009506:	2b01      	cmp	r3, #1
 8009508:	d101      	bne.n	800950e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800950a:	2302      	movs	r3, #2
 800950c:	e02d      	b.n	800956a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2224      	movs	r2, #36	; 0x24
 800951a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 0201 	bic.w	r2, r2, #1
 8009534:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f850 	bl	80095f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2220      	movs	r2, #32
 800955c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009582:	2b01      	cmp	r3, #1
 8009584:	d101      	bne.n	800958a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009586:	2302      	movs	r3, #2
 8009588:	e02d      	b.n	80095e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2224      	movs	r2, #36	; 0x24
 8009596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0201 	bic.w	r2, r2, #1
 80095b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f812 	bl	80095f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b089      	sub	sp, #36	; 0x24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80095f8:	4a2f      	ldr	r2, [pc, #188]	; (80096b8 <UARTEx_SetNbDataToProcess+0xc8>)
 80095fa:	f107 0314 	add.w	r3, r7, #20
 80095fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009602:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009606:	4a2d      	ldr	r2, [pc, #180]	; (80096bc <UARTEx_SetNbDataToProcess+0xcc>)
 8009608:	f107 030c 	add.w	r3, r7, #12
 800960c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009610:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009618:	2b00      	cmp	r3, #0
 800961a:	d108      	bne.n	800962e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800962c:	e03d      	b.n	80096aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800962e:	2308      	movs	r3, #8
 8009630:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009632:	2308      	movs	r3, #8
 8009634:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	0e5b      	lsrs	r3, r3, #25
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	0f5b      	lsrs	r3, r3, #29
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f003 0307 	and.w	r3, r3, #7
 8009654:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009656:	7fbb      	ldrb	r3, [r7, #30]
 8009658:	7f3a      	ldrb	r2, [r7, #28]
 800965a:	f107 0120 	add.w	r1, r7, #32
 800965e:	440a      	add	r2, r1
 8009660:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009664:	fb02 f303 	mul.w	r3, r2, r3
 8009668:	7f3a      	ldrb	r2, [r7, #28]
 800966a:	f107 0120 	add.w	r1, r7, #32
 800966e:	440a      	add	r2, r1
 8009670:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009674:	fb93 f3f2 	sdiv	r3, r3, r2
 8009678:	b29a      	uxth	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009680:	7ffb      	ldrb	r3, [r7, #31]
 8009682:	7f7a      	ldrb	r2, [r7, #29]
 8009684:	f107 0120 	add.w	r1, r7, #32
 8009688:	440a      	add	r2, r1
 800968a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800968e:	fb02 f303 	mul.w	r3, r2, r3
 8009692:	7f7a      	ldrb	r2, [r7, #29]
 8009694:	f107 0120 	add.w	r1, r7, #32
 8009698:	440a      	add	r2, r1
 800969a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800969e:	fb93 f3f2 	sdiv	r3, r3, r2
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80096aa:	bf00      	nop
 80096ac:	3724      	adds	r7, #36	; 0x24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	08009b60 	.word	0x08009b60
 80096bc:	08009b68 	.word	0x08009b68

080096c0 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b08b      	sub	sp, #44	; 0x2c
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 80096ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80096ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d6:	d50a      	bpl.n	80096ee <arm_sin_f32+0x2e>
 80096d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80096dc:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80097c8 <arm_sin_f32+0x108>
 80096e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e8:	db01      	blt.n	80096ee <arm_sin_f32+0x2e>
     return x;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	e062      	b.n	80097b4 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80096ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80096f2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80097cc <arm_sin_f32+0x10c>
 80096f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096fa:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80096fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8009702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009706:	ee17 3a90 	vmov	r3, s15
 800970a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 800970c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009718:	d502      	bpl.n	8009720 <arm_sin_f32+0x60>
  {
    n--;
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	3b01      	subs	r3, #1
 800971e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800972a:	ed97 7a08 	vldr	s14, [r7, #32]
 800972e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009732:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8009736:	edd7 7a08 	vldr	s15, [r7, #32]
 800973a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80097d0 <arm_sin_f32+0x110>
 800973e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009742:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 8009746:	edd7 7a07 	vldr	s15, [r7, #28]
 800974a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800974e:	ee17 3a90 	vmov	r3, s15
 8009752:	b29b      	uxth	r3, r3
 8009754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009758:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800975a:	8b7b      	ldrh	r3, [r7, #26]
 800975c:	ee07 3a90 	vmov	s15, r3
 8009760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009764:	ed97 7a07 	vldr	s14, [r7, #28]
 8009768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800976c:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8009770:	8b7b      	ldrh	r3, [r7, #26]
 8009772:	4a18      	ldr	r2, [pc, #96]	; (80097d4 <arm_sin_f32+0x114>)
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800977c:	8b7b      	ldrh	r3, [r7, #26]
 800977e:	3301      	adds	r3, #1
 8009780:	4a14      	ldr	r2, [pc, #80]	; (80097d4 <arm_sin_f32+0x114>)
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800978a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800978e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009792:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009796:	edd7 7a04 	vldr	s15, [r7, #16]
 800979a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800979e:	edd7 6a05 	vldr	s13, [r7, #20]
 80097a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80097a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ae:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	ee07 3a90 	vmov	s15, r3
}
 80097b8:	eeb0 0a67 	vmov.f32	s0, s15
 80097bc:	372c      	adds	r7, #44	; 0x2c
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	b44c02cd 	.word	0xb44c02cd
 80097cc:	3e22f983 	.word	0x3e22f983
 80097d0:	44000000 	.word	0x44000000
 80097d4:	08009b88 	.word	0x08009b88

080097d8 <__libc_init_array>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	4e0d      	ldr	r6, [pc, #52]	; (8009810 <__libc_init_array+0x38>)
 80097dc:	4c0d      	ldr	r4, [pc, #52]	; (8009814 <__libc_init_array+0x3c>)
 80097de:	1ba4      	subs	r4, r4, r6
 80097e0:	10a4      	asrs	r4, r4, #2
 80097e2:	2500      	movs	r5, #0
 80097e4:	42a5      	cmp	r5, r4
 80097e6:	d109      	bne.n	80097fc <__libc_init_array+0x24>
 80097e8:	4e0b      	ldr	r6, [pc, #44]	; (8009818 <__libc_init_array+0x40>)
 80097ea:	4c0c      	ldr	r4, [pc, #48]	; (800981c <__libc_init_array+0x44>)
 80097ec:	f000 f9ac 	bl	8009b48 <_init>
 80097f0:	1ba4      	subs	r4, r4, r6
 80097f2:	10a4      	asrs	r4, r4, #2
 80097f4:	2500      	movs	r5, #0
 80097f6:	42a5      	cmp	r5, r4
 80097f8:	d105      	bne.n	8009806 <__libc_init_array+0x2e>
 80097fa:	bd70      	pop	{r4, r5, r6, pc}
 80097fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009800:	4798      	blx	r3
 8009802:	3501      	adds	r5, #1
 8009804:	e7ee      	b.n	80097e4 <__libc_init_array+0xc>
 8009806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800980a:	4798      	blx	r3
 800980c:	3501      	adds	r5, #1
 800980e:	e7f2      	b.n	80097f6 <__libc_init_array+0x1e>
 8009810:	0800a3b4 	.word	0x0800a3b4
 8009814:	0800a3b4 	.word	0x0800a3b4
 8009818:	0800a3b4 	.word	0x0800a3b4
 800981c:	0800a3b8 	.word	0x0800a3b8

08009820 <memset>:
 8009820:	4402      	add	r2, r0
 8009822:	4603      	mov	r3, r0
 8009824:	4293      	cmp	r3, r2
 8009826:	d100      	bne.n	800982a <memset+0xa>
 8009828:	4770      	bx	lr
 800982a:	f803 1b01 	strb.w	r1, [r3], #1
 800982e:	e7f9      	b.n	8009824 <memset+0x4>

08009830 <atan2f>:
 8009830:	f000 b800 	b.w	8009834 <__ieee754_atan2f>

08009834 <__ieee754_atan2f>:
 8009834:	ee10 2a90 	vmov	r2, s1
 8009838:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800983c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009840:	b510      	push	{r4, lr}
 8009842:	eef0 7a40 	vmov.f32	s15, s0
 8009846:	dc06      	bgt.n	8009856 <__ieee754_atan2f+0x22>
 8009848:	ee10 0a10 	vmov	r0, s0
 800984c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009850:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009854:	dd04      	ble.n	8009860 <__ieee754_atan2f+0x2c>
 8009856:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800985a:	eeb0 0a67 	vmov.f32	s0, s15
 800985e:	bd10      	pop	{r4, pc}
 8009860:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009864:	d103      	bne.n	800986e <__ieee754_atan2f+0x3a>
 8009866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800986a:	f000 b891 	b.w	8009990 <atanf>
 800986e:	1794      	asrs	r4, r2, #30
 8009870:	f004 0402 	and.w	r4, r4, #2
 8009874:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009878:	b943      	cbnz	r3, 800988c <__ieee754_atan2f+0x58>
 800987a:	2c02      	cmp	r4, #2
 800987c:	d06e      	beq.n	800995c <__ieee754_atan2f+0x128>
 800987e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8009964 <__ieee754_atan2f+0x130>
 8009882:	2c03      	cmp	r4, #3
 8009884:	bf08      	it	eq
 8009886:	eef0 7a47 	vmoveq.f32	s15, s14
 800988a:	e7e6      	b.n	800985a <__ieee754_atan2f+0x26>
 800988c:	b941      	cbnz	r1, 80098a0 <__ieee754_atan2f+0x6c>
 800988e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8009968 <__ieee754_atan2f+0x134>
 8009892:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800996c <__ieee754_atan2f+0x138>
 8009896:	2800      	cmp	r0, #0
 8009898:	bfb8      	it	lt
 800989a:	eef0 7a47 	vmovlt.f32	s15, s14
 800989e:	e7dc      	b.n	800985a <__ieee754_atan2f+0x26>
 80098a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80098a4:	d122      	bne.n	80098ec <__ieee754_atan2f+0xb8>
 80098a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098aa:	d112      	bne.n	80098d2 <__ieee754_atan2f+0x9e>
 80098ac:	2c02      	cmp	r4, #2
 80098ae:	d00a      	beq.n	80098c6 <__ieee754_atan2f+0x92>
 80098b0:	2c03      	cmp	r4, #3
 80098b2:	d00b      	beq.n	80098cc <__ieee754_atan2f+0x98>
 80098b4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8009970 <__ieee754_atan2f+0x13c>
 80098b8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009974 <__ieee754_atan2f+0x140>
 80098bc:	2c01      	cmp	r4, #1
 80098be:	bf18      	it	ne
 80098c0:	eef0 7a47 	vmovne.f32	s15, s14
 80098c4:	e7c9      	b.n	800985a <__ieee754_atan2f+0x26>
 80098c6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009978 <__ieee754_atan2f+0x144>
 80098ca:	e7c6      	b.n	800985a <__ieee754_atan2f+0x26>
 80098cc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800997c <__ieee754_atan2f+0x148>
 80098d0:	e7c3      	b.n	800985a <__ieee754_atan2f+0x26>
 80098d2:	2c02      	cmp	r4, #2
 80098d4:	d042      	beq.n	800995c <__ieee754_atan2f+0x128>
 80098d6:	2c03      	cmp	r4, #3
 80098d8:	d005      	beq.n	80098e6 <__ieee754_atan2f+0xb2>
 80098da:	2c01      	cmp	r4, #1
 80098dc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009980 <__ieee754_atan2f+0x14c>
 80098e0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009984 <__ieee754_atan2f+0x150>
 80098e4:	e7eb      	b.n	80098be <__ieee754_atan2f+0x8a>
 80098e6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009964 <__ieee754_atan2f+0x130>
 80098ea:	e7b6      	b.n	800985a <__ieee754_atan2f+0x26>
 80098ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098f0:	d0cd      	beq.n	800988e <__ieee754_atan2f+0x5a>
 80098f2:	1a5b      	subs	r3, r3, r1
 80098f4:	15db      	asrs	r3, r3, #23
 80098f6:	2b3c      	cmp	r3, #60	; 0x3c
 80098f8:	dc1a      	bgt.n	8009930 <__ieee754_atan2f+0xfc>
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	da01      	bge.n	8009902 <__ieee754_atan2f+0xce>
 80098fe:	333c      	adds	r3, #60	; 0x3c
 8009900:	db19      	blt.n	8009936 <__ieee754_atan2f+0x102>
 8009902:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009906:	f000 f917 	bl	8009b38 <fabsf>
 800990a:	f000 f841 	bl	8009990 <atanf>
 800990e:	eef0 7a40 	vmov.f32	s15, s0
 8009912:	2c01      	cmp	r4, #1
 8009914:	d012      	beq.n	800993c <__ieee754_atan2f+0x108>
 8009916:	2c02      	cmp	r4, #2
 8009918:	d017      	beq.n	800994a <__ieee754_atan2f+0x116>
 800991a:	2c00      	cmp	r4, #0
 800991c:	d09d      	beq.n	800985a <__ieee754_atan2f+0x26>
 800991e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009988 <__ieee754_atan2f+0x154>
 8009922:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009926:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800998c <__ieee754_atan2f+0x158>
 800992a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800992e:	e794      	b.n	800985a <__ieee754_atan2f+0x26>
 8009930:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009968 <__ieee754_atan2f+0x134>
 8009934:	e7ed      	b.n	8009912 <__ieee754_atan2f+0xde>
 8009936:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009984 <__ieee754_atan2f+0x150>
 800993a:	e7ea      	b.n	8009912 <__ieee754_atan2f+0xde>
 800993c:	ee17 3a90 	vmov	r3, s15
 8009940:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009944:	ee07 3a90 	vmov	s15, r3
 8009948:	e787      	b.n	800985a <__ieee754_atan2f+0x26>
 800994a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009988 <__ieee754_atan2f+0x154>
 800994e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009952:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800998c <__ieee754_atan2f+0x158>
 8009956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800995a:	e77e      	b.n	800985a <__ieee754_atan2f+0x26>
 800995c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800998c <__ieee754_atan2f+0x158>
 8009960:	e77b      	b.n	800985a <__ieee754_atan2f+0x26>
 8009962:	bf00      	nop
 8009964:	c0490fdb 	.word	0xc0490fdb
 8009968:	3fc90fdb 	.word	0x3fc90fdb
 800996c:	bfc90fdb 	.word	0xbfc90fdb
 8009970:	bf490fdb 	.word	0xbf490fdb
 8009974:	3f490fdb 	.word	0x3f490fdb
 8009978:	4016cbe4 	.word	0x4016cbe4
 800997c:	c016cbe4 	.word	0xc016cbe4
 8009980:	80000000 	.word	0x80000000
 8009984:	00000000 	.word	0x00000000
 8009988:	33bbbd2e 	.word	0x33bbbd2e
 800998c:	40490fdb 	.word	0x40490fdb

08009990 <atanf>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	ee10 5a10 	vmov	r5, s0
 8009996:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800999a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800999e:	eef0 7a40 	vmov.f32	s15, s0
 80099a2:	db10      	blt.n	80099c6 <atanf+0x36>
 80099a4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80099a8:	dd04      	ble.n	80099b4 <atanf+0x24>
 80099aa:	ee70 7a00 	vadd.f32	s15, s0, s0
 80099ae:	eeb0 0a67 	vmov.f32	s0, s15
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009aec <atanf+0x15c>
 80099b8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009af0 <atanf+0x160>
 80099bc:	2d00      	cmp	r5, #0
 80099be:	bfd8      	it	le
 80099c0:	eef0 7a47 	vmovle.f32	s15, s14
 80099c4:	e7f3      	b.n	80099ae <atanf+0x1e>
 80099c6:	4b4b      	ldr	r3, [pc, #300]	; (8009af4 <atanf+0x164>)
 80099c8:	429c      	cmp	r4, r3
 80099ca:	dc10      	bgt.n	80099ee <atanf+0x5e>
 80099cc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80099d0:	da0a      	bge.n	80099e8 <atanf+0x58>
 80099d2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009af8 <atanf+0x168>
 80099d6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80099da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099de:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80099e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e6:	dce2      	bgt.n	80099ae <atanf+0x1e>
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	e013      	b.n	8009a16 <atanf+0x86>
 80099ee:	f000 f8a3 	bl	8009b38 <fabsf>
 80099f2:	4b42      	ldr	r3, [pc, #264]	; (8009afc <atanf+0x16c>)
 80099f4:	429c      	cmp	r4, r3
 80099f6:	dc4f      	bgt.n	8009a98 <atanf+0x108>
 80099f8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80099fc:	429c      	cmp	r4, r3
 80099fe:	dc41      	bgt.n	8009a84 <atanf+0xf4>
 8009a00:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009a04:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009a08:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009a1c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009b00 <atanf+0x170>
 8009a20:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009b04 <atanf+0x174>
 8009a24:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009b08 <atanf+0x178>
 8009a28:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009a2c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009a30:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009b0c <atanf+0x17c>
 8009a34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009a38:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009b10 <atanf+0x180>
 8009a3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009a40:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009b14 <atanf+0x184>
 8009a44:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009a48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009b18 <atanf+0x188>
 8009a4c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009a50:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009b1c <atanf+0x18c>
 8009a54:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009a58:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009b20 <atanf+0x190>
 8009a5c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009a60:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009b24 <atanf+0x194>
 8009a64:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009a68:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009b28 <atanf+0x198>
 8009a6c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009a70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009a74:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a7c:	d121      	bne.n	8009ac2 <atanf+0x132>
 8009a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a82:	e794      	b.n	80099ae <atanf+0x1e>
 8009a84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009a88:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009a8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a90:	2301      	movs	r3, #1
 8009a92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009a96:	e7be      	b.n	8009a16 <atanf+0x86>
 8009a98:	4b24      	ldr	r3, [pc, #144]	; (8009b2c <atanf+0x19c>)
 8009a9a:	429c      	cmp	r4, r3
 8009a9c:	dc0b      	bgt.n	8009ab6 <atanf+0x126>
 8009a9e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aa6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009aaa:	2302      	movs	r3, #2
 8009aac:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab4:	e7af      	b.n	8009a16 <atanf+0x86>
 8009ab6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009aba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e7a9      	b.n	8009a16 <atanf+0x86>
 8009ac2:	4a1b      	ldr	r2, [pc, #108]	; (8009b30 <atanf+0x1a0>)
 8009ac4:	491b      	ldr	r1, [pc, #108]	; (8009b34 <atanf+0x1a4>)
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	441a      	add	r2, r3
 8009aca:	440b      	add	r3, r1
 8009acc:	edd3 6a00 	vldr	s13, [r3]
 8009ad0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009ad4:	2d00      	cmp	r5, #0
 8009ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ada:	ed92 7a00 	vldr	s14, [r2]
 8009ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ae2:	bfb8      	it	lt
 8009ae4:	eef1 7a67 	vneglt.f32	s15, s15
 8009ae8:	e761      	b.n	80099ae <atanf+0x1e>
 8009aea:	bf00      	nop
 8009aec:	bfc90fdb 	.word	0xbfc90fdb
 8009af0:	3fc90fdb 	.word	0x3fc90fdb
 8009af4:	3edfffff 	.word	0x3edfffff
 8009af8:	7149f2ca 	.word	0x7149f2ca
 8009afc:	3f97ffff 	.word	0x3f97ffff
 8009b00:	3c8569d7 	.word	0x3c8569d7
 8009b04:	3d4bda59 	.word	0x3d4bda59
 8009b08:	bd6ef16b 	.word	0xbd6ef16b
 8009b0c:	3d886b35 	.word	0x3d886b35
 8009b10:	3dba2e6e 	.word	0x3dba2e6e
 8009b14:	3e124925 	.word	0x3e124925
 8009b18:	3eaaaaab 	.word	0x3eaaaaab
 8009b1c:	bd15a221 	.word	0xbd15a221
 8009b20:	bd9d8795 	.word	0xbd9d8795
 8009b24:	bde38e38 	.word	0xbde38e38
 8009b28:	be4ccccd 	.word	0xbe4ccccd
 8009b2c:	401bffff 	.word	0x401bffff
 8009b30:	0800a38c 	.word	0x0800a38c
 8009b34:	0800a39c 	.word	0x0800a39c

08009b38 <fabsf>:
 8009b38:	ee10 3a10 	vmov	r3, s0
 8009b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b40:	ee00 3a10 	vmov	s0, r3
 8009b44:	4770      	bx	lr
	...

08009b48 <_init>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr

08009b54 <_fini>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr
