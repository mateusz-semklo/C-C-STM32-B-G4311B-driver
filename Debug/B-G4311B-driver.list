
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006218  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006418  08006418  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006420  08006420  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006424  08006424  00016424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000010  08006438  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08006438  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011492  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a0  00000000  00000000  000314d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00033778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000347c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df10  00000000  00000000  000356e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dbf3  00000000  00000000  000535f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ee7  00000000  00000000  000611e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001240ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  00124148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080063d8 	.word	0x080063d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080063d8 	.word	0x080063d8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0xac>)
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_GPIO_Init+0xb0>)
 80005a4:	f001 f828 	bl	80015f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f000 ff88 	bl	80014c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 ff9f 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10110000 	.word	0x10110000
 80005c8:	48000800 	.word	0x48000800

080005cc <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005dc:	f040 8100 	bne.w	80007e0 <HAL_GPIO_EXTI_Callback+0x214>
	{

		licznik++;
 80005e0:	4b82      	ldr	r3, [pc, #520]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a81      	ldr	r2, [pc, #516]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80005e8:	6013      	str	r3, [r2, #0]


							switch (licznik)
 80005ea:	4b80      	ldr	r3, [pc, #512]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b05      	cmp	r3, #5
 80005f0:	f200 80ee 	bhi.w	80007d0 <HAL_GPIO_EXTI_Callback+0x204>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <HAL_GPIO_EXTI_Callback+0x30>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000787 	.word	0x08000787
 8000600:	08000615 	.word	0x08000615
 8000604:	0800065f 	.word	0x0800065f
 8000608:	080006a9 	.word	0x080006a9
 800060c:	080006f3 	.word	0x080006f3
 8000610:	0800073d 	.word	0x0800073d
							{
							case 1:
												SET_CC1_T1;
 8000614:	4b76      	ldr	r3, [pc, #472]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000616:	6a1b      	ldr	r3, [r3, #32]
 8000618:	4a75      	ldr	r2, [pc, #468]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6213      	str	r3, [r2, #32]
												SET_CC1N_T2;
 8000620:	4b73      	ldr	r3, [pc, #460]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000622:	6a1b      	ldr	r3, [r3, #32]
 8000624:	4a72      	ldr	r2, [pc, #456]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6213      	str	r3, [r2, #32]
												RESET_CC2_T3;
 800062c:	4b70      	ldr	r3, [pc, #448]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800062e:	6a1b      	ldr	r3, [r3, #32]
 8000630:	4a6f      	ldr	r2, [pc, #444]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000632:	f023 0310 	bic.w	r3, r3, #16
 8000636:	6213      	str	r3, [r2, #32]
												SET_CC2N_T4;
 8000638:	4b6d      	ldr	r3, [pc, #436]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800063a:	6a1b      	ldr	r3, [r3, #32]
 800063c:	4a6c      	ldr	r2, [pc, #432]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800063e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000642:	6213      	str	r3, [r2, #32]
												RESET_CC3_T5;
 8000644:	4b6a      	ldr	r3, [pc, #424]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000646:	6a1b      	ldr	r3, [r3, #32]
 8000648:	4a69      	ldr	r2, [pc, #420]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800064a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800064e:	6213      	str	r3, [r2, #32]
												RESET_CC3N_T6;
 8000650:	4b67      	ldr	r3, [pc, #412]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000652:	6a1b      	ldr	r3, [r3, #32]
 8000654:	4a66      	ldr	r2, [pc, #408]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800065a:	6213      	str	r3, [r2, #32]
						    break;
 800065c:	e0b8      	b.n	80007d0 <HAL_GPIO_EXTI_Callback+0x204>

							case 2:
												SET_CC1_T1;
 800065e:	4b64      	ldr	r3, [pc, #400]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	4a63      	ldr	r2, [pc, #396]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6213      	str	r3, [r2, #32]
												SET_CC1N_T2;
 800066a:	4b61      	ldr	r3, [pc, #388]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800066c:	6a1b      	ldr	r3, [r3, #32]
 800066e:	4a60      	ldr	r2, [pc, #384]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6213      	str	r3, [r2, #32]
												RESET_CC2_T3;
 8000676:	4b5e      	ldr	r3, [pc, #376]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000678:	6a1b      	ldr	r3, [r3, #32]
 800067a:	4a5d      	ldr	r2, [pc, #372]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800067c:	f023 0310 	bic.w	r3, r3, #16
 8000680:	6213      	str	r3, [r2, #32]
												RESET_CC2N_T4;
 8000682:	4b5b      	ldr	r3, [pc, #364]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000684:	6a1b      	ldr	r3, [r3, #32]
 8000686:	4a5a      	ldr	r2, [pc, #360]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800068c:	6213      	str	r3, [r2, #32]
												RESET_CC3_T5;
 800068e:	4b58      	ldr	r3, [pc, #352]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000690:	6a1b      	ldr	r3, [r3, #32]
 8000692:	4a57      	ldr	r2, [pc, #348]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000698:	6213      	str	r3, [r2, #32]
												SET_CC3N_T6;
 800069a:	4b55      	ldr	r3, [pc, #340]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800069c:	6a1b      	ldr	r3, [r3, #32]
 800069e:	4a54      	ldr	r2, [pc, #336]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006a4:	6213      	str	r3, [r2, #32]
						    break;
 80006a6:	e093      	b.n	80007d0 <HAL_GPIO_EXTI_Callback+0x204>

							case 3:
												RESET_CC1_T1;
 80006a8:	4b51      	ldr	r3, [pc, #324]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	4a50      	ldr	r2, [pc, #320]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006ae:	f023 0301 	bic.w	r3, r3, #1
 80006b2:	6213      	str	r3, [r2, #32]
												RESET_CC1N_T2;
 80006b4:	4b4e      	ldr	r3, [pc, #312]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	4a4d      	ldr	r2, [pc, #308]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006ba:	f023 0304 	bic.w	r3, r3, #4
 80006be:	6213      	str	r3, [r2, #32]
												SET_CC2_T3;
 80006c0:	4b4b      	ldr	r3, [pc, #300]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	4a4a      	ldr	r2, [pc, #296]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6213      	str	r3, [r2, #32]
												SET_CC2N_T4;
 80006cc:	4b48      	ldr	r3, [pc, #288]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	4a47      	ldr	r2, [pc, #284]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d6:	6213      	str	r3, [r2, #32]
												RESET_CC3_T5;
 80006d8:	4b45      	ldr	r3, [pc, #276]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006da:	6a1b      	ldr	r3, [r3, #32]
 80006dc:	4a44      	ldr	r2, [pc, #272]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006e2:	6213      	str	r3, [r2, #32]
												SET_CC3N_T6;
 80006e4:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006e6:	6a1b      	ldr	r3, [r3, #32]
 80006e8:	4a41      	ldr	r2, [pc, #260]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ee:	6213      	str	r3, [r2, #32]
						    break;
 80006f0:	e06e      	b.n	80007d0 <HAL_GPIO_EXTI_Callback+0x204>

						    case 4:
						    					RESET_CC1_T1;
 80006f2:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	4a3e      	ldr	r2, [pc, #248]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006f8:	f023 0301 	bic.w	r3, r3, #1
 80006fc:	6213      	str	r3, [r2, #32]
						    					SET_CC1N_T2;
 80006fe:	4b3c      	ldr	r3, [pc, #240]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	4a3b      	ldr	r2, [pc, #236]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6213      	str	r3, [r2, #32]
						    					SET_CC2_T3;
 800070a:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	6213      	str	r3, [r2, #32]
						    					SET_CC2N_T4;
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	4a35      	ldr	r2, [pc, #212]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6213      	str	r3, [r2, #32]
						    					RESET_CC3_T5;
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000724:	6a1b      	ldr	r3, [r3, #32]
 8000726:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800072c:	6213      	str	r3, [r2, #32]
						    					RESET_CC3N_T6;
 800072e:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000730:	6a1b      	ldr	r3, [r3, #32]
 8000732:	4a2f      	ldr	r2, [pc, #188]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000738:	6213      	str	r3, [r2, #32]
							break;
 800073a:	e049      	b.n	80007d0 <HAL_GPIO_EXTI_Callback+0x204>

						    case 5:
						    					RESET_CC1_T1;
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	4a2b      	ldr	r2, [pc, #172]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	6213      	str	r3, [r2, #32]
						    					SET_CC1N_T2;
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6213      	str	r3, [r2, #32]
						    					RESET_CC2_T3;
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000756:	6a1b      	ldr	r3, [r3, #32]
 8000758:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800075a:	f023 0310 	bic.w	r3, r3, #16
 800075e:	6213      	str	r3, [r2, #32]
						    					RESET_CC2N_T4;
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000762:	6a1b      	ldr	r3, [r3, #32]
 8000764:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800076a:	6213      	str	r3, [r2, #32]
						    					SET_CC3_T5;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800076e:	6a1b      	ldr	r3, [r3, #32]
 8000770:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000776:	6213      	str	r3, [r2, #32]
						    					SET_CC3N_T6;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800077a:	6a1b      	ldr	r3, [r3, #32]
 800077c:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800077e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000782:	6213      	str	r3, [r2, #32]
						    break;
 8000784:	e024      	b.n	80007d0 <HAL_GPIO_EXTI_Callback+0x204>

						    case 0:
						    					RESET_CC1_T1;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800078c:	f023 0301 	bic.w	r3, r3, #1
 8000790:	6213      	str	r3, [r2, #32]
						    					RESET_CC1N_T2;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000798:	f023 0304 	bic.w	r3, r3, #4
 800079c:	6213      	str	r3, [r2, #32]
						    					RESET_CC2_T3;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007a0:	6a1b      	ldr	r3, [r3, #32]
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007a4:	f023 0310 	bic.w	r3, r3, #16
 80007a8:	6213      	str	r3, [r2, #32]
						    					SET_CC2N_T4;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	6213      	str	r3, [r2, #32]
						    					SET_CC3_T5;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007b8:	6a1b      	ldr	r3, [r3, #32]
 80007ba:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	6213      	str	r3, [r2, #32]
						    					SET_CC3N_T6;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007c4:	6a1b      	ldr	r3, [r3, #32]
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007cc:	6213      	str	r3, [r2, #32]
						    break;
 80007ce:	bf00      	nop
							}



							if(licznik>5)
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b05      	cmp	r3, #5
 80007d6:	dd03      	ble.n	80007e0 <HAL_GPIO_EXTI_Callback+0x214>
							licznik=-1;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80007da:	f04f 32ff 	mov.w	r2, #4294967295
 80007de:	601a      	str	r2, [r3, #0]




	}
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	20000000 	.word	0x20000000
 80007f0:	40012c00 	.word	0x40012c00

080007f4 <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
	{


	}
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	//i++;
	if(htim->Instance==TIM2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		//  TIM1->CCR2=TIM2->CCR2;
		//  TIM1->CCR3=TIM2->CCR2;
		}
	}

}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f000 fcff 	bl	800122a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082c:	f000 f850 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f7ff fe72 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000834:	f000 f94a 	bl	8000acc <MX_TIM1_Init>
  MX_TIM4_Init();
 8000838:	f000 fac8 	bl	8000dcc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800083c:	f000 fc34 	bl	80010a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000840:	f000 fa2a 	bl	8000c98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //////// konfiguracja Timer 2  ////////////
    TIM2->ARR=0xFFFF;
 8000844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->PSC=500;
 800084e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000852:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000856:	629a      	str	r2, [r3, #40]	; 0x28

    HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000858:	2100      	movs	r1, #0
 800085a:	4819      	ldr	r0, [pc, #100]	; (80008c0 <main+0x9c>)
 800085c:	f002 f948 	bl	8002af0 <HAL_TIM_IC_Start>
   	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000860:	2104      	movs	r1, #4
 8000862:	4817      	ldr	r0, [pc, #92]	; (80008c0 <main+0x9c>)
 8000864:	f002 f944 	bl	8002af0 <HAL_TIM_IC_Start>


  //////// konfiguracja Timer 4  ////////////
    TIM4->ARR=0xFFFF;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <main+0xa0>)
 800086a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->PSC=500;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <main+0xa0>)
 8000872:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->CCR2=2;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <main+0xa0>)
 800087a:	2202      	movs	r2, #2
 800087c:	639a      	str	r2, [r3, #56]	; 0x38

   // HAL_TIMEx_HallSensor_Start(&htim4);

    //////// konfiguracja Timer 1  ////////////
    TIM1->ARR=0xFFFF;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <main+0xa4>)
 8000880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC=10;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <main+0xa4>)
 8000888:	220a      	movs	r2, #10
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->CCR1=44000;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <main+0xa4>)
 800088e:	f64a 32e0 	movw	r2, #44000	; 0xabe0
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2=44000;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <main+0xa4>)
 8000896:	f64a 32e0 	movw	r2, #44000	; 0xabe0
 800089a:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3=44000;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <main+0xa4>)
 800089e:	f64a 32e0 	movw	r2, #44000	; 0xabe0
 80008a2:	63da      	str	r2, [r3, #60]	; 0x3c
  //  HAL_TIMEx_ConfigCommutEvent_IT(&htim1,TIM_TS_ITR3, TIM_COMMUTATION_TRGI);


    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80008a4:	2100      	movs	r1, #0
 80008a6:	4809      	ldr	r0, [pc, #36]	; (80008cc <main+0xa8>)
 80008a8:	f003 fd1e 	bl	80042e8 <HAL_TIMEx_PWMN_Start>
   	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80008ac:	2104      	movs	r1, #4
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <main+0xa8>)
 80008b0:	f003 fd1a 	bl	80042e8 <HAL_TIMEx_PWMN_Start>
   	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80008b4:	2108      	movs	r1, #8
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <main+0xa8>)
 80008b8:	f003 fd16 	bl	80042e8 <HAL_TIMEx_PWMN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <main+0x98>
 80008be:	bf00      	nop
 80008c0:	200000c4 	.word	0x200000c4
 80008c4:	40000800 	.word	0x40000800
 80008c8:	40012c00 	.word	0x40012c00
 80008cc:	20000078 	.word	0x20000078

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b0a4      	sub	sp, #144	; 0x90
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008da:	2238      	movs	r2, #56	; 0x38
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 fd72 	bl	80063c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2244      	movs	r2, #68	; 0x44
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f005 fd64 	bl	80063c8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000900:	2000      	movs	r0, #0
 8000902:	f001 f813 	bl	800192c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000906:	2301      	movs	r3, #1
 8000908:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2302      	movs	r3, #2
 8000912:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000914:	2303      	movs	r3, #3
 8000916:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800091c:	2350      	movs	r3, #80	; 0x50
 800091e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000938:	4618      	mov	r0, r3
 800093a:	f001 f89b 	bl	8001a74 <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000944:	f000 f826 	bl	8000994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000948:	230f      	movs	r3, #15
 800094a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094c:	2303      	movs	r3, #3
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800095c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000960:	2107      	movs	r1, #7
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fb9e 	bl	80020a4 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800096e:	f000 f811 	bl	8000994 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000972:	2302      	movs	r3, #2
 8000974:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fdad 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000988:	f000 f804 	bl	8000994 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3790      	adds	r7, #144	; 0x90
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80009ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b2:	6093      	str	r3, [r2, #8]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40007000 	.word	0x40007000

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_MspInit+0x44>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6613      	str	r3, [r2, #96]	; 0x60
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x44>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6593      	str	r3, [r2, #88]	; 0x58
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80009fa:	f7ff ffd3 	bl	80009a4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 fc36 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000a6e:	f002 f901 	bl	8002c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000078 	.word	0x20000078

08000a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <USART2_IRQHandler+0x10>)
 8000a82:	f003 fe85 	bl	8004790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000110 	.word	0x20000110

08000a90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a98:	f000 ff30 	bl	80018fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SystemInit+0x28>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SystemInit+0x28>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SystemInit+0x28>)
 8000ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aba:	609a      	str	r2, [r3, #8]
#endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0a0      	sub	sp, #128	; 0x80
 8000ad0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ae0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b10:	463b      	mov	r3, r7
 8000b12:	2234      	movs	r2, #52	; 0x34
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fc56 	bl	80063c8 <memset>

  htim1.Instance = TIM1;
 8000b1c:	4b5c      	ldr	r3, [pc, #368]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b1e:	4a5d      	ldr	r2, [pc, #372]	; (8000c94 <MX_TIM1_Init+0x1c8>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b22:	4b5b      	ldr	r3, [pc, #364]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b59      	ldr	r3, [pc, #356]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000b2e:	4b58      	ldr	r3, [pc, #352]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b56      	ldr	r3, [pc, #344]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3a:	4b55      	ldr	r3, [pc, #340]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b53      	ldr	r3, [pc, #332]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b46:	4852      	ldr	r0, [pc, #328]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b48:	f001 feb8 	bl	80028bc <HAL_TIM_Base_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b52:	f7ff ff1f 	bl	8000994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b60:	4619      	mov	r1, r3
 8000b62:	484b      	ldr	r0, [pc, #300]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b64:	f002 fbaa 	bl	80032bc <HAL_TIM_ConfigClockSource>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b6e:	f7ff ff11 	bl	8000994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b72:	4847      	ldr	r0, [pc, #284]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b74:	f001 fef9 	bl	800296a <HAL_TIM_PWM_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000b7e:	f7ff ff09 	bl	8000994 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000b86:	2330      	movs	r3, #48	; 0x30
 8000b88:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	483f      	ldr	r0, [pc, #252]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000b92:	f002 fc71 	bl	8003478 <HAL_TIM_SlaveConfigSynchro>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000b9c:	f7ff fefa 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000ba0:	2370      	movs	r3, #112	; 0x70
 8000ba2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4837      	ldr	r0, [pc, #220]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000bb4:	f003 fc18 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000bbe:	f7ff fee9 	bl	8000994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc2:	2360      	movs	r3, #96	; 0x60
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	482a      	ldr	r0, [pc, #168]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000be8:	f002 fa58 	bl	800309c <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000bf2:	f7ff fecf 	bl	8000994 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4823      	ldr	r0, [pc, #140]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000c04:	f002 fa4a 	bl	800309c <HAL_TIM_PWM_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000c0e:	f7ff fec1 	bl	8000994 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481c      	ldr	r0, [pc, #112]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000c20:	f002 fa3c 	bl	800309c <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000c2a:	f7ff feb3 	bl	8000994 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c32:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_3;
 8000c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8000c40:	2344      	movs	r3, #68	; 0x44
 8000c42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000c62:	2303      	movs	r3, #3
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4619      	mov	r1, r3
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000c74:	f003 fc3a 	bl	80044ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM1_Init+0x1b6>
  {
    Error_Handler();
 8000c7e:	f7ff fe89 	bl	8000994 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000c82:	4803      	ldr	r0, [pc, #12]	; (8000c90 <MX_TIM1_Init+0x1c4>)
 8000c84:	f000 f99a 	bl	8000fbc <HAL_TIM_MspPostInit>

}
 8000c88:	bf00      	nop
 8000c8a:	3780      	adds	r7, #128	; 0x80
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000078 	.word	0x20000078
 8000c94:	40012c00 	.word	0x40012c00

08000c98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b090      	sub	sp, #64	; 0x40
 8000c9c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000cd4:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000ce8:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfa:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000cfc:	f001 fdde 	bl	80028bc <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d06:	f7ff fe45 	bl	8000994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d14:	4619      	mov	r1, r3
 8000d16:	482c      	ldr	r0, [pc, #176]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000d18:	f002 fad0 	bl	80032bc <HAL_TIM_ConfigClockSource>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d22:	f7ff fe37 	bl	8000994 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d26:	4828      	ldr	r0, [pc, #160]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000d28:	f001 fe80 	bl	8002a2c <HAL_TIM_IC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d32:	f7ff fe2f 	bl	8000994 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d36:	2304      	movs	r3, #4
 8000d38:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d3a:	2350      	movs	r3, #80	; 0x50
 8000d3c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000d4e:	f002 fb93 	bl	8003478 <HAL_TIM_SlaveConfigSynchro>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000d58:	f7ff fe1c 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000d6c:	f003 fb3c 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000d76:	f7ff fe0d 	bl	8000994 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000d92:	f002 f8ee 	bl	8002f72 <HAL_TIM_IC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000d9c:	f7ff fdfa 	bl	8000994 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000da0:	2302      	movs	r3, #2
 8000da2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000da4:	2302      	movs	r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	2204      	movs	r2, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_TIM2_Init+0x130>)
 8000db0:	f002 f8df 	bl	8002f72 <HAL_TIM_IC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000dba:	f7ff fdeb 	bl	8000994 <Error_Handler>
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3740      	adds	r7, #64	; 0x40
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000c4 	.word	0x200000c4

08000dcc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000dfa:	4a27      	ldr	r2, [pc, #156]	; (8000e98 <MX_TIM4_Init+0xcc>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e1c:	481d      	ldr	r0, [pc, #116]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000e1e:	f001 fd4d 	bl	80028bc <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000e28:	f7ff fdb4 	bl	8000994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e30:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	4619      	mov	r1, r3
 8000e38:	4816      	ldr	r0, [pc, #88]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000e3a:	f002 fa3f 	bl	80032bc <HAL_TIM_ConfigClockSource>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e44:	f7ff fda6 	bl	8000994 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000e60:	f003 f989 	bl	8004176 <HAL_TIMEx_HallSensor_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000e6a:	f7ff fd93 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000e6e:	2350      	movs	r3, #80	; 0x50
 8000e70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <MX_TIM4_Init+0xc8>)
 8000e7c:	f003 fab4 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000e86:	f7ff fd85 	bl	8000994 <Error_Handler>
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3730      	adds	r7, #48	; 0x30
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000002c 	.word	0x2000002c
 8000e98:	40000800 	.word	0x40000800

08000e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a3c      	ldr	r2, [pc, #240]	; (8000fac <HAL_TIM_Base_MspInit+0x110>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d114      	bne.n	8000ee8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	4a3b      	ldr	r2, [pc, #236]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	201a      	movs	r0, #26
 8000edc:	f000 faf1 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ee0:	201a      	movs	r0, #26
 8000ee2:	f000 fb08 	bl	80014f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ee6:	e05d      	b.n	8000fa4 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef0:	d12a      	bne.n	8000f48 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8000f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f30:	2302      	movs	r3, #2
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f000 fb59 	bl	80015f8 <HAL_GPIO_Init>
}
 8000f46:	e02d      	b.n	8000fa4 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM4)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <HAL_TIM_Base_MspInit+0x118>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d128      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_TIM_Base_MspInit+0x114>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_W_TIM4_Pin|HALL_U_TIM4_Pin|HALL_V_TIM4_Pin;
 8000f82:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f90:	2302      	movs	r3, #2
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f94:	2302      	movs	r3, #2
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <HAL_TIM_Base_MspInit+0x11c>)
 8000fa0:	f000 fb2a 	bl	80015f8 <HAL_GPIO_Init>
}
 8000fa4:	bf00      	nop
 8000fa6:	3730      	adds	r7, #48	; 0x30
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40012c00 	.word	0x40012c00
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40000800 	.word	0x40000800
 8000fb8:	48000400 	.word	0x48000400

08000fbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <HAL_TIM_MspPostInit+0xdc>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d157      	bne.n	800108e <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_TIM_MspPostInit+0xe0>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a2e      	ldr	r2, [pc, #184]	; (800109c <HAL_TIM_MspPostInit+0xe0>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_TIM_MspPostInit+0xe0>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <HAL_TIM_MspPostInit+0xe0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a28      	ldr	r2, [pc, #160]	; (800109c <HAL_TIM_MspPostInit+0xe0>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <HAL_TIM_MspPostInit+0xe0>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_TIM_MspPostInit+0xe0>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a22      	ldr	r2, [pc, #136]	; (800109c <HAL_TIM_MspPostInit+0xe0>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_TIM_MspPostInit+0xe0>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001030:	2302      	movs	r3, #2
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001038:	2304      	movs	r3, #4
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4817      	ldr	r0, [pc, #92]	; (80010a0 <HAL_TIM_MspPostInit+0xe4>)
 8001044:	f000 fad8 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001052:	2302      	movs	r3, #2
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800105a:	2304      	movs	r3, #4
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	480f      	ldr	r0, [pc, #60]	; (80010a4 <HAL_TIM_MspPostInit+0xe8>)
 8001066:	f000 fac7 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800106a:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001074:	2302      	movs	r3, #2
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800107c:	2306      	movs	r3, #6
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f000 fab5 	bl	80015f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000400 	.word	0x48000400

080010a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010ae:	4a23      	ldr	r2, [pc, #140]	; (800113c <MX_USART2_UART_Init+0x94>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <MX_USART2_UART_Init+0x90>)
 80010f2:	f003 fafc 	bl	80046ee <HAL_UART_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010fc:	f7ff fc4a 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001100:	2100      	movs	r1, #0
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_USART2_UART_Init+0x90>)
 8001104:	f005 f858 	bl	80061b8 <HAL_UARTEx_SetTxFifoThreshold>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800110e:	f7ff fc41 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001112:	2100      	movs	r1, #0
 8001114:	4808      	ldr	r0, [pc, #32]	; (8001138 <MX_USART2_UART_Init+0x90>)
 8001116:	f005 f88d 	bl	8006234 <HAL_UARTEx_SetRxFifoThreshold>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001120:	f7ff fc38 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_USART2_UART_Init+0x90>)
 8001126:	f005 f80e 	bl	8006146 <HAL_UARTEx_DisableFifoMode>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001130:	f7ff fc30 	bl	8000994 <Error_Handler>
  }

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000110 	.word	0x20000110
 800113c:	40004400 	.word	0x40004400

08001140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_UART_MspInit+0x8c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d12f      	bne.n	80011c2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_UART_MspInit+0x90>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <HAL_UART_MspInit+0x90>)
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_UART_MspInit+0x90>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_MspInit+0x90>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_UART_MspInit+0x90>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_UART_MspInit+0x90>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001192:	2318      	movs	r3, #24
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a2:	2307      	movs	r3, #7
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <HAL_UART_MspInit+0x94>)
 80011ae:	f000 fa23 	bl	80015f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2103      	movs	r1, #3
 80011b6:	2026      	movs	r0, #38	; 0x26
 80011b8:	f000 f983 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011bc:	2026      	movs	r0, #38	; 0x26
 80011be:	f000 f99a 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004400 	.word	0x40004400
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000400 	.word	0x48000400

080011d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <LoopForever+0x6>)
  ldr r1, =_edata
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <LoopForever+0xe>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f4:	4c0b      	ldr	r4, [pc, #44]	; (8001224 <LoopForever+0x16>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001202:	f7ff fc4d 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001206:	f005 f8bb 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120a:	f7ff fb0b 	bl	8000824 <main>

0800120e <LoopForever>:

LoopForever:
    b LoopForever
 800120e:	e7fe      	b.n	800120e <LoopForever>
  ldr   r0, =_estack
 8001210:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800121c:	08006428 	.word	0x08006428
  ldr r2, =_sbss
 8001220:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001224:	200001a0 	.word	0x200001a0

08001228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_2_IRQHandler>

0800122a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f939 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f80e 	bl	800125c <HAL_InitTick>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	e001      	b.n	8001250 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800124c:	f7ff fbba 	bl	80009c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001250:	79fb      	ldrb	r3, [r7, #7]

}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_InitTick+0x68>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d022      	beq.n	80012b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_InitTick+0x6c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_InitTick+0x68>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800127c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f944 	bl	8001512 <HAL_SYSTICK_Config>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10f      	bne.n	80012b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	d809      	bhi.n	80012aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001296:	2200      	movs	r2, #0
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	f04f 30ff 	mov.w	r0, #4294967295
 800129e:	f000 f910 	bl	80014c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_InitTick+0x70>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e007      	b.n	80012ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e004      	b.n	80012ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e001      	b.n	80012ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000000c 	.word	0x2000000c
 80012c8:	20000004 	.word	0x20000004
 80012cc:	20000008 	.word	0x20000008

080012d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x1c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x20>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	4a03      	ldr	r2, [pc, #12]	; (80012ec <HAL_IncTick+0x1c>)
 80012e0:	6013      	str	r3, [r2, #0]
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	2000019c 	.word	0x2000019c
 80012f0:	2000000c 	.word	0x2000000c

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	2000019c 	.word	0x2000019c

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff40 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff90 	bl	8001400 <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5f 	bl	80013ac <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff33 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa4 	bl	8001468 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d00d      	beq.n	800155e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2204      	movs	r2, #4
 8001546:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e047      	b.n	80015ee <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 020e 	bic.w	r2, r2, #14
 800156c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800158c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f003 021f 	and.w	r2, r3, #31
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	2101      	movs	r1, #1
 800159c:	fa01 f202 	lsl.w	r2, r1, r2
 80015a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00c      	beq.n	80015ce <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	4798      	blx	r3
    }
  }
  return status;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001606:	e15a      	b.n	80018be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	4013      	ands	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 814c 	beq.w	80018b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d00b      	beq.n	8001640 <HAL_GPIO_Init+0x48>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d007      	beq.n	8001640 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001634:	2b11      	cmp	r3, #17
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b12      	cmp	r3, #18
 800163e:	d130      	bne.n	80016a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001676:	2201      	movs	r2, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0201 	and.w	r2, r3, #1
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0xea>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d123      	bne.n	800172a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	08da      	lsrs	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3208      	adds	r2, #8
 80016ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	220f      	movs	r2, #15
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	08da      	lsrs	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	6939      	ldr	r1, [r7, #16]
 8001726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0203 	and.w	r2, r3, #3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80a6 	beq.w	80018b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176c:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <HAL_GPIO_Init+0x2e4>)
 800176e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001770:	4a5a      	ldr	r2, [pc, #360]	; (80018dc <HAL_GPIO_Init+0x2e4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6613      	str	r3, [r2, #96]	; 0x60
 8001778:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_GPIO_Init+0x2e4>)
 800177a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001784:	4a56      	ldr	r2, [pc, #344]	; (80018e0 <HAL_GPIO_Init+0x2e8>)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ae:	d01f      	beq.n	80017f0 <HAL_GPIO_Init+0x1f8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a4c      	ldr	r2, [pc, #304]	; (80018e4 <HAL_GPIO_Init+0x2ec>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d019      	beq.n	80017ec <HAL_GPIO_Init+0x1f4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a4b      	ldr	r2, [pc, #300]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d013      	beq.n	80017e8 <HAL_GPIO_Init+0x1f0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a4a      	ldr	r2, [pc, #296]	; (80018ec <HAL_GPIO_Init+0x2f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00d      	beq.n	80017e4 <HAL_GPIO_Init+0x1ec>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a49      	ldr	r2, [pc, #292]	; (80018f0 <HAL_GPIO_Init+0x2f8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d007      	beq.n	80017e0 <HAL_GPIO_Init+0x1e8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <HAL_GPIO_Init+0x2fc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_GPIO_Init+0x1e4>
 80017d8:	2305      	movs	r3, #5
 80017da:	e00a      	b.n	80017f2 <HAL_GPIO_Init+0x1fa>
 80017dc:	2306      	movs	r3, #6
 80017de:	e008      	b.n	80017f2 <HAL_GPIO_Init+0x1fa>
 80017e0:	2304      	movs	r3, #4
 80017e2:	e006      	b.n	80017f2 <HAL_GPIO_Init+0x1fa>
 80017e4:	2303      	movs	r3, #3
 80017e6:	e004      	b.n	80017f2 <HAL_GPIO_Init+0x1fa>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e002      	b.n	80017f2 <HAL_GPIO_Init+0x1fa>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_GPIO_Init+0x1fa>
 80017f0:	2300      	movs	r3, #0
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	f002 0203 	and.w	r2, r2, #3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4093      	lsls	r3, r2
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001802:	4937      	ldr	r1, [pc, #220]	; (80018e0 <HAL_GPIO_Init+0x2e8>)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_GPIO_Init+0x300>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001834:	4a30      	ldr	r2, [pc, #192]	; (80018f8 <HAL_GPIO_Init+0x300>)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_GPIO_Init+0x300>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800185e:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <HAL_GPIO_Init+0x300>)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_GPIO_Init+0x300>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_GPIO_Init+0x300>)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_GPIO_Init+0x300>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <HAL_GPIO_Init+0x300>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f47f ae9d 	bne.w	8001608 <HAL_GPIO_Init+0x10>
  }
}
 80018ce:	bf00      	nop
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010000 	.word	0x40010000
 80018e4:	48000400 	.word	0x48000400
 80018e8:	48000800 	.word	0x48000800
 80018ec:	48000c00 	.word	0x48000c00
 80018f0:	48001000 	.word	0x48001000
 80018f4:	48001400 	.word	0x48001400
 80018f8:	40010400 	.word	0x40010400

080018fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe56 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40010400 	.word	0x40010400

0800192c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d141      	bne.n	80019be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001946:	d131      	bne.n	80019ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001948:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800194e:	4a46      	ldr	r2, [pc, #280]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001954:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001958:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001960:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001968:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2232      	movs	r2, #50	; 0x32
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	4a3f      	ldr	r2, [pc, #252]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800197e:	e002      	b.n	8001986 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3b01      	subs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001992:	d102      	bne.n	800199a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f2      	bne.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	d158      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e057      	b.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019b2:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019bc:	e04d      	b.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c4:	d141      	bne.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d2:	d131      	bne.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019da:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2232      	movs	r2, #50	; 0x32
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	0c9b      	lsrs	r3, r3, #18
 8001a06:	3301      	adds	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0a:	e002      	b.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	d102      	bne.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f2      	bne.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d112      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e011      	b.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a48:	e007      	b.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e308      	b.n	8002098 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d075      	beq.n	8001b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	4ba3      	ldr	r3, [pc, #652]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9c:	4ba0      	ldr	r3, [pc, #640]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3e>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x44>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	4b99      	ldr	r3, [pc, #612]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d05b      	beq.n	8001b7c <HAL_RCC_OscConfig+0x108>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d157      	bne.n	8001b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2e3      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d106      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x74>
 8001ada:	4b91      	ldr	r3, [pc, #580]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a90      	ldr	r2, [pc, #576]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x98>
 8001af2:	4b8b      	ldr	r3, [pc, #556]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a8a      	ldr	r2, [pc, #552]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a87      	ldr	r2, [pc, #540]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	4b84      	ldr	r3, [pc, #528]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a83      	ldr	r2, [pc, #524]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b81      	ldr	r3, [pc, #516]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a80      	ldr	r2, [pc, #512]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fbe2 	bl	80012f4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fbde 	bl	80012f4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e2a8      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b46:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xc0>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff fbce 	bl	80012f4 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fbca 	bl	80012f4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e294      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6e:	4b6c      	ldr	r3, [pc, #432]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0xe8>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d075      	beq.n	8001c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b94:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_OscConfig+0x136>
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x13c>
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11f      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb0:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x154>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e267      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	4952      	ldr	r1, [pc, #328]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bdc:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <HAL_RCC_OscConfig+0x2b0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fb3b 	bl	800125c <HAL_InitTick>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d043      	beq.n	8001c74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e253      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fb76 	bl	80012f4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fb72 	bl	80012f4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e23c      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1e:	4b40      	ldr	r3, [pc, #256]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	061b      	lsls	r3, r3, #24
 8001c38:	4939      	ldr	r1, [pc, #228]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
 8001c3e:	e01a      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c40:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a36      	ldr	r2, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb52 	bl	80012f4 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff fb4e 	bl	80012f4 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e218      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1e0>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d03c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fb2b 	bl	80012f4 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fb27 	bl	80012f4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1f1      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ef      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x22e>
 8001cc2:	e01b      	b.n	8001cfc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fb0e 	bl	80012f4 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fb0a 	bl	80012f4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1d4      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ef      	bne.n	8001cdc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ab 	beq.w	8001e60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e005      	b.n	8001d2a <HAL_RCC_OscConfig+0x2b6>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	20000008 	.word	0x20000008
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4baf      	ldr	r3, [pc, #700]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	4aae      	ldr	r2, [pc, #696]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3a:	4bac      	ldr	r3, [pc, #688]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	4ba9      	ldr	r3, [pc, #676]	; (8001ff0 <HAL_RCC_OscConfig+0x57c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d56:	4ba6      	ldr	r3, [pc, #664]	; (8001ff0 <HAL_RCC_OscConfig+0x57c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4aa5      	ldr	r2, [pc, #660]	; (8001ff0 <HAL_RCC_OscConfig+0x57c>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fac7 	bl	80012f4 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7ff fac3 	bl	80012f4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e18d      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7c:	4b9c      	ldr	r3, [pc, #624]	; (8001ff0 <HAL_RCC_OscConfig+0x57c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_RCC_OscConfig+0x32e>
 8001d90:	4b96      	ldr	r3, [pc, #600]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	4a95      	ldr	r2, [pc, #596]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da0:	e024      	b.n	8001dec <HAL_RCC_OscConfig+0x378>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d110      	bne.n	8001dcc <HAL_RCC_OscConfig+0x358>
 8001daa:	4b90      	ldr	r3, [pc, #576]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	4a8e      	ldr	r2, [pc, #568]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dba:	4b8c      	ldr	r3, [pc, #560]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc0:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x378>
 8001dcc:	4b87      	ldr	r3, [pc, #540]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	4a86      	ldr	r2, [pc, #536]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ddc:	4b83      	ldr	r3, [pc, #524]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	4a82      	ldr	r2, [pc, #520]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d016      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff fa7e 	bl	80012f4 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fa7a 	bl	80012f4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e142      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ed      	beq.n	8001dfc <HAL_RCC_OscConfig+0x388>
 8001e20:	e015      	b.n	8001e4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff fa67 	bl	80012f4 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fa63 	bl	80012f4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e12b      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ed      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e4e:	7ffb      	ldrb	r3, [r7, #31]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b65      	ldr	r3, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	4a64      	ldr	r2, [pc, #400]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d03c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01c      	beq.n	8001eae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e74:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7a:	4a5c      	ldr	r2, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff fa36 	bl	80012f4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e8c:	f7ff fa32 	bl	80012f4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0fc      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e9e:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ef      	beq.n	8001e8c <HAL_RCC_OscConfig+0x418>
 8001eac:	e01b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eae:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb4:	4a4d      	ldr	r2, [pc, #308]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fa19 	bl	80012f4 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec6:	f7ff fa15 	bl	80012f4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0df      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ed8:	4b44      	ldr	r3, [pc, #272]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ef      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80d3 	beq.w	8002096 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef0:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	f000 808d 	beq.w	8002018 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d15a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b39      	ldr	r3, [pc, #228]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a38      	ldr	r2, [pc, #224]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff f9ef 	bl	80012f4 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff f9eb 	bl	80012f4 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0b5      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f38:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x580>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6a11      	ldr	r1, [r2, #32]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f48:	3a01      	subs	r2, #1
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f52:	0212      	lsls	r2, r2, #8
 8001f54:	4311      	orrs	r1, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f5a:	0852      	lsrs	r2, r2, #1
 8001f5c:	3a01      	subs	r2, #1
 8001f5e:	0552      	lsls	r2, r2, #21
 8001f60:	4311      	orrs	r1, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f66:	0852      	lsrs	r2, r2, #1
 8001f68:	3a01      	subs	r2, #1
 8001f6a:	0652      	lsls	r2, r2, #25
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f72:	06d2      	lsls	r2, r2, #27
 8001f74:	430a      	orrs	r2, r1
 8001f76:	491d      	ldr	r1, [pc, #116]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a17      	ldr	r2, [pc, #92]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f9ae 	bl	80012f4 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff f9aa 	bl	80012f4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e074      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x528>
 8001fba:	e06c      	b.n	8002096 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_RCC_OscConfig+0x578>)
 8001fda:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f986 	bl	80012f4 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fea:	e00e      	b.n	800200a <HAL_RCC_OscConfig+0x596>
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f97c 	bl	80012f4 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e046      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_RCC_OscConfig+0x62c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x584>
 8002016:	e03e      	b.n	8002096 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e039      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_OscConfig+0x62c>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	429a      	cmp	r2, r3
 8002036:	d12c      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	3b01      	subs	r3, #1
 8002044:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d123      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d11b      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d113      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	3b01      	subs	r3, #1
 8002078:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d109      	bne.n	8002092 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e11e      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b91      	ldr	r3, [pc, #580]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b8e      	ldr	r3, [pc, #568]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 020f 	bic.w	r2, r3, #15
 80020d2:	498c      	ldr	r1, [pc, #560]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e106      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d073      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d129      	bne.n	8002154 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0f4      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002110:	f000 f99e 	bl	8002450 <RCC_GetSysClockFreqFromPLLSource>
 8002114:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4a7c      	ldr	r2, [pc, #496]	; (800230c <HAL_RCC_ClockConfig+0x268>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d93f      	bls.n	800219e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800211e:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002132:	2b00      	cmp	r3, #0
 8002134:	d033      	beq.n	800219e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d12f      	bne.n	800219e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800213e:	4b72      	ldr	r3, [pc, #456]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002146:	4a70      	ldr	r2, [pc, #448]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e024      	b.n	800219e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d107      	bne.n	800216c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0c6      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0be      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800217c:	f000 f8ce 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8002180:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4a61      	ldr	r2, [pc, #388]	; (800230c <HAL_RCC_ClockConfig+0x268>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d909      	bls.n	800219e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002192:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b5a      	ldr	r3, [pc, #360]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4957      	ldr	r1, [pc, #348]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b0:	f7ff f8a0 	bl	80012f4 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff f89c 	bl	80012f4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e095      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d023      	beq.n	8002234 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a42      	ldr	r2, [pc, #264]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002202:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002218:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800221a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800221e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4936      	ldr	r1, [pc, #216]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
 8002232:	e008      	b.n	8002246 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b80      	cmp	r3, #128	; 0x80
 8002238:	d105      	bne.n	8002246 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4a32      	ldr	r2, [pc, #200]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002244:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d21d      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 020f 	bic.w	r2, r3, #15
 800225c:	4929      	ldr	r1, [pc, #164]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002264:	f7ff f846 	bl	80012f4 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff f842 	bl	80012f4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e03b      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d1ed      	bne.n	800226c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4917      	ldr	r1, [pc, #92]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490f      	ldr	r1, [pc, #60]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ce:	f000 f825 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022d2:	4601      	mov	r1, r0
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_ClockConfig+0x26c>)
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x270>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe ffb2 	bl	800125c <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40022000 	.word	0x40022000
 8002308:	40021000 	.word	0x40021000
 800230c:	04c4b400 	.word	0x04c4b400
 8002310:	08006400 	.word	0x08006400
 8002314:	20000004 	.word	0x20000004
 8002318:	20000008 	.word	0x20000008

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d102      	bne.n	8002334 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e047      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d102      	bne.n	8002346 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e03e      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d136      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3301      	adds	r3, #1
 8002368:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d10c      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237a:	68d2      	ldr	r2, [r2, #12]
 800237c:	0a12      	lsrs	r2, r2, #8
 800237e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
      break;
 8002388:	e00c      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	0a12      	lsrs	r2, r2, #8
 8002398:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
      break;
 80023a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0e5b      	lsrs	r3, r3, #25
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	3301      	adds	r3, #1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e001      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023c4:	693b      	ldr	r3, [r7, #16]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	007a1200 	.word	0x007a1200

080023e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002400:	4601      	mov	r1, r0
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	08006410 	.word	0x08006410

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002428:	f7ff ffda 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 800242c:	4601      	mov	r1, r0
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_RCC_GetPCLK2Freq+0x28>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	08006410 	.word	0x08006410

08002450 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d10c      	bne.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002474:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800247e:	68d2      	ldr	r2, [r2, #12]
 8002480:	0a12      	lsrs	r2, r2, #8
 8002482:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
    break;
 800248c:	e00c      	b.n	80024a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002498:	68d2      	ldr	r2, [r2, #12]
 800249a:	0a12      	lsrs	r2, r2, #8
 800249c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024a0:	fb02 f303 	mul.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    break;
 80024a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0e5b      	lsrs	r3, r3, #25
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024c2:	687b      	ldr	r3, [r7, #4]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	00f42400 	.word	0x00f42400

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e4:	2300      	movs	r3, #0
 80024e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8098 	beq.w	800262a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b43      	ldr	r3, [pc, #268]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	4a3f      	ldr	r2, [pc, #252]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6593      	str	r3, [r2, #88]	; 0x58
 8002516:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a39      	ldr	r2, [pc, #228]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002532:	f7fe fedf 	bl	80012f4 <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002538:	e009      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe fedb 	bl	80012f4 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d902      	bls.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	74fb      	strb	r3, [r7, #19]
        break;
 800254c:	e005      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ef      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d159      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01e      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	d019      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fe9b 	bl	80012f4 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c0:	e00b      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fe97 	bl	80012f4 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d902      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	74fb      	strb	r3, [r7, #19]
            break;
 80025d8:	e006      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ec      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002604:	e008      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	74bb      	strb	r3, [r7, #18]
 800260a:	e005      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002618:	7c7b      	ldrb	r3, [r7, #17]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4ba6      	ldr	r3, [pc, #664]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4aa5      	ldr	r2, [pc, #660]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002636:	4ba0      	ldr	r3, [pc, #640]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f023 0203 	bic.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	499c      	ldr	r1, [pc, #624]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002658:	4b97      	ldr	r3, [pc, #604]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 020c 	bic.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4994      	ldr	r1, [pc, #592]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800267a:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	498b      	ldr	r1, [pc, #556]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800269c:	4b86      	ldr	r3, [pc, #536]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	4983      	ldr	r1, [pc, #524]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026be:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	497a      	ldr	r1, [pc, #488]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e0:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4972      	ldr	r1, [pc, #456]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002702:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	4969      	ldr	r1, [pc, #420]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002724:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4961      	ldr	r1, [pc, #388]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002746:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	4958      	ldr	r1, [pc, #352]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002768:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	4950      	ldr	r1, [pc, #320]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027a0:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	4942      	ldr	r1, [pc, #264]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a3c      	ldr	r2, [pc, #240]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027d8:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4934      	ldr	r1, [pc, #208]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f6:	d105      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a2e      	ldr	r2, [pc, #184]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	4926      	ldr	r1, [pc, #152]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800282e:	d105      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	4918      	ldr	r1, [pc, #96]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002872:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800289e:	d105      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e049      	b.n	8002962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fada 	bl	8000e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 fe26 	bl	800354c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e049      	b.n	8002a10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f841 	bl	8002a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f000 fdcf 	bl	800354c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e049      	b.n	8002ad2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f841 	bl	8002ada <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f000 fd6e 	bl	800354c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_IC_Start+0x1a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	e023      	b.n	8002b52 <HAL_TIM_IC_Start+0x62>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_IC_Start+0x2a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	e01b      	b.n	8002b52 <HAL_TIM_IC_Start+0x62>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_IC_Start+0x3a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	e013      	b.n	8002b52 <HAL_TIM_IC_Start+0x62>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_IC_Start+0x4a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e00b      	b.n	8002b52 <HAL_TIM_IC_Start+0x62>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_IC_Start+0x5a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e003      	b.n	8002b52 <HAL_TIM_IC_Start+0x62>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_TIM_IC_Start+0x74>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e013      	b.n	8002b8c <HAL_TIM_IC_Start+0x9c>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d104      	bne.n	8002b74 <HAL_TIM_IC_Start+0x84>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e00b      	b.n	8002b8c <HAL_TIM_IC_Start+0x9c>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d104      	bne.n	8002b84 <HAL_TIM_IC_Start+0x94>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e003      	b.n	8002b8c <HAL_TIM_IC_Start+0x9c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b94:	7bbb      	ldrb	r3, [r7, #14]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e064      	b.n	8002c68 <HAL_TIM_IC_Start+0x178>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_IC_Start+0xbe>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bac:	e023      	b.n	8002bf6 <HAL_TIM_IC_Start+0x106>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d104      	bne.n	8002bbe <HAL_TIM_IC_Start+0xce>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bbc:	e01b      	b.n	8002bf6 <HAL_TIM_IC_Start+0x106>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d104      	bne.n	8002bce <HAL_TIM_IC_Start+0xde>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bcc:	e013      	b.n	8002bf6 <HAL_TIM_IC_Start+0x106>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_IC_Start+0xee>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bdc:	e00b      	b.n	8002bf6 <HAL_TIM_IC_Start+0x106>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d104      	bne.n	8002bee <HAL_TIM_IC_Start+0xfe>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bec:	e003      	b.n	8002bf6 <HAL_TIM_IC_Start+0x106>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_IC_Start+0x116>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c04:	e013      	b.n	8002c2e <HAL_TIM_IC_Start+0x13e>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_IC_Start+0x126>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c14:	e00b      	b.n	8002c2e <HAL_TIM_IC_Start+0x13e>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_IC_Start+0x136>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c24:	e003      	b.n	8002c2e <HAL_TIM_IC_Start+0x13e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 fa78 	bl	800412c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_TIM_IC_Start+0x180>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d00b      	beq.n	8002c66 <HAL_TIM_IC_Start+0x176>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c54:	d007      	beq.n	8002c66 <HAL_TIM_IC_Start+0x176>
  {
    __HAL_TIM_ENABLE(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	00010007 	.word	0x00010007

08002c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0202 	mvn.w	r2, #2
 8002ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd fda6 	bl	8000808 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fc26 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fc2d 	bl	8003524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0204 	mvn.w	r2, #4
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fd7c 	bl	8000808 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fbfc 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fc03 	bl	8003524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0208 	mvn.w	r2, #8
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fd52 	bl	8000808 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fbd2 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fbd9 	bl	8003524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0210 	mvn.w	r2, #16
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2208      	movs	r2, #8
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fd fd28 	bl	8000808 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fba8 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fbaf 	bl	8003524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0201 	mvn.w	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fb82 	bl	80034fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b80      	cmp	r3, #128	; 0x80
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f001 fc04 	bl	800462c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e32:	d10e      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b80      	cmp	r3, #128	; 0x80
 8002e40:	d107      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f001 fbf7 	bl	8004640 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d10e      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d107      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb5d 	bl	8003538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d10e      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d107      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f06f 0220 	mvn.w	r2, #32
 8002ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7fd fca5 	bl	80007f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb8:	d10f      	bne.n	8002eda <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec8:	d107      	bne.n	8002eda <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f001 fbbd 	bl	8004654 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ee8:	d10f      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ef8:	d107      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f001 fbaf 	bl	8004668 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f18:	d10f      	bne.n	8002f3a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f28:	d107      	bne.n	8002f3a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f001 fba1 	bl	800467c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f48:	d10f      	bne.n	8002f6a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f58:	d107      	bne.n	8002f6a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f001 fb93 	bl	8004690 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_IC_ConfigChannel+0x1a>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e082      	b.n	8003092 <HAL_TIM_IC_ConfigChannel+0x120>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11b      	bne.n	8002fd2 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6819      	ldr	r1, [r3, #0]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f000 ff05 	bl	8003db8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 020c 	bic.w	r2, r2, #12
 8002fbc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6999      	ldr	r1, [r3, #24]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	619a      	str	r2, [r3, #24]
 8002fd0:	e05a      	b.n	8003088 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d11c      	bne.n	8003012 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f000 ff7d 	bl	8003ee6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ffa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6999      	ldr	r1, [r3, #24]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	021a      	lsls	r2, r3, #8
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	619a      	str	r2, [r3, #24]
 8003010:	e03a      	b.n	8003088 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d11b      	bne.n	8003050 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f000 ffca 	bl	8003fc0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 020c 	bic.w	r2, r2, #12
 800303a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69d9      	ldr	r1, [r3, #28]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	61da      	str	r2, [r3, #28]
 800304e:	e01b      	b.n	8003088 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f000 ffea 	bl	8004038 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003072:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69d9      	ldr	r1, [r3, #28]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	021a      	lsls	r2, r3, #8
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e0fd      	b.n	80032b2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b14      	cmp	r3, #20
 80030c2:	f200 80f0 	bhi.w	80032a6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80030c6:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	08003121 	.word	0x08003121
 80030d0:	080032a7 	.word	0x080032a7
 80030d4:	080032a7 	.word	0x080032a7
 80030d8:	080032a7 	.word	0x080032a7
 80030dc:	08003161 	.word	0x08003161
 80030e0:	080032a7 	.word	0x080032a7
 80030e4:	080032a7 	.word	0x080032a7
 80030e8:	080032a7 	.word	0x080032a7
 80030ec:	080031a3 	.word	0x080031a3
 80030f0:	080032a7 	.word	0x080032a7
 80030f4:	080032a7 	.word	0x080032a7
 80030f8:	080032a7 	.word	0x080032a7
 80030fc:	080031e3 	.word	0x080031e3
 8003100:	080032a7 	.word	0x080032a7
 8003104:	080032a7 	.word	0x080032a7
 8003108:	080032a7 	.word	0x080032a7
 800310c:	08003225 	.word	0x08003225
 8003110:	080032a7 	.word	0x080032a7
 8003114:	080032a7 	.word	0x080032a7
 8003118:	080032a7 	.word	0x080032a7
 800311c:	08003265 	.word	0x08003265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 faa0 	bl	800366c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0204 	bic.w	r2, r2, #4
 800314a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6999      	ldr	r1, [r3, #24]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	619a      	str	r2, [r3, #24]
      break;
 800315e:	e0a3      	b.n	80032a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fb10 	bl	800378c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	619a      	str	r2, [r3, #24]
      break;
 80031a0:	e082      	b.n	80032a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fb79 	bl	80038a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0208 	orr.w	r2, r2, #8
 80031bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0204 	bic.w	r2, r2, #4
 80031cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69d9      	ldr	r1, [r3, #28]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	61da      	str	r2, [r3, #28]
      break;
 80031e0:	e062      	b.n	80032a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fbe1 	bl	80039b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	61da      	str	r2, [r3, #28]
      break;
 8003222:	e041      	b.n	80032a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fc4a 	bl	8003ac4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0208 	orr.w	r2, r2, #8
 800323e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0204 	bic.w	r2, r2, #4
 800324e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003262:	e021      	b.n	80032a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fc8e 	bl	8003b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	021a      	lsls	r2, r3, #8
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80032a4:	e000      	b.n	80032a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80032a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop

080032bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIM_ConfigClockSource+0x18>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0c3      	b.n	800345c <HAL_TIM_ConfigClockSource+0x1a0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80032f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b70      	cmp	r3, #112	; 0x70
 800330e:	d038      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0xc6>
 8003310:	2b70      	cmp	r3, #112	; 0x70
 8003312:	d815      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x84>
 8003314:	2b30      	cmp	r3, #48	; 0x30
 8003316:	f000 808e 	beq.w	8003436 <HAL_TIM_ConfigClockSource+0x17a>
 800331a:	2b30      	cmp	r3, #48	; 0x30
 800331c:	d809      	bhi.n	8003332 <HAL_TIM_ConfigClockSource+0x76>
 800331e:	2b10      	cmp	r3, #16
 8003320:	f000 8089 	beq.w	8003436 <HAL_TIM_ConfigClockSource+0x17a>
 8003324:	2b20      	cmp	r3, #32
 8003326:	f000 8086 	beq.w	8003436 <HAL_TIM_ConfigClockSource+0x17a>
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8083 	beq.w	8003436 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003330:	e08b      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003332:	2b50      	cmp	r3, #80	; 0x50
 8003334:	d04f      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003336:	2b60      	cmp	r3, #96	; 0x60
 8003338:	d05d      	beq.n	80033f6 <HAL_TIM_ConfigClockSource+0x13a>
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	d06b      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 800333e:	e084      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003340:	4a48      	ldr	r2, [pc, #288]	; (8003464 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d077      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x17a>
 8003346:	4a47      	ldr	r2, [pc, #284]	; (8003464 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d809      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0xa4>
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003350:	d02e      	beq.n	80033b0 <HAL_TIM_ConfigClockSource+0xf4>
 8003352:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003356:	d06e      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x17a>
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d074      	beq.n	8003448 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 800335e:	e074      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003360:	4a41      	ldr	r2, [pc, #260]	; (8003468 <HAL_TIM_ConfigClockSource+0x1ac>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d067      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x17a>
 8003366:	4a40      	ldr	r2, [pc, #256]	; (8003468 <HAL_TIM_ConfigClockSource+0x1ac>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d803      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0xb8>
 800336c:	4a3f      	ldr	r2, [pc, #252]	; (800346c <HAL_TIM_ConfigClockSource+0x1b0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d061      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003372:	e06a      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003374:	4a3e      	ldr	r2, [pc, #248]	; (8003470 <HAL_TIM_ConfigClockSource+0x1b4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d05d      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x17a>
 800337a:	4a3e      	ldr	r2, [pc, #248]	; (8003474 <HAL_TIM_ConfigClockSource+0x1b8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d05a      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003380:	e063      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6899      	ldr	r1, [r3, #8]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f000 feab 	bl	80040ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]
      break;
 80033ae:	e04c      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6899      	ldr	r1, [r3, #8]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f000 fe94 	bl	80040ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033d2:	609a      	str	r2, [r3, #8]
      break;
 80033d4:	e039      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6859      	ldr	r1, [r3, #4]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f000 fd50 	bl	8003e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2150      	movs	r1, #80	; 0x50
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fe5f 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 80033f4:	e029      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	461a      	mov	r2, r3
 8003404:	f000 fdac 	bl	8003f60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2160      	movs	r1, #96	; 0x60
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fe4f 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003414:	e019      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	461a      	mov	r2, r3
 8003424:	f000 fd30 	bl	8003e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2140      	movs	r1, #64	; 0x40
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fe3f 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003434:	e009      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f000 fe36 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003446:	e000      	b.n	800344a <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8003448:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	00100020 	.word	0x00100020
 8003468:	00100040 	.word	0x00100040
 800346c:	00100030 	.word	0x00100030
 8003470:	00100060 	.word	0x00100060
 8003474:	00100070 	.word	0x00100070

08003478 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_TIM_SlaveConfigSynchro+0x18>
 800348c:	2302      	movs	r3, #2
 800348e:	e031      	b.n	80034f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fbd8 	bl	8003c58 <TIM_SlaveTimer_SetConfig>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e018      	b.n	80034f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034e0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3c      	ldr	r2, [pc, #240]	; (8003650 <TIM_Base_SetConfig+0x104>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00f      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d00b      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a39      	ldr	r2, [pc, #228]	; (8003654 <TIM_Base_SetConfig+0x108>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a38      	ldr	r2, [pc, #224]	; (8003658 <TIM_Base_SetConfig+0x10c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a37      	ldr	r2, [pc, #220]	; (800365c <TIM_Base_SetConfig+0x110>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d108      	bne.n	8003596 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <TIM_Base_SetConfig+0x104>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01b      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a4:	d017      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <TIM_Base_SetConfig+0x108>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <TIM_Base_SetConfig+0x10c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <TIM_Base_SetConfig+0x110>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <TIM_Base_SetConfig+0x114>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <TIM_Base_SetConfig+0x118>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <TIM_Base_SetConfig+0x11c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a10      	ldr	r2, [pc, #64]	; (8003650 <TIM_Base_SetConfig+0x104>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00f      	beq.n	8003634 <TIM_Base_SetConfig+0xe8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a11      	ldr	r2, [pc, #68]	; (800365c <TIM_Base_SetConfig+0x110>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_Base_SetConfig+0xe8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a10      	ldr	r2, [pc, #64]	; (8003660 <TIM_Base_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_Base_SetConfig+0xe8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <TIM_Base_SetConfig+0x118>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0xe8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <TIM_Base_SetConfig+0x11c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40013400 	.word	0x40013400
 8003660:	40014000 	.word	0x40014000
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800

0800366c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 0302 	bic.w	r3, r3, #2
 80036b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <TIM_OC1_SetConfig+0x10c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00f      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a2b      	ldr	r2, [pc, #172]	; (800377c <TIM_OC1_SetConfig+0x110>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00b      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a2a      	ldr	r2, [pc, #168]	; (8003780 <TIM_OC1_SetConfig+0x114>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d007      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a29      	ldr	r2, [pc, #164]	; (8003784 <TIM_OC1_SetConfig+0x118>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a28      	ldr	r2, [pc, #160]	; (8003788 <TIM_OC1_SetConfig+0x11c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10c      	bne.n	8003706 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0308 	bic.w	r3, r3, #8
 80036f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <TIM_OC1_SetConfig+0x10c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00f      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1a      	ldr	r2, [pc, #104]	; (800377c <TIM_OC1_SetConfig+0x110>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a19      	ldr	r2, [pc, #100]	; (8003780 <TIM_OC1_SetConfig+0x114>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a18      	ldr	r2, [pc, #96]	; (8003784 <TIM_OC1_SetConfig+0x118>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a17      	ldr	r2, [pc, #92]	; (8003788 <TIM_OC1_SetConfig+0x11c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d111      	bne.n	8003752 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800373c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f023 0210 	bic.w	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0320 	bic.w	r3, r3, #32
 80037da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a28      	ldr	r2, [pc, #160]	; (800388c <TIM_OC2_SetConfig+0x100>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_OC2_SetConfig+0x6c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a27      	ldr	r2, [pc, #156]	; (8003890 <TIM_OC2_SetConfig+0x104>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10d      	bne.n	8003814 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1d      	ldr	r2, [pc, #116]	; (800388c <TIM_OC2_SetConfig+0x100>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00f      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <TIM_OC2_SetConfig+0x104>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <TIM_OC2_SetConfig+0x108>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <TIM_OC2_SetConfig+0x10c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a19      	ldr	r2, [pc, #100]	; (800389c <TIM_OC2_SetConfig+0x110>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <TIM_OC3_SetConfig+0xfc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_OC3_SetConfig+0x6a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <TIM_OC3_SetConfig+0x100>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10d      	bne.n	8003926 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1c      	ldr	r2, [pc, #112]	; (800399c <TIM_OC3_SetConfig+0xfc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <TIM_OC3_SetConfig+0x100>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <TIM_OC3_SetConfig+0x104>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <TIM_OC3_SetConfig+0x108>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <TIM_OC3_SetConfig+0x10c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d113      	bne.n	8003976 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40013400 	.word	0x40013400
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800

080039b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	031b      	lsls	r3, r3, #12
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a28      	ldr	r2, [pc, #160]	; (8003ab0 <TIM_OC4_SetConfig+0x100>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_OC4_SetConfig+0x6c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a27      	ldr	r2, [pc, #156]	; (8003ab4 <TIM_OC4_SetConfig+0x104>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10d      	bne.n	8003a38 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <TIM_OC4_SetConfig+0x100>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00f      	beq.n	8003a60 <TIM_OC4_SetConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <TIM_OC4_SetConfig+0x104>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_OC4_SetConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <TIM_OC4_SetConfig+0x108>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_OC4_SetConfig+0xb0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a1a      	ldr	r2, [pc, #104]	; (8003abc <TIM_OC4_SetConfig+0x10c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC4_SetConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <TIM_OC4_SetConfig+0x110>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d113      	bne.n	8003a88 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <TIM_OC5_SetConfig+0xb4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <TIM_OC5_SetConfig+0xb8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <TIM_OC5_SetConfig+0xbc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <TIM_OC5_SetConfig+0xc0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <TIM_OC5_SetConfig+0xc4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d109      	bne.n	8003b52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40013400 	.word	0x40013400
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800

08003b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	051b      	lsls	r3, r3, #20
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <TIM_OC6_SetConfig+0xb8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00f      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <TIM_OC6_SetConfig+0xbc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <TIM_OC6_SetConfig+0xc0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <TIM_OC6_SetConfig+0xc4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <TIM_OC6_SetConfig+0xc8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d109      	bne.n	8003c1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	029b      	lsls	r3, r3, #10
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40013400 	.word	0x40013400
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800

08003c58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c86:	f023 0307 	bic.w	r3, r3, #7
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b60      	cmp	r3, #96	; 0x60
 8003ca4:	d06d      	beq.n	8003d82 <TIM_SlaveTimer_SetConfig+0x12a>
 8003ca6:	2b60      	cmp	r3, #96	; 0x60
 8003ca8:	d80f      	bhi.n	8003cca <TIM_SlaveTimer_SetConfig+0x72>
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d073      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d804      	bhi.n	8003cbc <TIM_SlaveTimer_SetConfig+0x64>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d06f      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d06d      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8003cba:	e06d      	b.n	8003d98 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d028      	beq.n	8003d12 <TIM_SlaveTimer_SetConfig+0xba>
 8003cc0:	2b50      	cmp	r3, #80	; 0x50
 8003cc2:	d054      	beq.n	8003d6e <TIM_SlaveTimer_SetConfig+0x116>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d066      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003cc8:	e066      	b.n	8003d98 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003cca:	4a36      	ldr	r2, [pc, #216]	; (8003da4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d062      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
 8003cd0:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d808      	bhi.n	8003ce8 <TIM_SlaveTimer_SetConfig+0x90>
 8003cd6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003cda:	d05c      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
 8003cdc:	4a32      	ldr	r2, [pc, #200]	; (8003da8 <TIM_SlaveTimer_SetConfig+0x150>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d059      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
 8003ce2:	2b70      	cmp	r3, #112	; 0x70
 8003ce4:	d00a      	beq.n	8003cfc <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8003ce6:	e057      	b.n	8003d98 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003ce8:	4a30      	ldr	r2, [pc, #192]	; (8003dac <TIM_SlaveTimer_SetConfig+0x154>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d053      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
 8003cee:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <TIM_SlaveTimer_SetConfig+0x158>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d050      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
 8003cf4:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <TIM_SlaveTimer_SetConfig+0x15c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d04d      	beq.n	8003d96 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003cfa:	e04d      	b.n	8003d98 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68d9      	ldr	r1, [r3, #12]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f000 f9ee 	bl	80040ec <TIM_ETR_SetConfig>
      break;
 8003d10:	e042      	b.n	8003d98 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d004      	beq.n	8003d24 <TIM_SlaveTimer_SetConfig+0xcc>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003d22:	d101      	bne.n	8003d28 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e038      	b.n	8003d9a <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	621a      	str	r2, [r3, #32]
      break;
 8003d6c:	e014      	b.n	8003d98 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 f884 	bl	8003e88 <TIM_TI1_ConfigInputStage>
      break;
 8003d80:	e00a      	b.n	8003d98 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6899      	ldr	r1, [r3, #8]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 f8e6 	bl	8003f60 <TIM_TI2_ConfigInputStage>
      break;
 8003d94:	e000      	b.n	8003d98 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8003d96:	bf00      	nop
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	00100030 	.word	0x00100030
 8003da8:	00100020 	.word	0x00100020
 8003dac:	00100060 	.word	0x00100060
 8003db0:	00100070 	.word	0x00100070
 8003db4:	00100040 	.word	0x00100040

08003db8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f023 0201 	bic.w	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a24      	ldr	r2, [pc, #144]	; (8003e74 <TIM_TI1_SetConfig+0xbc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <TIM_TI1_SetConfig+0x56>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d00f      	beq.n	8003e0e <TIM_TI1_SetConfig+0x56>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <TIM_TI1_SetConfig+0xc0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_TI1_SetConfig+0x56>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <TIM_TI1_SetConfig+0xc4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_TI1_SetConfig+0x56>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <TIM_TI1_SetConfig+0xc8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_TI1_SetConfig+0x56>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a1e      	ldr	r2, [pc, #120]	; (8003e84 <TIM_TI1_SetConfig+0xcc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <TIM_TI1_SetConfig+0x5a>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <TIM_TI1_SetConfig+0x5c>
 8003e12:	2300      	movs	r3, #0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e003      	b.n	8003e32 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f023 030a 	bic.w	r3, r3, #10
 8003e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 030a 	and.w	r3, r3, #10
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40012c00 	.word	0x40012c00
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40013400 	.word	0x40013400
 8003e84:	40014000 	.word	0x40014000

08003e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0201 	bic.w	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 030a 	bic.w	r3, r3, #10
 8003ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b087      	sub	sp, #28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f023 0210 	bic.w	r2, r3, #16
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	031b      	lsls	r3, r3, #12
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f023 0210 	bic.w	r2, r3, #16
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	031b      	lsls	r3, r3, #12
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	621a      	str	r2, [r3, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 0303 	bic.w	r3, r3, #3
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ffc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	b2db      	uxtb	r3, r3
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004010:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004064:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004076:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	031b      	lsls	r3, r3, #12
 800407c:	b29b      	uxth	r3, r3
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800408a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	031b      	lsls	r3, r3, #12
 8004090:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80040c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f043 0307 	orr.w	r3, r3, #7
 80040d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	609a      	str	r2, [r3, #8]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	021a      	lsls	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	431a      	orrs	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2201      	movs	r2, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b08a      	sub	sp, #40	; 0x28
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e0a0      	b.n	80042cc <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f898 	bl	80042d4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7ff f9c8 	bl	800354c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2203      	movs	r2, #3
 80041ca:	f7ff fdf5 	bl	8003db8 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 020c 	bic.w	r2, r2, #12
 80041dc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6999      	ldr	r1, [r3, #24]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041fe:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004222:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	f023 0307 	bic.w	r3, r3, #7
 8004236:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0204 	orr.w	r2, r2, #4
 8004246:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800424c:	2300      	movs	r3, #0
 800424e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004250:	2370      	movs	r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004258:	2300      	movs	r3, #0
 800425a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f107 020c 	add.w	r2, r7, #12
 800426e:	4611      	mov	r1, r2
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fa8b 	bl	800378c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004288:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004298:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3728      	adds	r7, #40	; 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <HAL_TIMEx_PWMN_Start+0x24>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e022      	b.n	8004352 <HAL_TIMEx_PWMN_Start+0x6a>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b04      	cmp	r3, #4
 8004310:	d109      	bne.n	8004326 <HAL_TIMEx_PWMN_Start+0x3e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e015      	b.n	8004352 <HAL_TIMEx_PWMN_Start+0x6a>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d109      	bne.n	8004340 <HAL_TIMEx_PWMN_Start+0x58>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e008      	b.n	8004352 <HAL_TIMEx_PWMN_Start+0x6a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e040      	b.n	80043dc <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <HAL_TIMEx_PWMN_Start+0x82>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	e013      	b.n	8004392 <HAL_TIMEx_PWMN_Start+0xaa>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d104      	bne.n	800437a <HAL_TIMEx_PWMN_Start+0x92>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004378:	e00b      	b.n	8004392 <HAL_TIMEx_PWMN_Start+0xaa>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d104      	bne.n	800438a <HAL_TIMEx_PWMN_Start+0xa2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004388:	e003      	b.n	8004392 <HAL_TIMEx_PWMN_Start+0xaa>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2204      	movs	r2, #4
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f982 	bl	80046a4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_TIMEx_PWMN_Start+0xfc>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d00b      	beq.n	80043da <HAL_TIMEx_PWMN_Start+0xf2>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c8:	d007      	beq.n	80043da <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	00010007 	.word	0x00010007

080043e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e065      	b.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2c      	ldr	r2, [pc, #176]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2b      	ldr	r2, [pc, #172]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d108      	bne.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800443a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800444c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004450:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d018      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d013      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00e      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a12      	ldr	r2, [pc, #72]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10c      	bne.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40013400 	.word	0x40013400
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800
 80044e8:	40014000 	.word	0x40014000

080044ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004504:	2302      	movs	r3, #2
 8004506:	e087      	b.n	8004618 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a27      	ldr	r2, [pc, #156]	; (8004624 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d004      	beq.n	8004596 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d106      	bne.n	80045a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d126      	bne.n	8004606 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	051b      	lsls	r3, r3, #20
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a0e      	ldr	r2, [pc, #56]	; (8004624 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d106      	bne.n	8004606 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40013400 	.word	0x40013400

0800462c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2204      	movs	r2, #4
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	401a      	ands	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1a      	ldr	r2, [r3, #32]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e042      	b.n	8004786 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fd14 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f9a9 	bl	8004a88 <UART_SetConfig>
 8004736:	4603      	mov	r3, r0
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e022      	b.n	8004786 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f001 fb57 	bl	8005dfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 fbde 	bl	8005f40 <UART_CheckIdleState>
 8004784:	4603      	mov	r3, r0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d118      	bne.n	80047f0 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d013      	beq.n	80047f0 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d009      	beq.n	80047f0 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 812e 	beq.w	8004a42 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
      }
      return;
 80047ee:	e128      	b.n	8004a42 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80d1 	beq.w	800499a <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4b96      	ldr	r3, [pc, #600]	; (8004a54 <HAL_UART_IRQHandler+0x2c4>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d105      	bne.n	800480e <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80c6 	beq.w	800499a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d010      	beq.n	800483a <HAL_UART_IRQHandler+0xaa>
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2201      	movs	r2, #1
 8004828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f043 0201 	orr.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d010      	beq.n	8004866 <HAL_UART_IRQHandler+0xd6>
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2202      	movs	r2, #2
 8004854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f043 0204 	orr.w	r2, r3, #4
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d010      	beq.n	8004892 <HAL_UART_IRQHandler+0x102>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2204      	movs	r2, #4
 8004880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	f043 0202 	orr.w	r2, r3, #2
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d015      	beq.n	80048c8 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4b6a      	ldr	r3, [pc, #424]	; (8004a54 <HAL_UART_IRQHandler+0x2c4>)
 80048aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2208      	movs	r2, #8
 80048b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f043 0208 	orr.w	r2, r3, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80b9 	beq.w	8004a46 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d011      	beq.n	8004902 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d004      	beq.n	8004922 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800491e:	2b00      	cmp	r3, #0
 8004920:	d031      	beq.n	8004986 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 fb9e 	bl	8006064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d123      	bne.n	800497e <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004944:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800494a:	2b00      	cmp	r3, #0
 800494c:	d013      	beq.n	8004976 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004952:	4a41      	ldr	r2, [pc, #260]	; (8004a58 <HAL_UART_IRQHandler+0x2c8>)
 8004954:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800495a:	4618      	mov	r0, r3
 800495c:	f7fc fde5 	bl	800152a <HAL_DMA_Abort_IT>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d017      	beq.n	8004996 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004970:	4610      	mov	r0, r2
 8004972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	e00f      	b.n	8004996 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f87a 	bl	8004a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e00b      	b.n	8004996 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f876 	bl	8004a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e007      	b.n	8004996 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f872 	bl	8004a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004994:	e057      	b.n	8004a46 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004996:	bf00      	nop
    return;
 8004998:	e055      	b.n	8004a46 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <HAL_UART_IRQHandler+0x230>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 fba6 	bl	800610a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049be:	e045      	b.n	8004a4c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d012      	beq.n	80049f0 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d031      	beq.n	8004a4a <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	4798      	blx	r3
    }
    return;
 80049ee:	e02c      	b.n	8004a4a <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_UART_IRQHandler+0x27c>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f001 fb66 	bl	80060d6 <UART_EndTransmit_IT>
    return;
 8004a0a:	e01f      	b.n	8004a4c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <HAL_UART_IRQHandler+0x298>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f001 fb86 	bl	8006132 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a26:	e011      	b.n	8004a4c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <HAL_UART_IRQHandler+0x2bc>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da09      	bge.n	8004a4c <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f001 fb70 	bl	800611e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a3e:	bf00      	nop
 8004a40:	e004      	b.n	8004a4c <HAL_UART_IRQHandler+0x2bc>
      return;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <HAL_UART_IRQHandler+0x2bc>
    return;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <HAL_UART_IRQHandler+0x2bc>
    return;
 8004a4a:	bf00      	nop
  }
}
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	10000001 	.word	0x10000001
 8004a58:	080060ab 	.word	0x080060ab

08004a5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	0000      	movs	r0, r0
	...

08004a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a8c:	b08a      	sub	sp, #40	; 0x28
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	4313      	orrs	r3, r2
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4ba4      	ldr	r3, [pc, #656]	; (8004d58 <UART_SetConfig+0x2d0>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a99      	ldr	r2, [pc, #612]	; (8004d5c <UART_SetConfig+0x2d4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b00:	4313      	orrs	r3, r2
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f023 010f 	bic.w	r1, r3, #15
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a8a      	ldr	r2, [pc, #552]	; (8004d60 <UART_SetConfig+0x2d8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d126      	bne.n	8004b8a <UART_SetConfig+0x102>
 8004b3c:	4b89      	ldr	r3, [pc, #548]	; (8004d64 <UART_SetConfig+0x2dc>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d81a      	bhi.n	8004b80 <UART_SetConfig+0xf8>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0xc8>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b71 	.word	0x08004b71
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e0d6      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e0d2      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004b70:	2304      	movs	r3, #4
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e0ce      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004b78:	2308      	movs	r3, #8
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e0ca      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004b80:	2310      	movs	r3, #16
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	bf00      	nop
 8004b88:	e0c5      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a76      	ldr	r2, [pc, #472]	; (8004d68 <UART_SetConfig+0x2e0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d138      	bne.n	8004c06 <UART_SetConfig+0x17e>
 8004b94:	4b73      	ldr	r3, [pc, #460]	; (8004d64 <UART_SetConfig+0x2dc>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d82c      	bhi.n	8004bfc <UART_SetConfig+0x174>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x120>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004bfd 	.word	0x08004bfd
 8004bb0:	08004bfd 	.word	0x08004bfd
 8004bb4:	08004bfd 	.word	0x08004bfd
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004bfd 	.word	0x08004bfd
 8004bc0:	08004bfd 	.word	0x08004bfd
 8004bc4:	08004bfd 	.word	0x08004bfd
 8004bc8:	08004be5 	.word	0x08004be5
 8004bcc:	08004bfd 	.word	0x08004bfd
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e098      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004be4:	2302      	movs	r3, #2
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e094      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e090      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e08c      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	bf00      	nop
 8004c04:	e087      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a58      	ldr	r2, [pc, #352]	; (8004d6c <UART_SetConfig+0x2e4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d125      	bne.n	8004c5c <UART_SetConfig+0x1d4>
 8004c10:	4b54      	ldr	r3, [pc, #336]	; (8004d64 <UART_SetConfig+0x2dc>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d011      	beq.n	8004c42 <UART_SetConfig+0x1ba>
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d802      	bhi.n	8004c28 <UART_SetConfig+0x1a0>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <UART_SetConfig+0x1aa>
 8004c26:	e014      	b.n	8004c52 <UART_SetConfig+0x1ca>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d006      	beq.n	8004c3a <UART_SetConfig+0x1b2>
 8004c2c:	2b30      	cmp	r3, #48	; 0x30
 8004c2e:	d00c      	beq.n	8004c4a <UART_SetConfig+0x1c2>
 8004c30:	e00f      	b.n	8004c52 <UART_SetConfig+0x1ca>
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c38:	e06d      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c40:	e069      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004c42:	2304      	movs	r3, #4
 8004c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c48:	e065      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c50:	e061      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004c52:	2310      	movs	r3, #16
 8004c54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c58:	bf00      	nop
 8004c5a:	e05c      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a43      	ldr	r2, [pc, #268]	; (8004d70 <UART_SetConfig+0x2e8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d125      	bne.n	8004cb2 <UART_SetConfig+0x22a>
 8004c66:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <UART_SetConfig+0x2dc>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d011      	beq.n	8004c98 <UART_SetConfig+0x210>
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d802      	bhi.n	8004c7e <UART_SetConfig+0x1f6>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <UART_SetConfig+0x200>
 8004c7c:	e014      	b.n	8004ca8 <UART_SetConfig+0x220>
 8004c7e:	2b80      	cmp	r3, #128	; 0x80
 8004c80:	d006      	beq.n	8004c90 <UART_SetConfig+0x208>
 8004c82:	2bc0      	cmp	r3, #192	; 0xc0
 8004c84:	d00c      	beq.n	8004ca0 <UART_SetConfig+0x218>
 8004c86:	e00f      	b.n	8004ca8 <UART_SetConfig+0x220>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e042      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004c90:	2302      	movs	r3, #2
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c96:	e03e      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9e:	e03a      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca6:	e036      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cae:	bf00      	nop
 8004cb0:	e031      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a29      	ldr	r2, [pc, #164]	; (8004d5c <UART_SetConfig+0x2d4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d129      	bne.n	8004d10 <UART_SetConfig+0x288>
 8004cbc:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <UART_SetConfig+0x2dc>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cca:	d014      	beq.n	8004cf6 <UART_SetConfig+0x26e>
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d802      	bhi.n	8004cd8 <UART_SetConfig+0x250>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <UART_SetConfig+0x25e>
 8004cd6:	e016      	b.n	8004d06 <UART_SetConfig+0x27e>
 8004cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cdc:	d007      	beq.n	8004cee <UART_SetConfig+0x266>
 8004cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ce2:	d00c      	beq.n	8004cfe <UART_SetConfig+0x276>
 8004ce4:	e00f      	b.n	8004d06 <UART_SetConfig+0x27e>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cec:	e013      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf4:	e00f      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfc:	e00b      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004cfe:	2308      	movs	r3, #8
 8004d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d04:	e007      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004d06:	2310      	movs	r3, #16
 8004d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0c:	bf00      	nop
 8004d0e:	e002      	b.n	8004d16 <UART_SetConfig+0x28e>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a10      	ldr	r2, [pc, #64]	; (8004d5c <UART_SetConfig+0x2d4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	f040 842e 	bne.w	800557e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	f200 8169 	bhi.w	8004ffe <UART_SetConfig+0x576>
 8004d2c:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <UART_SetConfig+0x2ac>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d75 	.word	0x08004d75
 8004d38:	08004fff 	.word	0x08004fff
 8004d3c:	08004e17 	.word	0x08004e17
 8004d40:	08004fff 	.word	0x08004fff
 8004d44:	08004eaf 	.word	0x08004eaf
 8004d48:	08004fff 	.word	0x08004fff
 8004d4c:	08004fff 	.word	0x08004fff
 8004d50:	08004fff 	.word	0x08004fff
 8004d54:	08004f51 	.word	0x08004f51
 8004d58:	cfff69f3 	.word	0xcfff69f3
 8004d5c:	40008000 	.word	0x40008000
 8004d60:	40013800 	.word	0x40013800
 8004d64:	40021000 	.word	0x40021000
 8004d68:	40004400 	.word	0x40004400
 8004d6c:	40004800 	.word	0x40004800
 8004d70:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004d74:	f7fd fb40 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d044      	beq.n	8004e0c <UART_SetConfig+0x384>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d03e      	beq.n	8004e08 <UART_SetConfig+0x380>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d038      	beq.n	8004e04 <UART_SetConfig+0x37c>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d032      	beq.n	8004e00 <UART_SetConfig+0x378>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d02c      	beq.n	8004dfc <UART_SetConfig+0x374>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d026      	beq.n	8004df8 <UART_SetConfig+0x370>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d020      	beq.n	8004df4 <UART_SetConfig+0x36c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b07      	cmp	r3, #7
 8004db8:	d01a      	beq.n	8004df0 <UART_SetConfig+0x368>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d014      	beq.n	8004dec <UART_SetConfig+0x364>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b09      	cmp	r3, #9
 8004dc8:	d00e      	beq.n	8004de8 <UART_SetConfig+0x360>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b0a      	cmp	r3, #10
 8004dd0:	d008      	beq.n	8004de4 <UART_SetConfig+0x35c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b0b      	cmp	r3, #11
 8004dd8:	d102      	bne.n	8004de0 <UART_SetConfig+0x358>
 8004dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dde:	e016      	b.n	8004e0e <UART_SetConfig+0x386>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e014      	b.n	8004e0e <UART_SetConfig+0x386>
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	e012      	b.n	8004e0e <UART_SetConfig+0x386>
 8004de8:	2340      	movs	r3, #64	; 0x40
 8004dea:	e010      	b.n	8004e0e <UART_SetConfig+0x386>
 8004dec:	2320      	movs	r3, #32
 8004dee:	e00e      	b.n	8004e0e <UART_SetConfig+0x386>
 8004df0:	2310      	movs	r3, #16
 8004df2:	e00c      	b.n	8004e0e <UART_SetConfig+0x386>
 8004df4:	230c      	movs	r3, #12
 8004df6:	e00a      	b.n	8004e0e <UART_SetConfig+0x386>
 8004df8:	230a      	movs	r3, #10
 8004dfa:	e008      	b.n	8004e0e <UART_SetConfig+0x386>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	e006      	b.n	8004e0e <UART_SetConfig+0x386>
 8004e00:	2306      	movs	r3, #6
 8004e02:	e004      	b.n	8004e0e <UART_SetConfig+0x386>
 8004e04:	2304      	movs	r3, #4
 8004e06:	e002      	b.n	8004e0e <UART_SetConfig+0x386>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e000      	b.n	8004e0e <UART_SetConfig+0x386>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	617b      	str	r3, [r7, #20]
        break;
 8004e14:	e0f6      	b.n	8005004 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d044      	beq.n	8004ea8 <UART_SetConfig+0x420>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d03e      	beq.n	8004ea4 <UART_SetConfig+0x41c>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d038      	beq.n	8004ea0 <UART_SetConfig+0x418>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d032      	beq.n	8004e9c <UART_SetConfig+0x414>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d02c      	beq.n	8004e98 <UART_SetConfig+0x410>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b05      	cmp	r3, #5
 8004e44:	d026      	beq.n	8004e94 <UART_SetConfig+0x40c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d020      	beq.n	8004e90 <UART_SetConfig+0x408>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b07      	cmp	r3, #7
 8004e54:	d01a      	beq.n	8004e8c <UART_SetConfig+0x404>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d014      	beq.n	8004e88 <UART_SetConfig+0x400>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b09      	cmp	r3, #9
 8004e64:	d00e      	beq.n	8004e84 <UART_SetConfig+0x3fc>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b0a      	cmp	r3, #10
 8004e6c:	d008      	beq.n	8004e80 <UART_SetConfig+0x3f8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b0b      	cmp	r3, #11
 8004e74:	d102      	bne.n	8004e7c <UART_SetConfig+0x3f4>
 8004e76:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004e7a:	e016      	b.n	8004eaa <UART_SetConfig+0x422>
 8004e7c:	4ba1      	ldr	r3, [pc, #644]	; (8005104 <UART_SetConfig+0x67c>)
 8004e7e:	e014      	b.n	8004eaa <UART_SetConfig+0x422>
 8004e80:	4ba1      	ldr	r3, [pc, #644]	; (8005108 <UART_SetConfig+0x680>)
 8004e82:	e012      	b.n	8004eaa <UART_SetConfig+0x422>
 8004e84:	4ba1      	ldr	r3, [pc, #644]	; (800510c <UART_SetConfig+0x684>)
 8004e86:	e010      	b.n	8004eaa <UART_SetConfig+0x422>
 8004e88:	4ba1      	ldr	r3, [pc, #644]	; (8005110 <UART_SetConfig+0x688>)
 8004e8a:	e00e      	b.n	8004eaa <UART_SetConfig+0x422>
 8004e8c:	4ba1      	ldr	r3, [pc, #644]	; (8005114 <UART_SetConfig+0x68c>)
 8004e8e:	e00c      	b.n	8004eaa <UART_SetConfig+0x422>
 8004e90:	4ba1      	ldr	r3, [pc, #644]	; (8005118 <UART_SetConfig+0x690>)
 8004e92:	e00a      	b.n	8004eaa <UART_SetConfig+0x422>
 8004e94:	4ba1      	ldr	r3, [pc, #644]	; (800511c <UART_SetConfig+0x694>)
 8004e96:	e008      	b.n	8004eaa <UART_SetConfig+0x422>
 8004e98:	4ba1      	ldr	r3, [pc, #644]	; (8005120 <UART_SetConfig+0x698>)
 8004e9a:	e006      	b.n	8004eaa <UART_SetConfig+0x422>
 8004e9c:	4ba1      	ldr	r3, [pc, #644]	; (8005124 <UART_SetConfig+0x69c>)
 8004e9e:	e004      	b.n	8004eaa <UART_SetConfig+0x422>
 8004ea0:	4ba1      	ldr	r3, [pc, #644]	; (8005128 <UART_SetConfig+0x6a0>)
 8004ea2:	e002      	b.n	8004eaa <UART_SetConfig+0x422>
 8004ea4:	4ba1      	ldr	r3, [pc, #644]	; (800512c <UART_SetConfig+0x6a4>)
 8004ea6:	e000      	b.n	8004eaa <UART_SetConfig+0x422>
 8004ea8:	4b96      	ldr	r3, [pc, #600]	; (8005104 <UART_SetConfig+0x67c>)
 8004eaa:	617b      	str	r3, [r7, #20]
        break;
 8004eac:	e0aa      	b.n	8005004 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004eae:	f7fd fa35 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d044      	beq.n	8004f46 <UART_SetConfig+0x4be>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d03e      	beq.n	8004f42 <UART_SetConfig+0x4ba>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d038      	beq.n	8004f3e <UART_SetConfig+0x4b6>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d032      	beq.n	8004f3a <UART_SetConfig+0x4b2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d02c      	beq.n	8004f36 <UART_SetConfig+0x4ae>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2b05      	cmp	r3, #5
 8004ee2:	d026      	beq.n	8004f32 <UART_SetConfig+0x4aa>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d020      	beq.n	8004f2e <UART_SetConfig+0x4a6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b07      	cmp	r3, #7
 8004ef2:	d01a      	beq.n	8004f2a <UART_SetConfig+0x4a2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d014      	beq.n	8004f26 <UART_SetConfig+0x49e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b09      	cmp	r3, #9
 8004f02:	d00e      	beq.n	8004f22 <UART_SetConfig+0x49a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b0a      	cmp	r3, #10
 8004f0a:	d008      	beq.n	8004f1e <UART_SetConfig+0x496>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b0b      	cmp	r3, #11
 8004f12:	d102      	bne.n	8004f1a <UART_SetConfig+0x492>
 8004f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f18:	e016      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e014      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	e012      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	e010      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f26:	2320      	movs	r3, #32
 8004f28:	e00e      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f2a:	2310      	movs	r3, #16
 8004f2c:	e00c      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	e00a      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f32:	230a      	movs	r3, #10
 8004f34:	e008      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f36:	2308      	movs	r3, #8
 8004f38:	e006      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f3a:	2306      	movs	r3, #6
 8004f3c:	e004      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	e002      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e000      	b.n	8004f48 <UART_SetConfig+0x4c0>
 8004f46:	2301      	movs	r3, #1
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
        break;
 8004f4e:	e059      	b.n	8005004 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d04e      	beq.n	8004ff6 <UART_SetConfig+0x56e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d047      	beq.n	8004ff0 <UART_SetConfig+0x568>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d040      	beq.n	8004fea <UART_SetConfig+0x562>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d039      	beq.n	8004fe4 <UART_SetConfig+0x55c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d032      	beq.n	8004fde <UART_SetConfig+0x556>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	2b05      	cmp	r3, #5
 8004f7e:	d02b      	beq.n	8004fd8 <UART_SetConfig+0x550>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b06      	cmp	r3, #6
 8004f86:	d024      	beq.n	8004fd2 <UART_SetConfig+0x54a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	2b07      	cmp	r3, #7
 8004f8e:	d01d      	beq.n	8004fcc <UART_SetConfig+0x544>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d016      	beq.n	8004fc6 <UART_SetConfig+0x53e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	2b09      	cmp	r3, #9
 8004f9e:	d00f      	beq.n	8004fc0 <UART_SetConfig+0x538>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b0a      	cmp	r3, #10
 8004fa6:	d008      	beq.n	8004fba <UART_SetConfig+0x532>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	2b0b      	cmp	r3, #11
 8004fae:	d101      	bne.n	8004fb4 <UART_SetConfig+0x52c>
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	e022      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb8:	e01f      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fbe:	e01c      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc4:	e019      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fca:	e016      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fd0:	e013      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fd2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004fd6:	e010      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fd8:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004fdc:	e00d      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fe2:	e00a      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fe4:	f241 5355 	movw	r3, #5461	; 0x1555
 8004fe8:	e007      	b.n	8004ffa <UART_SetConfig+0x572>
 8004fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fee:	e004      	b.n	8004ffa <UART_SetConfig+0x572>
 8004ff0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ff4:	e001      	b.n	8004ffa <UART_SetConfig+0x572>
 8004ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffa:	617b      	str	r3, [r7, #20]
        break;
 8004ffc:	e002      	b.n	8005004 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	76fb      	strb	r3, [r7, #27]
        break;
 8005002:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 86cd 	beq.w	8005da6 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	4413      	add	r3, r2
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	429a      	cmp	r2, r3
 800501a:	d305      	bcc.n	8005028 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	429a      	cmp	r2, r3
 8005026:	d903      	bls.n	8005030 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	76fb      	strb	r3, [r7, #27]
 800502c:	f000 bebb 	b.w	8005da6 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8005030:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005034:	2b08      	cmp	r3, #8
 8005036:	f200 828d 	bhi.w	8005554 <UART_SetConfig+0xacc>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0x5b8>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005065 	.word	0x08005065
 8005044:	08005555 	.word	0x08005555
 8005048:	080051cf 	.word	0x080051cf
 800504c:	08005555 	.word	0x08005555
 8005050:	080052c5 	.word	0x080052c5
 8005054:	08005555 	.word	0x08005555
 8005058:	08005555 	.word	0x08005555
 800505c:	08005555 	.word	0x08005555
 8005060:	08005403 	.word	0x08005403
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005064:	f7fd f9c8 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8005068:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4618      	mov	r0, r3
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d07d      	beq.n	8005176 <UART_SetConfig+0x6ee>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b01      	cmp	r3, #1
 8005080:	d074      	beq.n	800516c <UART_SetConfig+0x6e4>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b02      	cmp	r3, #2
 8005088:	d06b      	beq.n	8005162 <UART_SetConfig+0x6da>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b03      	cmp	r3, #3
 8005090:	d062      	beq.n	8005158 <UART_SetConfig+0x6d0>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2b04      	cmp	r3, #4
 8005098:	d059      	beq.n	800514e <UART_SetConfig+0x6c6>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b05      	cmp	r3, #5
 80050a0:	d050      	beq.n	8005144 <UART_SetConfig+0x6bc>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d047      	beq.n	800513a <UART_SetConfig+0x6b2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	2b07      	cmp	r3, #7
 80050b0:	d03e      	beq.n	8005130 <UART_SetConfig+0x6a8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d01f      	beq.n	80050fa <UART_SetConfig+0x672>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b09      	cmp	r3, #9
 80050c0:	d016      	beq.n	80050f0 <UART_SetConfig+0x668>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b0a      	cmp	r3, #10
 80050c8:	d00d      	beq.n	80050e6 <UART_SetConfig+0x65e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b0b      	cmp	r3, #11
 80050d0:	d104      	bne.n	80050dc <UART_SetConfig+0x654>
 80050d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	e050      	b.n	800517e <UART_SetConfig+0x6f6>
 80050dc:	f04f 0301 	mov.w	r3, #1
 80050e0:	f04f 0400 	mov.w	r4, #0
 80050e4:	e04b      	b.n	800517e <UART_SetConfig+0x6f6>
 80050e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80050ea:	f04f 0400 	mov.w	r4, #0
 80050ee:	e046      	b.n	800517e <UART_SetConfig+0x6f6>
 80050f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80050f4:	f04f 0400 	mov.w	r4, #0
 80050f8:	e041      	b.n	800517e <UART_SetConfig+0x6f6>
 80050fa:	f04f 0320 	mov.w	r3, #32
 80050fe:	f04f 0400 	mov.w	r4, #0
 8005102:	e03c      	b.n	800517e <UART_SetConfig+0x6f6>
 8005104:	00f42400 	.word	0x00f42400
 8005108:	0001e848 	.word	0x0001e848
 800510c:	0003d090 	.word	0x0003d090
 8005110:	0007a120 	.word	0x0007a120
 8005114:	000f4240 	.word	0x000f4240
 8005118:	00145855 	.word	0x00145855
 800511c:	00186a00 	.word	0x00186a00
 8005120:	001e8480 	.word	0x001e8480
 8005124:	0028b0aa 	.word	0x0028b0aa
 8005128:	003d0900 	.word	0x003d0900
 800512c:	007a1200 	.word	0x007a1200
 8005130:	f04f 0310 	mov.w	r3, #16
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	e021      	b.n	800517e <UART_SetConfig+0x6f6>
 800513a:	f04f 030c 	mov.w	r3, #12
 800513e:	f04f 0400 	mov.w	r4, #0
 8005142:	e01c      	b.n	800517e <UART_SetConfig+0x6f6>
 8005144:	f04f 030a 	mov.w	r3, #10
 8005148:	f04f 0400 	mov.w	r4, #0
 800514c:	e017      	b.n	800517e <UART_SetConfig+0x6f6>
 800514e:	f04f 0308 	mov.w	r3, #8
 8005152:	f04f 0400 	mov.w	r4, #0
 8005156:	e012      	b.n	800517e <UART_SetConfig+0x6f6>
 8005158:	f04f 0306 	mov.w	r3, #6
 800515c:	f04f 0400 	mov.w	r4, #0
 8005160:	e00d      	b.n	800517e <UART_SetConfig+0x6f6>
 8005162:	f04f 0304 	mov.w	r3, #4
 8005166:	f04f 0400 	mov.w	r4, #0
 800516a:	e008      	b.n	800517e <UART_SetConfig+0x6f6>
 800516c:	f04f 0302 	mov.w	r3, #2
 8005170:	f04f 0400 	mov.w	r4, #0
 8005174:	e003      	b.n	800517e <UART_SetConfig+0x6f6>
 8005176:	f04f 0301 	mov.w	r3, #1
 800517a:	f04f 0400 	mov.w	r4, #0
 800517e:	461a      	mov	r2, r3
 8005180:	4623      	mov	r3, r4
 8005182:	f7fb f849 	bl	8000218 <__aeabi_uldivmod>
 8005186:	4603      	mov	r3, r0
 8005188:	460c      	mov	r4, r1
 800518a:	4619      	mov	r1, r3
 800518c:	4622      	mov	r2, r4
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	f04f 0400 	mov.w	r4, #0
 8005196:	0214      	lsls	r4, r2, #8
 8005198:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800519c:	020b      	lsls	r3, r1, #8
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6852      	ldr	r2, [r2, #4]
 80051a2:	0852      	lsrs	r2, r2, #1
 80051a4:	4611      	mov	r1, r2
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	eb13 0b01 	adds.w	fp, r3, r1
 80051ae:	eb44 0c02 	adc.w	ip, r4, r2
 80051b2:	4658      	mov	r0, fp
 80051b4:	4661      	mov	r1, ip
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f04f 0400 	mov.w	r4, #0
 80051be:	461a      	mov	r2, r3
 80051c0:	4623      	mov	r3, r4
 80051c2:	f7fb f829 	bl	8000218 <__aeabi_uldivmod>
 80051c6:	4603      	mov	r3, r0
 80051c8:	460c      	mov	r4, r1
 80051ca:	61fb      	str	r3, [r7, #28]
            break;
 80051cc:	e1c5      	b.n	800555a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d05b      	beq.n	800528e <UART_SetConfig+0x806>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d053      	beq.n	8005286 <UART_SetConfig+0x7fe>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d04b      	beq.n	800527e <UART_SetConfig+0x7f6>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d043      	beq.n	8005276 <UART_SetConfig+0x7ee>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d03b      	beq.n	800526e <UART_SetConfig+0x7e6>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	d033      	beq.n	8005266 <UART_SetConfig+0x7de>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b06      	cmp	r3, #6
 8005204:	d02b      	beq.n	800525e <UART_SetConfig+0x7d6>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b07      	cmp	r3, #7
 800520c:	d023      	beq.n	8005256 <UART_SetConfig+0x7ce>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2b08      	cmp	r3, #8
 8005214:	d01b      	beq.n	800524e <UART_SetConfig+0x7c6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	2b09      	cmp	r3, #9
 800521c:	d013      	beq.n	8005246 <UART_SetConfig+0x7be>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	2b0a      	cmp	r3, #10
 8005224:	d00b      	beq.n	800523e <UART_SetConfig+0x7b6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b0b      	cmp	r3, #11
 800522c:	d103      	bne.n	8005236 <UART_SetConfig+0x7ae>
 800522e:	4bae      	ldr	r3, [pc, #696]	; (80054e8 <UART_SetConfig+0xa60>)
 8005230:	f04f 0400 	mov.w	r4, #0
 8005234:	e02e      	b.n	8005294 <UART_SetConfig+0x80c>
 8005236:	4bad      	ldr	r3, [pc, #692]	; (80054ec <UART_SetConfig+0xa64>)
 8005238:	f04f 0400 	mov.w	r4, #0
 800523c:	e02a      	b.n	8005294 <UART_SetConfig+0x80c>
 800523e:	4bac      	ldr	r3, [pc, #688]	; (80054f0 <UART_SetConfig+0xa68>)
 8005240:	f04f 0400 	mov.w	r4, #0
 8005244:	e026      	b.n	8005294 <UART_SetConfig+0x80c>
 8005246:	4bab      	ldr	r3, [pc, #684]	; (80054f4 <UART_SetConfig+0xa6c>)
 8005248:	f04f 0400 	mov.w	r4, #0
 800524c:	e022      	b.n	8005294 <UART_SetConfig+0x80c>
 800524e:	4baa      	ldr	r3, [pc, #680]	; (80054f8 <UART_SetConfig+0xa70>)
 8005250:	f04f 0400 	mov.w	r4, #0
 8005254:	e01e      	b.n	8005294 <UART_SetConfig+0x80c>
 8005256:	4ba9      	ldr	r3, [pc, #676]	; (80054fc <UART_SetConfig+0xa74>)
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	e01a      	b.n	8005294 <UART_SetConfig+0x80c>
 800525e:	a49e      	add	r4, pc, #632	; (adr r4, 80054d8 <UART_SetConfig+0xa50>)
 8005260:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005264:	e016      	b.n	8005294 <UART_SetConfig+0x80c>
 8005266:	4ba6      	ldr	r3, [pc, #664]	; (8005500 <UART_SetConfig+0xa78>)
 8005268:	f04f 0400 	mov.w	r4, #0
 800526c:	e012      	b.n	8005294 <UART_SetConfig+0x80c>
 800526e:	4ba5      	ldr	r3, [pc, #660]	; (8005504 <UART_SetConfig+0xa7c>)
 8005270:	f04f 0400 	mov.w	r4, #0
 8005274:	e00e      	b.n	8005294 <UART_SetConfig+0x80c>
 8005276:	a49a      	add	r4, pc, #616	; (adr r4, 80054e0 <UART_SetConfig+0xa58>)
 8005278:	e9d4 3400 	ldrd	r3, r4, [r4]
 800527c:	e00a      	b.n	8005294 <UART_SetConfig+0x80c>
 800527e:	4ba2      	ldr	r3, [pc, #648]	; (8005508 <UART_SetConfig+0xa80>)
 8005280:	f04f 0400 	mov.w	r4, #0
 8005284:	e006      	b.n	8005294 <UART_SetConfig+0x80c>
 8005286:	4ba1      	ldr	r3, [pc, #644]	; (800550c <UART_SetConfig+0xa84>)
 8005288:	f04f 0400 	mov.w	r4, #0
 800528c:	e002      	b.n	8005294 <UART_SetConfig+0x80c>
 800528e:	4b97      	ldr	r3, [pc, #604]	; (80054ec <UART_SetConfig+0xa64>)
 8005290:	f04f 0400 	mov.w	r4, #0
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6852      	ldr	r2, [r2, #4]
 8005298:	0852      	lsrs	r2, r2, #1
 800529a:	4611      	mov	r1, r2
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	eb13 0b01 	adds.w	fp, r3, r1
 80052a4:	eb44 0c02 	adc.w	ip, r4, r2
 80052a8:	4658      	mov	r0, fp
 80052aa:	4661      	mov	r1, ip
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f04f 0400 	mov.w	r4, #0
 80052b4:	461a      	mov	r2, r3
 80052b6:	4623      	mov	r3, r4
 80052b8:	f7fa ffae 	bl	8000218 <__aeabi_uldivmod>
 80052bc:	4603      	mov	r3, r0
 80052be:	460c      	mov	r4, r1
 80052c0:	61fb      	str	r3, [r7, #28]
            break;
 80052c2:	e14a      	b.n	800555a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80052c4:	f7fd f82a 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80052c8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d067      	beq.n	80053aa <UART_SetConfig+0x922>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d05e      	beq.n	80053a0 <UART_SetConfig+0x918>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d055      	beq.n	8005396 <UART_SetConfig+0x90e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d04c      	beq.n	800538c <UART_SetConfig+0x904>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d043      	beq.n	8005382 <UART_SetConfig+0x8fa>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	2b05      	cmp	r3, #5
 8005300:	d03a      	beq.n	8005378 <UART_SetConfig+0x8f0>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	2b06      	cmp	r3, #6
 8005308:	d031      	beq.n	800536e <UART_SetConfig+0x8e6>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	2b07      	cmp	r3, #7
 8005310:	d028      	beq.n	8005364 <UART_SetConfig+0x8dc>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	2b08      	cmp	r3, #8
 8005318:	d01f      	beq.n	800535a <UART_SetConfig+0x8d2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	2b09      	cmp	r3, #9
 8005320:	d016      	beq.n	8005350 <UART_SetConfig+0x8c8>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b0a      	cmp	r3, #10
 8005328:	d00d      	beq.n	8005346 <UART_SetConfig+0x8be>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	2b0b      	cmp	r3, #11
 8005330:	d104      	bne.n	800533c <UART_SetConfig+0x8b4>
 8005332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005336:	f04f 0400 	mov.w	r4, #0
 800533a:	e03a      	b.n	80053b2 <UART_SetConfig+0x92a>
 800533c:	f04f 0301 	mov.w	r3, #1
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	e035      	b.n	80053b2 <UART_SetConfig+0x92a>
 8005346:	f04f 0380 	mov.w	r3, #128	; 0x80
 800534a:	f04f 0400 	mov.w	r4, #0
 800534e:	e030      	b.n	80053b2 <UART_SetConfig+0x92a>
 8005350:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005354:	f04f 0400 	mov.w	r4, #0
 8005358:	e02b      	b.n	80053b2 <UART_SetConfig+0x92a>
 800535a:	f04f 0320 	mov.w	r3, #32
 800535e:	f04f 0400 	mov.w	r4, #0
 8005362:	e026      	b.n	80053b2 <UART_SetConfig+0x92a>
 8005364:	f04f 0310 	mov.w	r3, #16
 8005368:	f04f 0400 	mov.w	r4, #0
 800536c:	e021      	b.n	80053b2 <UART_SetConfig+0x92a>
 800536e:	f04f 030c 	mov.w	r3, #12
 8005372:	f04f 0400 	mov.w	r4, #0
 8005376:	e01c      	b.n	80053b2 <UART_SetConfig+0x92a>
 8005378:	f04f 030a 	mov.w	r3, #10
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	e017      	b.n	80053b2 <UART_SetConfig+0x92a>
 8005382:	f04f 0308 	mov.w	r3, #8
 8005386:	f04f 0400 	mov.w	r4, #0
 800538a:	e012      	b.n	80053b2 <UART_SetConfig+0x92a>
 800538c:	f04f 0306 	mov.w	r3, #6
 8005390:	f04f 0400 	mov.w	r4, #0
 8005394:	e00d      	b.n	80053b2 <UART_SetConfig+0x92a>
 8005396:	f04f 0304 	mov.w	r3, #4
 800539a:	f04f 0400 	mov.w	r4, #0
 800539e:	e008      	b.n	80053b2 <UART_SetConfig+0x92a>
 80053a0:	f04f 0302 	mov.w	r3, #2
 80053a4:	f04f 0400 	mov.w	r4, #0
 80053a8:	e003      	b.n	80053b2 <UART_SetConfig+0x92a>
 80053aa:	f04f 0301 	mov.w	r3, #1
 80053ae:	f04f 0400 	mov.w	r4, #0
 80053b2:	461a      	mov	r2, r3
 80053b4:	4623      	mov	r3, r4
 80053b6:	f7fa ff2f 	bl	8000218 <__aeabi_uldivmod>
 80053ba:	4603      	mov	r3, r0
 80053bc:	460c      	mov	r4, r1
 80053be:	4619      	mov	r1, r3
 80053c0:	4622      	mov	r2, r4
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	f04f 0400 	mov.w	r4, #0
 80053ca:	0214      	lsls	r4, r2, #8
 80053cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80053d0:	020b      	lsls	r3, r1, #8
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6852      	ldr	r2, [r2, #4]
 80053d6:	0852      	lsrs	r2, r2, #1
 80053d8:	4611      	mov	r1, r2
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	eb13 0b01 	adds.w	fp, r3, r1
 80053e2:	eb44 0c02 	adc.w	ip, r4, r2
 80053e6:	4658      	mov	r0, fp
 80053e8:	4661      	mov	r1, ip
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f04f 0400 	mov.w	r4, #0
 80053f2:	461a      	mov	r2, r3
 80053f4:	4623      	mov	r3, r4
 80053f6:	f7fa ff0f 	bl	8000218 <__aeabi_uldivmod>
 80053fa:	4603      	mov	r3, r0
 80053fc:	460c      	mov	r4, r1
 80053fe:	61fb      	str	r3, [r7, #28]
            break;
 8005400:	e0ab      	b.n	800555a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8088 	beq.w	800551c <UART_SetConfig+0xa94>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b01      	cmp	r3, #1
 8005412:	d05b      	beq.n	80054cc <UART_SetConfig+0xa44>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b02      	cmp	r3, #2
 800541a:	d052      	beq.n	80054c2 <UART_SetConfig+0xa3a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	2b03      	cmp	r3, #3
 8005422:	d04a      	beq.n	80054ba <UART_SetConfig+0xa32>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	2b04      	cmp	r3, #4
 800542a:	d041      	beq.n	80054b0 <UART_SetConfig+0xa28>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2b05      	cmp	r3, #5
 8005432:	d039      	beq.n	80054a8 <UART_SetConfig+0xa20>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	2b06      	cmp	r3, #6
 800543a:	d031      	beq.n	80054a0 <UART_SetConfig+0xa18>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	2b07      	cmp	r3, #7
 8005442:	d028      	beq.n	8005496 <UART_SetConfig+0xa0e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	2b08      	cmp	r3, #8
 800544a:	d01f      	beq.n	800548c <UART_SetConfig+0xa04>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2b09      	cmp	r3, #9
 8005452:	d016      	beq.n	8005482 <UART_SetConfig+0x9fa>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b0a      	cmp	r3, #10
 800545a:	d00d      	beq.n	8005478 <UART_SetConfig+0x9f0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	2b0b      	cmp	r3, #11
 8005462:	d104      	bne.n	800546e <UART_SetConfig+0x9e6>
 8005464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005468:	f04f 0400 	mov.w	r4, #0
 800546c:	e05a      	b.n	8005524 <UART_SetConfig+0xa9c>
 800546e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	e055      	b.n	8005524 <UART_SetConfig+0xa9c>
 8005478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800547c:	f04f 0400 	mov.w	r4, #0
 8005480:	e050      	b.n	8005524 <UART_SetConfig+0xa9c>
 8005482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005486:	f04f 0400 	mov.w	r4, #0
 800548a:	e04b      	b.n	8005524 <UART_SetConfig+0xa9c>
 800548c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005490:	f04f 0400 	mov.w	r4, #0
 8005494:	e046      	b.n	8005524 <UART_SetConfig+0xa9c>
 8005496:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800549a:	f04f 0400 	mov.w	r4, #0
 800549e:	e041      	b.n	8005524 <UART_SetConfig+0xa9c>
 80054a0:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <UART_SetConfig+0xa88>)
 80054a2:	f04f 0400 	mov.w	r4, #0
 80054a6:	e03d      	b.n	8005524 <UART_SetConfig+0xa9c>
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <UART_SetConfig+0xa8c>)
 80054aa:	f04f 0400 	mov.w	r4, #0
 80054ae:	e039      	b.n	8005524 <UART_SetConfig+0xa9c>
 80054b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054b4:	f04f 0400 	mov.w	r4, #0
 80054b8:	e034      	b.n	8005524 <UART_SetConfig+0xa9c>
 80054ba:	4b17      	ldr	r3, [pc, #92]	; (8005518 <UART_SetConfig+0xa90>)
 80054bc:	f04f 0400 	mov.w	r4, #0
 80054c0:	e030      	b.n	8005524 <UART_SetConfig+0xa9c>
 80054c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054c6:	f04f 0400 	mov.w	r4, #0
 80054ca:	e02b      	b.n	8005524 <UART_SetConfig+0xa9c>
 80054cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054d0:	f04f 0400 	mov.w	r4, #0
 80054d4:	e026      	b.n	8005524 <UART_SetConfig+0xa9c>
 80054d6:	bf00      	nop
 80054d8:	14585500 	.word	0x14585500
 80054dc:	00000000 	.word	0x00000000
 80054e0:	28b0aa00 	.word	0x28b0aa00
 80054e4:	00000000 	.word	0x00000000
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	f4240000 	.word	0xf4240000
 80054f0:	01e84800 	.word	0x01e84800
 80054f4:	03d09000 	.word	0x03d09000
 80054f8:	07a12000 	.word	0x07a12000
 80054fc:	0f424000 	.word	0x0f424000
 8005500:	186a0000 	.word	0x186a0000
 8005504:	1e848000 	.word	0x1e848000
 8005508:	3d090000 	.word	0x3d090000
 800550c:	7a120000 	.word	0x7a120000
 8005510:	000aaa00 	.word	0x000aaa00
 8005514:	000ccc00 	.word	0x000ccc00
 8005518:	00155500 	.word	0x00155500
 800551c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6852      	ldr	r2, [r2, #4]
 8005528:	0852      	lsrs	r2, r2, #1
 800552a:	4611      	mov	r1, r2
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	eb13 0b01 	adds.w	fp, r3, r1
 8005534:	eb44 0c02 	adc.w	ip, r4, r2
 8005538:	4658      	mov	r0, fp
 800553a:	4661      	mov	r1, ip
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f04f 0400 	mov.w	r4, #0
 8005544:	461a      	mov	r2, r3
 8005546:	4623      	mov	r3, r4
 8005548:	f7fa fe66 	bl	8000218 <__aeabi_uldivmod>
 800554c:	4603      	mov	r3, r0
 800554e:	460c      	mov	r4, r1
 8005550:	61fb      	str	r3, [r7, #28]
            break;
 8005552:	e002      	b.n	800555a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	76fb      	strb	r3, [r7, #27]
            break;
 8005558:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005560:	d309      	bcc.n	8005576 <UART_SetConfig+0xaee>
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005568:	d205      	bcs.n	8005576 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	f000 bc18 	b.w	8005da6 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	76fb      	strb	r3, [r7, #27]
 800557a:	f000 bc14 	b.w	8005da6 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005586:	f040 8204 	bne.w	8005992 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800558a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800558e:	2b08      	cmp	r3, #8
 8005590:	f200 81df 	bhi.w	8005952 <UART_SetConfig+0xeca>
 8005594:	a201      	add	r2, pc, #4	; (adr r2, 800559c <UART_SetConfig+0xb14>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055c1 	.word	0x080055c1
 80055a0:	08005679 	.word	0x08005679
 80055a4:	08005731 	.word	0x08005731
 80055a8:	08005953 	.word	0x08005953
 80055ac:	080057d9 	.word	0x080057d9
 80055b0:	08005953 	.word	0x08005953
 80055b4:	08005953 	.word	0x08005953
 80055b8:	08005953 	.word	0x08005953
 80055bc:	08005891 	.word	0x08005891
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c0:	f7fc ff1a 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 80055c4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d044      	beq.n	8005658 <UART_SetConfig+0xbd0>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d03e      	beq.n	8005654 <UART_SetConfig+0xbcc>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d038      	beq.n	8005650 <UART_SetConfig+0xbc8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d032      	beq.n	800564c <UART_SetConfig+0xbc4>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d02c      	beq.n	8005648 <UART_SetConfig+0xbc0>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2b05      	cmp	r3, #5
 80055f4:	d026      	beq.n	8005644 <UART_SetConfig+0xbbc>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d020      	beq.n	8005640 <UART_SetConfig+0xbb8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	2b07      	cmp	r3, #7
 8005604:	d01a      	beq.n	800563c <UART_SetConfig+0xbb4>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b08      	cmp	r3, #8
 800560c:	d014      	beq.n	8005638 <UART_SetConfig+0xbb0>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b09      	cmp	r3, #9
 8005614:	d00e      	beq.n	8005634 <UART_SetConfig+0xbac>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b0a      	cmp	r3, #10
 800561c:	d008      	beq.n	8005630 <UART_SetConfig+0xba8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b0b      	cmp	r3, #11
 8005624:	d102      	bne.n	800562c <UART_SetConfig+0xba4>
 8005626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800562a:	e016      	b.n	800565a <UART_SetConfig+0xbd2>
 800562c:	2301      	movs	r3, #1
 800562e:	e014      	b.n	800565a <UART_SetConfig+0xbd2>
 8005630:	2380      	movs	r3, #128	; 0x80
 8005632:	e012      	b.n	800565a <UART_SetConfig+0xbd2>
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	e010      	b.n	800565a <UART_SetConfig+0xbd2>
 8005638:	2320      	movs	r3, #32
 800563a:	e00e      	b.n	800565a <UART_SetConfig+0xbd2>
 800563c:	2310      	movs	r3, #16
 800563e:	e00c      	b.n	800565a <UART_SetConfig+0xbd2>
 8005640:	230c      	movs	r3, #12
 8005642:	e00a      	b.n	800565a <UART_SetConfig+0xbd2>
 8005644:	230a      	movs	r3, #10
 8005646:	e008      	b.n	800565a <UART_SetConfig+0xbd2>
 8005648:	2308      	movs	r3, #8
 800564a:	e006      	b.n	800565a <UART_SetConfig+0xbd2>
 800564c:	2306      	movs	r3, #6
 800564e:	e004      	b.n	800565a <UART_SetConfig+0xbd2>
 8005650:	2304      	movs	r3, #4
 8005652:	e002      	b.n	800565a <UART_SetConfig+0xbd2>
 8005654:	2302      	movs	r3, #2
 8005656:	e000      	b.n	800565a <UART_SetConfig+0xbd2>
 8005658:	2301      	movs	r3, #1
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	005a      	lsls	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	441a      	add	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	b29b      	uxth	r3, r3
 8005674:	61fb      	str	r3, [r7, #28]
        break;
 8005676:	e16f      	b.n	8005958 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005678:	f7fc fed4 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 800567c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	d044      	beq.n	8005710 <UART_SetConfig+0xc88>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	2b01      	cmp	r3, #1
 800568c:	d03e      	beq.n	800570c <UART_SetConfig+0xc84>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	2b02      	cmp	r3, #2
 8005694:	d038      	beq.n	8005708 <UART_SetConfig+0xc80>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b03      	cmp	r3, #3
 800569c:	d032      	beq.n	8005704 <UART_SetConfig+0xc7c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d02c      	beq.n	8005700 <UART_SetConfig+0xc78>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d026      	beq.n	80056fc <UART_SetConfig+0xc74>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b06      	cmp	r3, #6
 80056b4:	d020      	beq.n	80056f8 <UART_SetConfig+0xc70>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	2b07      	cmp	r3, #7
 80056bc:	d01a      	beq.n	80056f4 <UART_SetConfig+0xc6c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d014      	beq.n	80056f0 <UART_SetConfig+0xc68>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b09      	cmp	r3, #9
 80056cc:	d00e      	beq.n	80056ec <UART_SetConfig+0xc64>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b0a      	cmp	r3, #10
 80056d4:	d008      	beq.n	80056e8 <UART_SetConfig+0xc60>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b0b      	cmp	r3, #11
 80056dc:	d102      	bne.n	80056e4 <UART_SetConfig+0xc5c>
 80056de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056e2:	e016      	b.n	8005712 <UART_SetConfig+0xc8a>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e014      	b.n	8005712 <UART_SetConfig+0xc8a>
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	e012      	b.n	8005712 <UART_SetConfig+0xc8a>
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	e010      	b.n	8005712 <UART_SetConfig+0xc8a>
 80056f0:	2320      	movs	r3, #32
 80056f2:	e00e      	b.n	8005712 <UART_SetConfig+0xc8a>
 80056f4:	2310      	movs	r3, #16
 80056f6:	e00c      	b.n	8005712 <UART_SetConfig+0xc8a>
 80056f8:	230c      	movs	r3, #12
 80056fa:	e00a      	b.n	8005712 <UART_SetConfig+0xc8a>
 80056fc:	230a      	movs	r3, #10
 80056fe:	e008      	b.n	8005712 <UART_SetConfig+0xc8a>
 8005700:	2308      	movs	r3, #8
 8005702:	e006      	b.n	8005712 <UART_SetConfig+0xc8a>
 8005704:	2306      	movs	r3, #6
 8005706:	e004      	b.n	8005712 <UART_SetConfig+0xc8a>
 8005708:	2304      	movs	r3, #4
 800570a:	e002      	b.n	8005712 <UART_SetConfig+0xc8a>
 800570c:	2302      	movs	r3, #2
 800570e:	e000      	b.n	8005712 <UART_SetConfig+0xc8a>
 8005710:	2301      	movs	r3, #1
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	005a      	lsls	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	441a      	add	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	fbb2 f3f3 	udiv	r3, r2, r3
 800572a:	b29b      	uxth	r3, r3
 800572c:	61fb      	str	r3, [r7, #28]
        break;
 800572e:	e113      	b.n	8005958 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d043      	beq.n	80057c0 <UART_SetConfig+0xd38>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b01      	cmp	r3, #1
 800573e:	d03d      	beq.n	80057bc <UART_SetConfig+0xd34>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	2b02      	cmp	r3, #2
 8005746:	d037      	beq.n	80057b8 <UART_SetConfig+0xd30>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	2b03      	cmp	r3, #3
 800574e:	d031      	beq.n	80057b4 <UART_SetConfig+0xd2c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	2b04      	cmp	r3, #4
 8005756:	d02b      	beq.n	80057b0 <UART_SetConfig+0xd28>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	2b05      	cmp	r3, #5
 800575e:	d025      	beq.n	80057ac <UART_SetConfig+0xd24>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b06      	cmp	r3, #6
 8005766:	d01f      	beq.n	80057a8 <UART_SetConfig+0xd20>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2b07      	cmp	r3, #7
 800576e:	d019      	beq.n	80057a4 <UART_SetConfig+0xd1c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b08      	cmp	r3, #8
 8005776:	d013      	beq.n	80057a0 <UART_SetConfig+0xd18>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	2b09      	cmp	r3, #9
 800577e:	d00d      	beq.n	800579c <UART_SetConfig+0xd14>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	2b0a      	cmp	r3, #10
 8005786:	d007      	beq.n	8005798 <UART_SetConfig+0xd10>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2b0b      	cmp	r3, #11
 800578e:	d101      	bne.n	8005794 <UART_SetConfig+0xd0c>
 8005790:	4b8d      	ldr	r3, [pc, #564]	; (80059c8 <UART_SetConfig+0xf40>)
 8005792:	e016      	b.n	80057c2 <UART_SetConfig+0xd3a>
 8005794:	4b8d      	ldr	r3, [pc, #564]	; (80059cc <UART_SetConfig+0xf44>)
 8005796:	e014      	b.n	80057c2 <UART_SetConfig+0xd3a>
 8005798:	4b8d      	ldr	r3, [pc, #564]	; (80059d0 <UART_SetConfig+0xf48>)
 800579a:	e012      	b.n	80057c2 <UART_SetConfig+0xd3a>
 800579c:	4b8d      	ldr	r3, [pc, #564]	; (80059d4 <UART_SetConfig+0xf4c>)
 800579e:	e010      	b.n	80057c2 <UART_SetConfig+0xd3a>
 80057a0:	4b8d      	ldr	r3, [pc, #564]	; (80059d8 <UART_SetConfig+0xf50>)
 80057a2:	e00e      	b.n	80057c2 <UART_SetConfig+0xd3a>
 80057a4:	4b8d      	ldr	r3, [pc, #564]	; (80059dc <UART_SetConfig+0xf54>)
 80057a6:	e00c      	b.n	80057c2 <UART_SetConfig+0xd3a>
 80057a8:	4b8d      	ldr	r3, [pc, #564]	; (80059e0 <UART_SetConfig+0xf58>)
 80057aa:	e00a      	b.n	80057c2 <UART_SetConfig+0xd3a>
 80057ac:	4b8d      	ldr	r3, [pc, #564]	; (80059e4 <UART_SetConfig+0xf5c>)
 80057ae:	e008      	b.n	80057c2 <UART_SetConfig+0xd3a>
 80057b0:	4b8d      	ldr	r3, [pc, #564]	; (80059e8 <UART_SetConfig+0xf60>)
 80057b2:	e006      	b.n	80057c2 <UART_SetConfig+0xd3a>
 80057b4:	4b8d      	ldr	r3, [pc, #564]	; (80059ec <UART_SetConfig+0xf64>)
 80057b6:	e004      	b.n	80057c2 <UART_SetConfig+0xd3a>
 80057b8:	4b8d      	ldr	r3, [pc, #564]	; (80059f0 <UART_SetConfig+0xf68>)
 80057ba:	e002      	b.n	80057c2 <UART_SetConfig+0xd3a>
 80057bc:	4b8d      	ldr	r3, [pc, #564]	; (80059f4 <UART_SetConfig+0xf6c>)
 80057be:	e000      	b.n	80057c2 <UART_SetConfig+0xd3a>
 80057c0:	4b82      	ldr	r3, [pc, #520]	; (80059cc <UART_SetConfig+0xf44>)
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6852      	ldr	r2, [r2, #4]
 80057c6:	0852      	lsrs	r2, r2, #1
 80057c8:	441a      	add	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	61fb      	str	r3, [r7, #28]
        break;
 80057d6:	e0bf      	b.n	8005958 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d8:	f7fc fda0 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80057dc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d044      	beq.n	8005870 <UART_SetConfig+0xde8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d03e      	beq.n	800586c <UART_SetConfig+0xde4>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d038      	beq.n	8005868 <UART_SetConfig+0xde0>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d032      	beq.n	8005864 <UART_SetConfig+0xddc>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b04      	cmp	r3, #4
 8005804:	d02c      	beq.n	8005860 <UART_SetConfig+0xdd8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b05      	cmp	r3, #5
 800580c:	d026      	beq.n	800585c <UART_SetConfig+0xdd4>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b06      	cmp	r3, #6
 8005814:	d020      	beq.n	8005858 <UART_SetConfig+0xdd0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b07      	cmp	r3, #7
 800581c:	d01a      	beq.n	8005854 <UART_SetConfig+0xdcc>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b08      	cmp	r3, #8
 8005824:	d014      	beq.n	8005850 <UART_SetConfig+0xdc8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b09      	cmp	r3, #9
 800582c:	d00e      	beq.n	800584c <UART_SetConfig+0xdc4>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b0a      	cmp	r3, #10
 8005834:	d008      	beq.n	8005848 <UART_SetConfig+0xdc0>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b0b      	cmp	r3, #11
 800583c:	d102      	bne.n	8005844 <UART_SetConfig+0xdbc>
 800583e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005842:	e016      	b.n	8005872 <UART_SetConfig+0xdea>
 8005844:	2301      	movs	r3, #1
 8005846:	e014      	b.n	8005872 <UART_SetConfig+0xdea>
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	e012      	b.n	8005872 <UART_SetConfig+0xdea>
 800584c:	2340      	movs	r3, #64	; 0x40
 800584e:	e010      	b.n	8005872 <UART_SetConfig+0xdea>
 8005850:	2320      	movs	r3, #32
 8005852:	e00e      	b.n	8005872 <UART_SetConfig+0xdea>
 8005854:	2310      	movs	r3, #16
 8005856:	e00c      	b.n	8005872 <UART_SetConfig+0xdea>
 8005858:	230c      	movs	r3, #12
 800585a:	e00a      	b.n	8005872 <UART_SetConfig+0xdea>
 800585c:	230a      	movs	r3, #10
 800585e:	e008      	b.n	8005872 <UART_SetConfig+0xdea>
 8005860:	2308      	movs	r3, #8
 8005862:	e006      	b.n	8005872 <UART_SetConfig+0xdea>
 8005864:	2306      	movs	r3, #6
 8005866:	e004      	b.n	8005872 <UART_SetConfig+0xdea>
 8005868:	2304      	movs	r3, #4
 800586a:	e002      	b.n	8005872 <UART_SetConfig+0xdea>
 800586c:	2302      	movs	r3, #2
 800586e:	e000      	b.n	8005872 <UART_SetConfig+0xdea>
 8005870:	2301      	movs	r3, #1
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	005a      	lsls	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	441a      	add	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	b29b      	uxth	r3, r3
 800588c:	61fb      	str	r3, [r7, #28]
        break;
 800588e:	e063      	b.n	8005958 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	d04f      	beq.n	8005938 <UART_SetConfig+0xeb0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	2b01      	cmp	r3, #1
 800589e:	d048      	beq.n	8005932 <UART_SetConfig+0xeaa>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d041      	beq.n	800592c <UART_SetConfig+0xea4>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d03a      	beq.n	8005926 <UART_SetConfig+0xe9e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d033      	beq.n	8005920 <UART_SetConfig+0xe98>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b05      	cmp	r3, #5
 80058be:	d02c      	beq.n	800591a <UART_SetConfig+0xe92>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	2b06      	cmp	r3, #6
 80058c6:	d025      	beq.n	8005914 <UART_SetConfig+0xe8c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b07      	cmp	r3, #7
 80058ce:	d01e      	beq.n	800590e <UART_SetConfig+0xe86>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d017      	beq.n	8005908 <UART_SetConfig+0xe80>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d010      	beq.n	8005902 <UART_SetConfig+0xe7a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b0a      	cmp	r3, #10
 80058e6:	d009      	beq.n	80058fc <UART_SetConfig+0xe74>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b0b      	cmp	r3, #11
 80058ee:	d102      	bne.n	80058f6 <UART_SetConfig+0xe6e>
 80058f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058f4:	e022      	b.n	800593c <UART_SetConfig+0xeb4>
 80058f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058fa:	e01f      	b.n	800593c <UART_SetConfig+0xeb4>
 80058fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005900:	e01c      	b.n	800593c <UART_SetConfig+0xeb4>
 8005902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005906:	e019      	b.n	800593c <UART_SetConfig+0xeb4>
 8005908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800590c:	e016      	b.n	800593c <UART_SetConfig+0xeb4>
 800590e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005912:	e013      	b.n	800593c <UART_SetConfig+0xeb4>
 8005914:	f241 5354 	movw	r3, #5460	; 0x1554
 8005918:	e010      	b.n	800593c <UART_SetConfig+0xeb4>
 800591a:	f641 1398 	movw	r3, #6552	; 0x1998
 800591e:	e00d      	b.n	800593c <UART_SetConfig+0xeb4>
 8005920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005924:	e00a      	b.n	800593c <UART_SetConfig+0xeb4>
 8005926:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800592a:	e007      	b.n	800593c <UART_SetConfig+0xeb4>
 800592c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005930:	e004      	b.n	800593c <UART_SetConfig+0xeb4>
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	e001      	b.n	800593c <UART_SetConfig+0xeb4>
 8005938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6852      	ldr	r2, [r2, #4]
 8005940:	0852      	lsrs	r2, r2, #1
 8005942:	441a      	add	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	b29b      	uxth	r3, r3
 800594e:	61fb      	str	r3, [r7, #28]
        break;
 8005950:	e002      	b.n	8005958 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	76fb      	strb	r3, [r7, #27]
        break;
 8005956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b0f      	cmp	r3, #15
 800595c:	d916      	bls.n	800598c <UART_SetConfig+0xf04>
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005964:	d212      	bcs.n	800598c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f023 030f 	bic.w	r3, r3, #15
 800596e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	b29b      	uxth	r3, r3
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	b29a      	uxth	r2, r3
 800597c:	89fb      	ldrh	r3, [r7, #14]
 800597e:	4313      	orrs	r3, r2
 8005980:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	89fa      	ldrh	r2, [r7, #14]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	e20c      	b.n	8005da6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	76fb      	strb	r3, [r7, #27]
 8005990:	e209      	b.n	8005da6 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8005992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005996:	2b08      	cmp	r3, #8
 8005998:	f200 81f4 	bhi.w	8005d84 <UART_SetConfig+0x12fc>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <UART_SetConfig+0xf1c>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059f9 	.word	0x080059f9
 80059a8:	08005aaf 	.word	0x08005aaf
 80059ac:	08005b65 	.word	0x08005b65
 80059b0:	08005d85 	.word	0x08005d85
 80059b4:	08005c0f 	.word	0x08005c0f
 80059b8:	08005d85 	.word	0x08005d85
 80059bc:	08005d85 	.word	0x08005d85
 80059c0:	08005d85 	.word	0x08005d85
 80059c4:	08005cc5 	.word	0x08005cc5
 80059c8:	0001e848 	.word	0x0001e848
 80059cc:	01e84800 	.word	0x01e84800
 80059d0:	0003d090 	.word	0x0003d090
 80059d4:	0007a120 	.word	0x0007a120
 80059d8:	000f4240 	.word	0x000f4240
 80059dc:	001e8480 	.word	0x001e8480
 80059e0:	0028b0aa 	.word	0x0028b0aa
 80059e4:	0030d400 	.word	0x0030d400
 80059e8:	003d0900 	.word	0x003d0900
 80059ec:	00516154 	.word	0x00516154
 80059f0:	007a1200 	.word	0x007a1200
 80059f4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f8:	f7fc fcfe 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 80059fc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d044      	beq.n	8005a90 <UART_SetConfig+0x1008>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d03e      	beq.n	8005a8c <UART_SetConfig+0x1004>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d038      	beq.n	8005a88 <UART_SetConfig+0x1000>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d032      	beq.n	8005a84 <UART_SetConfig+0xffc>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d02c      	beq.n	8005a80 <UART_SetConfig+0xff8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b05      	cmp	r3, #5
 8005a2c:	d026      	beq.n	8005a7c <UART_SetConfig+0xff4>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2b06      	cmp	r3, #6
 8005a34:	d020      	beq.n	8005a78 <UART_SetConfig+0xff0>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b07      	cmp	r3, #7
 8005a3c:	d01a      	beq.n	8005a74 <UART_SetConfig+0xfec>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d014      	beq.n	8005a70 <UART_SetConfig+0xfe8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b09      	cmp	r3, #9
 8005a4c:	d00e      	beq.n	8005a6c <UART_SetConfig+0xfe4>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b0a      	cmp	r3, #10
 8005a54:	d008      	beq.n	8005a68 <UART_SetConfig+0xfe0>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b0b      	cmp	r3, #11
 8005a5c:	d102      	bne.n	8005a64 <UART_SetConfig+0xfdc>
 8005a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a62:	e016      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e014      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	e012      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a6c:	2340      	movs	r3, #64	; 0x40
 8005a6e:	e010      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a70:	2320      	movs	r3, #32
 8005a72:	e00e      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a74:	2310      	movs	r3, #16
 8005a76:	e00c      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a78:	230c      	movs	r3, #12
 8005a7a:	e00a      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a7c:	230a      	movs	r3, #10
 8005a7e:	e008      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a80:	2308      	movs	r3, #8
 8005a82:	e006      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a84:	2306      	movs	r3, #6
 8005a86:	e004      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	e002      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e000      	b.n	8005a92 <UART_SetConfig+0x100a>
 8005a90:	2301      	movs	r3, #1
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	441a      	add	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	61fb      	str	r3, [r7, #28]
        break;
 8005aac:	e16d      	b.n	8005d8a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aae:	f7fc fcb9 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8005ab2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d044      	beq.n	8005b46 <UART_SetConfig+0x10be>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d03e      	beq.n	8005b42 <UART_SetConfig+0x10ba>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d038      	beq.n	8005b3e <UART_SetConfig+0x10b6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d032      	beq.n	8005b3a <UART_SetConfig+0x10b2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d02c      	beq.n	8005b36 <UART_SetConfig+0x10ae>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b05      	cmp	r3, #5
 8005ae2:	d026      	beq.n	8005b32 <UART_SetConfig+0x10aa>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b06      	cmp	r3, #6
 8005aea:	d020      	beq.n	8005b2e <UART_SetConfig+0x10a6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b07      	cmp	r3, #7
 8005af2:	d01a      	beq.n	8005b2a <UART_SetConfig+0x10a2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d014      	beq.n	8005b26 <UART_SetConfig+0x109e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b09      	cmp	r3, #9
 8005b02:	d00e      	beq.n	8005b22 <UART_SetConfig+0x109a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b0a      	cmp	r3, #10
 8005b0a:	d008      	beq.n	8005b1e <UART_SetConfig+0x1096>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b0b      	cmp	r3, #11
 8005b12:	d102      	bne.n	8005b1a <UART_SetConfig+0x1092>
 8005b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b18:	e016      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e014      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b1e:	2380      	movs	r3, #128	; 0x80
 8005b20:	e012      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	e010      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b26:	2320      	movs	r3, #32
 8005b28:	e00e      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b2a:	2310      	movs	r3, #16
 8005b2c:	e00c      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b2e:	230c      	movs	r3, #12
 8005b30:	e00a      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b32:	230a      	movs	r3, #10
 8005b34:	e008      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b36:	2308      	movs	r3, #8
 8005b38:	e006      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b3a:	2306      	movs	r3, #6
 8005b3c:	e004      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b3e:	2304      	movs	r3, #4
 8005b40:	e002      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e000      	b.n	8005b48 <UART_SetConfig+0x10c0>
 8005b46:	2301      	movs	r3, #1
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	61fb      	str	r3, [r7, #28]
        break;
 8005b62:	e112      	b.n	8005d8a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d044      	beq.n	8005bf6 <UART_SetConfig+0x116e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d03e      	beq.n	8005bf2 <UART_SetConfig+0x116a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d038      	beq.n	8005bee <UART_SetConfig+0x1166>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d032      	beq.n	8005bea <UART_SetConfig+0x1162>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d02c      	beq.n	8005be6 <UART_SetConfig+0x115e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	2b05      	cmp	r3, #5
 8005b92:	d026      	beq.n	8005be2 <UART_SetConfig+0x115a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d020      	beq.n	8005bde <UART_SetConfig+0x1156>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	2b07      	cmp	r3, #7
 8005ba2:	d01a      	beq.n	8005bda <UART_SetConfig+0x1152>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d014      	beq.n	8005bd6 <UART_SetConfig+0x114e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2b09      	cmp	r3, #9
 8005bb2:	d00e      	beq.n	8005bd2 <UART_SetConfig+0x114a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	2b0a      	cmp	r3, #10
 8005bba:	d008      	beq.n	8005bce <UART_SetConfig+0x1146>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2b0b      	cmp	r3, #11
 8005bc2:	d102      	bne.n	8005bca <UART_SetConfig+0x1142>
 8005bc4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005bc8:	e016      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bca:	4b81      	ldr	r3, [pc, #516]	; (8005dd0 <UART_SetConfig+0x1348>)
 8005bcc:	e014      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bce:	4b81      	ldr	r3, [pc, #516]	; (8005dd4 <UART_SetConfig+0x134c>)
 8005bd0:	e012      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bd2:	4b81      	ldr	r3, [pc, #516]	; (8005dd8 <UART_SetConfig+0x1350>)
 8005bd4:	e010      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bd6:	4b81      	ldr	r3, [pc, #516]	; (8005ddc <UART_SetConfig+0x1354>)
 8005bd8:	e00e      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bda:	4b81      	ldr	r3, [pc, #516]	; (8005de0 <UART_SetConfig+0x1358>)
 8005bdc:	e00c      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bde:	4b81      	ldr	r3, [pc, #516]	; (8005de4 <UART_SetConfig+0x135c>)
 8005be0:	e00a      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005be2:	4b81      	ldr	r3, [pc, #516]	; (8005de8 <UART_SetConfig+0x1360>)
 8005be4:	e008      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005be6:	4b81      	ldr	r3, [pc, #516]	; (8005dec <UART_SetConfig+0x1364>)
 8005be8:	e006      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bea:	4b81      	ldr	r3, [pc, #516]	; (8005df0 <UART_SetConfig+0x1368>)
 8005bec:	e004      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bee:	4b81      	ldr	r3, [pc, #516]	; (8005df4 <UART_SetConfig+0x136c>)
 8005bf0:	e002      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bf2:	4b81      	ldr	r3, [pc, #516]	; (8005df8 <UART_SetConfig+0x1370>)
 8005bf4:	e000      	b.n	8005bf8 <UART_SetConfig+0x1170>
 8005bf6:	4b76      	ldr	r3, [pc, #472]	; (8005dd0 <UART_SetConfig+0x1348>)
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6852      	ldr	r2, [r2, #4]
 8005bfc:	0852      	lsrs	r2, r2, #1
 8005bfe:	441a      	add	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	61fb      	str	r3, [r7, #28]
        break;
 8005c0c:	e0bd      	b.n	8005d8a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0e:	f7fc fb85 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8005c12:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d044      	beq.n	8005ca6 <UART_SetConfig+0x121e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d03e      	beq.n	8005ca2 <UART_SetConfig+0x121a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d038      	beq.n	8005c9e <UART_SetConfig+0x1216>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d032      	beq.n	8005c9a <UART_SetConfig+0x1212>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d02c      	beq.n	8005c96 <UART_SetConfig+0x120e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	d026      	beq.n	8005c92 <UART_SetConfig+0x120a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d020      	beq.n	8005c8e <UART_SetConfig+0x1206>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	d01a      	beq.n	8005c8a <UART_SetConfig+0x1202>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d014      	beq.n	8005c86 <UART_SetConfig+0x11fe>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2b09      	cmp	r3, #9
 8005c62:	d00e      	beq.n	8005c82 <UART_SetConfig+0x11fa>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b0a      	cmp	r3, #10
 8005c6a:	d008      	beq.n	8005c7e <UART_SetConfig+0x11f6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b0b      	cmp	r3, #11
 8005c72:	d102      	bne.n	8005c7a <UART_SetConfig+0x11f2>
 8005c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c78:	e016      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e014      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c7e:	2380      	movs	r3, #128	; 0x80
 8005c80:	e012      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c82:	2340      	movs	r3, #64	; 0x40
 8005c84:	e010      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c86:	2320      	movs	r3, #32
 8005c88:	e00e      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c8a:	2310      	movs	r3, #16
 8005c8c:	e00c      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c8e:	230c      	movs	r3, #12
 8005c90:	e00a      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c92:	230a      	movs	r3, #10
 8005c94:	e008      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c96:	2308      	movs	r3, #8
 8005c98:	e006      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c9a:	2306      	movs	r3, #6
 8005c9c:	e004      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005c9e:	2304      	movs	r3, #4
 8005ca0:	e002      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e000      	b.n	8005ca8 <UART_SetConfig+0x1220>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	61fb      	str	r3, [r7, #28]
        break;
 8005cc2:	e062      	b.n	8005d8a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d04e      	beq.n	8005d6a <UART_SetConfig+0x12e2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d047      	beq.n	8005d64 <UART_SetConfig+0x12dc>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d040      	beq.n	8005d5e <UART_SetConfig+0x12d6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d039      	beq.n	8005d58 <UART_SetConfig+0x12d0>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d032      	beq.n	8005d52 <UART_SetConfig+0x12ca>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b05      	cmp	r3, #5
 8005cf2:	d02b      	beq.n	8005d4c <UART_SetConfig+0x12c4>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b06      	cmp	r3, #6
 8005cfa:	d024      	beq.n	8005d46 <UART_SetConfig+0x12be>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b07      	cmp	r3, #7
 8005d02:	d01d      	beq.n	8005d40 <UART_SetConfig+0x12b8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d016      	beq.n	8005d3a <UART_SetConfig+0x12b2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b09      	cmp	r3, #9
 8005d12:	d00f      	beq.n	8005d34 <UART_SetConfig+0x12ac>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b0a      	cmp	r3, #10
 8005d1a:	d008      	beq.n	8005d2e <UART_SetConfig+0x12a6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b0b      	cmp	r3, #11
 8005d22:	d101      	bne.n	8005d28 <UART_SetConfig+0x12a0>
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	e022      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d2c:	e01f      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d32:	e01c      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d38:	e019      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d3e:	e016      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d44:	e013      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d46:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005d4a:	e010      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d4c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005d50:	e00d      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d56:	e00a      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d58:	f241 5355 	movw	r3, #5461	; 0x1555
 8005d5c:	e007      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d62:	e004      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d68:	e001      	b.n	8005d6e <UART_SetConfig+0x12e6>
 8005d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6852      	ldr	r2, [r2, #4]
 8005d72:	0852      	lsrs	r2, r2, #1
 8005d74:	441a      	add	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	61fb      	str	r3, [r7, #28]
        break;
 8005d82:	e002      	b.n	8005d8a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	76fb      	strb	r3, [r7, #27]
        break;
 8005d88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2b0f      	cmp	r3, #15
 8005d8e:	d908      	bls.n	8005da2 <UART_SetConfig+0x131a>
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d96:	d204      	bcs.n	8005da2 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	60da      	str	r2, [r3, #12]
 8005da0:	e001      	b.n	8005da6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005dc2:	7efb      	ldrb	r3, [r7, #27]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3728      	adds	r7, #40	; 0x28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005dce:	bf00      	nop
 8005dd0:	00f42400 	.word	0x00f42400
 8005dd4:	0001e848 	.word	0x0001e848
 8005dd8:	0003d090 	.word	0x0003d090
 8005ddc:	0007a120 	.word	0x0007a120
 8005de0:	000f4240 	.word	0x000f4240
 8005de4:	00145855 	.word	0x00145855
 8005de8:	00186a00 	.word	0x00186a00
 8005dec:	001e8480 	.word	0x001e8480
 8005df0:	0028b0aa 	.word	0x0028b0aa
 8005df4:	003d0900 	.word	0x003d0900
 8005df8:	007a1200 	.word	0x007a1200

08005dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005efa:	d10a      	bne.n	8005f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f50:	f7fb f9d0 	bl	80012f4 <HAL_GetTick>
 8005f54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d10e      	bne.n	8005f82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f82c 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e022      	b.n	8005fc8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d10e      	bne.n	8005fae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f816 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e00c      	b.n	8005fc8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe0:	e02c      	b.n	800603c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d028      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fb f983 	bl	80012f4 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11d      	bne.n	800603c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800600e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e00f      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69da      	ldr	r2, [r3, #28]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d0c3      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800607a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7fe fcd1 	bl	8004a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7fe fcad 	bl	8004a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_UARTEx_DisableFifoMode+0x16>
 8006158:	2302      	movs	r3, #2
 800615a:	e027      	b.n	80061ac <HAL_UARTEx_DisableFifoMode+0x66>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2224      	movs	r2, #36	; 0x24
 8006168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800618a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e02d      	b.n	800622c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2224      	movs	r2, #36	; 0x24
 80061dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f84f 	bl	80062b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006248:	2302      	movs	r3, #2
 800624a:	e02d      	b.n	80062a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2224      	movs	r2, #36	; 0x24
 8006258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0201 	bic.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f811 	bl	80062b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b089      	sub	sp, #36	; 0x24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80062b8:	4a2f      	ldr	r2, [pc, #188]	; (8006378 <UARTEx_SetNbDataToProcess+0xc8>)
 80062ba:	f107 0314 	add.w	r3, r7, #20
 80062be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062c2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80062c6:	4a2d      	ldr	r2, [pc, #180]	; (800637c <UARTEx_SetNbDataToProcess+0xcc>)
 80062c8:	f107 030c 	add.w	r3, r7, #12
 80062cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062d0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d108      	bne.n	80062ee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062ec:	e03d      	b.n	800636a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062ee:	2308      	movs	r3, #8
 80062f0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062f2:	2308      	movs	r3, #8
 80062f4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	0e5b      	lsrs	r3, r3, #25
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	0f5b      	lsrs	r3, r3, #29
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006316:	7fbb      	ldrb	r3, [r7, #30]
 8006318:	7f3a      	ldrb	r2, [r7, #28]
 800631a:	f107 0120 	add.w	r1, r7, #32
 800631e:	440a      	add	r2, r1
 8006320:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006324:	fb02 f303 	mul.w	r3, r2, r3
 8006328:	7f3a      	ldrb	r2, [r7, #28]
 800632a:	f107 0120 	add.w	r1, r7, #32
 800632e:	440a      	add	r2, r1
 8006330:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006334:	fb93 f3f2 	sdiv	r3, r3, r2
 8006338:	b29a      	uxth	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006340:	7ffb      	ldrb	r3, [r7, #31]
 8006342:	7f7a      	ldrb	r2, [r7, #29]
 8006344:	f107 0120 	add.w	r1, r7, #32
 8006348:	440a      	add	r2, r1
 800634a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800634e:	fb02 f303 	mul.w	r3, r2, r3
 8006352:	7f7a      	ldrb	r2, [r7, #29]
 8006354:	f107 0120 	add.w	r1, r7, #32
 8006358:	440a      	add	r2, r1
 800635a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800635e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800636a:	bf00      	nop
 800636c:	3724      	adds	r7, #36	; 0x24
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	080063f0 	.word	0x080063f0
 800637c:	080063f8 	.word	0x080063f8

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4e0d      	ldr	r6, [pc, #52]	; (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	; (80063bc <__libc_init_array+0x3c>)
 8006386:	1ba4      	subs	r4, r4, r6
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2500      	movs	r5, #0
 800638c:	42a5      	cmp	r5, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4e0b      	ldr	r6, [pc, #44]	; (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	; (80063c4 <__libc_init_array+0x44>)
 8006394:	f000 f820 	bl	80063d8 <_init>
 8006398:	1ba4      	subs	r4, r4, r6
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2500      	movs	r5, #0
 800639e:	42a5      	cmp	r5, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a8:	4798      	blx	r3
 80063aa:	3501      	adds	r5, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063b2:	4798      	blx	r3
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	08006420 	.word	0x08006420
 80063bc:	08006420 	.word	0x08006420
 80063c0:	08006420 	.word	0x08006420
 80063c4:	08006424 	.word	0x08006424

080063c8 <memset>:
 80063c8:	4402      	add	r2, r0
 80063ca:	4603      	mov	r3, r0
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d100      	bne.n	80063d2 <memset+0xa>
 80063d0:	4770      	bx	lr
 80063d2:	f803 1b01 	strb.w	r1, [r3], #1
 80063d6:	e7f9      	b.n	80063cc <memset+0x4>

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
