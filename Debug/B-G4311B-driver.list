
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af58  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800b130  0800b130  0001b130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b984  0800b984  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b984  0800b984  0001b984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b98c  0800b98c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b98c  0800b98c  0001b98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b990  0800b990  0001b990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000074  0800ba08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800ba08  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbe9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003526  00000000  00000000  0003cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  000401b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  000417c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022061  00000000  00000000  00042bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014757  00000000  00000000  00064c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dec7b  00000000  00000000  000793b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015802b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f24  00000000  00000000  001580a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b118 	.word	0x0800b118

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	0800b118 	.word	0x0800b118

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b092      	sub	sp, #72	; 0x48
 8000e68:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	223c      	movs	r2, #60	; 0x3c
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f009 ff61 	bl	800ad44 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e82:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000e8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e92:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb6:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	482b      	ldr	r0, [pc, #172]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ee2:	f002 f90f 	bl	8003104 <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f001 f9fd 	bl	80022ea <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4825      	ldr	r0, [pc, #148]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000efc:	f003 fd04 	bl	8004908 <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f06:	f001 f9f0 	bl	80022ea <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_ADC1_Init+0x130>)
 8000f0c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000f38:	2384      	movs	r3, #132	; 0x84
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000f4c:	f003 f884 	bl	8004058 <HAL_ADCEx_InjectedConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f56:	f001 f9c8 	bl	80022ea <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC1_Init+0x134>)
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f5e:	f240 130f 	movw	r3, #271	; 0x10f
 8000f62:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8000f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f6c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	773b      	strb	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000f78:	f003 f86e 	bl	8004058 <HAL_ADCEx_InjectedConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000f82:	f001 f9b2 	bl	80022ea <Error_Handler>
  }

}
 8000f86:	bf00      	nop
 8000f88:	3748      	adds	r7, #72	; 0x48
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000100 	.word	0x20000100
 8000f94:	0c900008 	.word	0x0c900008
 8000f98:	32601000 	.word	0x32601000

08000f9c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b090      	sub	sp, #64	; 0x40
 8000fa0:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	223c      	movs	r2, #60	; 0x3c
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f009 fecb 	bl	800ad44 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000fae:	4b34      	ldr	r3, [pc, #208]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fb0:	4a34      	ldr	r2, [pc, #208]	; (8001084 <MX_ADC2_Init+0xe8>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b30      	ldr	r3, [pc, #192]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_ADC2_Init+0xe4>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800100a:	481d      	ldr	r0, [pc, #116]	; (8001080 <MX_ADC2_Init+0xe4>)
 800100c:	f002 f87a 	bl	8003104 <HAL_ADC_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001016:	f001 f968 	bl	80022ea <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_ADC2_Init+0xec>)
 800101c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800101e:	2309      	movs	r3, #9
 8001020:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001022:	2301      	movs	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001026:	237f      	movs	r3, #127	; 0x7f
 8001028:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001036:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8001038:	2301      	movs	r3, #1
 800103a:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001054:	2384      	movs	r3, #132	; 0x84
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_ADC2_Init+0xe4>)
 8001068:	f002 fff6 	bl	8004058 <HAL_ADCEx_InjectedConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8001072:	f001 f93a 	bl	80022ea <Error_Handler>
  }

}
 8001076:	bf00      	nop
 8001078:	3740      	adds	r7, #64	; 0x40
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000094 	.word	0x20000094
 8001084:	50000100 	.word	0x50000100
 8001088:	0c900008 	.word	0x0c900008

0800108c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ac:	d14e      	bne.n	800114c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80010ae:	4b47      	ldr	r3, [pc, #284]	; (80011cc <HAL_ADC_MspInit+0x140>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_ADC_MspInit+0x140>)
 80010b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010b8:	4b44      	ldr	r3, [pc, #272]	; (80011cc <HAL_ADC_MspInit+0x140>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10b      	bne.n	80010d8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010c0:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	4a42      	ldr	r2, [pc, #264]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010cc:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	4a3c      	ldr	r2, [pc, #240]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e4:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	4a36      	ldr	r2, [pc, #216]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001108:	2305      	movs	r3, #5
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f003 fe09 	bl	8004d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001122:	2302      	movs	r3, #2
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4827      	ldr	r0, [pc, #156]	; (80011d4 <HAL_ADC_MspInit+0x148>)
 8001136:	f003 fdfd 	bl	8004d34 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	2012      	movs	r0, #18
 8001140:	f003 fd5d 	bl	8004bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001144:	2012      	movs	r0, #18
 8001146:	f003 fd74 	bl	8004c32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800114a:	e03a      	b.n	80011c2 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_ADC_MspInit+0x14c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d135      	bne.n	80011c2 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_ADC_MspInit+0x140>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_ADC_MspInit+0x140>)
 800115e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_ADC_MspInit+0x140>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d10b      	bne.n	8001180 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 800116e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001198:	2340      	movs	r3, #64	; 0x40
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f003 fdc1 	bl	8004d34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	2012      	movs	r0, #18
 80011b8:	f003 fd21 	bl	8004bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011bc:	2012      	movs	r0, #18
 80011be:	f003 fd38 	bl	8004c32 <HAL_NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000090 	.word	0x20000090
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	50000100 	.word	0x50000100

080011dc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <MX_GPIO_Init+0xcc>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <MX_GPIO_Init+0xcc>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xcc>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_GPIO_Init+0xcc>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8001252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125c:	2302      	movs	r3, #2
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001264:	2301      	movs	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f003 fd5f 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_GPIO_Init+0xd0>)
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <MX_GPIO_Init+0xd4>)
 800128c:	f003 fd52 	bl	8004d34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	210f      	movs	r1, #15
 8001294:	2028      	movs	r0, #40	; 0x28
 8001296:	f003 fcb2 	bl	8004bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129a:	2028      	movs	r0, #40	; 0x28
 800129c:	f003 fcc9 	bl	8004c32 <HAL_NVIC_EnableIRQ>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	10110000 	.word	0x10110000
 80012b0:	48000800 	.word	0x48000800

080012b4 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 80012b8:	217f      	movs	r1, #127	; 0x7f
 80012ba:	4868      	ldr	r0, [pc, #416]	; (800145c <start_up+0x1a8>)
 80012bc:	f002 fd2a 	bl	8003d14 <HAL_ADCEx_Calibration_Start>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d008      	beq.n	80012d8 <start_up+0x24>
 80012c6:	217f      	movs	r1, #127	; 0x7f
 80012c8:	4865      	ldr	r0, [pc, #404]	; (8001460 <start_up+0x1ac>)
 80012ca:	f002 fd23 	bl	8003d14 <HAL_ADCEx_Calibration_Start>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <start_up+0x24>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <start_up+0x26>
 80012d8:	2300      	movs	r3, #0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 80bc 	bne.w	8001458 <start_up+0x1a4>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)))
 80012e0:	4a60      	ldr	r2, [pc, #384]	; (8001464 <start_up+0x1b0>)
 80012e2:	4961      	ldr	r1, [pc, #388]	; (8001468 <start_up+0x1b4>)
 80012e4:	4861      	ldr	r0, [pc, #388]	; (800146c <start_up+0x1b8>)
 80012e6:	f003 ffc0 	bl	800526a <HAL_OPAMPEx_SelfCalibrateAll>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 80b3 	bne.w	8001458 <start_up+0x1a4>
		{

			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <start_up+0x1bc>)
 80012f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 80012fa:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <start_up+0x1bc>)
 80012fc:	2209      	movs	r2, #9
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR1=(TIM1->ARR/10);
 8001300:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <start_up+0x1bc>)
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	4a5a      	ldr	r2, [pc, #360]	; (8001470 <start_up+0x1bc>)
 8001306:	495b      	ldr	r1, [pc, #364]	; (8001474 <start_up+0x1c0>)
 8001308:	fba1 1303 	umull	r1, r3, r1, r3
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=0;
 8001310:	4b57      	ldr	r3, [pc, #348]	; (8001470 <start_up+0x1bc>)
 8001312:	2200      	movs	r2, #0
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8001316:	4b56      	ldr	r3, [pc, #344]	; (8001470 <start_up+0x1bc>)
 8001318:	2200      	movs	r2, #0
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4=TIM1_CCR4;
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <start_up+0x1bc>)
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	4a53      	ldr	r2, [pc, #332]	; (8001470 <start_up+0x1bc>)
 8001322:	3b0a      	subs	r3, #10
 8001324:	6413      	str	r3, [r2, #64]	; 0x40

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001326:	2100      	movs	r1, #0
 8001328:	4853      	ldr	r0, [pc, #332]	; (8001478 <start_up+0x1c4>)
 800132a:	f005 fb13 	bl	8006954 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800132e:	2100      	movs	r1, #0
 8001330:	4851      	ldr	r0, [pc, #324]	; (8001478 <start_up+0x1c4>)
 8001332:	f006 ffa9 	bl	8008288 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001336:	2104      	movs	r1, #4
 8001338:	484f      	ldr	r0, [pc, #316]	; (8001478 <start_up+0x1c4>)
 800133a:	f005 fb0b 	bl	8006954 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800133e:	2104      	movs	r1, #4
 8001340:	484d      	ldr	r0, [pc, #308]	; (8001478 <start_up+0x1c4>)
 8001342:	f006 ffa1 	bl	8008288 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001346:	2108      	movs	r1, #8
 8001348:	484b      	ldr	r0, [pc, #300]	; (8001478 <start_up+0x1c4>)
 800134a:	f005 fb03 	bl	8006954 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800134e:	2108      	movs	r1, #8
 8001350:	4849      	ldr	r0, [pc, #292]	; (8001478 <start_up+0x1c4>)
 8001352:	f006 ff99 	bl	8008288 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001356:	210c      	movs	r1, #12
 8001358:	4847      	ldr	r0, [pc, #284]	; (8001478 <start_up+0x1c4>)
 800135a:	f005 fafb 	bl	8006954 <HAL_TIM_PWM_Start>


			HAL_Delay(800);
 800135e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001362:	f001 fd95 	bl	8002e90 <HAL_Delay>

			//////// konfiguracja Timer 4 - encoder ///////////////////
			TIM4->ARR= TIM4_ARR;
 8001366:	4b45      	ldr	r3, [pc, #276]	; (800147c <start_up+0x1c8>)
 8001368:	f240 1267 	movw	r2, #359	; 0x167
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC= TIM4_PSC;
 800136e:	4b43      	ldr	r3, [pc, #268]	; (800147c <start_up+0x1c8>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001374:	2100      	movs	r1, #0
 8001376:	4842      	ldr	r0, [pc, #264]	; (8001480 <start_up+0x1cc>)
 8001378:	f005 fe1e 	bl	8006fb8 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 800137c:	2104      	movs	r1, #4
 800137e:	4840      	ldr	r0, [pc, #256]	; (8001480 <start_up+0x1cc>)
 8001380:	f005 fe1a 	bl	8006fb8 <HAL_TIM_Encoder_Start>
			//////// konfiguracja Timer 4 - encoder ///////////////////

			HAL_Delay(400);
 8001384:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001388:	f001 fd82 	bl	8002e90 <HAL_Delay>

			TIM1->CCR1=0;
 800138c:	4b38      	ldr	r3, [pc, #224]	; (8001470 <start_up+0x1bc>)
 800138e:	2200      	movs	r2, #0
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 8001392:	4b37      	ldr	r3, [pc, #220]	; (8001470 <start_up+0x1bc>)
 8001394:	2200      	movs	r2, #0
 8001396:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8001398:	4b35      	ldr	r3, [pc, #212]	; (8001470 <start_up+0x1bc>)
 800139a:	2200      	movs	r2, #0
 800139c:	63da      	str	r2, [r3, #60]	; 0x3c

			HAL_Delay(200);
 800139e:	20c8      	movs	r0, #200	; 0xc8
 80013a0:	f001 fd76 	bl	8002e90 <HAL_Delay>


			//////// konfiguracja Timer 8  ///////////////////
			TIM8->ARR= TIM8_ARR;
 80013a4:	4b37      	ldr	r3, [pc, #220]	; (8001484 <start_up+0x1d0>)
 80013a6:	f64f 72db 	movw	r2, #65499	; 0xffdb
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM8->PSC= TIM8_PSC;
 80013ac:	4b35      	ldr	r3, [pc, #212]	; (8001484 <start_up+0x1d0>)
 80013ae:	2209      	movs	r2, #9
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 80013b2:	2104      	movs	r1, #4
 80013b4:	4834      	ldr	r0, [pc, #208]	; (8001488 <start_up+0x1d4>)
 80013b6:	f005 fc97 	bl	8006ce8 <HAL_TIM_IC_Start>


			//////// start ADC 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 80013ba:	482c      	ldr	r0, [pc, #176]	; (800146c <start_up+0x1b8>)
 80013bc:	f003 ff24 	bl	8005208 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 80013c0:	4829      	ldr	r0, [pc, #164]	; (8001468 <start_up+0x1b4>)
 80013c2:	f003 ff21 	bl	8005208 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp3);
 80013c6:	4827      	ldr	r0, [pc, #156]	; (8001464 <start_up+0x1b0>)
 80013c8:	f003 ff1e 	bl	8005208 <HAL_OPAMP_Start>
			//////// start ADC 1 2 ///////////////////////////////////
			HAL_ADCEx_InjectedStart_IT(&hadc1);
 80013cc:	4823      	ldr	r0, [pc, #140]	; (800145c <start_up+0x1a8>)
 80013ce:	f002 fd03 	bl	8003dd8 <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 80013d2:	4823      	ldr	r0, [pc, #140]	; (8001460 <start_up+0x1ac>)
 80013d4:	f002 fd00 	bl	8003dd8 <HAL_ADCEx_InjectedStart_IT>


			////////  UASRT 2 /////////////////////////////////////////
			HAL_UART_Receive_IT(&huart2, &recive, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	492c      	ldr	r1, [pc, #176]	; (800148c <start_up+0x1d8>)
 80013dc:	482c      	ldr	r0, [pc, #176]	; (8001490 <start_up+0x1dc>)
 80013de:	f007 f9c9 	bl	8008774 <HAL_UART_Receive_IT>


			/////////// inicjalizacja pid_d ////////////////
			set_d=0;
 80013e2:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <start_up+0x1e0>)
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
			pid_d.Kp=1;
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <start_up+0x1e4>)
 80013ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013f0:	619a      	str	r2, [r3, #24]
			pid_d.Ki=1;
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <start_up+0x1e4>)
 80013f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013f8:	61da      	str	r2, [r3, #28]
			pid_d.Kd=0;
 80013fa:	4b27      	ldr	r3, [pc, #156]	; (8001498 <start_up+0x1e4>)
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_d, 1);
 8001402:	2101      	movs	r1, #1
 8001404:	4824      	ldr	r0, [pc, #144]	; (8001498 <start_up+0x1e4>)
 8001406:	f009 fa37 	bl	800a878 <arm_pid_init_f32>

			/////////// inicjalizacja pid_q ////////////////
			set_q=1;
 800140a:	4b24      	ldr	r3, [pc, #144]	; (800149c <start_up+0x1e8>)
 800140c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001410:	601a      	str	r2, [r3, #0]
			pid_q.Kp=4;
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <start_up+0x1ec>)
 8001414:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001418:	619a      	str	r2, [r3, #24]
			pid_q.Ki=1;
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <start_up+0x1ec>)
 800141c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001420:	61da      	str	r2, [r3, #28]
			pid_q.Kd=0;
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <start_up+0x1ec>)
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_q, 1);
 800142a:	2101      	movs	r1, #1
 800142c:	481c      	ldr	r0, [pc, #112]	; (80014a0 <start_up+0x1ec>)
 800142e:	f009 fa23 	bl	800a878 <arm_pid_init_f32>

			/////////// inicjalizacja pid_speed ////////////////
			set_speed=3000;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <start_up+0x1f0>)
 8001434:	4a1c      	ldr	r2, [pc, #112]	; (80014a8 <start_up+0x1f4>)
 8001436:	601a      	str	r2, [r3, #0]
			pid_iq_speed.Kp=2;
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <start_up+0x1f8>)
 800143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143e:	619a      	str	r2, [r3, #24]
			pid_iq_speed.Ki=1;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <start_up+0x1f8>)
 8001442:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001446:	61da      	str	r2, [r3, #28]
			pid_iq_speed.Kd=0;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <start_up+0x1f8>)
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_iq_speed, 1);
 8001450:	2101      	movs	r1, #1
 8001452:	4816      	ldr	r0, [pc, #88]	; (80014ac <start_up+0x1f8>)
 8001454:	f009 fa10 	bl	800a878 <arm_pid_init_f32>
		}


	   }

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000100 	.word	0x20000100
 8001460:	20000094 	.word	0x20000094
 8001464:	2000032c 	.word	0x2000032c
 8001468:	200002f0 	.word	0x200002f0
 800146c:	20000368 	.word	0x20000368
 8001470:	40012c00 	.word	0x40012c00
 8001474:	cccccccd 	.word	0xcccccccd
 8001478:	2000043c 	.word	0x2000043c
 800147c:	40000800 	.word	0x40000800
 8001480:	200003f0 	.word	0x200003f0
 8001484:	40013400 	.word	0x40013400
 8001488:	200003a4 	.word	0x200003a4
 800148c:	20000278 	.word	0x20000278
 8001490:	20000488 	.word	0x20000488
 8001494:	200001a4 	.word	0x200001a4
 8001498:	200001a8 	.word	0x200001a8
 800149c:	200002c8 	.word	0x200002c8
 80014a0:	2000024c 	.word	0x2000024c
 80014a4:	200002cc 	.word	0x200002cc
 80014a8:	453b8000 	.word	0x453b8000
 80014ac:	200001ec 	.word	0x200001ec

080014b0 <AlphaBeta_To_Angle_Vref>:

void AlphaBeta_To_Angle_Vref(float32_t alpha,float32_t beta,float32_t *angle_current_rad,float32_t *Vref)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80014ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	*angle_current_rad = atan2f(beta,alpha);
 80014c2:	edd7 0a03 	vldr	s1, [r7, #12]
 80014c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ca:	f009 fc43 	bl	800ad54 <atan2f>
 80014ce:	eef0 7a40 	vmov.f32	s15, s0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32( ((alpha*alpha)+(beta*beta)), Vref);
 80014d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80014dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e4:	edd7 6a02 	vldr	s13, [r7, #8]
 80014e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f4:	edc7 7a05 	vstr	s15, [r7, #20]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80014fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	db09      	blt.n	800151e <AlphaBeta_To_Angle_Vref+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800150a:	ed97 0a05 	vldr	s0, [r7, #20]
 800150e:	f009 fc23 	bl	800ad58 <sqrtf>
 8001512:	eef0 7a40 	vmov.f32	s15, s0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	edc3 7a00 	vstr	s15, [r3]
 800151c:	e003      	b.n	8001526 <AlphaBeta_To_Angle_Vref+0x76>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	601a      	str	r2, [r3, #0]

	 if(*Vref>=sv_Vdc_limit)  // saturacja Vref
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ffd8 	bl	80004e0 <__aeabi_f2d>
 8001530:	a308      	add	r3, pc, #32	; (adr r3, 8001554 <AlphaBeta_To_Angle_Vref+0xa4>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff fab1 	bl	8000a9c <__aeabi_dcmpge>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d100      	bne.n	8001542 <AlphaBeta_To_Angle_Vref+0x92>
	    	*Vref=sv_Vdc_limit;
}
 8001540:	e002      	b.n	8001548 <AlphaBeta_To_Angle_Vref+0x98>
	    	*Vref=sv_Vdc_limit;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	4a02      	ldr	r2, [pc, #8]	; (8001550 <AlphaBeta_To_Angle_Vref+0xa0>)
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	415db3d0 	.word	0x415db3d0
 8001554:	0f9096bc 	.word	0x0f9096bc
 8001558:	402bb67a 	.word	0x402bb67a
 800155c:	00000000 	.word	0x00000000

08001560 <Angle_To_Sector>:


void Angle_To_Sector(float32_t angle_current_rad,uint8_t *sector)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	ed87 0a01 	vstr	s0, [r7, #4]
 800156a:	6038      	str	r0, [r7, #0]

	if((angle_current_rad>0) && (angle_current_rad<=1.047197)) // pi/3
 800156c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	dd0e      	ble.n	8001598 <Angle_To_Sector+0x38>
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7fe ffb0 	bl	80004e0 <__aeabi_f2d>
 8001580:	a347      	add	r3, pc, #284	; (adr r3, 80016a0 <Angle_To_Sector+0x140>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff fa7f 	bl	8000a88 <__aeabi_dcmple>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <Angle_To_Sector+0x38>
		*sector=1;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e07f      	b.n	8001698 <Angle_To_Sector+0x138>
	else if((angle_current_rad>1.047197) && (angle_current_rad<=2.094395)) //2/3*pi
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7fe ffa1 	bl	80004e0 <__aeabi_f2d>
 800159e:	a340      	add	r3, pc, #256	; (adr r3, 80016a0 <Angle_To_Sector+0x140>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff fa84 	bl	8000ab0 <__aeabi_dcmpgt>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00e      	beq.n	80015cc <Angle_To_Sector+0x6c>
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7fe ff96 	bl	80004e0 <__aeabi_f2d>
 80015b4:	a33c      	add	r3, pc, #240	; (adr r3, 80016a8 <Angle_To_Sector+0x148>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff fa65 	bl	8000a88 <__aeabi_dcmple>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <Angle_To_Sector+0x6c>
		*sector=2;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2202      	movs	r2, #2
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	e065      	b.n	8001698 <Angle_To_Sector+0x138>
	else if((angle_current_rad>2.094395) && (angle_current_rad<=3.141593))
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7fe ff87 	bl	80004e0 <__aeabi_f2d>
 80015d2:	a335      	add	r3, pc, #212	; (adr r3, 80016a8 <Angle_To_Sector+0x148>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff fa6a 	bl	8000ab0 <__aeabi_dcmpgt>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00e      	beq.n	8001600 <Angle_To_Sector+0xa0>
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7fe ff7c 	bl	80004e0 <__aeabi_f2d>
 80015e8:	a331      	add	r3, pc, #196	; (adr r3, 80016b0 <Angle_To_Sector+0x150>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7ff fa4b 	bl	8000a88 <__aeabi_dcmple>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <Angle_To_Sector+0xa0>
		*sector=3;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2203      	movs	r2, #3
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e04b      	b.n	8001698 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-3.141593) && (angle_current_rad<=-2.094395))
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7fe ff6d 	bl	80004e0 <__aeabi_f2d>
 8001606:	a32c      	add	r3, pc, #176	; (adr r3, 80016b8 <Angle_To_Sector+0x158>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff fa50 	bl	8000ab0 <__aeabi_dcmpgt>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00e      	beq.n	8001634 <Angle_To_Sector+0xd4>
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7fe ff62 	bl	80004e0 <__aeabi_f2d>
 800161c:	a328      	add	r3, pc, #160	; (adr r3, 80016c0 <Angle_To_Sector+0x160>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7ff fa31 	bl	8000a88 <__aeabi_dcmple>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <Angle_To_Sector+0xd4>
		*sector=4;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2204      	movs	r2, #4
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e031      	b.n	8001698 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-2.094395) && (angle_current_rad<=-1.047197))
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7fe ff53 	bl	80004e0 <__aeabi_f2d>
 800163a:	a321      	add	r3, pc, #132	; (adr r3, 80016c0 <Angle_To_Sector+0x160>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7ff fa36 	bl	8000ab0 <__aeabi_dcmpgt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00e      	beq.n	8001668 <Angle_To_Sector+0x108>
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7fe ff48 	bl	80004e0 <__aeabi_f2d>
 8001650:	a31d      	add	r3, pc, #116	; (adr r3, 80016c8 <Angle_To_Sector+0x168>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7ff fa17 	bl	8000a88 <__aeabi_dcmple>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <Angle_To_Sector+0x108>
		*sector=5;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2205      	movs	r2, #5
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	e017      	b.n	8001698 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7fe ff39 	bl	80004e0 <__aeabi_f2d>
 800166e:	a316      	add	r3, pc, #88	; (adr r3, 80016c8 <Angle_To_Sector+0x168>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7ff fa1c 	bl	8000ab0 <__aeabi_dcmpgt>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d100      	bne.n	8001680 <Angle_To_Sector+0x120>
		*sector=6;
	else{}

}
 800167e:	e00b      	b.n	8001698 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8001680:	edd7 7a01 	vldr	s15, [r7, #4]
 8001684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	d900      	bls.n	8001690 <Angle_To_Sector+0x130>
}
 800168e:	e003      	b.n	8001698 <Angle_To_Sector+0x138>
		*sector=6;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2206      	movs	r2, #6
 8001694:	701a      	strb	r2, [r3, #0]
}
 8001696:	e7ff      	b.n	8001698 <Angle_To_Sector+0x138>
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	a437824d 	.word	0xa437824d
 80016a4:	3ff0c151 	.word	0x3ff0c151
 80016a8:	2a6f3f53 	.word	0x2a6f3f53
 80016ac:	4000c152 	.word	0x4000c152
 80016b0:	82c2bd7f 	.word	0x82c2bd7f
 80016b4:	400921fb 	.word	0x400921fb
 80016b8:	82c2bd7f 	.word	0x82c2bd7f
 80016bc:	c00921fb 	.word	0xc00921fb
 80016c0:	2a6f3f53 	.word	0x2a6f3f53
 80016c4:	c000c152 	.word	0xc000c152
 80016c8:	a437824d 	.word	0xa437824d
 80016cc:	bff0c151 	.word	0xbff0c151

080016d0 <SVPWM>:


void SVPWM(uint8_t sector,float32_t angle_current_rad,float32_t Vref, float32_t T[], float32_t T_gate[], float32_t *S1,float32_t *S2,float32_t *S3)
{
 80016d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80016dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4603      	mov	r3, r0
 80016e8:	75fb      	strb	r3, [r7, #23]

	T[1]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((sector * 1.047197) - (angle_current_rad)); /// pi/3 = 1,0472
 80016ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ee:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80019c8 <SVPWM+0x2f8>
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f6:	ee17 0a90 	vmov	r0, s15
 80016fa:	f7fe fef1 	bl	80004e0 <__aeabi_f2d>
 80016fe:	a3ac      	add	r3, pc, #688	; (adr r3, 80019b0 <SVPWM+0x2e0>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7ff f86e 	bl	80007e4 <__aeabi_ddiv>
 8001708:	4603      	mov	r3, r0
 800170a:	460c      	mov	r4, r1
 800170c:	4618      	mov	r0, r3
 800170e:	4621      	mov	r1, r4
 8001710:	a3a9      	add	r3, pc, #676	; (adr r3, 80019b8 <SVPWM+0x2e8>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7fe ff3b 	bl	8000590 <__aeabi_dmul>
 800171a:	4603      	mov	r3, r0
 800171c:	460c      	mov	r4, r1
 800171e:	4625      	mov	r5, r4
 8001720:	461c      	mov	r4, r3
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fec9 	bl	80004bc <__aeabi_i2d>
 800172a:	a3a5      	add	r3, pc, #660	; (adr r3, 80019c0 <SVPWM+0x2f0>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff2e 	bl	8000590 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4690      	mov	r8, r2
 800173a:	4699      	mov	r9, r3
 800173c:	6938      	ldr	r0, [r7, #16]
 800173e:	f7fe fecf 	bl	80004e0 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4640      	mov	r0, r8
 8001748:	4649      	mov	r1, r9
 800174a:	f7fe fd69 	bl	8000220 <__aeabi_dsub>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff f9b5 	bl	8000ac4 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	ee00 3a10 	vmov	s0, r3
 8001760:	f009 fa3a 	bl	800abd8 <arm_sin_f32>
 8001764:	ee10 3a10 	vmov	r3, s0
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe feb9 	bl	80004e0 <__aeabi_f2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7fe ff0b 	bl	8000590 <__aeabi_dmul>
 800177a:	4603      	mov	r3, r0
 800177c:	460c      	mov	r4, r1
 800177e:	4619      	mov	r1, r3
 8001780:	4622      	mov	r2, r4
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1d1c      	adds	r4, r3, #4
 8001786:	4608      	mov	r0, r1
 8001788:	4611      	mov	r1, r2
 800178a:	f7ff f99b 	bl	8000ac4 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	6023      	str	r3, [r4, #0]
	T[2]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((-(sector-1) * 1.047197) +  angle_current_rad) ;
 8001792:	edd7 7a03 	vldr	s15, [r7, #12]
 8001796:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80019c8 <SVPWM+0x2f8>
 800179a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179e:	ee17 0a90 	vmov	r0, s15
 80017a2:	f7fe fe9d 	bl	80004e0 <__aeabi_f2d>
 80017a6:	a382      	add	r3, pc, #520	; (adr r3, 80019b0 <SVPWM+0x2e0>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7ff f81a 	bl	80007e4 <__aeabi_ddiv>
 80017b0:	4603      	mov	r3, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	4618      	mov	r0, r3
 80017b6:	4621      	mov	r1, r4
 80017b8:	a37f      	add	r3, pc, #508	; (adr r3, 80019b8 <SVPWM+0x2e8>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe fee7 	bl	8000590 <__aeabi_dmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	460c      	mov	r4, r1
 80017c6:	4625      	mov	r5, r4
 80017c8:	461c      	mov	r4, r3
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	f1c3 0301 	rsb	r3, r3, #1
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe73 	bl	80004bc <__aeabi_i2d>
 80017d6:	a37a      	add	r3, pc, #488	; (adr r3, 80019c0 <SVPWM+0x2f0>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe fed8 	bl	8000590 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4690      	mov	r8, r2
 80017e6:	4699      	mov	r9, r3
 80017e8:	6938      	ldr	r0, [r7, #16]
 80017ea:	f7fe fe79 	bl	80004e0 <__aeabi_f2d>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4640      	mov	r0, r8
 80017f4:	4649      	mov	r1, r9
 80017f6:	f7fe fd15 	bl	8000224 <__adddf3>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f95f 	bl	8000ac4 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee00 3a10 	vmov	s0, r3
 800180c:	f009 f9e4 	bl	800abd8 <arm_sin_f32>
 8001810:	ee10 3a10 	vmov	r3, s0
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe63 	bl	80004e0 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4620      	mov	r0, r4
 8001820:	4629      	mov	r1, r5
 8001822:	f7fe feb5 	bl	8000590 <__aeabi_dmul>
 8001826:	4603      	mov	r3, r0
 8001828:	460c      	mov	r4, r1
 800182a:	4619      	mov	r1, r3
 800182c:	4622      	mov	r2, r4
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f103 0408 	add.w	r4, r3, #8
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	f7ff f944 	bl	8000ac4 <__aeabi_d2f>
 800183c:	4603      	mov	r3, r0
 800183e:	6023      	str	r3, [r4, #0]
	T[0]=sv_Tz-T[1]-T[2];
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3304      	adds	r3, #4
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80019c8 <SVPWM+0x2f8>
 800184c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	3308      	adds	r3, #8
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	edc3 7a00 	vstr	s15, [r3]

	t1=T[1];
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a59      	ldr	r2, [pc, #356]	; (80019cc <SVPWM+0x2fc>)
 8001868:	6013      	str	r3, [r2, #0]
	t2=T[2];
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <SVPWM+0x300>)
 8001870:	6013      	str	r3, [r2, #0]
	t3=T[0];
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a57      	ldr	r2, [pc, #348]	; (80019d4 <SVPWM+0x304>)
 8001878:	6013      	str	r3, [r2, #0]

	T_gate[0]= (T[0]/2);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	ed93 7a00 	vldr	s14, [r3]
 8001880:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	edc3 7a00 	vstr	s15, [r3]
	T_gate[1]= T[1]+(T_gate[0]);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3304      	adds	r3, #4
 8001892:	ed93 7a00 	vldr	s14, [r3]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3304      	adds	r3, #4
 80018a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a4:	edc3 7a00 	vstr	s15, [r3]
	T_gate[2]= T[2]+(T_gate[0]);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	3308      	adds	r3, #8
 80018ac:	ed93 7a00 	vldr	s14, [r3]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3308      	adds	r3, #8
 80018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018be:	edc3 7a00 	vstr	s15, [r3]
	T_gate[3]= T[1]+T[2]+(T_gate[0]);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3304      	adds	r3, #4
 80018c6:	ed93 7a00 	vldr	s14, [r3]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3308      	adds	r3, #8
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	330c      	adds	r3, #12
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	edc3 7a00 	vstr	s15, [r3]


	if(sector == 1)
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d10c      	bne.n	8001908 <SVPWM+0x238>
	{
		*S1=T_gate[3];
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	601a      	str	r2, [r3, #0]
		*S2=T_gate[2];
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fc:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001904:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
		*S3=T_gate[1];
	}
	else{}

}
 8001906:	e04e      	b.n	80019a6 <SVPWM+0x2d6>
	else if(sector == 2)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d10c      	bne.n	8001928 <SVPWM+0x258>
		*S1=T_gate[1];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001924:	601a      	str	r2, [r3, #0]
}
 8001926:	e03e      	b.n	80019a6 <SVPWM+0x2d6>
	else if(sector == 3)
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d10c      	bne.n	8001948 <SVPWM+0x278>
		*S1=T_gate[0];
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[2];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	e02e      	b.n	80019a6 <SVPWM+0x2d6>
	else if(sector == 4)
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b04      	cmp	r3, #4
 800194c:	d10c      	bne.n	8001968 <SVPWM+0x298>
		*S1=T_gate[0];
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]
		*S2=T_gate[1];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001964:	601a      	str	r2, [r3, #0]
}
 8001966:	e01e      	b.n	80019a6 <SVPWM+0x2d6>
	else if(sector == 5)
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d10c      	bne.n	8001988 <SVPWM+0x2b8>
		*S1=T_gate[2];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	601a      	str	r2, [r3, #0]
}
 8001986:	e00e      	b.n	80019a6 <SVPWM+0x2d6>
	else if(sector == 6)
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	2b06      	cmp	r3, #6
 800198c:	d10b      	bne.n	80019a6 <SVPWM+0x2d6>
		*S1=T_gate[3];
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[1];
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a4:	601a      	str	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b0:	0f9096bc 	.word	0x0f9096bc
 80019b4:	402bb67a 	.word	0x402bb67a
 80019b8:	33333333 	.word	0x33333333
 80019bc:	3feb3333 	.word	0x3feb3333
 80019c0:	a437824d 	.word	0xa437824d
 80019c4:	3ff0c151 	.word	0x3ff0c151
 80019c8:	447a0000 	.word	0x447a0000
 80019cc:	20000284 	.word	0x20000284
 80019d0:	200001dc 	.word	0x200001dc
 80019d4:	20000174 	.word	0x20000174

080019d8 <HAL_ADCEx_InjectedConvCpltCallback>:


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b09f      	sub	sp, #124	; 0x7c
 80019dc:	af02      	add	r7, sp, #8
 80019de:	6078      	str	r0, [r7, #4]
	capture_tim8_ccr2= TIM8->CCR2;
 80019e0:	4b45      	ldr	r3, [pc, #276]	; (8001af8 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 80019e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 80019e6:	6013      	str	r3, [r2, #0]
	if(capture_tim8_ccr2 <= 0)
 80019e8:	4b44      	ldr	r3, [pc, #272]	; (8001afc <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d104      	bne.n	80019fa <HAL_ADCEx_InjectedConvCpltCallback+0x22>
		speed=0;
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e016      	b.n	8001a28 <HAL_ADCEx_InjectedConvCpltCallback+0x50>
	else
		speed=revolution_per_min/capture_tim8_ccr2;
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd4c 	bl	800049c <__aeabi_ui2d>
 8001a04:	4603      	mov	r3, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4623      	mov	r3, r4
 8001a0c:	a138      	add	r1, pc, #224	; (adr r1, 8001af0 <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8001a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a12:	f7fe fee7 	bl	80007e4 <__aeabi_ddiv>
 8001a16:	4603      	mov	r3, r0
 8001a18:	460c      	mov	r4, r1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	f7ff f851 	bl	8000ac4 <__aeabi_d2f>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8001a26:	601a      	str	r2, [r3, #0]


	index_event_adc++;
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	4a35      	ldr	r2, [pc, #212]	; (8001b04 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8001a30:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001a32:	2109      	movs	r1, #9
 8001a34:	4834      	ldr	r0, [pc, #208]	; (8001b08 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8001a36:	f002 fab5 	bl	8003fa4 <HAL_ADCEx_InjectedGetValue>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8001a40:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8001a42:	bf00      	nop
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	f003 0320 	and.w	r3, r3, #32
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f5      	bne.n	8001a44 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001a58:	f240 110f 	movw	r1, #271	; 0x10f
 8001a5c:	482a      	ldr	r0, [pc, #168]	; (8001b08 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8001a5e:	f002 faa1 	bl	8003fa4 <HAL_ADCEx_InjectedGetValue>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8001a68:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8001a6a:	bf00      	nop
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a25      	ldr	r2, [pc, #148]	; (8001b08 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f5      	bne.n	8001a6c <HAL_ADCEx_InjectedConvCpltCallback+0x94>
	adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001a80:	2109      	movs	r1, #9
 8001a82:	4824      	ldr	r0, [pc, #144]	; (8001b14 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 8001a84:	f002 fa8e 	bl	8003fa4 <HAL_ADCEx_InjectedGetValue>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 8001a8e:	601a      	str	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8001a90:	bf00      	nop
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f5      	bne.n	8001a92 <HAL_ADCEx_InjectedConvCpltCallback+0xba>
	//adc_V =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
	//while((hadc2.Instance->ISR &= (0x1<<5))!=0){}

	if(index_event_adc<300)
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001aae:	d20c      	bcs.n	8001aca <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
	{
		Ia=0;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_ADCEx_InjectedConvCpltCallback+0x144>)
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
		Ib=0;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
		Ic=0;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_ADCEx_InjectedConvCpltCallback+0x14c>)
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e2e4      	b.n	8002094 <HAL_ADCEx_InjectedConvCpltCallback+0x6bc>


	}
	else if(index_event_adc == 300)
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ad2:	d12f      	bne.n	8001b34 <HAL_ADCEx_InjectedConvCpltCallback+0x15c>
	{
			   offset1=adc_Ia;
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <HAL_ADCEx_InjectedConvCpltCallback+0x150>)
 8001ada:	6013      	str	r3, [r2, #0]
			   offset2=adc_Ib;
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_ADCEx_InjectedConvCpltCallback+0x154>)
 8001ae2:	6013      	str	r3, [r2, #0]
			   offset3=adc_Ic;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <HAL_ADCEx_InjectedConvCpltCallback+0x158>)
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e2d2      	b.n	8002094 <HAL_ADCEx_InjectedConvCpltCallback+0x6bc>
 8001aee:	bf00      	nop
 8001af0:	aaaaaaab 	.word	0xaaaaaaab
 8001af4:	41359dda 	.word	0x41359dda
 8001af8:	40013400 	.word	0x40013400
 8001afc:	20000170 	.word	0x20000170
 8001b00:	200002b4 	.word	0x200002b4
 8001b04:	200002ac 	.word	0x200002ac
 8001b08:	20000100 	.word	0x20000100
 8001b0c:	20000240 	.word	0x20000240
 8001b10:	200002c4 	.word	0x200002c4
 8001b14:	20000094 	.word	0x20000094
 8001b18:	200001a0 	.word	0x200001a0
 8001b1c:	20000184 	.word	0x20000184
 8001b20:	2000023c 	.word	0x2000023c
 8001b24:	2000028c 	.word	0x2000028c
 8001b28:	20000198 	.word	0x20000198
 8001b2c:	200001e0 	.word	0x200001e0
 8001b30:	200002d8 	.word	0x200002d8
	}
	else
	{
	 //   sum_currents=(adc_Ia-offset1)+(adc_Ic-offset3)+(adc_Ib-offset2);

	    adc_Ia=(adc_Ia-offset1);
 8001b34:	4bb0      	ldr	r3, [pc, #704]	; (8001df8 <HAL_ADCEx_InjectedConvCpltCallback+0x420>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4bb0      	ldr	r3, [pc, #704]	; (8001dfc <HAL_ADCEx_InjectedConvCpltCallback+0x424>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	4aae      	ldr	r2, [pc, #696]	; (8001df8 <HAL_ADCEx_InjectedConvCpltCallback+0x420>)
 8001b40:	6013      	str	r3, [r2, #0]
	    adc_Ib=(adc_Ib-offset2);
 8001b42:	4baf      	ldr	r3, [pc, #700]	; (8001e00 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4baf      	ldr	r3, [pc, #700]	; (8001e04 <HAL_ADCEx_InjectedConvCpltCallback+0x42c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	4aac      	ldr	r2, [pc, #688]	; (8001e00 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8001b4e:	6013      	str	r3, [r2, #0]
	    adc_Ic=(adc_Ic-offset3);
 8001b50:	4bad      	ldr	r3, [pc, #692]	; (8001e08 <HAL_ADCEx_InjectedConvCpltCallback+0x430>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4bad      	ldr	r3, [pc, #692]	; (8001e0c <HAL_ADCEx_InjectedConvCpltCallback+0x434>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	4aab      	ldr	r2, [pc, #684]	; (8001e08 <HAL_ADCEx_InjectedConvCpltCallback+0x430>)
 8001b5c:	6013      	str	r3, [r2, #0]

	    Ia=-adc_Ia/33.0;
 8001b5e:	4ba6      	ldr	r3, [pc, #664]	; (8001df8 <HAL_ADCEx_InjectedConvCpltCallback+0x420>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	425b      	negs	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fca9 	bl	80004bc <__aeabi_i2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4ba8      	ldr	r3, [pc, #672]	; (8001e10 <HAL_ADCEx_InjectedConvCpltCallback+0x438>)
 8001b70:	f7fe fe38 	bl	80007e4 <__aeabi_ddiv>
 8001b74:	4603      	mov	r3, r0
 8001b76:	460c      	mov	r4, r1
 8001b78:	4618      	mov	r0, r3
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	f7fe ffa2 	bl	8000ac4 <__aeabi_d2f>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4ba4      	ldr	r3, [pc, #656]	; (8001e14 <HAL_ADCEx_InjectedConvCpltCallback+0x43c>)
 8001b84:	601a      	str	r2, [r3, #0]
	    Ib=-adc_Ib/33.0;
 8001b86:	4b9e      	ldr	r3, [pc, #632]	; (8001e00 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	425b      	negs	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc95 	bl	80004bc <__aeabi_i2d>
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b9e      	ldr	r3, [pc, #632]	; (8001e10 <HAL_ADCEx_InjectedConvCpltCallback+0x438>)
 8001b98:	f7fe fe24 	bl	80007e4 <__aeabi_ddiv>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	f7fe ff8e 	bl	8000ac4 <__aeabi_d2f>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b9b      	ldr	r3, [pc, #620]	; (8001e18 <HAL_ADCEx_InjectedConvCpltCallback+0x440>)
 8001bac:	601a      	str	r2, [r3, #0]
	    Ic=-adc_Ic/33.0;
 8001bae:	4b96      	ldr	r3, [pc, #600]	; (8001e08 <HAL_ADCEx_InjectedConvCpltCallback+0x430>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc81 	bl	80004bc <__aeabi_i2d>
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	4b94      	ldr	r3, [pc, #592]	; (8001e10 <HAL_ADCEx_InjectedConvCpltCallback+0x438>)
 8001bc0:	f7fe fe10 	bl	80007e4 <__aeabi_ddiv>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f7fe ff7a 	bl	8000ac4 <__aeabi_d2f>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b92      	ldr	r3, [pc, #584]	; (8001e1c <HAL_ADCEx_InjectedConvCpltCallback+0x444>)
 8001bd4:	601a      	str	r2, [r3, #0]

	        arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 8001bd6:	4b8f      	ldr	r3, [pc, #572]	; (8001e14 <HAL_ADCEx_InjectedConvCpltCallback+0x43c>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b8f      	ldr	r3, [pc, #572]	; (8001e18 <HAL_ADCEx_InjectedConvCpltCallback+0x440>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	64ba      	str	r2, [r7, #72]	; 0x48
 8001be0:	647b      	str	r3, [r7, #68]	; 0x44
 8001be2:	4b8f      	ldr	r3, [pc, #572]	; (8001e20 <HAL_ADCEx_InjectedConvCpltCallback+0x448>)
 8001be4:	643b      	str	r3, [r7, #64]	; 0x40
 8001be6:	4b8f      	ldr	r3, [pc, #572]	; (8001e24 <HAL_ADCEx_InjectedConvCpltCallback+0x44c>)
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c
    *pIalpha = Ia;
 8001bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bee:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8001bf0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bf4:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001e28 <HAL_ADCEx_InjectedConvCpltCallback+0x450>
 8001bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bfc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c00:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8001e2c <HAL_ADCEx_InjectedConvCpltCallback+0x454>
 8001c04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
	    	angle_rotor_deg=TIM4->CCR1;
 8001c12:	4b87      	ldr	r3, [pc, #540]	; (8001e30 <HAL_ADCEx_InjectedConvCpltCallback+0x458>)
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1e:	4b85      	ldr	r3, [pc, #532]	; (8001e34 <HAL_ADCEx_InjectedConvCpltCallback+0x45c>)
 8001c20:	edc3 7a00 	vstr	s15, [r3]
	    	arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);
 8001c24:	4b83      	ldr	r3, [pc, #524]	; (8001e34 <HAL_ADCEx_InjectedConvCpltCallback+0x45c>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	4983      	ldr	r1, [pc, #524]	; (8001e38 <HAL_ADCEx_InjectedConvCpltCallback+0x460>)
 8001c2c:	4883      	ldr	r0, [pc, #524]	; (8001e3c <HAL_ADCEx_InjectedConvCpltCallback+0x464>)
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	f008 fe57 	bl	800a8e4 <arm_sin_cos_f32>
	    	arm_park_f32(Ialpha, Ibeta, &Id, &Iq, pSinVal, pCosVal);
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <HAL_ADCEx_InjectedConvCpltCallback+0x448>)
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	4b7a      	ldr	r3, [pc, #488]	; (8001e24 <HAL_ADCEx_InjectedConvCpltCallback+0x44c>)
 8001c3c:	6819      	ldr	r1, [r3, #0]
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <HAL_ADCEx_InjectedConvCpltCallback+0x464>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b7d      	ldr	r3, [pc, #500]	; (8001e38 <HAL_ADCEx_InjectedConvCpltCallback+0x460>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6638      	str	r0, [r7, #96]	; 0x60
 8001c48:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001c4a:	497d      	ldr	r1, [pc, #500]	; (8001e40 <HAL_ADCEx_InjectedConvCpltCallback+0x468>)
 8001c4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c4e:	497d      	ldr	r1, [pc, #500]	; (8001e44 <HAL_ADCEx_InjectedConvCpltCallback+0x46c>)
 8001c50:	6579      	str	r1, [r7, #84]	; 0x54
 8001c52:	653a      	str	r2, [r7, #80]	; 0x50
 8001c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8001c56:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001c5a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c62:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001c66:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c74:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8001c78:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001c7c:	eeb1 7a67 	vneg.f32	s14, s15
 8001c80:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c88:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001c8c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	edc3 7a00 	vstr	s15, [r3]


	    	// pid speed
	    						e_speed=set_speed-speed;
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_ADCEx_InjectedConvCpltCallback+0x470>)
 8001ca0:	ed93 7a00 	vldr	s14, [r3]
 8001ca4:	4b69      	ldr	r3, [pc, #420]	; (8001e4c <HAL_ADCEx_InjectedConvCpltCallback+0x474>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cae:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_ADCEx_InjectedConvCpltCallback+0x478>)
 8001cb0:	edc3 7a00 	vstr	s15, [r3]
	    						iq_speed_prev=pid_iq_speed.state[2];
 8001cb4:	4b67      	ldr	r3, [pc, #412]	; (8001e54 <HAL_ADCEx_InjectedConvCpltCallback+0x47c>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	4a67      	ldr	r2, [pc, #412]	; (8001e58 <HAL_ADCEx_InjectedConvCpltCallback+0x480>)
 8001cba:	6013      	str	r3, [r2, #0]
	    						iq_speed=arm_pid_f32(&pid_iq_speed, e_speed);
 8001cbc:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_ADCEx_InjectedConvCpltCallback+0x478>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a64      	ldr	r2, [pc, #400]	; (8001e54 <HAL_ADCEx_InjectedConvCpltCallback+0x47c>)
 8001cc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001cc4:	66bb      	str	r3, [r7, #104]	; 0x68
    out = (S->A0 * in) +
 8001cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc8:	ed93 7a00 	vldr	s14, [r3]
 8001ccc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cea:	edd3 6a02 	vldr	s13, [r3, #8]
 8001cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cfe:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    S->state[1] = S->state[0];
 8001d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d10:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d16:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d1c:	615a      	str	r2, [r3, #20]
    return (out);
 8001d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d20:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 8001d22:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(iq_speed>=current_limit_max_iq)
 8001d24:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	db07      	blt.n	8001d48 <HAL_ADCEx_InjectedConvCpltCallback+0x370>
	    						{
	    							pid_iq_speed.state[2]=iq_speed_prev;
 8001d38:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_ADCEx_InjectedConvCpltCallback+0x480>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a45      	ldr	r2, [pc, #276]	; (8001e54 <HAL_ADCEx_InjectedConvCpltCallback+0x47c>)
 8001d3e:	6153      	str	r3, [r2, #20]
	    							iq_speed=current_limit_max_iq;
 8001d40:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 8001d42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d46:	601a      	str	r2, [r3, #0]
	    						}

	    						if(iq_speed<=current_limit_min_iq)
 8001d48:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbc7 	bl	80004e0 <__aeabi_f2d>
 8001d52:	a327      	add	r3, pc, #156	; (adr r3, 8001df0 <HAL_ADCEx_InjectedConvCpltCallback+0x418>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fe96 	bl	8000a88 <__aeabi_dcmple>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_ADCEx_InjectedConvCpltCallback+0x398>
	    						{
	    							pid_iq_speed.state[2]=iq_speed_prev;
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_ADCEx_InjectedConvCpltCallback+0x480>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a3b      	ldr	r2, [pc, #236]	; (8001e54 <HAL_ADCEx_InjectedConvCpltCallback+0x47c>)
 8001d68:	6153      	str	r3, [r2, #20]
	    							iq_speed=current_limit_min_iq;
 8001d6a:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 8001d6c:	4a3c      	ldr	r2, [pc, #240]	; (8001e60 <HAL_ADCEx_InjectedConvCpltCallback+0x488>)
 8001d6e:	601a      	str	r2, [r3, #0]
	    						}



	    	// pid dla osi d
	    						ed=set_d-Id;
 8001d70:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_ADCEx_InjectedConvCpltCallback+0x48c>)
 8001d72:	ed93 7a00 	vldr	s14, [r3]
 8001d76:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_ADCEx_InjectedConvCpltCallback+0x468>)
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_ADCEx_InjectedConvCpltCallback+0x490>)
 8001d82:	edc3 7a00 	vstr	s15, [r3]
	    						Vd_prev=pid_d.state[2];
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_ADCEx_InjectedConvCpltCallback+0x494>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4a39      	ldr	r2, [pc, #228]	; (8001e70 <HAL_ADCEx_InjectedConvCpltCallback+0x498>)
 8001d8c:	6013      	str	r3, [r2, #0]
	    						Vd=arm_pid_f32(&pid_d, ed);
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_ADCEx_InjectedConvCpltCallback+0x490>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a36      	ldr	r2, [pc, #216]	; (8001e6c <HAL_ADCEx_InjectedConvCpltCallback+0x494>)
 8001d94:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
    out = (S->A0 * in) +
 8001d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d9a:	ed93 7a00 	vldr	s14, [r3]
 8001d9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001da2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da8:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dae:	edd3 7a03 	vldr	s15, [r3, #12]
 8001db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001db6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    S->state[1] = S->state[0];
 8001ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001de8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dee:	e041      	b.n	8001e74 <HAL_ADCEx_InjectedConvCpltCallback+0x49c>
 8001df0:	9999999a 	.word	0x9999999a
 8001df4:	3fc99999 	.word	0x3fc99999
 8001df8:	20000240 	.word	0x20000240
 8001dfc:	20000198 	.word	0x20000198
 8001e00:	200001a0 	.word	0x200001a0
 8001e04:	200001e0 	.word	0x200001e0
 8001e08:	200002c4 	.word	0x200002c4
 8001e0c:	200002d8 	.word	0x200002d8
 8001e10:	40408000 	.word	0x40408000
 8001e14:	20000184 	.word	0x20000184
 8001e18:	2000023c 	.word	0x2000023c
 8001e1c:	2000028c 	.word	0x2000028c
 8001e20:	20000288 	.word	0x20000288
 8001e24:	2000027c 	.word	0x2000027c
 8001e28:	3f13cd3a 	.word	0x3f13cd3a
 8001e2c:	3f93cd3a 	.word	0x3f93cd3a
 8001e30:	40000800 	.word	0x40000800
 8001e34:	20000180 	.word	0x20000180
 8001e38:	200002e4 	.word	0x200002e4
 8001e3c:	20000228 	.word	0x20000228
 8001e40:	200001e4 	.word	0x200001e4
 8001e44:	200002a0 	.word	0x200002a0
 8001e48:	200002cc 	.word	0x200002cc
 8001e4c:	200002b4 	.word	0x200002b4
 8001e50:	200002bc 	.word	0x200002bc
 8001e54:	200001ec 	.word	0x200001ec
 8001e58:	200001d8 	.word	0x200001d8
 8001e5c:	200002ec 	.word	0x200002ec
 8001e60:	3e4ccccd 	.word	0x3e4ccccd
 8001e64:	200001a4 	.word	0x200001a4
 8001e68:	200002a4 	.word	0x200002a4
 8001e6c:	200001a8 	.word	0x200001a8
 8001e70:	20000220 	.word	0x20000220
 8001e74:	615a      	str	r2, [r3, #20]
    return (out);
 8001e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e78:	4a8f      	ldr	r2, [pc, #572]	; (80020b8 <HAL_ADCEx_InjectedConvCpltCallback+0x6e0>)
 8001e7a:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(Vd>=sv_Vdc_limit)
 8001e7c:	4b8e      	ldr	r3, [pc, #568]	; (80020b8 <HAL_ADCEx_InjectedConvCpltCallback+0x6e0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb2d 	bl	80004e0 <__aeabi_f2d>
 8001e86:	a388      	add	r3, pc, #544	; (adr r3, 80020a8 <HAL_ADCEx_InjectedConvCpltCallback+0x6d0>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fe06 	bl	8000a9c <__aeabi_dcmpge>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_ADCEx_InjectedConvCpltCallback+0x4cc>
	    						{
	    							pid_d.state[2]=Vd_prev;
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_ADCEx_InjectedConvCpltCallback+0x6e4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a89      	ldr	r2, [pc, #548]	; (80020c0 <HAL_ADCEx_InjectedConvCpltCallback+0x6e8>)
 8001e9c:	6153      	str	r3, [r2, #20]
	    							Vd=sv_Vdc_limit;
 8001e9e:	4b86      	ldr	r3, [pc, #536]	; (80020b8 <HAL_ADCEx_InjectedConvCpltCallback+0x6e0>)
 8001ea0:	4a88      	ldr	r2, [pc, #544]	; (80020c4 <HAL_ADCEx_InjectedConvCpltCallback+0x6ec>)
 8001ea2:	601a      	str	r2, [r3, #0]
	    						}

	    						if(Vd<=(-sv_Vdc_limit))
 8001ea4:	4b84      	ldr	r3, [pc, #528]	; (80020b8 <HAL_ADCEx_InjectedConvCpltCallback+0x6e0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb19 	bl	80004e0 <__aeabi_f2d>
 8001eae:	a380      	add	r3, pc, #512	; (adr r3, 80020b0 <HAL_ADCEx_InjectedConvCpltCallback+0x6d8>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fde8 	bl	8000a88 <__aeabi_dcmple>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <HAL_ADCEx_InjectedConvCpltCallback+0x4f4>
	    						{
	    							pid_d.state[2]=Vd_prev;
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_ADCEx_InjectedConvCpltCallback+0x6e4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7f      	ldr	r2, [pc, #508]	; (80020c0 <HAL_ADCEx_InjectedConvCpltCallback+0x6e8>)
 8001ec4:	6153      	str	r3, [r2, #20]
	    							Vd=(-sv_Vdc_limit);
 8001ec6:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_ADCEx_InjectedConvCpltCallback+0x6e0>)
 8001ec8:	4a7f      	ldr	r2, [pc, #508]	; (80020c8 <HAL_ADCEx_InjectedConvCpltCallback+0x6f0>)
 8001eca:	601a      	str	r2, [r3, #0]
	    						}

	    	// pid dla osi q
	    						//eq=set_q-Iq;
	    						eq=iq_speed-Iq;
 8001ecc:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_ADCEx_InjectedConvCpltCallback+0x6f4>)
 8001ece:	ed93 7a00 	vldr	s14, [r3]
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <HAL_ADCEx_InjectedConvCpltCallback+0x6f8>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001edc:	4b7d      	ldr	r3, [pc, #500]	; (80020d4 <HAL_ADCEx_InjectedConvCpltCallback+0x6fc>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]
	    						Vq_prev=pid_q.state[2];
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	; (80020d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4a7d      	ldr	r2, [pc, #500]	; (80020dc <HAL_ADCEx_InjectedConvCpltCallback+0x704>)
 8001ee8:	6013      	str	r3, [r2, #0]
	    						Vq=arm_pid_f32(&pid_q, eq);
 8001eea:	4b7a      	ldr	r3, [pc, #488]	; (80020d4 <HAL_ADCEx_InjectedConvCpltCallback+0x6fc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7a      	ldr	r2, [pc, #488]	; (80020d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 8001ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    out = (S->A0 * in) +
 8001ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef6:	ed93 7a00 	vldr	s14, [r3]
 8001efa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001efe:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f04:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001f12:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    S->state[1] = S->state[0];
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f44:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4a:	615a      	str	r2, [r3, #20]
    return (out);
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	4a64      	ldr	r2, [pc, #400]	; (80020e0 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 8001f50:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(Vq>=sv_Vdc_limit)
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fac2 	bl	80004e0 <__aeabi_f2d>
 8001f5c:	a352      	add	r3, pc, #328	; (adr r3, 80020a8 <HAL_ADCEx_InjectedConvCpltCallback+0x6d0>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe fd9b 	bl	8000a9c <__aeabi_dcmpge>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_ADCEx_InjectedConvCpltCallback+0x5a2>
	    						{
	    						pid_q.state[2]=Vq_prev;
 8001f6c:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_ADCEx_InjectedConvCpltCallback+0x704>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a59      	ldr	r2, [pc, #356]	; (80020d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 8001f72:	6153      	str	r3, [r2, #20]
	    						Vq=sv_Vdc_limit;
 8001f74:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 8001f76:	4a53      	ldr	r2, [pc, #332]	; (80020c4 <HAL_ADCEx_InjectedConvCpltCallback+0x6ec>)
 8001f78:	601a      	str	r2, [r3, #0]
	    						}

	    						if(Vq<=(-sv_Vdc_limit))
 8001f7a:	4b59      	ldr	r3, [pc, #356]	; (80020e0 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe faae 	bl	80004e0 <__aeabi_f2d>
 8001f84:	a34a      	add	r3, pc, #296	; (adr r3, 80020b0 <HAL_ADCEx_InjectedConvCpltCallback+0x6d8>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe fd7d 	bl	8000a88 <__aeabi_dcmple>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_ADCEx_InjectedConvCpltCallback+0x5ca>
	    						{
	    						pid_q.state[2]=Vq_prev;
 8001f94:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_ADCEx_InjectedConvCpltCallback+0x704>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a4f      	ldr	r2, [pc, #316]	; (80020d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 8001f9a:	6153      	str	r3, [r2, #20]
	    						Vq=(-sv_Vdc_limit);
 8001f9c:	4b50      	ldr	r3, [pc, #320]	; (80020e0 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 8001f9e:	4a4a      	ldr	r2, [pc, #296]	; (80020c8 <HAL_ADCEx_InjectedConvCpltCallback+0x6f0>)
 8001fa0:	601a      	str	r2, [r3, #0]
	    						}

	    	//angle_rotor_deg=TIM4->CCR1;
	    	//arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);
	    	arm_inv_park_f32(Vd, Vq, &Valpha, &Vbeta, pSinVal, pCosVal);
 8001fa2:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <HAL_ADCEx_InjectedConvCpltCallback+0x6e0>)
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	4b4e      	ldr	r3, [pc, #312]	; (80020e0 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	4b4e      	ldr	r3, [pc, #312]	; (80020e4 <HAL_ADCEx_InjectedConvCpltCallback+0x70c>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <HAL_ADCEx_InjectedConvCpltCallback+0x710>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6238      	str	r0, [r7, #32]
 8001fb4:	61f9      	str	r1, [r7, #28]
 8001fb6:	494d      	ldr	r1, [pc, #308]	; (80020ec <HAL_ADCEx_InjectedConvCpltCallback+0x714>)
 8001fb8:	61b9      	str	r1, [r7, #24]
 8001fba:	494d      	ldr	r1, [pc, #308]	; (80020f0 <HAL_ADCEx_InjectedConvCpltCallback+0x718>)
 8001fbc:	6179      	str	r1, [r7, #20]
 8001fbe:	613a      	str	r2, [r7, #16]
 8001fc0:	60fb      	str	r3, [r7, #12]
    *pIalpha = Id * cosVal - Iq * sinVal;
 8001fc2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fce:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	edc3 7a00 	vstr	s15, [r3]
    *pIbeta = Id * sinVal + Iq * cosVal;
 8001fe4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fe8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	edc3 7a00 	vstr	s15, [r3]

	    	AlphaBeta_To_Angle_Vref(Valpha, Vbeta, &angle_current_rad, &Vref);
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_ADCEx_InjectedConvCpltCallback+0x714>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <HAL_ADCEx_InjectedConvCpltCallback+0x718>)
 800200e:	ed93 7a00 	vldr	s14, [r3]
 8002012:	4938      	ldr	r1, [pc, #224]	; (80020f4 <HAL_ADCEx_InjectedConvCpltCallback+0x71c>)
 8002014:	4838      	ldr	r0, [pc, #224]	; (80020f8 <HAL_ADCEx_InjectedConvCpltCallback+0x720>)
 8002016:	eef0 0a47 	vmov.f32	s1, s14
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	f7ff fa47 	bl	80014b0 <AlphaBeta_To_Angle_Vref>
	    	Angle_To_Sector(angle_current_rad, &sector);
 8002022:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_ADCEx_InjectedConvCpltCallback+0x720>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	4834      	ldr	r0, [pc, #208]	; (80020fc <HAL_ADCEx_InjectedConvCpltCallback+0x724>)
 800202a:	eeb0 0a67 	vmov.f32	s0, s15
 800202e:	f7ff fa97 	bl	8001560 <Angle_To_Sector>
	    	SVPWM(sector, angle_current_rad , Vref, sv_T, sv_T_gate, &sv_S1, &sv_S2, &sv_S3);
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_ADCEx_InjectedConvCpltCallback+0x724>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2d8      	uxtb	r0, r3
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_ADCEx_InjectedConvCpltCallback+0x720>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_ADCEx_InjectedConvCpltCallback+0x71c>)
 8002040:	ed93 7a00 	vldr	s14, [r3]
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_ADCEx_InjectedConvCpltCallback+0x728>)
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <HAL_ADCEx_InjectedConvCpltCallback+0x72c>)
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_ADCEx_InjectedConvCpltCallback+0x730>)
 800204e:	4a2f      	ldr	r2, [pc, #188]	; (800210c <HAL_ADCEx_InjectedConvCpltCallback+0x734>)
 8002050:	492f      	ldr	r1, [pc, #188]	; (8002110 <HAL_ADCEx_InjectedConvCpltCallback+0x738>)
 8002052:	eef0 0a47 	vmov.f32	s1, s14
 8002056:	eeb0 0a67 	vmov.f32	s0, s15
 800205a:	f7ff fb39 	bl	80016d0 <SVPWM>

	    	TIM1->CCR1 = sv_S1;
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_ADCEx_InjectedConvCpltCallback+0x730>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_ADCEx_InjectedConvCpltCallback+0x73c>)
 8002066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206a:	ee17 2a90 	vmov	r2, s15
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
	    	TIM1->CCR2 = sv_S2;
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_ADCEx_InjectedConvCpltCallback+0x72c>)
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_ADCEx_InjectedConvCpltCallback+0x73c>)
 8002078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800207c:	ee17 2a90 	vmov	r2, s15
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
	    	TIM1->CCR3 = sv_S3;
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_ADCEx_InjectedConvCpltCallback+0x728>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_ADCEx_InjectedConvCpltCallback+0x73c>)
 800208a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208e:	ee17 2a90 	vmov	r2, s15
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002094:	4820      	ldr	r0, [pc, #128]	; (8002118 <HAL_ADCEx_InjectedConvCpltCallback+0x740>)
 8002096:	f001 fe9f 	bl	8003dd8 <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 800209a:	4820      	ldr	r0, [pc, #128]	; (800211c <HAL_ADCEx_InjectedConvCpltCallback+0x744>)
 800209c:	f001 fe9c 	bl	8003dd8 <HAL_ADCEx_InjectedStart_IT>
}
 80020a0:	bf00      	nop
 80020a2:	3774      	adds	r7, #116	; 0x74
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd90      	pop	{r4, r7, pc}
 80020a8:	0f9096bc 	.word	0x0f9096bc
 80020ac:	402bb67a 	.word	0x402bb67a
 80020b0:	0f9096bc 	.word	0x0f9096bc
 80020b4:	c02bb67a 	.word	0xc02bb67a
 80020b8:	200001d0 	.word	0x200001d0
 80020bc:	20000220 	.word	0x20000220
 80020c0:	200001a8 	.word	0x200001a8
 80020c4:	415db3d0 	.word	0x415db3d0
 80020c8:	c15db3d0 	.word	0xc15db3d0
 80020cc:	200002ec 	.word	0x200002ec
 80020d0:	200002a0 	.word	0x200002a0
 80020d4:	200001cc 	.word	0x200001cc
 80020d8:	2000024c 	.word	0x2000024c
 80020dc:	2000022c 	.word	0x2000022c
 80020e0:	200001e8 	.word	0x200001e8
 80020e4:	20000228 	.word	0x20000228
 80020e8:	200002e4 	.word	0x200002e4
 80020ec:	200002dc 	.word	0x200002dc
 80020f0:	20000248 	.word	0x20000248
 80020f4:	20000274 	.word	0x20000274
 80020f8:	20000238 	.word	0x20000238
 80020fc:	20000244 	.word	0x20000244
 8002100:	2000019c 	.word	0x2000019c
 8002104:	200001d4 	.word	0x200001d4
 8002108:	2000021c 	.word	0x2000021c
 800210c:	20000188 	.word	0x20000188
 8002110:	20000210 	.word	0x20000210
 8002114:	40012c00 	.word	0x40012c00
 8002118:	20000100 	.word	0x20000100
 800211c:	20000094 	.word	0x20000094

08002120 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002130:	d144      	bne.n	80021bc <HAL_GPIO_EXTI_Callback+0x9c>
	{
		if(start==0)
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d11b      	bne.n	8002174 <HAL_GPIO_EXTI_Callback+0x54>
		{
			start=1;
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002142:	2100      	movs	r1, #0
 8002144:	4820      	ldr	r0, [pc, #128]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002146:	f004 fc05 	bl	8006954 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800214a:	2100      	movs	r1, #0
 800214c:	481e      	ldr	r0, [pc, #120]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800214e:	f006 f89b 	bl	8008288 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002152:	2104      	movs	r1, #4
 8002154:	481c      	ldr	r0, [pc, #112]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002156:	f004 fbfd 	bl	8006954 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800215a:	2104      	movs	r1, #4
 800215c:	481a      	ldr	r0, [pc, #104]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800215e:	f006 f893 	bl	8008288 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002162:	2108      	movs	r1, #8
 8002164:	4818      	ldr	r0, [pc, #96]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002166:	f004 fbf5 	bl	8006954 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800216a:	2108      	movs	r1, #8
 800216c:	4816      	ldr	r0, [pc, #88]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800216e:	f006 f88b 	bl	8008288 <HAL_TIMEx_PWMN_Start>
			TIM1->CCR1=0;
			TIM1->CCR2=0;
			TIM1->CCR3=0;
		}
	}
}
 8002172:	e023      	b.n	80021bc <HAL_GPIO_EXTI_Callback+0x9c>
			start=0;
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800217a:	2100      	movs	r1, #0
 800217c:	4812      	ldr	r0, [pc, #72]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800217e:	f004 fcbb 	bl	8006af8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002182:	2100      	movs	r1, #0
 8002184:	4810      	ldr	r0, [pc, #64]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002186:	f006 f8ff 	bl	8008388 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800218a:	2104      	movs	r1, #4
 800218c:	480e      	ldr	r0, [pc, #56]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800218e:	f004 fcb3 	bl	8006af8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002192:	2104      	movs	r1, #4
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002196:	f006 f8f7 	bl	8008388 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800219a:	2108      	movs	r1, #8
 800219c:	480a      	ldr	r0, [pc, #40]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800219e:	f004 fcab 	bl	8006af8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80021a2:	2108      	movs	r1, #8
 80021a4:	4808      	ldr	r0, [pc, #32]	; (80021c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 80021a6:	f006 f8ef 	bl	8008388 <HAL_TIMEx_PWMN_Stop>
			TIM1->CCR1=0;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_GPIO_EXTI_Callback+0xac>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_GPIO_EXTI_Callback+0xac>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_GPIO_EXTI_Callback+0xac>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200002d4 	.word	0x200002d4
 80021c8:	2000043c 	.word	0x2000043c
 80021cc:	40012c00 	.word	0x40012c00

080021d0 <HAL_UART_RxCpltCallback>:
	}

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
	{
		//HAL_UART_Receive_IT(&huart2, &recive, 1);

	}
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e8:	f000 fde1 	bl	8002dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ec:	f000 f817 	bl	800221e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f0:	f7fe fff4 	bl	80011dc <MX_GPIO_Init>
  MX_TIM1_Init();
 80021f4:	f000 fa18 	bl	8002628 <MX_TIM1_Init>
  MX_TIM4_Init();
 80021f8:	f000 faf6 	bl	80027e8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80021fc:	f000 fd16 	bl	8002c2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002200:	f7fe fe30 	bl	8000e64 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002204:	f7fe feca 	bl	8000f9c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8002208:	f000 f876 	bl	80022f8 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 800220c:	f000 f8a2 	bl	8002354 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8002210:	f000 f8ce 	bl	80023b0 <MX_OPAMP3_Init>
  MX_TIM8_Init();
 8002214:	f000 fb40 	bl	8002898 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

    start_up();
 8002218:	f7ff f84c 	bl	80012b4 <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800221c:	e7fe      	b.n	800221c <main+0x38>

0800221e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b0a4      	sub	sp, #144	; 0x90
 8002222:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002224:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002228:	2238      	movs	r2, #56	; 0x38
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f008 fd89 	bl	800ad44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002232:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002242:	463b      	mov	r3, r7
 8002244:	2244      	movs	r2, #68	; 0x44
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f008 fd7b 	bl	800ad44 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800224e:	2000      	movs	r0, #0
 8002250:	f003 fb00 	bl	8005854 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002254:	2301      	movs	r3, #1
 8002256:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225e:	2302      	movs	r3, #2
 8002260:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002262:	2303      	movs	r3, #3
 8002264:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002266:	2302      	movs	r3, #2
 8002268:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800226a:	2355      	movs	r3, #85	; 0x55
 800226c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002270:	2302      	movs	r3, #2
 8002272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800227c:	2302      	movs	r3, #2
 800227e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002282:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fb88 	bl	800599c <HAL_RCC_OscConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002292:	f000 f82a 	bl	80022ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002296:	230f      	movs	r3, #15
 8002298:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229a:	2303      	movs	r3, #3
 800229c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80022aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022ae:	2108      	movs	r1, #8
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fe8b 	bl	8005fcc <HAL_RCC_ClockConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80022bc:	f000 f815 	bl	80022ea <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80022c0:	f248 0302 	movw	r3, #32770	; 0x8002
 80022c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d0:	463b      	mov	r3, r7
 80022d2:	4618      	mov	r0, r3
 80022d4:	f004 f896 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80022de:	f000 f804 	bl	80022ea <Error_Handler>
  }
}
 80022e2:	bf00      	nop
 80022e4:	3790      	adds	r7, #144	; 0x90
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <MX_OPAMP1_Init+0x54>)
 80022fe:	4a14      	ldr	r2, [pc, #80]	; (8002350 <MX_OPAMP1_Init+0x58>)
 8002300:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_OPAMP1_Init+0x54>)
 8002304:	2200      	movs	r2, #0
 8002306:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_OPAMP1_Init+0x54>)
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_OPAMP1_Init+0x54>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <MX_OPAMP1_Init+0x54>)
 8002316:	2200      	movs	r2, #0
 8002318:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_OPAMP1_Init+0x54>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MX_OPAMP1_Init+0x54>)
 8002322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_OPAMP1_Init+0x54>)
 800232a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_OPAMP1_Init+0x54>)
 8002332:	2200      	movs	r2, #0
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_OPAMP1_Init+0x54>)
 8002338:	f002 fe96 	bl	8005068 <HAL_OPAMP_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8002342:	f7ff ffd2 	bl	80022ea <Error_Handler>
  }

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000368 	.word	0x20000368
 8002350:	40010300 	.word	0x40010300

08002354 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 800235a:	4a14      	ldr	r2, [pc, #80]	; (80023ac <MX_OPAMP2_Init+0x58>)
 800235c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 8002372:	2200      	movs	r2, #0
 8002374:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 800237e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002382:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 8002386:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 800238e:	2200      	movs	r2, #0
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_OPAMP2_Init+0x54>)
 8002394:	f002 fe68 	bl	8005068 <HAL_OPAMP_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 800239e:	f7ff ffa4 	bl	80022ea <Error_Handler>
  }

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200002f0 	.word	0x200002f0
 80023ac:	40010304 	.word	0x40010304

080023b0 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023b6:	4a14      	ldr	r2, [pc, #80]	; (8002408 <MX_OPAMP3_Init+0x58>)
 80023b8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023e2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_OPAMP3_Init+0x54>)
 80023f0:	f002 fe3a 	bl	8005068 <HAL_OPAMP_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 80023fa:	f7ff ff76 	bl	80022ea <Error_Handler>
  }

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000032c 	.word	0x2000032c
 8002408:	40010308 	.word	0x40010308

0800240c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2e      	ldr	r2, [pc, #184]	; (80024e4 <HAL_OPAMP_MspInit+0xd8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d119      	bne.n	8002462 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_OPAMP_MspInit+0xdc>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	4a2d      	ldr	r2, [pc, #180]	; (80024e8 <HAL_OPAMP_MspInit+0xdc>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_OPAMP_MspInit+0xdc>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002446:	230e      	movs	r3, #14
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244a:	2303      	movs	r3, #3
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245c:	f002 fc6a 	bl	8004d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8002460:	e03b      	b.n	80024da <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_OPAMP_MspInit+0xe0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d119      	bne.n	80024a0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_OPAMP_MspInit+0xdc>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <HAL_OPAMP_MspInit+0xdc>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_OPAMP_MspInit+0xdc>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002484:	23e0      	movs	r3, #224	; 0xe0
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002488:	2303      	movs	r3, #3
 800248a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800249a:	f002 fc4b 	bl	8004d34 <HAL_GPIO_Init>
}
 800249e:	e01c      	b.n	80024da <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <HAL_OPAMP_MspInit+0xe4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d117      	bne.n	80024da <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_OPAMP_MspInit+0xdc>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <HAL_OPAMP_MspInit+0xdc>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_OPAMP_MspInit+0xdc>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80024c2:	2307      	movs	r3, #7
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c6:	2303      	movs	r3, #3
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	4807      	ldr	r0, [pc, #28]	; (80024f4 <HAL_OPAMP_MspInit+0xe8>)
 80024d6:	f002 fc2d 	bl	8004d34 <HAL_GPIO_Init>
}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40010300 	.word	0x40010300
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010304 	.word	0x40010304
 80024f0:	40010308 	.word	0x40010308
 80024f4:	48000400 	.word	0x48000400

080024f8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002506:	6093      	str	r3, [r2, #8]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40007000 	.word	0x40007000

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_MspInit+0x44>)
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <HAL_MspInit+0x44>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6613      	str	r3, [r2, #96]	; 0x60
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_MspInit+0x44>)
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_MspInit+0x44>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_MspInit+0x44>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_MspInit+0x44>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800254e:	f7ff ffd3 	bl	80024f8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000

08002560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <HardFault_Handler+0x4>

08002574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <MemManage_Handler+0x4>

0800257a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <BusFault_Handler+0x4>

08002580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <UsageFault_Handler+0x4>

08002586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b4:	f000 fc4e 	bl	8002e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}

080025bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025c0:	4803      	ldr	r0, [pc, #12]	; (80025d0 <ADC1_2_IRQHandler+0x14>)
 80025c2:	f000 ff27 	bl	8003414 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80025c6:	4803      	ldr	r0, [pc, #12]	; (80025d4 <ADC1_2_IRQHandler+0x18>)
 80025c8:	f000 ff24 	bl	8003414 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000100 	.word	0x20000100
 80025d4:	20000094 	.word	0x20000094

080025d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <USART2_IRQHandler+0x10>)
 80025de:	f006 f9a1 	bl	8008924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000488 	.word	0x20000488

080025ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80025f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025f4:	f002 fd20 	bl	8005038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}

080025fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <SystemInit+0x28>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <SystemInit+0x28>)
 8002608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800260c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SystemInit+0x28>)
 8002612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002616:	609a      	str	r2, [r3, #8]
#endif
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b09c      	sub	sp, #112	; 0x70
 800262c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002648:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
 8002658:	615a      	str	r2, [r3, #20]
 800265a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2234      	movs	r2, #52	; 0x34
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f008 fb6e 	bl	800ad44 <memset>

  htim1.Instance = TIM1;
 8002668:	4b5d      	ldr	r3, [pc, #372]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 800266a:	4a5e      	ldr	r2, [pc, #376]	; (80027e4 <MX_TIM1_Init+0x1bc>)
 800266c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800266e:	4b5c      	ldr	r3, [pc, #368]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002674:	4b5a      	ldr	r3, [pc, #360]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 8002676:	2220      	movs	r2, #32
 8002678:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800267a:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002680:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002686:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268c:	4b54      	ldr	r3, [pc, #336]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002692:	4853      	ldr	r0, [pc, #332]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 8002694:	f004 f8a6 	bl	80067e4 <HAL_TIM_Base_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800269e:	f7ff fe24 	bl	80022ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026ac:	4619      	mov	r1, r3
 80026ae:	484c      	ldr	r0, [pc, #304]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 80026b0:	f004 feb4 	bl	800741c <HAL_TIM_ConfigClockSource>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80026ba:	f7ff fe16 	bl	80022ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026be:	4848      	ldr	r0, [pc, #288]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 80026c0:	f004 f8e7 	bl	8006892 <HAL_TIM_PWM_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80026ca:	f7ff fe0e 	bl	80022ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80026ce:	2370      	movs	r3, #112	; 0x70
 80026d0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026de:	4619      	mov	r1, r3
 80026e0:	483f      	ldr	r0, [pc, #252]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 80026e2:	f005 feaf 	bl	8008444 <HAL_TIMEx_MasterConfigSynchronization>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80026ec:	f7ff fdfd 	bl	80022ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f0:	2360      	movs	r3, #96	; 0x60
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f8:	2300      	movs	r3, #0
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026fc:	2300      	movs	r3, #0
 80026fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002704:	2300      	movs	r3, #0
 8002706:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002708:	2300      	movs	r3, #0
 800270a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800270c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002710:	2200      	movs	r2, #0
 8002712:	4619      	mov	r1, r3
 8002714:	4832      	ldr	r0, [pc, #200]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 8002716:	f004 fd71 	bl	80071fc <HAL_TIM_PWM_ConfigChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002720:	f7ff fde3 	bl	80022ea <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800272c:	2204      	movs	r2, #4
 800272e:	4619      	mov	r1, r3
 8002730:	482b      	ldr	r0, [pc, #172]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 8002732:	f004 fd63 	bl	80071fc <HAL_TIM_PWM_ConfigChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800273c:	f7ff fdd5 	bl	80022ea <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002744:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002748:	2208      	movs	r2, #8
 800274a:	4619      	mov	r1, r3
 800274c:	4824      	ldr	r0, [pc, #144]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 800274e:	f004 fd55 	bl	80071fc <HAL_TIM_PWM_ConfigChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8002758:	f7ff fdc7 	bl	80022ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800275c:	2370      	movs	r3, #112	; 0x70
 800275e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002764:	2300      	movs	r3, #0
 8002766:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002768:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800276c:	220c      	movs	r2, #12
 800276e:	4619      	mov	r1, r3
 8002770:	481b      	ldr	r0, [pc, #108]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 8002772:	f004 fd43 	bl	80071fc <HAL_TIM_PWM_ConfigChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 800277c:	f7ff fdb5 	bl	80022ea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8002790:	2344      	movs	r3, #68	; 0x44
 8002792:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80027aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 80027b0:	2303      	movs	r3, #3
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80027b4:	2300      	movs	r3, #0
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	4619      	mov	r1, r3
 80027c0:	4807      	ldr	r0, [pc, #28]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 80027c2:	f005 fec1 	bl	8008548 <HAL_TIMEx_ConfigBreakDeadTime>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 80027cc:	f7ff fd8d 	bl	80022ea <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80027d0:	4803      	ldr	r0, [pc, #12]	; (80027e0 <MX_TIM1_Init+0x1b8>)
 80027d2:	f000 f9a3 	bl	8002b1c <HAL_TIM_MspPostInit>

}
 80027d6:	bf00      	nop
 80027d8:	3770      	adds	r7, #112	; 0x70
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2000043c 	.word	0x2000043c
 80027e4:	40012c00 	.word	0x40012c00

080027e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80027ee:	f107 030c 	add.w	r3, r7, #12
 80027f2:	2224      	movs	r2, #36	; 0x24
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f008 faa4 	bl	800ad44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	463b      	mov	r3, r7
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <MX_TIM4_Init+0xa4>)
 8002808:	4a21      	ldr	r2, [pc, #132]	; (8002890 <MX_TIM4_Init+0xa8>)
 800280a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800280c:	4b1f      	ldr	r3, [pc, #124]	; (800288c <MX_TIM4_Init+0xa4>)
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <MX_TIM4_Init+0xa4>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <MX_TIM4_Init+0xa4>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <MX_TIM4_Init+0xa4>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <MX_TIM4_Init+0xa4>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <MX_TIM4_Init+0xac>)
 800282c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002832:	2301      	movs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002842:	2301      	movs	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	4619      	mov	r1, r3
 8002854:	480d      	ldr	r0, [pc, #52]	; (800288c <MX_TIM4_Init+0xa4>)
 8002856:	f004 fb09 	bl	8006e6c <HAL_TIM_Encoder_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002860:	f7ff fd43 	bl	80022ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENCODER_CLK;
 8002864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002868:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800286e:	463b      	mov	r3, r7
 8002870:	4619      	mov	r1, r3
 8002872:	4806      	ldr	r0, [pc, #24]	; (800288c <MX_TIM4_Init+0xa4>)
 8002874:	f005 fde6 	bl	8008444 <HAL_TIMEx_MasterConfigSynchronization>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800287e:	f7ff fd34 	bl	80022ea <Error_Handler>
  }

}
 8002882:	bf00      	nop
 8002884:	3730      	adds	r7, #48	; 0x30
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200003f0 	.word	0x200003f0
 8002890:	40000800 	.word	0x40000800
 8002894:	00010006 	.word	0x00010006

08002898 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b09e      	sub	sp, #120	; 0x78
 800289c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800289e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80028ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2234      	movs	r2, #52	; 0x34
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f008 fa31 	bl	800ad44 <memset>

  htim8.Instance = TIM8;
 80028e2:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <MX_TIM8_Init+0x144>)
 80028e4:	4a3e      	ldr	r2, [pc, #248]	; (80029e0 <MX_TIM8_Init+0x148>)
 80028e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80028e8:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <MX_TIM8_Init+0x144>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <MX_TIM8_Init+0x144>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80028f4:	4b39      	ldr	r3, [pc, #228]	; (80029dc <MX_TIM8_Init+0x144>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <MX_TIM8_Init+0x144>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002900:	4b36      	ldr	r3, [pc, #216]	; (80029dc <MX_TIM8_Init+0x144>)
 8002902:	2200      	movs	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002906:	4b35      	ldr	r3, [pc, #212]	; (80029dc <MX_TIM8_Init+0x144>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800290c:	4833      	ldr	r0, [pc, #204]	; (80029dc <MX_TIM8_Init+0x144>)
 800290e:	f003 ff69 	bl	80067e4 <HAL_TIM_Base_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002918:	f7ff fce7 	bl	80022ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002920:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002922:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002926:	4619      	mov	r1, r3
 8002928:	482c      	ldr	r0, [pc, #176]	; (80029dc <MX_TIM8_Init+0x144>)
 800292a:	f004 fd77 	bl	800741c <HAL_TIM_ConfigClockSource>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM8_Init+0xa0>
  {
    Error_Handler();
 8002934:	f7ff fcd9 	bl	80022ea <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002938:	4828      	ldr	r0, [pc, #160]	; (80029dc <MX_TIM8_Init+0x144>)
 800293a:	f004 f973 	bl	8006c24 <HAL_TIM_IC_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8002944:	f7ff fcd1 	bl	80022ea <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002948:	2304      	movs	r3, #4
 800294a:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800294c:	2360      	movs	r3, #96	; 0x60
 800294e:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002950:	2300      	movs	r3, #0
 8002952:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.TriggerFilter = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002958:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800295c:	4619      	mov	r1, r3
 800295e:	481f      	ldr	r0, [pc, #124]	; (80029dc <MX_TIM8_Init+0x144>)
 8002960:	f004 fe3a 	bl	80075d8 <HAL_TIM_SlaveConfigSynchro>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800296a:	f7ff fcbe 	bl	80022ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800297a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800297e:	4619      	mov	r1, r3
 8002980:	4816      	ldr	r0, [pc, #88]	; (80029dc <MX_TIM8_Init+0x144>)
 8002982:	f005 fd5f 	bl	8008444 <HAL_TIMEx_MasterConfigSynchronization>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800298c:	f7ff fcad 	bl	80022ea <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002990:	2300      	movs	r3, #0
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002994:	2301      	movs	r3, #1
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002998:	2300      	movs	r3, #0
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80029a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029a4:	2204      	movs	r2, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	480c      	ldr	r0, [pc, #48]	; (80029dc <MX_TIM8_Init+0x144>)
 80029aa:	f004 fb92 	bl	80070d2 <HAL_TIM_IC_ConfigChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80029b4:	f7ff fc99 	bl	80022ea <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029b8:	2300      	movs	r3, #0
 80029ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80029bc:	2300      	movs	r3, #0
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_TIM8_Init+0x144>)
 80029c6:	f005 fdbf 	bl	8008548 <HAL_TIMEx_ConfigBreakDeadTime>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 80029d0:	f7ff fc8b 	bl	80022ea <Error_Handler>
  }

}
 80029d4:	bf00      	nop
 80029d6:	3778      	adds	r7, #120	; 0x78
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200003a4 	.word	0x200003a4
 80029e0:	40013400 	.word	0x40013400

080029e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <HAL_TIM_Base_MspInit+0xa0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10c      	bne.n	8002a20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_TIM_Base_MspInit+0xa4>)
 8002a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_TIM_Base_MspInit+0xa4>)
 8002a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a10:	6613      	str	r3, [r2, #96]	; 0x60
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_TIM_Base_MspInit+0xa4>)
 8002a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002a1e:	e02d      	b.n	8002a7c <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM8)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_TIM_Base_MspInit+0xa8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d128      	bne.n	8002a7c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_TIM_Base_MspInit+0xa4>)
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_TIM_Base_MspInit+0xa4>)
 8002a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a34:	6613      	str	r3, [r2, #96]	; 0x60
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_TIM_Base_MspInit+0xa4>)
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_TIM_Base_MspInit+0xa4>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <HAL_TIM_Base_MspInit+0xa4>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_TIM_Base_MspInit+0xa4>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002a6c:	230a      	movs	r3, #10
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4619      	mov	r1, r3
 8002a76:	4806      	ldr	r0, [pc, #24]	; (8002a90 <HAL_TIM_Base_MspInit+0xac>)
 8002a78:	f002 f95c 	bl	8004d34 <HAL_GPIO_Init>
}
 8002a7c:	bf00      	nop
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40013400 	.word	0x40013400
 8002a90:	48000400 	.word	0x48000400

08002a94 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d127      	bne.n	8002b06 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_TIM_Encoder_MspInit+0x80>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <HAL_TIM_Encoder_MspInit+0x80>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_TIM_Encoder_MspInit+0x80>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_TIM_Encoder_MspInit+0x80>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_TIM_Encoder_MspInit+0x80>)
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_TIM_Encoder_MspInit+0x80>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 8002ae6:	23c0      	movs	r3, #192	; 0xc0
 8002ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af2:	2302      	movs	r3, #2
 8002af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002af6:	2302      	movs	r3, #2
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	4619      	mov	r1, r3
 8002b00:	4805      	ldr	r0, [pc, #20]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b02:	f002 f917 	bl	8004d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000400 	.word	0x48000400

08002b1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a38      	ldr	r2, [pc, #224]	; (8002c1c <HAL_TIM_MspPostInit+0x100>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d169      	bne.n	8002c12 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_TIM_MspPostInit+0x104>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	4a37      	ldr	r2, [pc, #220]	; (8002c20 <HAL_TIM_MspPostInit+0x104>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4a:	4b35      	ldr	r3, [pc, #212]	; (8002c20 <HAL_TIM_MspPostInit+0x104>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b56:	4b32      	ldr	r3, [pc, #200]	; (8002c20 <HAL_TIM_MspPostInit+0x104>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <HAL_TIM_MspPostInit+0x104>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b62:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <HAL_TIM_MspPostInit+0x104>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <HAL_TIM_MspPostInit+0x104>)
 8002b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b72:	4a2b      	ldr	r2, [pc, #172]	; (8002c20 <HAL_TIM_MspPostInit+0x104>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b7a:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <HAL_TIM_MspPostInit+0x104>)
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b90:	2302      	movs	r3, #2
 8002b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002b98:	2304      	movs	r3, #4
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4820      	ldr	r0, [pc, #128]	; (8002c24 <HAL_TIM_MspPostInit+0x108>)
 8002ba4:	f002 f8c6 	bl	8004d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4818      	ldr	r0, [pc, #96]	; (8002c28 <HAL_TIM_MspPostInit+0x10c>)
 8002bc6:	f002 f8b5 	bl	8004d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8002bca:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8002bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002bdc:	2306      	movs	r3, #6
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bea:	f002 f8a3 	bl	8004d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002c00:	230b      	movs	r3, #11
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0e:	f002 f891 	bl	8004d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c12:	bf00      	nop
 8002c14:	3728      	adds	r7, #40	; 0x28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	40021000 	.word	0x40021000
 8002c24:	48000800 	.word	0x48000800
 8002c28:	48000400 	.word	0x48000400

08002c2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c32:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <MX_USART2_UART_Init+0x94>)
 8002c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c36:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c52:	220c      	movs	r2, #12
 8002c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c74:	4811      	ldr	r0, [pc, #68]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c76:	f005 fd2c 	bl	80086d2 <HAL_UART_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c80:	f7ff fb33 	bl	80022ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c84:	2100      	movs	r1, #0
 8002c86:	480d      	ldr	r0, [pc, #52]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c88:	f007 fd11 	bl	800a6ae <HAL_UARTEx_SetTxFifoThreshold>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c92:	f7ff fb2a 	bl	80022ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c96:	2100      	movs	r1, #0
 8002c98:	4808      	ldr	r0, [pc, #32]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002c9a:	f007 fd46 	bl	800a72a <HAL_UARTEx_SetRxFifoThreshold>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002ca4:	f7ff fb21 	bl	80022ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ca8:	4804      	ldr	r0, [pc, #16]	; (8002cbc <MX_USART2_UART_Init+0x90>)
 8002caa:	f007 fcc7 	bl	800a63c <HAL_UARTEx_DisableFifoMode>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002cb4:	f7ff fb19 	bl	80022ea <Error_Handler>
  }

}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000488 	.word	0x20000488
 8002cc0:	40004400 	.word	0x40004400

08002cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_UART_MspInit+0x8c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d12f      	bne.n	8002d46 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_UART_MspInit+0x90>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <HAL_UART_MspInit+0x90>)
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_UART_MspInit+0x90>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_UART_MspInit+0x90>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_UART_MspInit+0x90>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_UART_MspInit+0x90>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002d16:	2318      	movs	r3, #24
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d26:	2307      	movs	r3, #7
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4809      	ldr	r0, [pc, #36]	; (8002d58 <HAL_UART_MspInit+0x94>)
 8002d32:	f001 ffff 	bl	8004d34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2108      	movs	r1, #8
 8002d3a:	2026      	movs	r0, #38	; 0x26
 8002d3c:	f001 ff5f 	bl	8004bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d40:	2026      	movs	r0, #38	; 0x26
 8002d42:	f001 ff76 	bl	8004c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40004400 	.word	0x40004400
 8002d54:	40021000 	.word	0x40021000
 8002d58:	48000400 	.word	0x48000400

08002d5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d5c:	480d      	ldr	r0, [pc, #52]	; (8002d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d60:	480d      	ldr	r0, [pc, #52]	; (8002d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d62:	490e      	ldr	r1, [pc, #56]	; (8002d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d64:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <LoopForever+0xe>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d68:	e002      	b.n	8002d70 <LoopCopyDataInit>

08002d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6e:	3304      	adds	r3, #4

08002d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d74:	d3f9      	bcc.n	8002d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d76:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d78:	4c0b      	ldr	r4, [pc, #44]	; (8002da8 <LoopForever+0x16>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d7c:	e001      	b.n	8002d82 <LoopFillZerobss>

08002d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d80:	3204      	adds	r2, #4

08002d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d84:	d3fb      	bcc.n	8002d7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d86:	f7ff fc39 	bl	80025fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d8a:	f007 ffb7 	bl	800acfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d8e:	f7ff fa29 	bl	80021e4 <main>

08002d92 <LoopForever>:

LoopForever:
    b LoopForever
 8002d92:	e7fe      	b.n	8002d92 <LoopForever>
  ldr   r0, =_estack
 8002d94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002da0:	0800b994 	.word	0x0800b994
  ldr r2, =_sbss
 8002da4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002da8:	20000518 	.word	0x20000518

08002dac <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <COMP1_2_3_IRQHandler>

08002dae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db8:	2003      	movs	r0, #3
 8002dba:	f001 ff15 	bl	8004be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f000 f80e 	bl	8002de0 <HAL_InitTick>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	71fb      	strb	r3, [r7, #7]
 8002dce:	e001      	b.n	8002dd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dd0:	f7ff fba2 	bl	8002518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dd4:	79fb      	ldrb	r3, [r7, #7]

}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_InitTick+0x68>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d022      	beq.n	8002e3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_InitTick+0x6c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_InitTick+0x68>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 ff20 	bl	8004c4e <HAL_SYSTICK_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10f      	bne.n	8002e34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	d809      	bhi.n	8002e2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e22:	f001 feec 	bl	8004bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_InitTick+0x70>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	e007      	b.n	8002e3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e004      	b.n	8002e3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e001      	b.n	8002e3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000008 	.word	0x20000008
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_IncTick+0x1c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_IncTick+0x20>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4413      	add	r3, r2
 8002e62:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <HAL_IncTick+0x1c>)
 8002e64:	6013      	str	r3, [r2, #0]
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	20000514 	.word	0x20000514
 8002e74:	20000008 	.word	0x20000008

08002e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_GetTick+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000514 	.word	0x20000514

08002e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff ffee 	bl	8002e78 <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d004      	beq.n	8002eb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_Delay+0x40>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eb4:	bf00      	nop
 8002eb6:	f7ff ffdf 	bl	8002e78 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d8f7      	bhi.n	8002eb6 <HAL_Delay+0x26>
  {
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000008 	.word	0x20000008

08002ed4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 031f 	and.w	r3, r3, #31
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6093      	str	r3, [r2, #8]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb6:	d101      	bne.n	8002fbc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002fda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fde:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003006:	d101      	bne.n	800300c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800302a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003052:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003056:	f043 0202 	orr.w	r2, r3, #2
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <LL_ADC_IsEnabled+0x18>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <LL_ADC_IsEnabled+0x1a>
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d101      	bne.n	80030a8 <LL_ADC_IsDisableOngoing+0x18>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <LL_ADC_IsDisableOngoing+0x1a>
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d101      	bne.n	80030ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d101      	bne.n	80030f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b089      	sub	sp, #36	; 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003110:	2300      	movs	r3, #0
 8003112:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e16b      	b.n	80033f6 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d109      	bne.n	8003140 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fd ffad 	bl	800108c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff2c 	bl	8002fa2 <LL_ADC_IsDeepPowerDownEnabled>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d004      	beq.n	800315a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff12 	bl	8002f7e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff47 	bl	8002ff2 <LL_ADC_IsInternalRegulatorEnabled>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d113      	bne.n	8003192 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff2b 	bl	8002fca <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003174:	4ba2      	ldr	r3, [pc, #648]	; (8003400 <HAL_ADC_Init+0x2fc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	4aa2      	ldr	r2, [pc, #648]	; (8003404 <HAL_ADC_Init+0x300>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003184:	e002      	b.n	800318c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3b01      	subs	r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f9      	bne.n	8003186 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff2b 	bl	8002ff2 <LL_ADC_IsInternalRegulatorEnabled>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	f043 0210 	orr.w	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff77 	bl	80030b6 <LL_ADC_REG_IsConversionOngoing>
 80031c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8106 	bne.w	80033e4 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 8102 	bne.w	80033e4 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031e8:	f043 0202 	orr.w	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff38 	bl	800306a <LL_ADC_IsEnabled>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d111      	bne.n	8003224 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003200:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003204:	f7ff ff31 	bl	800306a <LL_ADC_IsEnabled>
 8003208:	4604      	mov	r4, r0
 800320a:	487f      	ldr	r0, [pc, #508]	; (8003408 <HAL_ADC_Init+0x304>)
 800320c:	f7ff ff2d 	bl	800306a <LL_ADC_IsEnabled>
 8003210:	4603      	mov	r3, r0
 8003212:	4323      	orrs	r3, r4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4619      	mov	r1, r3
 800321e:	487b      	ldr	r0, [pc, #492]	; (800340c <HAL_ADC_Init+0x308>)
 8003220:	f7ff fe58 	bl	8002ed4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7f5b      	ldrb	r3, [r3, #29]
 8003228:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800322e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003234:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800323a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003242:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800324e:	2b01      	cmp	r3, #1
 8003250:	d106      	bne.n	8003260 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	045b      	lsls	r3, r3, #17
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_ADC_Init+0x30c>)
 8003284:	4013      	ands	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	430b      	orrs	r3, r1
 800328e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff03 	bl	80030b6 <LL_ADC_REG_IsConversionOngoing>
 80032b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff10 	bl	80030dc <LL_ADC_INJ_IsConversionOngoing>
 80032bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d16d      	bne.n	80033a0 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d16a      	bne.n	80033a0 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e6:	f023 0302 	bic.w	r3, r3, #2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d017      	beq.n	800332c <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800330a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003314:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6911      	ldr	r1, [r2, #16]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	430b      	orrs	r3, r1
 8003326:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800332a:	e013      	b.n	8003354 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800333a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800334c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003350:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800335a:	2b01      	cmp	r3, #1
 800335c:	d118      	bne.n	8003390 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800337a:	4311      	orrs	r1, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003380:	430a      	orrs	r2, r1
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	611a      	str	r2, [r3, #16]
 800338e:	e007      	b.n	80033a0 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d10c      	bne.n	80033c2 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f023 010f 	bic.w	r1, r3, #15
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	1e5a      	subs	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
 80033c0:	e007      	b.n	80033d2 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 020f 	bic.w	r2, r2, #15
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80033e2:	e007      	b.n	80033f4 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd90      	pop	{r4, r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000000 	.word	0x20000000
 8003404:	053e2d63 	.word	0x053e2d63
 8003408:	50000100 	.word	0x50000100
 800340c:	50000300 	.word	0x50000300
 8003410:	fff04007 	.word	0xfff04007

08003414 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003430:	4883      	ldr	r0, [pc, #524]	; (8003640 <HAL_ADC_IRQHandler+0x22c>)
 8003432:	f7ff fd88 	bl	8002f46 <LL_ADC_GetMultimode>
 8003436:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d017      	beq.n	8003472 <HAL_ADC_IRQHandler+0x5e>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d105      	bne.n	8003464 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fded 	bl	8004044 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2202      	movs	r2, #2
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <HAL_ADC_IRQHandler+0x72>
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8085 	beq.w	800359c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d07f      	beq.n	800359c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fd1e 	bl	8002efa <LL_ADC_REG_IsTriggerSourceSWStart>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d064      	beq.n	800358e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5e      	ldr	r2, [pc, #376]	; (8003644 <HAL_ADC_IRQHandler+0x230>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d002      	beq.n	80034d4 <HAL_ADC_IRQHandler+0xc0>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	e001      	b.n	80034d8 <HAL_ADC_IRQHandler+0xc4>
 80034d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	4293      	cmp	r3, r2
 80034de:	d008      	beq.n	80034f2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d002      	beq.n	80034f2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	d104      	bne.n	80034fc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	623b      	str	r3, [r7, #32]
 80034fa:	e00d      	b.n	8003518 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a50      	ldr	r2, [pc, #320]	; (8003644 <HAL_ADC_IRQHandler+0x230>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d002      	beq.n	800350c <HAL_ADC_IRQHandler+0xf8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	e001      	b.n	8003510 <HAL_ADC_IRQHandler+0xfc>
 800350c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003510:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d135      	bne.n	800358e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d12e      	bne.n	800358e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fdbe 	bl	80030b6 <LL_ADC_REG_IsConversionOngoing>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d11a      	bne.n	8003576 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 020c 	bic.w	r2, r2, #12
 800354e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d112      	bne.n	800358e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	65da      	str	r2, [r3, #92]	; 0x5c
 8003574:	e00b      	b.n	800358e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	f043 0210 	orr.w	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f95a 	bl	8003848 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	220c      	movs	r2, #12
 800359a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_ADC_IRQHandler+0x19c>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 809e 	beq.w	80036f8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8098 	beq.w	80036f8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fc9b 	bl	8002f20 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035ea:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fc82 	bl	8002efa <LL_ADC_REG_IsTriggerSourceSWStart>
 80035f6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a11      	ldr	r2, [pc, #68]	; (8003644 <HAL_ADC_IRQHandler+0x230>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d002      	beq.n	8003608 <HAL_ADC_IRQHandler+0x1f4>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	e001      	b.n	800360c <HAL_ADC_IRQHandler+0x1f8>
 8003608:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	4293      	cmp	r3, r2
 8003612:	d008      	beq.n	8003626 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b06      	cmp	r3, #6
 800361e:	d002      	beq.n	8003626 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b07      	cmp	r3, #7
 8003624:	d104      	bne.n	8003630 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	623b      	str	r3, [r7, #32]
 800362e:	e011      	b.n	8003654 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a03      	ldr	r2, [pc, #12]	; (8003644 <HAL_ADC_IRQHandler+0x230>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d006      	beq.n	8003648 <HAL_ADC_IRQHandler+0x234>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	e005      	b.n	800364c <HAL_ADC_IRQHandler+0x238>
 8003640:	50000300 	.word	0x50000300
 8003644:	50000100 	.word	0x50000100
 8003648:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800364c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10c      	bne.n	8003674 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003660:	2b00      	cmp	r3, #0
 8003662:	d142      	bne.n	80036ea <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d03f      	beq.n	80036ea <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003670:	2b00      	cmp	r3, #0
 8003672:	d13a      	bne.n	80036ea <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d133      	bne.n	80036ea <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d12e      	bne.n	80036ea <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fd23 	bl	80030dc <LL_ADC_INJ_IsConversionOngoing>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d11a      	bne.n	80036d2 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d112      	bne.n	80036ea <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80036d0:	e00b      	b.n	80036ea <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fe f974 	bl	80019d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2260      	movs	r2, #96	; 0x60
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <HAL_ADC_IRQHandler+0x312>
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003710:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f89f 	bl	800385c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d012      	beq.n	8003756 <HAL_ADC_IRQHandler+0x342>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fc68 	bl	800401c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375c:	2b00      	cmp	r3, #0
 800375e:	d012      	beq.n	8003786 <HAL_ADC_IRQHandler+0x372>
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fc5a 	bl	8004030 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003784:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d036      	beq.n	80037fe <HAL_ADC_IRQHandler+0x3ea>
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	d031      	beq.n	80037fe <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80037a2:	2301      	movs	r3, #1
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	e014      	b.n	80037d2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037ae:	4825      	ldr	r0, [pc, #148]	; (8003844 <HAL_ADC_IRQHandler+0x430>)
 80037b0:	f7ff fbd7 	bl	8002f62 <LL_ADC_GetMultiDMATransfer>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80037ba:	2301      	movs	r3, #1
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	e008      	b.n	80037d2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80037ce:	2301      	movs	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d10e      	bne.n	80037f6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e8:	f043 0202 	orr.w	r2, r3, #2
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f83d 	bl	8003870 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2210      	movs	r2, #16
 80037fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d018      	beq.n	800383a <HAL_ADC_IRQHandler+0x426>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380e:	2b00      	cmp	r3, #0
 8003810:	d013      	beq.n	800383a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	f043 0208 	orr.w	r2, r3, #8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003832:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fbe7 	bl	8004008 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800383a:	bf00      	nop
 800383c:	3728      	adds	r7, #40	; 0x28
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	50000300 	.word	0x50000300

08003848 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fbea 	bl	800306a <LL_ADC_IsEnabled>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d146      	bne.n	800392a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	4b24      	ldr	r3, [pc, #144]	; (8003934 <ADC_Enable+0xb0>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e032      	b.n	800392c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fba5 	bl	800301a <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038d0:	f7ff fad2 	bl	8002e78 <HAL_GetTick>
 80038d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d6:	e021      	b.n	800391c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fbc4 	bl	800306a <LL_ADC_IsEnabled>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d104      	bne.n	80038f2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fb94 	bl	800301a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038f2:	f7ff fac1 	bl	8002e78 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d90d      	bls.n	800391c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	f043 0210 	orr.w	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e007      	b.n	800392c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d1d6      	bne.n	80038d8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	8000003f 	.word	0x8000003f

08003938 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fba3 	bl	8003090 <LL_ADC_IsDisableOngoing>
 800394a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fb8a 	bl	800306a <LL_ADC_IsEnabled>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d040      	beq.n	80039de <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d13d      	bne.n	80039de <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030d 	and.w	r3, r3, #13
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10c      	bne.n	800398a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fb64 	bl	8003042 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2203      	movs	r2, #3
 8003980:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003982:	f7ff fa79 	bl	8002e78 <HAL_GetTick>
 8003986:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003988:	e022      	b.n	80039d0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	f043 0210 	orr.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399a:	f043 0201 	orr.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e01c      	b.n	80039e0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039a6:	f7ff fa67 	bl	8002e78 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d90d      	bls.n	80039d0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	f043 0210 	orr.w	r2, r3, #16
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e007      	b.n	80039e0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e3      	bne.n	80039a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <LL_ADC_SetCommonPathInternalCh>:
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_ADC_GetCommonPathInternalCh>:
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <LL_ADC_SetOffset>:
{
 8003a2c:	b490      	push	{r4, r7}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3360      	adds	r3, #96	; 0x60
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <LL_ADC_SetOffset+0x40>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a5e:	6023      	str	r3, [r4, #0]
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc90      	pop	{r4, r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	03fff000 	.word	0x03fff000

08003a70 <LL_ADC_GetOffsetChannel>:
{
 8003a70:	b490      	push	{r4, r7}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3360      	adds	r3, #96	; 0x60
 8003a7e:	461a      	mov	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc90      	pop	{r4, r7}
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_SetOffsetState>:
{
 8003a98:	b490      	push	{r4, r7}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3360      	adds	r3, #96	; 0x60
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	6023      	str	r3, [r4, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc90      	pop	{r4, r7}
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_SetOffsetSign>:
{
 8003ac8:	b490      	push	{r4, r7}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3360      	adds	r3, #96	; 0x60
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	6023      	str	r3, [r4, #0]
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc90      	pop	{r4, r7}
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_SetOffsetSaturation>:
{
 8003af8:	b490      	push	{r4, r7}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3360      	adds	r3, #96	; 0x60
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	6023      	str	r3, [r4, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc90      	pop	{r4, r7}
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	615a      	str	r2, [r3, #20]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_ADC_INJ_GetTrigAuto>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_ADC_SetChannelSamplingTime>:
{
 8003b6a:	b490      	push	{r4, r7}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	0e5b      	lsrs	r3, r3, #25
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	4413      	add	r3, r2
 8003b88:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	0d1b      	lsrs	r3, r3, #20
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2107      	movs	r1, #7
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	0d1b      	lsrs	r3, r3, #20
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	4313      	orrs	r3, r2
 8003bae:	6023      	str	r3, [r4, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc90      	pop	{r4, r7}
 8003bb8:	4770      	bx	lr
	...

08003bbc <LL_ADC_SetChannelSingleDiff>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f003 0318 	and.w	r3, r3, #24
 8003bde:	4908      	ldr	r1, [pc, #32]	; (8003c00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003be0:	40d9      	lsrs	r1, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	400b      	ands	r3, r1
 8003be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	0007ffff 	.word	0x0007ffff

08003c04 <LL_ADC_GetMultimode>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 031f 	and.w	r3, r3, #31
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_ADC_IsEnabled>:
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <LL_ADC_IsEnabled+0x18>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <LL_ADC_IsEnabled+0x1a>
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_ADC_StartCalibration>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_ADC_IsCalibrationOnGoing>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c8c:	d101      	bne.n	8003c92 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d101      	bne.n	8003cb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_ADC_INJ_StartConversion>:
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cda:	f043 0208 	orr.w	r2, r3, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_ADC_INJ_IsConversionOngoing>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d101      	bne.n	8003d06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e04d      	b.n	8003dcc <HAL_ADCEx_Calibration_Start+0xb8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fdfd 	bl	8003938 <ADC_Disable>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d136      	bne.n	8003db6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d50:	f023 0302 	bic.w	r3, r3, #2
 8003d54:	f043 0202 	orr.w	r2, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff6f 	bl	8003c46 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d68:	e014      	b.n	8003d94 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4a18      	ldr	r2, [pc, #96]	; (8003dd4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d90d      	bls.n	8003d94 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	f023 0312 	bic.w	r3, r3, #18
 8003d80:	f043 0210 	orr.w	r2, r3, #16
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e01b      	b.n	8003dcc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff6d 	bl	8003c78 <LL_ADC_IsCalibrationOnGoing>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e2      	bne.n	8003d6a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	f023 0303 	bic.w	r3, r3, #3
 8003dac:	f043 0201 	orr.w	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003db4:	e005      	b.n	8003dc2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	f043 0210 	orr.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	0004de01 	.word	0x0004de01

08003dd8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003de0:	486e      	ldr	r0, [pc, #440]	; (8003f9c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8003de2:	f7ff ff0f 	bl	8003c04 <LL_ADC_GetMultimode>
 8003de6:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff7e 	bl	8003cee <LL_ADC_INJ_IsConversionOngoing>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e0ca      	b.n	8003f92 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e06:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0b2      	b.n	8003f92 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_ADCEx_InjectedStart_IT+0x62>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e0ab      	b.n	8003f92 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fd1e 	bl	8003884 <ADC_Enable>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 809a 	bne.w	8003f88 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d006      	beq.n	8003e6e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	f023 0208 	bic.w	r2, r3, #8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	661a      	str	r2, [r3, #96]	; 0x60
 8003e6c:	e002      	b.n	8003e74 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a44      	ldr	r2, [pc, #272]	; (8003fa0 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d002      	beq.n	8003e98 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	e001      	b.n	8003e9c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8003e98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d002      	beq.n	8003eaa <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d105      	bne.n	8003eb6 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2260      	movs	r2, #96	; 0x60
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ee2:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d110      	bne.n	8003f0e <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0220 	bic.w	r2, r2, #32
 8003efa:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f0a:	605a      	str	r2, [r3, #4]
          break;
 8003f0c:	e010      	b.n	8003f30 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0220 	orr.w	r2, r2, #32
 8003f2c:	605a      	str	r2, [r3, #4]
          break;
 8003f2e:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1a      	ldr	r2, [pc, #104]	; (8003fa0 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d002      	beq.n	8003f40 <HAL_ADCEx_InjectedStart_IT+0x168>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	e001      	b.n	8003f44 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8003f40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d008      	beq.n	8003f5e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b06      	cmp	r3, #6
 8003f56:	d002      	beq.n	8003f5e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b07      	cmp	r3, #7
 8003f5c:	d10d      	bne.n	8003f7a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fdf3 	bl	8003b4e <LL_ADC_INJ_GetTrigAuto>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d110      	bne.n	8003f90 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fea7 	bl	8003cc6 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003f78:	e00a      	b.n	8003f90 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f86:	e003      	b.n	8003f90 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	50000300 	.word	0x50000300
 8003fa0:	50000100 	.word	0x50000100

08003fa4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f240 2215 	movw	r2, #533	; 0x215
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_ADCEx_InjectedGetValue+0x32>
 8003fb8:	f240 321b 	movw	r2, #795	; 0x31b
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_ADCEx_InjectedGetValue+0x26>
 8003fc0:	f240 120f 	movw	r2, #271	; 0x10f
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_ADCEx_InjectedGetValue+0x3e>
 8003fc8:	e011      	b.n	8003fee <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd2:	60fb      	str	r3, [r7, #12]
      break;
 8003fd4:	e011      	b.n	8003ffa <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	60fb      	str	r3, [r7, #12]
      break;
 8003fe0:	e00b      	b.n	8003ffa <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fea:	60fb      	str	r3, [r7, #12]
      break;
 8003fec:	e005      	b.n	8003ffa <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff6:	60fb      	str	r3, [r7, #12]
      break;
 8003ff8:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b0a8      	sub	sp, #160	; 0xa0
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004078:	2b01      	cmp	r3, #1
 800407a:	d102      	bne.n	8004082 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800407c:	2302      	movs	r3, #2
 800407e:	f000 bc39 	b.w	80048f4 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004096:	2b01      	cmp	r3, #1
 8004098:	d130      	bne.n	80040fc <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b09      	cmp	r3, #9
 80040a0:	d179      	bne.n	8004196 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d010      	beq.n	80040cc <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	0e9b      	lsrs	r3, r3, #26
 80040b0:	025b      	lsls	r3, r3, #9
 80040b2:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80040be:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040ca:	e007      	b.n	80040dc <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0e9b      	lsrs	r3, r3, #26
 80040d2:	025b      	lsls	r3, r3, #9
 80040d4:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80040d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040e2:	4ba3      	ldr	r3, [pc, #652]	; (8004370 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80040ee:	430b      	orrs	r3, r1
 80040f0:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80040f8:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80040fa:	e04c      	b.n	8004196 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004100:	2b00      	cmp	r3, #0
 8004102:	d11d      	bne.n	8004140 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004128:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004134:	e004      	b.n	8004140 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	3b01      	subs	r3, #1
 800413c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	0e9b      	lsrs	r3, r3, #26
 8004146:	f003 021f 	and.w	r2, r3, #31
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004164:	1e5a      	subs	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800416e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004186:	4b7a      	ldr	r3, [pc, #488]	; (8004370 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8004188:	4013      	ands	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	430b      	orrs	r3, r1
 8004194:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fda7 	bl	8003cee <LL_ADC_INJ_IsConversionOngoing>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d124      	bne.n	80041f0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d112      	bne.n	80041d6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80041c0:	055a      	lsls	r2, r3, #21
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c8:	051b      	lsls	r3, r3, #20
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	60da      	str	r2, [r3, #12]
 80041d4:	e00c      	b.n	80041f0 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80041e6:	055a      	lsls	r2, r3, #21
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fd53 	bl	8003ca0 <LL_ADC_REG_IsConversionOngoing>
 80041fa:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fd73 	bl	8003cee <LL_ADC_INJ_IsConversionOngoing>
 8004208:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800420c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 81d4 	bne.w	80045be <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 81cf 	bne.w	80045be <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d116      	bne.n	800425e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004236:	2b01      	cmp	r3, #1
 8004238:	d108      	bne.n	800424c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004248:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800424a:	e01f      	b.n	800428c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800425a:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800425c:	e016      	b.n	800428c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004264:	2b01      	cmp	r3, #1
 8004266:	d109      	bne.n	800427c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f043 0220 	orr.w	r2, r3, #32
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800427a:	e007      	b.n	800428c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800428a:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004292:	2b01      	cmp	r3, #1
 8004294:	d110      	bne.n	80042b8 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	430b      	orrs	r3, r1
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0202 	orr.w	r2, r2, #2
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	e007      	b.n	80042c8 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0202 	bic.w	r2, r2, #2
 80042c6:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042d0:	d10f      	bne.n	80042f2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	4619      	mov	r1, r3
 80042de:	f7ff fc44 	bl	8003b6a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fc1c 	bl	8003b28 <LL_ADC_SetSamplingTimeCommonConfig>
 80042f0:	e00e      	b.n	8004310 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	461a      	mov	r2, r3
 8004300:	f7ff fc33 	bl	8003b6a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fc0c 	bl	8003b28 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	08db      	lsrs	r3, r3, #3
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b04      	cmp	r3, #4
 8004330:	d025      	beq.n	800437e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6919      	ldr	r1, [r3, #16]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004342:	f7ff fb73 	bl	8003a2c <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6919      	ldr	r1, [r3, #16]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	461a      	mov	r2, r3
 8004354:	f7ff fbb8 	bl	8003ac8 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800436c:	e003      	b.n	8004376 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800436e:	bf00      	nop
 8004370:	04104000 	.word	0x04104000
 8004374:	2300      	movs	r3, #0
 8004376:	461a      	mov	r2, r3
 8004378:	f7ff fbbe 	bl	8003af8 <LL_ADC_SetOffsetSaturation>
 800437c:	e11f      	b.n	80045be <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fb73 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 800438a:	4603      	mov	r3, r0
 800438c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fb68 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80043a0:	4603      	mov	r3, r0
 80043a2:	0e9b      	lsrs	r3, r3, #26
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	e014      	b.n	80043d4 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fb5d 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <HAL_ADCEx_InjectedConfigChannel+0x394>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	0e9b      	lsrs	r3, r3, #26
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	e00a      	b.n	8004402 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80043fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
 8004402:	429a      	cmp	r2, r3
 8004404:	d106      	bne.n	8004414 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fb42 	bl	8003a98 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fb28 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fb1d 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 8004436:	4603      	mov	r3, r0
 8004438:	0e9b      	lsrs	r3, r3, #26
 800443a:	f003 021f 	and.w	r2, r3, #31
 800443e:	e010      	b.n	8004462 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fb12 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 800444c:	4603      	mov	r3, r0
 800444e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <HAL_ADCEx_InjectedConfigChannel+0x422>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	0e9b      	lsrs	r3, r3, #26
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	e00a      	b.n	8004490 <HAL_ADCEx_InjectedConfigChannel+0x438>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8004488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	429a      	cmp	r2, r3
 8004492:	d106      	bne.n	80044a2 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2200      	movs	r2, #0
 800449a:	2101      	movs	r1, #1
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fafb 	bl	8003a98 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2102      	movs	r1, #2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fae1 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <HAL_ADCEx_InjectedConfigChannel+0x476>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2102      	movs	r1, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fad6 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80044c4:	4603      	mov	r3, r0
 80044c6:	0e9b      	lsrs	r3, r3, #26
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	e010      	b.n	80044f0 <HAL_ADCEx_InjectedConfigChannel+0x498>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2102      	movs	r1, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff facb 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 80044da:	4603      	mov	r3, r0
 80044dc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e0:	fa93 f3a3 	rbit	r3, r3
 80044e4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80044e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044e8:	fab3 f383 	clz	r3, r3
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	0e9b      	lsrs	r3, r3, #26
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	e00a      	b.n	800451e <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	429a      	cmp	r2, r3
 8004520:	d106      	bne.n	8004530 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2200      	movs	r2, #0
 8004528:	2102      	movs	r1, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fab4 	bl	8003a98 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2103      	movs	r1, #3
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fa9a 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 800453c:	4603      	mov	r3, r0
 800453e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <HAL_ADCEx_InjectedConfigChannel+0x504>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2103      	movs	r1, #3
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fa8f 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 8004552:	4603      	mov	r3, r0
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	f003 021f 	and.w	r2, r3, #31
 800455a:	e010      	b.n	800457e <HAL_ADCEx_InjectedConfigChannel+0x526>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2103      	movs	r1, #3
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fa84 	bl	8003a70 <LL_ADC_GetOffsetChannel>
 8004568:	4603      	mov	r3, r0
 800456a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456e:	fa93 f3a3 	rbit	r3, r3
 8004572:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8004574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	0e9b      	lsrs	r3, r3, #26
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	e00a      	b.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x554>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80045a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d106      	bne.n	80045be <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2103      	movs	r1, #3
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fa6d 	bl	8003a98 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fb2c 	bl	8003c20 <LL_ADC_IsEnabled>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 810c 	bne.w	80047e8 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	461a      	mov	r2, r3
 80045de:	f7ff faed 	bl	8003bbc <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4aab      	ldr	r2, [pc, #684]	; (8004894 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	f040 80fd 	bne.w	80047e8 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_ADCEx_InjectedConfigChannel+0x5be>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	0e9b      	lsrs	r3, r3, #26
 8004604:	3301      	adds	r3, #1
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2b09      	cmp	r3, #9
 800460c:	bf94      	ite	ls
 800460e:	2301      	movls	r3, #1
 8004610:	2300      	movhi	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	e012      	b.n	800463c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	3301      	adds	r3, #1
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	2b09      	cmp	r3, #9
 8004634:	bf94      	ite	ls
 8004636:	2301      	movls	r3, #1
 8004638:	2300      	movhi	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d064      	beq.n	800470a <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004648:	2b00      	cmp	r3, #0
 800464a:	d107      	bne.n	800465c <HAL_ADCEx_InjectedConfigChannel+0x604>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0e9b      	lsrs	r3, r3, #26
 8004652:	3301      	adds	r3, #1
 8004654:	069b      	lsls	r3, r3, #26
 8004656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800465a:	e00e      	b.n	800467a <HAL_ADCEx_InjectedConfigChannel+0x622>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	fab3 f383 	clz	r3, r3
 8004670:	b2db      	uxtb	r3, r3
 8004672:	3301      	adds	r3, #1
 8004674:	069b      	lsls	r3, r3, #26
 8004676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_ADCEx_InjectedConfigChannel+0x642>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	0e9b      	lsrs	r3, r3, #26
 800468c:	3301      	adds	r3, #1
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	2101      	movs	r1, #1
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	e010      	b.n	80046bc <HAL_ADCEx_InjectedConfigChannel+0x664>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	3301      	adds	r3, #1
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2101      	movs	r1, #1
 80046b8:	fa01 f303 	lsl.w	r3, r1, r3
 80046bc:	ea42 0103 	orr.w	r1, r2, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0e9b      	lsrs	r3, r3, #26
 80046d2:	3301      	adds	r3, #1
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	4613      	mov	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4413      	add	r3, r2
 80046de:	051b      	lsls	r3, r3, #20
 80046e0:	e011      	b.n	8004706 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	3301      	adds	r3, #1
 80046fa:	f003 021f 	and.w	r2, r3, #31
 80046fe:	4613      	mov	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	051b      	lsls	r3, r3, #20
 8004706:	430b      	orrs	r3, r1
 8004708:	e069      	b.n	80047de <HAL_ADCEx_InjectedConfigChannel+0x786>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004712:	2b00      	cmp	r3, #0
 8004714:	d107      	bne.n	8004726 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	0e9b      	lsrs	r3, r3, #26
 800471c:	3301      	adds	r3, #1
 800471e:	069b      	lsls	r3, r3, #26
 8004720:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004724:	e00e      	b.n	8004744 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	623b      	str	r3, [r7, #32]
  return result;
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	3301      	adds	r3, #1
 800473e:	069b      	lsls	r3, r3, #26
 8004740:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0e9b      	lsrs	r3, r3, #26
 8004756:	3301      	adds	r3, #1
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	e010      	b.n	8004786 <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	61bb      	str	r3, [r7, #24]
  return result;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	fab3 f383 	clz	r3, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	3301      	adds	r3, #1
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2101      	movs	r1, #1
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	ea42 0103 	orr.w	r1, r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	0e9b      	lsrs	r3, r3, #26
 800479c:	3301      	adds	r3, #1
 800479e:	f003 021f 	and.w	r2, r3, #31
 80047a2:	4613      	mov	r3, r2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	4413      	add	r3, r2
 80047a8:	3b1e      	subs	r3, #30
 80047aa:	051b      	lsls	r3, r3, #20
 80047ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047b0:	e014      	b.n	80047dc <HAL_ADCEx_InjectedConfigChannel+0x784>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	613b      	str	r3, [r7, #16]
  return result;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	f003 021f 	and.w	r2, r3, #31
 80047ce:	4613      	mov	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	3b1e      	subs	r3, #30
 80047d6:	051b      	lsls	r3, r3, #20
 80047d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047dc:	430b      	orrs	r3, r1
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	6892      	ldr	r2, [r2, #8]
 80047e2:	4619      	mov	r1, r3
 80047e4:	f7ff f9c1 	bl	8003b6a <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d079      	beq.n	80048e8 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047f4:	4829      	ldr	r0, [pc, #164]	; (800489c <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80047f6:	f7ff f90a 	bl	8003a0e <LL_ADC_GetCommonPathInternalCh>
 80047fa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a27      	ldr	r2, [pc, #156]	; (80048a0 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a25      	ldr	r2, [pc, #148]	; (80048a4 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d126      	bne.n	8004860 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d120      	bne.n	8004860 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004826:	d15f      	bne.n	80048e8 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800482c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004830:	4619      	mov	r1, r3
 8004832:	481a      	ldr	r0, [pc, #104]	; (800489c <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8004834:	f7ff f8d8 	bl	80039e8 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8004840:	fba2 2303 	umull	r2, r3, r2, r3
 8004844:	099a      	lsrs	r2, r3, #6
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8004850:	e002      	b.n	8004858 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3b01      	subs	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f9      	bne.n	8004852 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800485e:	e043      	b.n	80048e8 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a12      	ldr	r2, [pc, #72]	; (80048b0 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d126      	bne.n	80048b8 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800486a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800486e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d120      	bne.n	80048b8 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d033      	beq.n	80048e8 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004888:	4619      	mov	r1, r3
 800488a:	4804      	ldr	r0, [pc, #16]	; (800489c <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800488c:	f7ff f8ac 	bl	80039e8 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004890:	e02a      	b.n	80048e8 <HAL_ADCEx_InjectedConfigChannel+0x890>
 8004892:	bf00      	nop
 8004894:	407f0000 	.word	0x407f0000
 8004898:	80080000 	.word	0x80080000
 800489c:	50000300 	.word	0x50000300
 80048a0:	c3210000 	.word	0xc3210000
 80048a4:	90c00010 	.word	0x90c00010
 80048a8:	20000000 	.word	0x20000000
 80048ac:	053e2d63 	.word	0x053e2d63
 80048b0:	c7520000 	.word	0xc7520000
 80048b4:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a0f      	ldr	r2, [pc, #60]	; (80048fc <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d112      	bne.n	80048e8 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048e0:	4619      	mov	r1, r3
 80048e2:	4808      	ldr	r0, [pc, #32]	; (8004904 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 80048e4:	f7ff f880 	bl	80039e8 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80048f0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	37a0      	adds	r7, #160	; 0xa0
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	cb840000 	.word	0xcb840000
 8004900:	50000100 	.word	0x50000100
 8004904:	50000300 	.word	0x50000300

08004908 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b0a1      	sub	sp, #132	; 0x84
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004922:	2302      	movs	r3, #2
 8004924:	e087      	b.n	8004a36 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004936:	d102      	bne.n	800493e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004938:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	e001      	b.n	8004942 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e06a      	b.n	8004a36 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff f99c 	bl	8003ca0 <LL_ADC_REG_IsConversionOngoing>
 8004968:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff f996 	bl	8003ca0 <LL_ADC_REG_IsConversionOngoing>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d14c      	bne.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800497a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800497c:	2b00      	cmp	r3, #0
 800497e:	d149      	bne.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004980:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004982:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d028      	beq.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800498c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800499e:	035b      	lsls	r3, r3, #13
 80049a0:	430b      	orrs	r3, r1
 80049a2:	431a      	orrs	r2, r3
 80049a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80049ac:	f7ff f938 	bl	8003c20 <LL_ADC_IsEnabled>
 80049b0:	4604      	mov	r4, r0
 80049b2:	4823      	ldr	r0, [pc, #140]	; (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80049b4:	f7ff f934 	bl	8003c20 <LL_ADC_IsEnabled>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4323      	orrs	r3, r4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d133      	bne.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049c8:	f023 030f 	bic.w	r3, r3, #15
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	6811      	ldr	r1, [r2, #0]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	6892      	ldr	r2, [r2, #8]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	431a      	orrs	r2, r3
 80049d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049dc:	e024      	b.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049ea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80049ee:	f7ff f917 	bl	8003c20 <LL_ADC_IsEnabled>
 80049f2:	4604      	mov	r4, r0
 80049f4:	4812      	ldr	r0, [pc, #72]	; (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80049f6:	f7ff f913 	bl	8003c20 <LL_ADC_IsEnabled>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4323      	orrs	r3, r4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d112      	bne.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004a0a:	f023 030f 	bic.w	r3, r3, #15
 8004a0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a10:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a12:	e009      	b.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a18:	f043 0220 	orr.w	r2, r3, #32
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a26:	e000      	b.n	8004a2a <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3784      	adds	r7, #132	; 0x84
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	50000100 	.word	0x50000100
 8004a44:	50000300 	.word	0x50000300

08004a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <__NVIC_SetPriorityGrouping+0x44>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a64:	4013      	ands	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a7a:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <__NVIC_SetPriorityGrouping+0x44>)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	60d3      	str	r3, [r2, #12]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a94:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	f003 0307 	and.w	r3, r3, #7
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	e000ed00 	.word	0xe000ed00

08004aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	db0b      	blt.n	8004ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	f003 021f 	and.w	r2, r3, #31
 8004ac4:	4907      	ldr	r1, [pc, #28]	; (8004ae4 <__NVIC_EnableIRQ+0x38>)
 8004ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2001      	movs	r0, #1
 8004ace:	fa00 f202 	lsl.w	r2, r0, r2
 8004ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	e000e100 	.word	0xe000e100

08004ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	6039      	str	r1, [r7, #0]
 8004af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	db0a      	blt.n	8004b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	490c      	ldr	r1, [pc, #48]	; (8004b34 <__NVIC_SetPriority+0x4c>)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b10:	e00a      	b.n	8004b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	4908      	ldr	r1, [pc, #32]	; (8004b38 <__NVIC_SetPriority+0x50>)
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	3b04      	subs	r3, #4
 8004b20:	0112      	lsls	r2, r2, #4
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	440b      	add	r3, r1
 8004b26:	761a      	strb	r2, [r3, #24]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000e100 	.word	0xe000e100
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b089      	sub	sp, #36	; 0x24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f1c3 0307 	rsb	r3, r3, #7
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	bf28      	it	cs
 8004b5a:	2304      	movcs	r3, #4
 8004b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d902      	bls.n	8004b6c <NVIC_EncodePriority+0x30>
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3b03      	subs	r3, #3
 8004b6a:	e000      	b.n	8004b6e <NVIC_EncodePriority+0x32>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b70:	f04f 32ff 	mov.w	r2, #4294967295
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	401a      	ands	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b84:	f04f 31ff 	mov.w	r1, #4294967295
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	43d9      	mvns	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b94:	4313      	orrs	r3, r2
         );
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3724      	adds	r7, #36	; 0x24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bb4:	d301      	bcc.n	8004bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e00f      	b.n	8004bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bba:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <SysTick_Config+0x40>)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bc2:	210f      	movs	r1, #15
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc8:	f7ff ff8e 	bl	8004ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <SysTick_Config+0x40>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <SysTick_Config+0x40>)
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	e000e010 	.word	0xe000e010

08004be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff ff29 	bl	8004a48 <__NVIC_SetPriorityGrouping>
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	4603      	mov	r3, r0
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c0c:	f7ff ff40 	bl	8004a90 <__NVIC_GetPriorityGrouping>
 8004c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7ff ff90 	bl	8004b3c <NVIC_EncodePriority>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ff5f 	bl	8004ae8 <__NVIC_SetPriority>
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	4603      	mov	r3, r0
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff ff33 	bl	8004aac <__NVIC_EnableIRQ>
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff ffa4 	bl	8004ba4 <SysTick_Config>
 8004c5c:	4603      	mov	r3, r0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d00d      	beq.n	8004c9a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2204      	movs	r2, #4
 8004c82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e047      	b.n	8004d2a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 020e 	bic.w	r2, r2, #14
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f003 021f 	and.w	r2, r3, #31
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cdc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ce6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00c      	beq.n	8004d0a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cfe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d08:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
    }
  }
  return status;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d42:	e15a      	b.n	8004ffa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	4013      	ands	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 814c 	beq.w	8004ff4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d00b      	beq.n	8004d7c <HAL_GPIO_Init+0x48>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d007      	beq.n	8004d7c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d70:	2b11      	cmp	r3, #17
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b12      	cmp	r3, #18
 8004d7a:	d130      	bne.n	8004dde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	2203      	movs	r2, #3
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4013      	ands	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004db2:	2201      	movs	r2, #1
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	f003 0201 	and.w	r2, r3, #1
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	2203      	movs	r2, #3
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4013      	ands	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_Init+0xea>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b12      	cmp	r3, #18
 8004e1c:	d123      	bne.n	8004e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	08da      	lsrs	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3208      	adds	r2, #8
 8004e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	220f      	movs	r2, #15
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	08da      	lsrs	r2, r3, #3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3208      	adds	r2, #8
 8004e60:	6939      	ldr	r1, [r7, #16]
 8004e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	2203      	movs	r2, #3
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 0203 	and.w	r2, r3, #3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80a6 	beq.w	8004ff4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea8:	4b5b      	ldr	r3, [pc, #364]	; (8005018 <HAL_GPIO_Init+0x2e4>)
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eac:	4a5a      	ldr	r2, [pc, #360]	; (8005018 <HAL_GPIO_Init+0x2e4>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6613      	str	r3, [r2, #96]	; 0x60
 8004eb4:	4b58      	ldr	r3, [pc, #352]	; (8005018 <HAL_GPIO_Init+0x2e4>)
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ec0:	4a56      	ldr	r2, [pc, #344]	; (800501c <HAL_GPIO_Init+0x2e8>)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	220f      	movs	r2, #15
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004eea:	d01f      	beq.n	8004f2c <HAL_GPIO_Init+0x1f8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a4c      	ldr	r2, [pc, #304]	; (8005020 <HAL_GPIO_Init+0x2ec>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d019      	beq.n	8004f28 <HAL_GPIO_Init+0x1f4>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a4b      	ldr	r2, [pc, #300]	; (8005024 <HAL_GPIO_Init+0x2f0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <HAL_GPIO_Init+0x1f0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a4a      	ldr	r2, [pc, #296]	; (8005028 <HAL_GPIO_Init+0x2f4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00d      	beq.n	8004f20 <HAL_GPIO_Init+0x1ec>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a49      	ldr	r2, [pc, #292]	; (800502c <HAL_GPIO_Init+0x2f8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <HAL_GPIO_Init+0x1e8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a48      	ldr	r2, [pc, #288]	; (8005030 <HAL_GPIO_Init+0x2fc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d101      	bne.n	8004f18 <HAL_GPIO_Init+0x1e4>
 8004f14:	2305      	movs	r3, #5
 8004f16:	e00a      	b.n	8004f2e <HAL_GPIO_Init+0x1fa>
 8004f18:	2306      	movs	r3, #6
 8004f1a:	e008      	b.n	8004f2e <HAL_GPIO_Init+0x1fa>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	e006      	b.n	8004f2e <HAL_GPIO_Init+0x1fa>
 8004f20:	2303      	movs	r3, #3
 8004f22:	e004      	b.n	8004f2e <HAL_GPIO_Init+0x1fa>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e002      	b.n	8004f2e <HAL_GPIO_Init+0x1fa>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <HAL_GPIO_Init+0x1fa>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	f002 0203 	and.w	r2, r2, #3
 8004f34:	0092      	lsls	r2, r2, #2
 8004f36:	4093      	lsls	r3, r2
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f3e:	4937      	ldr	r1, [pc, #220]	; (800501c <HAL_GPIO_Init+0x2e8>)
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	089b      	lsrs	r3, r3, #2
 8004f44:	3302      	adds	r3, #2
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f4c:	4b39      	ldr	r3, [pc, #228]	; (8005034 <HAL_GPIO_Init+0x300>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	43db      	mvns	r3, r3
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f70:	4a30      	ldr	r2, [pc, #192]	; (8005034 <HAL_GPIO_Init+0x300>)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004f76:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <HAL_GPIO_Init+0x300>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4013      	ands	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f9a:	4a26      	ldr	r2, [pc, #152]	; (8005034 <HAL_GPIO_Init+0x300>)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fa0:	4b24      	ldr	r3, [pc, #144]	; (8005034 <HAL_GPIO_Init+0x300>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4013      	ands	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <HAL_GPIO_Init+0x300>)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fca:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <HAL_GPIO_Init+0x300>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fee:	4a11      	ldr	r2, [pc, #68]	; (8005034 <HAL_GPIO_Init+0x300>)
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	f47f ae9d 	bne.w	8004d44 <HAL_GPIO_Init+0x10>
  }
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000
 800501c:	40010000 	.word	0x40010000
 8005020:	48000400 	.word	0x48000400
 8005024:	48000800 	.word	0x48000800
 8005028:	48000c00 	.word	0x48000c00
 800502c:	48001000 	.word	0x48001000
 8005030:	48001400 	.word	0x48001400
 8005034:	40010400 	.word	0x40010400

08005038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005042:	4b08      	ldr	r3, [pc, #32]	; (8005064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d006      	beq.n	800505c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800504e:	4a05      	ldr	r2, [pc, #20]	; (8005064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd f862 	bl	8002120 <HAL_GPIO_EXTI_Callback>
  }
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40010400 	.word	0x40010400

08005068 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e0bb      	b.n	80051f6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b05      	cmp	r3, #5
 8005088:	d101      	bne.n	800508e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0b3      	b.n	80051f6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d101      	bne.n	800509e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0ab      	b.n	80051f6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509e:	4b58      	ldr	r3, [pc, #352]	; (8005200 <HAL_OPAMP_Init+0x198>)
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	4a57      	ldr	r2, [pc, #348]	; (8005200 <HAL_OPAMP_Init+0x198>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	6613      	str	r3, [r2, #96]	; 0x60
 80050aa:	4b55      	ldr	r3, [pc, #340]	; (8005200 <HAL_OPAMP_Init+0x198>)
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d103      	bne.n	80050ca <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fd f99e 	bl	800240c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d003      	beq.n	80050e0 <HAL_OPAMP_Init+0x78>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b60      	cmp	r3, #96	; 0x60
 80050de:	d133      	bne.n	8005148 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 0110 	bic.w	r1, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b41      	ldr	r3, [pc, #260]	; (8005204 <HAL_OPAMP_Init+0x19c>)
 80050fe:	4013      	ands	r3, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6851      	ldr	r1, [r2, #4]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6892      	ldr	r2, [r2, #8]
 8005108:	4311      	orrs	r1, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6912      	ldr	r2, [r2, #16]
 800510e:	430a      	orrs	r2, r1
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	7d09      	ldrb	r1, [r1, #20]
 8005114:	2901      	cmp	r1, #1
 8005116:	d102      	bne.n	800511e <HAL_OPAMP_Init+0xb6>
 8005118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800511c:	e000      	b.n	8005120 <HAL_OPAMP_Init+0xb8>
 800511e:	2100      	movs	r1, #0
 8005120:	4311      	orrs	r1, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005126:	4311      	orrs	r1, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800512c:	4311      	orrs	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005132:	04d2      	lsls	r2, r2, #19
 8005134:	4311      	orrs	r1, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800513a:	0612      	lsls	r2, r2, #24
 800513c:	4311      	orrs	r1, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	430b      	orrs	r3, r1
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e035      	b.n	80051b4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f023 0110 	bic.w	r1, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_OPAMP_Init+0x19c>)
 8005166:	4013      	ands	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6851      	ldr	r1, [r2, #4]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6892      	ldr	r2, [r2, #8]
 8005170:	4311      	orrs	r1, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68d2      	ldr	r2, [r2, #12]
 8005176:	4311      	orrs	r1, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6912      	ldr	r2, [r2, #16]
 800517c:	430a      	orrs	r2, r1
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	7d09      	ldrb	r1, [r1, #20]
 8005182:	2901      	cmp	r1, #1
 8005184:	d102      	bne.n	800518c <HAL_OPAMP_Init+0x124>
 8005186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800518a:	e000      	b.n	800518e <HAL_OPAMP_Init+0x126>
 800518c:	2100      	movs	r1, #0
 800518e:	4311      	orrs	r1, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005194:	4311      	orrs	r1, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800519a:	4311      	orrs	r1, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051a0:	04d2      	lsls	r2, r2, #19
 80051a2:	4311      	orrs	r1, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051a8:	0612      	lsls	r2, r2, #24
 80051aa:	4311      	orrs	r1, r2
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	db10      	blt.n	80051e0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000
 8005204:	e0003e11 	.word	0xe0003e11

08005208 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
 800521e:	e01d      	b.n	800525c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b05      	cmp	r3, #5
 800522a:	d102      	bne.n	8005232 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
 8005230:	e014      	b.n	800525c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10c      	bne.n	8005258 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2204      	movs	r2, #4
 8005252:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005256:	e001      	b.n	800525c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b08c      	sub	sp, #48	; 0x30
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e2df      	b.n	800584c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d001      	beq.n	800529c <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e2d7      	b.n	800584c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d001      	beq.n	80052ac <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e2cf      	b.n	800584c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d001      	beq.n	80052bc <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e2c7      	b.n	800584c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0202 	orr.w	r2, r2, #2
 80052ca:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0202 	orr.w	r2, r2, #2
 80052da:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0202 	orr.w	r2, r2, #2
 80052ea:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0210 	orr.w	r2, r2, #16
 80052fa:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0210 	orr.w	r2, r2, #16
 800530a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0210 	orr.w	r2, r2, #16
 800531a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800532a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800533a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800534a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800535a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800536a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800537a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 80053ac:	2310      	movs	r3, #16
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 80053b0:	2310      	movs	r3, #16
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 80053b4:	2310      	movs	r3, #16
 80053b6:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 80053b8:	2308      	movs	r3, #8
 80053ba:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 80053bc:	e056      	b.n	800546c <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	061a      	lsls	r2, r3, #24
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	061a      	lsls	r2, r3, #24
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	061a      	lsls	r2, r3, #24
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8005400:	2002      	movs	r0, #2
 8005402:	f7fd fd45 	bl	8002e90 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d004      	beq.n	800541e <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8005414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800541c:	e003      	b.n	8005426 <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 800541e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8005434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	4413      	add	r3, r2
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
 800543c:	e003      	b.n	8005446 <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e003      	b.n	8005466 <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1a5      	bne.n	80053be <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	061a      	lsls	r2, r3, #24
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	061a      	lsls	r2, r3, #24
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	061a      	lsls	r2, r3, #24
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 80054b4:	2002      	movs	r0, #2
 80054b6:	f7fd fceb 	bl	8002e90 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 80054c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ca:	3301      	adds	r3, #1
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	061a      	lsls	r2, r3, #24
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	3301      	adds	r3, #1
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	061a      	lsls	r2, r3, #24
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00d      	beq.n	8005538 <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	3301      	adds	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	061a      	lsls	r2, r3, #24
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800554a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800555e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005572:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 8005574:	2310      	movs	r3, #16
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 8005578:	2310      	movs	r3, #16
 800557a:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 800557c:	2310      	movs	r3, #16
 800557e:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 8005580:	2308      	movs	r3, #8
 8005582:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8005584:	e056      	b.n	8005634 <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	04da      	lsls	r2, r3, #19
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	04da      	lsls	r2, r3, #19
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	04da      	lsls	r2, r3, #19
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 80055c8:	2002      	movs	r0, #2
 80055ca:	f7fd fc61 	bl	8002e90 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 80055dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e4:	e003      	b.n	80055ee <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 80055e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 80055fc:	6a3a      	ldr	r2, [r7, #32]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	4413      	add	r3, r2
 8005602:	623b      	str	r3, [r7, #32]
 8005604:	e003      	b.n	800560e <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 8005606:	6a3a      	ldr	r2, [r7, #32]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4413      	add	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	e003      	b.n	800562e <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1a5      	bne.n	8005586 <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	04da      	lsls	r2, r3, #19
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	04da      	lsls	r2, r3, #19
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	04da      	lsls	r2, r3, #19
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 800567c:	2002      	movs	r0, #2
 800567e:	f7fd fc07 	bl	8002e90 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00d      	beq.n	80056ac <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	3301      	adds	r3, #1
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	04da      	lsls	r2, r3, #19
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	3301      	adds	r3, #1
 80056be:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	04da      	lsls	r2, r3, #19
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00d      	beq.n	8005700 <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	3301      	adds	r3, #1
 80056e8:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	04da      	lsls	r2, r3, #19
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800570e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800571e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0201 	bic.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0202 	bic.w	r2, r2, #2
 800576e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0202 	bic.w	r2, r2, #2
 800577e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0202 	bic.w	r2, r2, #2
 800578e:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005794:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6a3a      	ldr	r2, [r7, #32]
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2210      	movs	r2, #16
 80057b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2210      	movs	r2, #16
 80057be:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2210      	movs	r2, #16
 80057c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	061a      	lsls	r2, r3, #24
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	061a      	lsls	r2, r3, #24
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	061a      	lsls	r2, r3, #24
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	04da      	lsls	r2, r3, #19
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	04da      	lsls	r2, r3, #19
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	04da      	lsls	r2, r3, #19
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3730      	adds	r7, #48	; 0x30
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d141      	bne.n	80058e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005862:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586e:	d131      	bne.n	80058d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005870:	4b47      	ldr	r3, [pc, #284]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005876:	4a46      	ldr	r2, [pc, #280]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800587c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005880:	4b43      	ldr	r3, [pc, #268]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005888:	4a41      	ldr	r2, [pc, #260]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800588e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005890:	4b40      	ldr	r3, [pc, #256]	; (8005994 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2232      	movs	r2, #50	; 0x32
 8005896:	fb02 f303 	mul.w	r3, r2, r3
 800589a:	4a3f      	ldr	r2, [pc, #252]	; (8005998 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	0c9b      	lsrs	r3, r3, #18
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058a6:	e002      	b.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ae:	4b38      	ldr	r3, [pc, #224]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ba:	d102      	bne.n	80058c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f2      	bne.n	80058a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058c2:	4b33      	ldr	r3, [pc, #204]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ce:	d158      	bne.n	8005982 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e057      	b.n	8005984 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058d4:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058da:	4a2d      	ldr	r2, [pc, #180]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058e4:	e04d      	b.n	8005982 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ec:	d141      	bne.n	8005972 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058ee:	4b28      	ldr	r3, [pc, #160]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fa:	d131      	bne.n	8005960 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058fc:	4b24      	ldr	r3, [pc, #144]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005902:	4a23      	ldr	r2, [pc, #140]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005908:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800590c:	4b20      	ldr	r3, [pc, #128]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005914:	4a1e      	ldr	r2, [pc, #120]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800591a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800591c:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2232      	movs	r2, #50	; 0x32
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	0c9b      	lsrs	r3, r3, #18
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005932:	e002      	b.n	800593a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3b01      	subs	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800593a:	4b15      	ldr	r3, [pc, #84]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005946:	d102      	bne.n	800594e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f2      	bne.n	8005934 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800594e:	4b10      	ldr	r3, [pc, #64]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595a:	d112      	bne.n	8005982 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e011      	b.n	8005984 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005966:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800596c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005970:	e007      	b.n	8005982 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005972:	4b07      	ldr	r3, [pc, #28]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800597a:	4a05      	ldr	r2, [pc, #20]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800597c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005980:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	40007000 	.word	0x40007000
 8005994:	20000000 	.word	0x20000000
 8005998:	431bde83 	.word	0x431bde83

0800599c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e308      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d075      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ba:	4ba3      	ldr	r3, [pc, #652]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059c4:	4ba0      	ldr	r3, [pc, #640]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	d102      	bne.n	80059da <HAL_RCC_OscConfig+0x3e>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d002      	beq.n	80059e0 <HAL_RCC_OscConfig+0x44>
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d10b      	bne.n	80059f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e0:	4b99      	ldr	r3, [pc, #612]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d05b      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x108>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d157      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e2e3      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d106      	bne.n	8005a10 <HAL_RCC_OscConfig+0x74>
 8005a02:	4b91      	ldr	r3, [pc, #580]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a90      	ldr	r2, [pc, #576]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e01d      	b.n	8005a4c <HAL_RCC_OscConfig+0xb0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a18:	d10c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x98>
 8005a1a:	4b8b      	ldr	r3, [pc, #556]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a8a      	ldr	r2, [pc, #552]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a87      	ldr	r2, [pc, #540]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e00b      	b.n	8005a4c <HAL_RCC_OscConfig+0xb0>
 8005a34:	4b84      	ldr	r3, [pc, #528]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a83      	ldr	r2, [pc, #524]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	4b81      	ldr	r3, [pc, #516]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a80      	ldr	r2, [pc, #512]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d013      	beq.n	8005a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fd fa10 	bl	8002e78 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a5c:	f7fd fa0c 	bl	8002e78 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b64      	cmp	r3, #100	; 0x64
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e2a8      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a6e:	4b76      	ldr	r3, [pc, #472]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0xc0>
 8005a7a:	e014      	b.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7fd f9fc 	bl	8002e78 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a84:	f7fd f9f8 	bl	8002e78 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b64      	cmp	r3, #100	; 0x64
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e294      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a96:	4b6c      	ldr	r3, [pc, #432]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0xe8>
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d075      	beq.n	8005b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ab2:	4b65      	ldr	r3, [pc, #404]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005abc:	4b62      	ldr	r3, [pc, #392]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	d102      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x136>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d002      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x13c>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d11f      	bne.n	8005b18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ad8:	4b5b      	ldr	r3, [pc, #364]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_RCC_OscConfig+0x154>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e267      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af0:	4b55      	ldr	r3, [pc, #340]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	061b      	lsls	r3, r3, #24
 8005afe:	4952      	ldr	r1, [pc, #328]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b04:	4b51      	ldr	r3, [pc, #324]	; (8005c4c <HAL_RCC_OscConfig+0x2b0>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fd f969 	bl	8002de0 <HAL_InitTick>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d043      	beq.n	8005b9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e253      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d023      	beq.n	8005b68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b20:	4b49      	ldr	r3, [pc, #292]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a48      	ldr	r2, [pc, #288]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fd f9a4 	bl	8002e78 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b34:	f7fd f9a0 	bl	8002e78 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e23c      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b46:	4b40      	ldr	r3, [pc, #256]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b52:	4b3d      	ldr	r3, [pc, #244]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	061b      	lsls	r3, r3, #24
 8005b60:	4939      	ldr	r1, [pc, #228]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	604b      	str	r3, [r1, #4]
 8005b66:	e01a      	b.n	8005b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b68:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a36      	ldr	r2, [pc, #216]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7fd f980 	bl	8002e78 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7c:	f7fd f97c 	bl	8002e78 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e218      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0x1e0>
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d03c      	beq.n	8005c24 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01c      	beq.n	8005bec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb2:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb8:	4a23      	ldr	r2, [pc, #140]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc2:	f7fd f959 	bl	8002e78 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bca:	f7fd f955 	bl	8002e78 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e1f1      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0ef      	beq.n	8005bca <HAL_RCC_OscConfig+0x22e>
 8005bea:	e01b      	b.n	8005c24 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf2:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fd f93c 	bl	8002e78 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c04:	f7fd f938 	bl	8002e78 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e1d4      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1ef      	bne.n	8005c04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80ab 	beq.w	8005d88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c32:	2300      	movs	r3, #0
 8005c34:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c36:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_RCC_OscConfig+0x2b4>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e005      	b.n	8005c52 <HAL_RCC_OscConfig+0x2b6>
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	20000004 	.word	0x20000004
 8005c50:	2300      	movs	r3, #0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00d      	beq.n	8005c72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c56:	4baf      	ldr	r3, [pc, #700]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	4aae      	ldr	r2, [pc, #696]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c60:	6593      	str	r3, [r2, #88]	; 0x58
 8005c62:	4bac      	ldr	r3, [pc, #688]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c72:	4ba9      	ldr	r3, [pc, #676]	; (8005f18 <HAL_RCC_OscConfig+0x57c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d118      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c7e:	4ba6      	ldr	r3, [pc, #664]	; (8005f18 <HAL_RCC_OscConfig+0x57c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4aa5      	ldr	r2, [pc, #660]	; (8005f18 <HAL_RCC_OscConfig+0x57c>)
 8005c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c8a:	f7fd f8f5 	bl	8002e78 <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c92:	f7fd f8f1 	bl	8002e78 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e18d      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ca4:	4b9c      	ldr	r3, [pc, #624]	; (8005f18 <HAL_RCC_OscConfig+0x57c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d108      	bne.n	8005cca <HAL_RCC_OscConfig+0x32e>
 8005cb8:	4b96      	ldr	r3, [pc, #600]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbe:	4a95      	ldr	r2, [pc, #596]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cc8:	e024      	b.n	8005d14 <HAL_RCC_OscConfig+0x378>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d110      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x358>
 8005cd2:	4b90      	ldr	r3, [pc, #576]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd8:	4a8e      	ldr	r2, [pc, #568]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005cda:	f043 0304 	orr.w	r3, r3, #4
 8005cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ce2:	4b8c      	ldr	r3, [pc, #560]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce8:	4a8a      	ldr	r2, [pc, #552]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cf2:	e00f      	b.n	8005d14 <HAL_RCC_OscConfig+0x378>
 8005cf4:	4b87      	ldr	r3, [pc, #540]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfa:	4a86      	ldr	r2, [pc, #536]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d04:	4b83      	ldr	r3, [pc, #524]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0a:	4a82      	ldr	r2, [pc, #520]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005d0c:	f023 0304 	bic.w	r3, r3, #4
 8005d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d016      	beq.n	8005d4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fd f8ac 	bl	8002e78 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d24:	f7fd f8a8 	bl	8002e78 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e142      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d3a:	4b76      	ldr	r3, [pc, #472]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ed      	beq.n	8005d24 <HAL_RCC_OscConfig+0x388>
 8005d48:	e015      	b.n	8005d76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fd f895 	bl	8002e78 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d50:	e00a      	b.n	8005d68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fd f891 	bl	8002e78 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e12b      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d68:	4b6a      	ldr	r3, [pc, #424]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1ed      	bne.n	8005d52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d76:	7ffb      	ldrb	r3, [r7, #31]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d105      	bne.n	8005d88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7c:	4b65      	ldr	r3, [pc, #404]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	4a64      	ldr	r2, [pc, #400]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d03c      	beq.n	8005e0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01c      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d9c:	4b5d      	ldr	r3, [pc, #372]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005da2:	4a5c      	ldr	r2, [pc, #368]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dac:	f7fd f864 	bl	8002e78 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005db4:	f7fd f860 	bl	8002e78 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e0fc      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dc6:	4b53      	ldr	r3, [pc, #332]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0ef      	beq.n	8005db4 <HAL_RCC_OscConfig+0x418>
 8005dd4:	e01b      	b.n	8005e0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ddc:	4a4d      	ldr	r2, [pc, #308]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de6:	f7fd f847 	bl	8002e78 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dee:	f7fd f843 	bl	8002e78 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e0df      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e00:	4b44      	ldr	r3, [pc, #272]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1ef      	bne.n	8005dee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80d3 	beq.w	8005fbe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e18:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 030c 	and.w	r3, r3, #12
 8005e20:	2b0c      	cmp	r3, #12
 8005e22:	f000 808d 	beq.w	8005f40 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d15a      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2e:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a38      	ldr	r2, [pc, #224]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005e34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3a:	f7fd f81d 	bl	8002e78 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e42:	f7fd f819 	bl	8002e78 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e0b5      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e54:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f0      	bne.n	8005e42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e60:	4b2c      	ldr	r3, [pc, #176]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	4b2d      	ldr	r3, [pc, #180]	; (8005f1c <HAL_RCC_OscConfig+0x580>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6a11      	ldr	r1, [r2, #32]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e70:	3a01      	subs	r2, #1
 8005e72:	0112      	lsls	r2, r2, #4
 8005e74:	4311      	orrs	r1, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005e7a:	0212      	lsls	r2, r2, #8
 8005e7c:	4311      	orrs	r1, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e82:	0852      	lsrs	r2, r2, #1
 8005e84:	3a01      	subs	r2, #1
 8005e86:	0552      	lsls	r2, r2, #21
 8005e88:	4311      	orrs	r1, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e8e:	0852      	lsrs	r2, r2, #1
 8005e90:	3a01      	subs	r2, #1
 8005e92:	0652      	lsls	r2, r2, #25
 8005e94:	4311      	orrs	r1, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e9a:	06d2      	lsls	r2, r2, #27
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	491d      	ldr	r1, [pc, #116]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eb0:	4b18      	ldr	r3, [pc, #96]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fc ffdc 	bl	8002e78 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fc ffd8 	bl	8002e78 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e074      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x528>
 8005ee2:	e06c      	b.n	8005fbe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005ef0:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a07      	ldr	r2, [pc, #28]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <HAL_RCC_OscConfig+0x578>)
 8005f02:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7fc ffb4 	bl	8002e78 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f12:	e00e      	b.n	8005f32 <HAL_RCC_OscConfig+0x596>
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40007000 	.word	0x40007000
 8005f1c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f20:	f7fc ffaa 	bl	8002e78 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e046      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f32:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1f0      	bne.n	8005f20 <HAL_RCC_OscConfig+0x584>
 8005f3e:	e03e      	b.n	8005fbe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e039      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f4c:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f003 0203 	and.w	r2, r3, #3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d12c      	bne.n	8005fba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d123      	bne.n	8005fba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d11b      	bne.n	8005fba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d113      	bne.n	8005fba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	085b      	lsrs	r3, r3, #1
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d109      	bne.n	8005fba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d001      	beq.n	8005fbe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40021000 	.word	0x40021000

08005fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e11e      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe4:	4b91      	ldr	r3, [pc, #580]	; (800622c <HAL_RCC_ClockConfig+0x260>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d910      	bls.n	8006014 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff2:	4b8e      	ldr	r3, [pc, #568]	; (800622c <HAL_RCC_ClockConfig+0x260>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f023 020f 	bic.w	r2, r3, #15
 8005ffa:	498c      	ldr	r1, [pc, #560]	; (800622c <HAL_RCC_ClockConfig+0x260>)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006002:	4b8a      	ldr	r3, [pc, #552]	; (800622c <HAL_RCC_ClockConfig+0x260>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d001      	beq.n	8006014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e106      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d073      	beq.n	8006108 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d129      	bne.n	800607c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006028:	4b81      	ldr	r3, [pc, #516]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0f4      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006038:	f000 f99e 	bl	8006378 <RCC_GetSysClockFreqFromPLLSource>
 800603c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	4a7c      	ldr	r2, [pc, #496]	; (8006234 <HAL_RCC_ClockConfig+0x268>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d93f      	bls.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006046:	4b7a      	ldr	r3, [pc, #488]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800605a:	2b00      	cmp	r3, #0
 800605c:	d033      	beq.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006062:	2b00      	cmp	r3, #0
 8006064:	d12f      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006066:	4b72      	ldr	r3, [pc, #456]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606e:	4a70      	ldr	r2, [pc, #448]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006074:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e024      	b.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d107      	bne.n	8006094 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006084:	4b6a      	ldr	r3, [pc, #424]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0c6      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006094:	4b66      	ldr	r3, [pc, #408]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0be      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80060a4:	f000 f8ce 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 80060a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4a61      	ldr	r2, [pc, #388]	; (8006234 <HAL_RCC_ClockConfig+0x268>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d909      	bls.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060b2:	4b5f      	ldr	r3, [pc, #380]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ba:	4a5d      	ldr	r2, [pc, #372]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060c6:	4b5a      	ldr	r3, [pc, #360]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f023 0203 	bic.w	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4957      	ldr	r1, [pc, #348]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d8:	f7fc fece 	bl	8002e78 <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e0:	f7fc feca 	bl	8002e78 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e095      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f6:	4b4e      	ldr	r3, [pc, #312]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 020c 	and.w	r2, r3, #12
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	429a      	cmp	r2, r3
 8006106:	d1eb      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d023      	beq.n	800615c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006120:	4b43      	ldr	r3, [pc, #268]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4a42      	ldr	r2, [pc, #264]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006126:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800612a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006138:	4b3d      	ldr	r3, [pc, #244]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006140:	4a3b      	ldr	r2, [pc, #236]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006142:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006146:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006148:	4b39      	ldr	r3, [pc, #228]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	4936      	ldr	r1, [pc, #216]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
 800615a:	e008      	b.n	800616e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d105      	bne.n	800616e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006162:	4b33      	ldr	r3, [pc, #204]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4a32      	ldr	r2, [pc, #200]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800616c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800616e:	4b2f      	ldr	r3, [pc, #188]	; (800622c <HAL_RCC_ClockConfig+0x260>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d21d      	bcs.n	80061b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800617c:	4b2b      	ldr	r3, [pc, #172]	; (800622c <HAL_RCC_ClockConfig+0x260>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f023 020f 	bic.w	r2, r3, #15
 8006184:	4929      	ldr	r1, [pc, #164]	; (800622c <HAL_RCC_ClockConfig+0x260>)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800618c:	f7fc fe74 	bl	8002e78 <HAL_GetTick>
 8006190:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	e00a      	b.n	80061aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006194:	f7fc fe70 	bl	8002e78 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e03b      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061aa:	4b20      	ldr	r3, [pc, #128]	; (800622c <HAL_RCC_ClockConfig+0x260>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d1ed      	bne.n	8006194 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061c4:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4917      	ldr	r1, [pc, #92]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d009      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061e2:	4b13      	ldr	r3, [pc, #76]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	490f      	ldr	r1, [pc, #60]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061f6:	f000 f825 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 80061fa:	4601      	mov	r1, r0
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	4a0c      	ldr	r2, [pc, #48]	; (8006238 <HAL_RCC_ClockConfig+0x26c>)
 8006208:	5cd3      	ldrb	r3, [r2, r3]
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	fa21 f303 	lsr.w	r3, r1, r3
 8006212:	4a0a      	ldr	r2, [pc, #40]	; (800623c <HAL_RCC_ClockConfig+0x270>)
 8006214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <HAL_RCC_ClockConfig+0x274>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7fc fde0 	bl	8002de0 <HAL_InitTick>
 8006220:	4603      	mov	r3, r0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40022000 	.word	0x40022000
 8006230:	40021000 	.word	0x40021000
 8006234:	04c4b400 	.word	0x04c4b400
 8006238:	0800b140 	.word	0x0800b140
 800623c:	20000000 	.word	0x20000000
 8006240:	20000004 	.word	0x20000004

08006244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800624a:	4b2c      	ldr	r3, [pc, #176]	; (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b04      	cmp	r3, #4
 8006254:	d102      	bne.n	800625c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006256:	4b2a      	ldr	r3, [pc, #168]	; (8006300 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e047      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800625c:	4b27      	ldr	r3, [pc, #156]	; (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 030c 	and.w	r3, r3, #12
 8006264:	2b08      	cmp	r3, #8
 8006266:	d102      	bne.n	800626e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006268:	4b26      	ldr	r3, [pc, #152]	; (8006304 <HAL_RCC_GetSysClockFreq+0xc0>)
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	e03e      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800626e:	4b23      	ldr	r3, [pc, #140]	; (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 030c 	and.w	r3, r3, #12
 8006276:	2b0c      	cmp	r3, #12
 8006278:	d136      	bne.n	80062e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800627a:	4b20      	ldr	r3, [pc, #128]	; (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006284:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	3301      	adds	r3, #1
 8006290:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d10c      	bne.n	80062b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006298:	4a1a      	ldr	r2, [pc, #104]	; (8006304 <HAL_RCC_GetSysClockFreq+0xc0>)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	4a16      	ldr	r2, [pc, #88]	; (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80062a2:	68d2      	ldr	r2, [r2, #12]
 80062a4:	0a12      	lsrs	r2, r2, #8
 80062a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	617b      	str	r3, [r7, #20]
      break;
 80062b0:	e00c      	b.n	80062cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062b2:	4a13      	ldr	r2, [pc, #76]	; (8006300 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ba:	4a10      	ldr	r2, [pc, #64]	; (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80062bc:	68d2      	ldr	r2, [r2, #12]
 80062be:	0a12      	lsrs	r2, r2, #8
 80062c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	617b      	str	r3, [r7, #20]
      break;
 80062ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	0e5b      	lsrs	r3, r3, #25
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	3301      	adds	r3, #1
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	e001      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062ec:	693b      	ldr	r3, [r7, #16]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40021000 	.word	0x40021000
 8006300:	00f42400 	.word	0x00f42400
 8006304:	007a1200 	.word	0x007a1200

08006308 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800630c:	4b03      	ldr	r3, [pc, #12]	; (800631c <HAL_RCC_GetHCLKFreq+0x14>)
 800630e:	681b      	ldr	r3, [r3, #0]
}
 8006310:	4618      	mov	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000000 	.word	0x20000000

08006320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006324:	f7ff fff0 	bl	8006308 <HAL_RCC_GetHCLKFreq>
 8006328:	4601      	mov	r1, r0
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4a04      	ldr	r2, [pc, #16]	; (8006348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006336:	5cd3      	ldrb	r3, [r2, r3]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40021000 	.word	0x40021000
 8006348:	0800b150 	.word	0x0800b150

0800634c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006350:	f7ff ffda 	bl	8006308 <HAL_RCC_GetHCLKFreq>
 8006354:	4601      	mov	r1, r0
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	0adb      	lsrs	r3, r3, #11
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	4a04      	ldr	r2, [pc, #16]	; (8006374 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006362:	5cd3      	ldrb	r3, [r2, r3]
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800636c:	4618      	mov	r0, r3
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40021000 	.word	0x40021000
 8006374:	0800b150 	.word	0x0800b150

08006378 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800637e:	4b1e      	ldr	r3, [pc, #120]	; (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006388:	4b1b      	ldr	r3, [pc, #108]	; (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	3301      	adds	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d10c      	bne.n	80063b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800639c:	4a17      	ldr	r2, [pc, #92]	; (80063fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063a6:	68d2      	ldr	r2, [r2, #12]
 80063a8:	0a12      	lsrs	r2, r2, #8
 80063aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063ae:	fb02 f303 	mul.w	r3, r2, r3
 80063b2:	617b      	str	r3, [r7, #20]
    break;
 80063b4:	e00c      	b.n	80063d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063b6:	4a12      	ldr	r2, [pc, #72]	; (8006400 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80063be:	4a0e      	ldr	r2, [pc, #56]	; (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063c0:	68d2      	ldr	r2, [r2, #12]
 80063c2:	0a12      	lsrs	r2, r2, #8
 80063c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063c8:	fb02 f303 	mul.w	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]
    break;
 80063ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063d0:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	0e5b      	lsrs	r3, r3, #25
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80063ea:	687b      	ldr	r3, [r7, #4]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40021000 	.word	0x40021000
 80063fc:	007a1200 	.word	0x007a1200
 8006400:	00f42400 	.word	0x00f42400

08006404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800640c:	2300      	movs	r3, #0
 800640e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006410:	2300      	movs	r3, #0
 8006412:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8098 	beq.w	8006552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006422:	2300      	movs	r3, #0
 8006424:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006426:	4b43      	ldr	r3, [pc, #268]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	4b40      	ldr	r3, [pc, #256]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006436:	4a3f      	ldr	r2, [pc, #252]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643c:	6593      	str	r3, [r2, #88]	; 0x58
 800643e:	4b3d      	ldr	r3, [pc, #244]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006446:	60bb      	str	r3, [r7, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800644a:	2301      	movs	r3, #1
 800644c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800644e:	4b3a      	ldr	r3, [pc, #232]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a39      	ldr	r2, [pc, #228]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006458:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800645a:	f7fc fd0d 	bl	8002e78 <HAL_GetTick>
 800645e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006460:	e009      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006462:	f7fc fd09 	bl	8002e78 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d902      	bls.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	74fb      	strb	r3, [r7, #19]
        break;
 8006474:	e005      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006476:	4b30      	ldr	r3, [pc, #192]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0ef      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006482:	7cfb      	ldrb	r3, [r7, #19]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d159      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006488:	4b2a      	ldr	r3, [pc, #168]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006492:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01e      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d019      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064a4:	4b23      	ldr	r3, [pc, #140]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064b0:	4b20      	ldr	r3, [pc, #128]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b6:	4a1f      	ldr	r2, [pc, #124]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064c0:	4b1c      	ldr	r3, [pc, #112]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c6:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064d0:	4a18      	ldr	r2, [pc, #96]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d016      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e2:	f7fc fcc9 	bl	8002e78 <HAL_GetTick>
 80064e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064e8:	e00b      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ea:	f7fc fcc5 	bl	8002e78 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d902      	bls.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	74fb      	strb	r3, [r7, #19]
            break;
 8006500:	e006      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0ec      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	4903      	ldr	r1, [pc, #12]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800652c:	e008      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800652e:	7cfb      	ldrb	r3, [r7, #19]
 8006530:	74bb      	strb	r3, [r7, #18]
 8006532:	e005      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006534:	40021000 	.word	0x40021000
 8006538:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006540:	7c7b      	ldrb	r3, [r7, #17]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d105      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006546:	4ba6      	ldr	r3, [pc, #664]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654a:	4aa5      	ldr	r2, [pc, #660]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800654c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006550:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800655e:	4ba0      	ldr	r3, [pc, #640]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006564:	f023 0203 	bic.w	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	499c      	ldr	r1, [pc, #624]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006580:	4b97      	ldr	r3, [pc, #604]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006586:	f023 020c 	bic.w	r2, r3, #12
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	4994      	ldr	r1, [pc, #592]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065a2:	4b8f      	ldr	r3, [pc, #572]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	498b      	ldr	r1, [pc, #556]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065c4:	4b86      	ldr	r3, [pc, #536]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	4983      	ldr	r1, [pc, #524]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065e6:	4b7e      	ldr	r3, [pc, #504]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	497a      	ldr	r1, [pc, #488]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006608:	4b75      	ldr	r3, [pc, #468]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	4972      	ldr	r1, [pc, #456]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800662a:	4b6d      	ldr	r3, [pc, #436]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4969      	ldr	r1, [pc, #420]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800664c:	4b64      	ldr	r3, [pc, #400]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006652:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	4961      	ldr	r1, [pc, #388]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800666e:	4b5c      	ldr	r3, [pc, #368]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006674:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	4958      	ldr	r1, [pc, #352]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668c:	2b00      	cmp	r3, #0
 800668e:	d015      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006690:	4b53      	ldr	r3, [pc, #332]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	4950      	ldr	r1, [pc, #320]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ae:	d105      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b0:	4b4b      	ldr	r3, [pc, #300]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a4a      	ldr	r2, [pc, #296]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066c8:	4b45      	ldr	r3, [pc, #276]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	4942      	ldr	r1, [pc, #264]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066e6:	d105      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066e8:	4b3d      	ldr	r3, [pc, #244]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	4a3c      	ldr	r2, [pc, #240]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d015      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006700:	4b37      	ldr	r3, [pc, #220]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006706:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	4934      	ldr	r1, [pc, #208]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800671e:	d105      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006720:	4b2f      	ldr	r3, [pc, #188]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4a2e      	ldr	r2, [pc, #184]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800672a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d015      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006738:	4b29      	ldr	r3, [pc, #164]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	4926      	ldr	r1, [pc, #152]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006756:	d105      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006758:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006762:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	4918      	ldr	r1, [pc, #96]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800678e:	d105      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006790:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800679a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d015      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80067a8:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	490a      	ldr	r1, [pc, #40]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c6:	d105      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4a04      	ldr	r2, [pc, #16]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40021000 	.word	0x40021000

080067e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e049      	b.n	800688a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fc f8ea 	bl	80029e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f000 ff1a 	bl	800765c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e049      	b.n	8006938 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f841 	bl	8006940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2202      	movs	r2, #2
 80068c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3304      	adds	r3, #4
 80068ce:	4619      	mov	r1, r3
 80068d0:	4610      	mov	r0, r2
 80068d2:	f000 fec3 	bl	800765c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <HAL_TIM_PWM_Start+0x24>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	e03c      	b.n	80069f2 <HAL_TIM_PWM_Start+0x9e>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b04      	cmp	r3, #4
 800697c:	d109      	bne.n	8006992 <HAL_TIM_PWM_Start+0x3e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	bf14      	ite	ne
 800698a:	2301      	movne	r3, #1
 800698c:	2300      	moveq	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	e02f      	b.n	80069f2 <HAL_TIM_PWM_Start+0x9e>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b08      	cmp	r3, #8
 8006996:	d109      	bne.n	80069ac <HAL_TIM_PWM_Start+0x58>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	e022      	b.n	80069f2 <HAL_TIM_PWM_Start+0x9e>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b0c      	cmp	r3, #12
 80069b0:	d109      	bne.n	80069c6 <HAL_TIM_PWM_Start+0x72>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	bf14      	ite	ne
 80069be:	2301      	movne	r3, #1
 80069c0:	2300      	moveq	r3, #0
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	e015      	b.n	80069f2 <HAL_TIM_PWM_Start+0x9e>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d109      	bne.n	80069e0 <HAL_TIM_PWM_Start+0x8c>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	bf14      	ite	ne
 80069d8:	2301      	movne	r3, #1
 80069da:	2300      	moveq	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	e008      	b.n	80069f2 <HAL_TIM_PWM_Start+0x9e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	bf14      	ite	ne
 80069ec:	2301      	movne	r3, #1
 80069ee:	2300      	moveq	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e06e      	b.n	8006ad8 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_PWM_Start+0xb6>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a08:	e023      	b.n	8006a52 <HAL_TIM_PWM_Start+0xfe>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d104      	bne.n	8006a1a <HAL_TIM_PWM_Start+0xc6>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a18:	e01b      	b.n	8006a52 <HAL_TIM_PWM_Start+0xfe>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d104      	bne.n	8006a2a <HAL_TIM_PWM_Start+0xd6>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a28:	e013      	b.n	8006a52 <HAL_TIM_PWM_Start+0xfe>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b0c      	cmp	r3, #12
 8006a2e:	d104      	bne.n	8006a3a <HAL_TIM_PWM_Start+0xe6>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a38:	e00b      	b.n	8006a52 <HAL_TIM_PWM_Start+0xfe>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_PWM_Start+0xf6>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a48:	e003      	b.n	8006a52 <HAL_TIM_PWM_Start+0xfe>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2201      	movs	r2, #1
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 fbee 	bl	800823c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1e      	ldr	r2, [pc, #120]	; (8006ae0 <HAL_TIM_PWM_Start+0x18c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d013      	beq.n	8006a92 <HAL_TIM_PWM_Start+0x13e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ae4 <HAL_TIM_PWM_Start+0x190>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00e      	beq.n	8006a92 <HAL_TIM_PWM_Start+0x13e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1b      	ldr	r2, [pc, #108]	; (8006ae8 <HAL_TIM_PWM_Start+0x194>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d009      	beq.n	8006a92 <HAL_TIM_PWM_Start+0x13e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1a      	ldr	r2, [pc, #104]	; (8006aec <HAL_TIM_PWM_Start+0x198>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d004      	beq.n	8006a92 <HAL_TIM_PWM_Start+0x13e>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <HAL_TIM_PWM_Start+0x19c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_PWM_Start+0x142>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <HAL_TIM_PWM_Start+0x144>
 8006a96:	2300      	movs	r3, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <HAL_TIM_PWM_Start+0x1a0>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b06      	cmp	r3, #6
 8006abc:	d00b      	beq.n	8006ad6 <HAL_TIM_PWM_Start+0x182>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac4:	d007      	beq.n	8006ad6 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0201 	orr.w	r2, r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40013400 	.word	0x40013400
 8006ae8:	40014000 	.word	0x40014000
 8006aec:	40014400 	.word	0x40014400
 8006af0:	40014800 	.word	0x40014800
 8006af4:	00010007 	.word	0x00010007

08006af8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2200      	movs	r2, #0
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 fb96 	bl	800823c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a3e      	ldr	r2, [pc, #248]	; (8006c10 <HAL_TIM_PWM_Stop+0x118>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <HAL_TIM_PWM_Stop+0x4a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a3d      	ldr	r2, [pc, #244]	; (8006c14 <HAL_TIM_PWM_Stop+0x11c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00e      	beq.n	8006b42 <HAL_TIM_PWM_Stop+0x4a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a3b      	ldr	r2, [pc, #236]	; (8006c18 <HAL_TIM_PWM_Stop+0x120>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d009      	beq.n	8006b42 <HAL_TIM_PWM_Stop+0x4a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a3a      	ldr	r2, [pc, #232]	; (8006c1c <HAL_TIM_PWM_Stop+0x124>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d004      	beq.n	8006b42 <HAL_TIM_PWM_Stop+0x4a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a38      	ldr	r2, [pc, #224]	; (8006c20 <HAL_TIM_PWM_Stop+0x128>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d101      	bne.n	8006b46 <HAL_TIM_PWM_Stop+0x4e>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <HAL_TIM_PWM_Stop+0x50>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d017      	beq.n	8006b7c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10f      	bne.n	8006b7c <HAL_TIM_PWM_Stop+0x84>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6a1a      	ldr	r2, [r3, #32]
 8006b62:	f244 4344 	movw	r3, #17476	; 0x4444
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d107      	bne.n	8006b7c <HAL_TIM_PWM_Stop+0x84>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10f      	bne.n	8006bac <HAL_TIM_PWM_Stop+0xb4>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	f244 4344 	movw	r3, #17476	; 0x4444
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d107      	bne.n	8006bac <HAL_TIM_PWM_Stop+0xb4>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <HAL_TIM_PWM_Stop+0xc4>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bba:	e023      	b.n	8006c04 <HAL_TIM_PWM_Stop+0x10c>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d104      	bne.n	8006bcc <HAL_TIM_PWM_Stop+0xd4>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bca:	e01b      	b.n	8006c04 <HAL_TIM_PWM_Stop+0x10c>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d104      	bne.n	8006bdc <HAL_TIM_PWM_Stop+0xe4>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bda:	e013      	b.n	8006c04 <HAL_TIM_PWM_Stop+0x10c>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b0c      	cmp	r3, #12
 8006be0:	d104      	bne.n	8006bec <HAL_TIM_PWM_Stop+0xf4>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bea:	e00b      	b.n	8006c04 <HAL_TIM_PWM_Stop+0x10c>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b10      	cmp	r3, #16
 8006bf0:	d104      	bne.n	8006bfc <HAL_TIM_PWM_Stop+0x104>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bfa:	e003      	b.n	8006c04 <HAL_TIM_PWM_Stop+0x10c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40013400 	.word	0x40013400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800

08006c24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e049      	b.n	8006cca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f841 	bl	8006cd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f000 fcfa 	bl	800765c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d104      	bne.n	8006d02 <HAL_TIM_IC_Start+0x1a>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	e023      	b.n	8006d4a <HAL_TIM_IC_Start+0x62>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d104      	bne.n	8006d12 <HAL_TIM_IC_Start+0x2a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	e01b      	b.n	8006d4a <HAL_TIM_IC_Start+0x62>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_IC_Start+0x3a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	e013      	b.n	8006d4a <HAL_TIM_IC_Start+0x62>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b0c      	cmp	r3, #12
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_IC_Start+0x4a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	e00b      	b.n	8006d4a <HAL_TIM_IC_Start+0x62>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d104      	bne.n	8006d42 <HAL_TIM_IC_Start+0x5a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	e003      	b.n	8006d4a <HAL_TIM_IC_Start+0x62>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d104      	bne.n	8006d5c <HAL_TIM_IC_Start+0x74>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	e013      	b.n	8006d84 <HAL_TIM_IC_Start+0x9c>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d104      	bne.n	8006d6c <HAL_TIM_IC_Start+0x84>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	e00b      	b.n	8006d84 <HAL_TIM_IC_Start+0x9c>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d104      	bne.n	8006d7c <HAL_TIM_IC_Start+0x94>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	e003      	b.n	8006d84 <HAL_TIM_IC_Start+0x9c>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d102      	bne.n	8006d92 <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d001      	beq.n	8006d96 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e064      	b.n	8006e60 <HAL_TIM_IC_Start+0x178>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <HAL_TIM_IC_Start+0xbe>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da4:	e023      	b.n	8006dee <HAL_TIM_IC_Start+0x106>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_IC_Start+0xce>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db4:	e01b      	b.n	8006dee <HAL_TIM_IC_Start+0x106>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_IC_Start+0xde>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dc4:	e013      	b.n	8006dee <HAL_TIM_IC_Start+0x106>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b0c      	cmp	r3, #12
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_IC_Start+0xee>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dd4:	e00b      	b.n	8006dee <HAL_TIM_IC_Start+0x106>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b10      	cmp	r3, #16
 8006dda:	d104      	bne.n	8006de6 <HAL_TIM_IC_Start+0xfe>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006de4:	e003      	b.n	8006dee <HAL_TIM_IC_Start+0x106>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d104      	bne.n	8006dfe <HAL_TIM_IC_Start+0x116>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dfc:	e013      	b.n	8006e26 <HAL_TIM_IC_Start+0x13e>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d104      	bne.n	8006e0e <HAL_TIM_IC_Start+0x126>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e0c:	e00b      	b.n	8006e26 <HAL_TIM_IC_Start+0x13e>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d104      	bne.n	8006e1e <HAL_TIM_IC_Start+0x136>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e1c:	e003      	b.n	8006e26 <HAL_TIM_IC_Start+0x13e>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 fa04 	bl	800823c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_TIM_IC_Start+0x180>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b06      	cmp	r3, #6
 8006e44:	d00b      	beq.n	8006e5e <HAL_TIM_IC_Start+0x176>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e4c:	d007      	beq.n	8006e5e <HAL_TIM_IC_Start+0x176>
  {
    __HAL_TIM_ENABLE(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0201 	orr.w	r2, r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	00010007 	.word	0x00010007

08006e6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e097      	b.n	8006fb0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fb fdfd 	bl	8002a94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	f000 fbcb 	bl	800765c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	4313      	orrs	r3, r2
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f0c:	f023 030c 	bic.w	r3, r3, #12
 8006f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	011a      	lsls	r2, r3, #4
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	031b      	lsls	r3, r3, #12
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fc8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fd0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d110      	bne.n	800700a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d102      	bne.n	8006ff4 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fee:	7b7b      	ldrb	r3, [r7, #13]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d001      	beq.n	8006ff8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e068      	b.n	80070ca <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007008:	e031      	b.n	800706e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d110      	bne.n	8007032 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d102      	bne.n	800701c <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007016:	7b3b      	ldrb	r3, [r7, #12]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d001      	beq.n	8007020 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e054      	b.n	80070ca <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007030:	e01d      	b.n	800706e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d108      	bne.n	800704a <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d105      	bne.n	800704a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800703e:	7b7b      	ldrb	r3, [r7, #13]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d102      	bne.n	800704a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007044:	7b3b      	ldrb	r3, [r7, #12]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d001      	beq.n	800704e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e03d      	b.n	80070ca <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2202      	movs	r2, #2
 8007052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2202      	movs	r2, #2
 800705a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2202      	movs	r2, #2
 8007062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <HAL_TIM_Encoder_Start+0xc2>
 8007074:	2b04      	cmp	r3, #4
 8007076:	d008      	beq.n	800708a <HAL_TIM_Encoder_Start+0xd2>
 8007078:	e00f      	b.n	800709a <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2201      	movs	r2, #1
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f8da 	bl	800823c <TIM_CCxChannelCmd>
      break;
 8007088:	e016      	b.n	80070b8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2201      	movs	r2, #1
 8007090:	2104      	movs	r1, #4
 8007092:	4618      	mov	r0, r3
 8007094:	f001 f8d2 	bl	800823c <TIM_CCxChannelCmd>
      break;
 8007098:	e00e      	b.n	80070b8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2201      	movs	r2, #1
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 f8ca 	bl	800823c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2201      	movs	r2, #1
 80070ae:	2104      	movs	r1, #4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f001 f8c3 	bl	800823c <TIM_CCxChannelCmd>
      break;
 80070b6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_TIM_IC_ConfigChannel+0x1a>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e082      	b.n	80071f2 <HAL_TIM_IC_ConfigChannel+0x120>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d11b      	bne.n	8007132 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	6819      	ldr	r1, [r3, #0]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f000 fedd 	bl	8007ec8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 020c 	bic.w	r2, r2, #12
 800711c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6999      	ldr	r1, [r3, #24]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	619a      	str	r2, [r3, #24]
 8007130:	e05a      	b.n	80071e8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d11c      	bne.n	8007172 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6819      	ldr	r1, [r3, #0]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f000 ff55 	bl	8007ff6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800715a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6999      	ldr	r1, [r3, #24]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	021a      	lsls	r2, r3, #8
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	619a      	str	r2, [r3, #24]
 8007170:	e03a      	b.n	80071e8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b08      	cmp	r3, #8
 8007176:	d11b      	bne.n	80071b0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f000 ffa2 	bl	80080d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69da      	ldr	r2, [r3, #28]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 020c 	bic.w	r2, r2, #12
 800719a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69d9      	ldr	r1, [r3, #28]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	61da      	str	r2, [r3, #28]
 80071ae:	e01b      	b.n	80071e8 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	6819      	ldr	r1, [r3, #0]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f000 ffc2 	bl	8008148 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69da      	ldr	r2, [r3, #28]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69d9      	ldr	r1, [r3, #28]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	021a      	lsls	r2, r3, #8
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007212:	2302      	movs	r3, #2
 8007214:	e0fd      	b.n	8007412 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b14      	cmp	r3, #20
 8007222:	f200 80f0 	bhi.w	8007406 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007226:	a201      	add	r2, pc, #4	; (adr r2, 800722c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007281 	.word	0x08007281
 8007230:	08007407 	.word	0x08007407
 8007234:	08007407 	.word	0x08007407
 8007238:	08007407 	.word	0x08007407
 800723c:	080072c1 	.word	0x080072c1
 8007240:	08007407 	.word	0x08007407
 8007244:	08007407 	.word	0x08007407
 8007248:	08007407 	.word	0x08007407
 800724c:	08007303 	.word	0x08007303
 8007250:	08007407 	.word	0x08007407
 8007254:	08007407 	.word	0x08007407
 8007258:	08007407 	.word	0x08007407
 800725c:	08007343 	.word	0x08007343
 8007260:	08007407 	.word	0x08007407
 8007264:	08007407 	.word	0x08007407
 8007268:	08007407 	.word	0x08007407
 800726c:	08007385 	.word	0x08007385
 8007270:	08007407 	.word	0x08007407
 8007274:	08007407 	.word	0x08007407
 8007278:	08007407 	.word	0x08007407
 800727c:	080073c5 	.word	0x080073c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fa78 	bl	800777c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0208 	orr.w	r2, r2, #8
 800729a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0204 	bic.w	r2, r2, #4
 80072aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6999      	ldr	r1, [r3, #24]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	691a      	ldr	r2, [r3, #16]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	619a      	str	r2, [r3, #24]
      break;
 80072be:	e0a3      	b.n	8007408 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fae8 	bl	800789c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6999      	ldr	r1, [r3, #24]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	021a      	lsls	r2, r3, #8
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	619a      	str	r2, [r3, #24]
      break;
 8007300:	e082      	b.n	8007408 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	4618      	mov	r0, r3
 800730a:	f000 fb51 	bl	80079b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0208 	orr.w	r2, r2, #8
 800731c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0204 	bic.w	r2, r2, #4
 800732c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69d9      	ldr	r1, [r3, #28]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	61da      	str	r2, [r3, #28]
      break;
 8007340:	e062      	b.n	8007408 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	4618      	mov	r0, r3
 800734a:	f000 fbb9 	bl	8007ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800735c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800736c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69d9      	ldr	r1, [r3, #28]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	021a      	lsls	r2, r3, #8
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	61da      	str	r2, [r3, #28]
      break;
 8007382:	e041      	b.n	8007408 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fc22 	bl	8007bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0208 	orr.w	r2, r2, #8
 800739e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0204 	bic.w	r2, r2, #4
 80073ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	691a      	ldr	r2, [r3, #16]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80073c2:	e021      	b.n	8007408 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fc66 	bl	8007c9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	021a      	lsls	r2, r3, #8
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007404:	e000      	b.n	8007408 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007406:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop

0800741c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_TIM_ConfigClockSource+0x18>
 8007430:	2302      	movs	r3, #2
 8007432:	e0c3      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1a0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007452:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800745e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b70      	cmp	r3, #112	; 0x70
 800746e:	d038      	beq.n	80074e2 <HAL_TIM_ConfigClockSource+0xc6>
 8007470:	2b70      	cmp	r3, #112	; 0x70
 8007472:	d815      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x84>
 8007474:	2b30      	cmp	r3, #48	; 0x30
 8007476:	f000 808e 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x17a>
 800747a:	2b30      	cmp	r3, #48	; 0x30
 800747c:	d809      	bhi.n	8007492 <HAL_TIM_ConfigClockSource+0x76>
 800747e:	2b10      	cmp	r3, #16
 8007480:	f000 8089 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x17a>
 8007484:	2b20      	cmp	r3, #32
 8007486:	f000 8086 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x17a>
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 8083 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007490:	e08b      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8007492:	2b50      	cmp	r3, #80	; 0x50
 8007494:	d04f      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x11a>
 8007496:	2b60      	cmp	r3, #96	; 0x60
 8007498:	d05d      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x13a>
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d06b      	beq.n	8007576 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 800749e:	e084      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80074a0:	4a48      	ldr	r2, [pc, #288]	; (80075c4 <HAL_TIM_ConfigClockSource+0x1a8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d077      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x17a>
 80074a6:	4a47      	ldr	r2, [pc, #284]	; (80075c4 <HAL_TIM_ConfigClockSource+0x1a8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d809      	bhi.n	80074c0 <HAL_TIM_ConfigClockSource+0xa4>
 80074ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b0:	d02e      	beq.n	8007510 <HAL_TIM_ConfigClockSource+0xf4>
 80074b2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80074b6:	d06e      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x17a>
 80074b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074bc:	d074      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80074be:	e074      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80074c0:	4a41      	ldr	r2, [pc, #260]	; (80075c8 <HAL_TIM_ConfigClockSource+0x1ac>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d067      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x17a>
 80074c6:	4a40      	ldr	r2, [pc, #256]	; (80075c8 <HAL_TIM_ConfigClockSource+0x1ac>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d803      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0xb8>
 80074cc:	4a3f      	ldr	r2, [pc, #252]	; (80075cc <HAL_TIM_ConfigClockSource+0x1b0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d061      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80074d2:	e06a      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80074d4:	4a3e      	ldr	r2, [pc, #248]	; (80075d0 <HAL_TIM_ConfigClockSource+0x1b4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d05d      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x17a>
 80074da:	4a3e      	ldr	r2, [pc, #248]	; (80075d4 <HAL_TIM_ConfigClockSource+0x1b8>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d05a      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80074e0:	e063      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6899      	ldr	r1, [r3, #8]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f000 fe83 	bl	80081fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007504:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	609a      	str	r2, [r3, #8]
      break;
 800750e:	e04c      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	6899      	ldr	r1, [r3, #8]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f000 fe6c 	bl	80081fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689a      	ldr	r2, [r3, #8]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007532:	609a      	str	r2, [r3, #8]
      break;
 8007534:	e039      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6859      	ldr	r1, [r3, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	461a      	mov	r2, r3
 8007544:	f000 fd28 	bl	8007f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2150      	movs	r1, #80	; 0x50
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fe37 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007554:	e029      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6818      	ldr	r0, [r3, #0]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	6859      	ldr	r1, [r3, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	461a      	mov	r2, r3
 8007564:	f000 fd84 	bl	8008070 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2160      	movs	r1, #96	; 0x60
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fe27 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007574:	e019      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6859      	ldr	r1, [r3, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	461a      	mov	r2, r3
 8007584:	f000 fd08 	bl	8007f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2140      	movs	r1, #64	; 0x40
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fe17 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007594:	e009      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f000 fe0e 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 80075a6:	e000      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80075a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	00100020 	.word	0x00100020
 80075c8:	00100040 	.word	0x00100040
 80075cc:	00100030 	.word	0x00100030
 80075d0:	00100060 	.word	0x00100060
 80075d4:	00100070 	.word	0x00100070

080075d8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e031      	b.n	8007654 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fbb0 	bl	8007d68 <TIM_SlaveTimer_SetConfig>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e018      	b.n	8007654 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007630:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007640:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a3c      	ldr	r2, [pc, #240]	; (8007760 <TIM_Base_SetConfig+0x104>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00f      	beq.n	8007694 <TIM_Base_SetConfig+0x38>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767a:	d00b      	beq.n	8007694 <TIM_Base_SetConfig+0x38>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a39      	ldr	r2, [pc, #228]	; (8007764 <TIM_Base_SetConfig+0x108>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <TIM_Base_SetConfig+0x38>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a38      	ldr	r2, [pc, #224]	; (8007768 <TIM_Base_SetConfig+0x10c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_Base_SetConfig+0x38>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a37      	ldr	r2, [pc, #220]	; (800776c <TIM_Base_SetConfig+0x110>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d108      	bne.n	80076a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a2d      	ldr	r2, [pc, #180]	; (8007760 <TIM_Base_SetConfig+0x104>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d01b      	beq.n	80076e6 <TIM_Base_SetConfig+0x8a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b4:	d017      	beq.n	80076e6 <TIM_Base_SetConfig+0x8a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2a      	ldr	r2, [pc, #168]	; (8007764 <TIM_Base_SetConfig+0x108>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d013      	beq.n	80076e6 <TIM_Base_SetConfig+0x8a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a29      	ldr	r2, [pc, #164]	; (8007768 <TIM_Base_SetConfig+0x10c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00f      	beq.n	80076e6 <TIM_Base_SetConfig+0x8a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a28      	ldr	r2, [pc, #160]	; (800776c <TIM_Base_SetConfig+0x110>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00b      	beq.n	80076e6 <TIM_Base_SetConfig+0x8a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a27      	ldr	r2, [pc, #156]	; (8007770 <TIM_Base_SetConfig+0x114>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d007      	beq.n	80076e6 <TIM_Base_SetConfig+0x8a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a26      	ldr	r2, [pc, #152]	; (8007774 <TIM_Base_SetConfig+0x118>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <TIM_Base_SetConfig+0x8a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a25      	ldr	r2, [pc, #148]	; (8007778 <TIM_Base_SetConfig+0x11c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d108      	bne.n	80076f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a10      	ldr	r2, [pc, #64]	; (8007760 <TIM_Base_SetConfig+0x104>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00f      	beq.n	8007744 <TIM_Base_SetConfig+0xe8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a11      	ldr	r2, [pc, #68]	; (800776c <TIM_Base_SetConfig+0x110>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00b      	beq.n	8007744 <TIM_Base_SetConfig+0xe8>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a10      	ldr	r2, [pc, #64]	; (8007770 <TIM_Base_SetConfig+0x114>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d007      	beq.n	8007744 <TIM_Base_SetConfig+0xe8>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a0f      	ldr	r2, [pc, #60]	; (8007774 <TIM_Base_SetConfig+0x118>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_Base_SetConfig+0xe8>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a0e      	ldr	r2, [pc, #56]	; (8007778 <TIM_Base_SetConfig+0x11c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d103      	bne.n	800774c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	615a      	str	r2, [r3, #20]
}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40012c00 	.word	0x40012c00
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40013400 	.word	0x40013400
 8007770:	40014000 	.word	0x40014000
 8007774:	40014400 	.word	0x40014400
 8007778:	40014800 	.word	0x40014800

0800777c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	f023 0201 	bic.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f023 0302 	bic.w	r3, r3, #2
 80077c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a2c      	ldr	r2, [pc, #176]	; (8007888 <TIM_OC1_SetConfig+0x10c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00f      	beq.n	80077fc <TIM_OC1_SetConfig+0x80>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a2b      	ldr	r2, [pc, #172]	; (800788c <TIM_OC1_SetConfig+0x110>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00b      	beq.n	80077fc <TIM_OC1_SetConfig+0x80>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a2a      	ldr	r2, [pc, #168]	; (8007890 <TIM_OC1_SetConfig+0x114>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d007      	beq.n	80077fc <TIM_OC1_SetConfig+0x80>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a29      	ldr	r2, [pc, #164]	; (8007894 <TIM_OC1_SetConfig+0x118>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d003      	beq.n	80077fc <TIM_OC1_SetConfig+0x80>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a28      	ldr	r2, [pc, #160]	; (8007898 <TIM_OC1_SetConfig+0x11c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d10c      	bne.n	8007816 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f023 0308 	bic.w	r3, r3, #8
 8007802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f023 0304 	bic.w	r3, r3, #4
 8007814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a1b      	ldr	r2, [pc, #108]	; (8007888 <TIM_OC1_SetConfig+0x10c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00f      	beq.n	800783e <TIM_OC1_SetConfig+0xc2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a1a      	ldr	r2, [pc, #104]	; (800788c <TIM_OC1_SetConfig+0x110>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00b      	beq.n	800783e <TIM_OC1_SetConfig+0xc2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a19      	ldr	r2, [pc, #100]	; (8007890 <TIM_OC1_SetConfig+0x114>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d007      	beq.n	800783e <TIM_OC1_SetConfig+0xc2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a18      	ldr	r2, [pc, #96]	; (8007894 <TIM_OC1_SetConfig+0x118>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d003      	beq.n	800783e <TIM_OC1_SetConfig+0xc2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a17      	ldr	r2, [pc, #92]	; (8007898 <TIM_OC1_SetConfig+0x11c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d111      	bne.n	8007862 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800784c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	621a      	str	r2, [r3, #32]
}
 800787c:	bf00      	nop
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40013400 	.word	0x40013400
 8007890:	40014000 	.word	0x40014000
 8007894:	40014400 	.word	0x40014400
 8007898:	40014800 	.word	0x40014800

0800789c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f023 0210 	bic.w	r2, r3, #16
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f023 0320 	bic.w	r3, r3, #32
 80078ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a28      	ldr	r2, [pc, #160]	; (800799c <TIM_OC2_SetConfig+0x100>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_OC2_SetConfig+0x6c>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a27      	ldr	r2, [pc, #156]	; (80079a0 <TIM_OC2_SetConfig+0x104>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d10d      	bne.n	8007924 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800790e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	4313      	orrs	r3, r2
 800791a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a1d      	ldr	r2, [pc, #116]	; (800799c <TIM_OC2_SetConfig+0x100>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00f      	beq.n	800794c <TIM_OC2_SetConfig+0xb0>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a1c      	ldr	r2, [pc, #112]	; (80079a0 <TIM_OC2_SetConfig+0x104>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00b      	beq.n	800794c <TIM_OC2_SetConfig+0xb0>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a1b      	ldr	r2, [pc, #108]	; (80079a4 <TIM_OC2_SetConfig+0x108>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_OC2_SetConfig+0xb0>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a1a      	ldr	r2, [pc, #104]	; (80079a8 <TIM_OC2_SetConfig+0x10c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_OC2_SetConfig+0xb0>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a19      	ldr	r2, [pc, #100]	; (80079ac <TIM_OC2_SetConfig+0x110>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d113      	bne.n	8007974 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800795a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	621a      	str	r2, [r3, #32]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40012c00 	.word	0x40012c00
 80079a0:	40013400 	.word	0x40013400
 80079a4:	40014000 	.word	0x40014000
 80079a8:	40014400 	.word	0x40014400
 80079ac:	40014800 	.word	0x40014800

080079b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a27      	ldr	r2, [pc, #156]	; (8007aac <TIM_OC3_SetConfig+0xfc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d003      	beq.n	8007a1a <TIM_OC3_SetConfig+0x6a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a26      	ldr	r2, [pc, #152]	; (8007ab0 <TIM_OC3_SetConfig+0x100>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d10d      	bne.n	8007a36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	021b      	lsls	r3, r3, #8
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a1c      	ldr	r2, [pc, #112]	; (8007aac <TIM_OC3_SetConfig+0xfc>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00f      	beq.n	8007a5e <TIM_OC3_SetConfig+0xae>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a1b      	ldr	r2, [pc, #108]	; (8007ab0 <TIM_OC3_SetConfig+0x100>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00b      	beq.n	8007a5e <TIM_OC3_SetConfig+0xae>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a1a      	ldr	r2, [pc, #104]	; (8007ab4 <TIM_OC3_SetConfig+0x104>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d007      	beq.n	8007a5e <TIM_OC3_SetConfig+0xae>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a19      	ldr	r2, [pc, #100]	; (8007ab8 <TIM_OC3_SetConfig+0x108>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d003      	beq.n	8007a5e <TIM_OC3_SetConfig+0xae>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a18      	ldr	r2, [pc, #96]	; (8007abc <TIM_OC3_SetConfig+0x10c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d113      	bne.n	8007a86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	621a      	str	r2, [r3, #32]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40012c00 	.word	0x40012c00
 8007ab0:	40013400 	.word	0x40013400
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800

08007ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	031b      	lsls	r3, r3, #12
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a28      	ldr	r2, [pc, #160]	; (8007bc0 <TIM_OC4_SetConfig+0x100>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_OC4_SetConfig+0x6c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a27      	ldr	r2, [pc, #156]	; (8007bc4 <TIM_OC4_SetConfig+0x104>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d10d      	bne.n	8007b48 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	031b      	lsls	r3, r3, #12
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a1d      	ldr	r2, [pc, #116]	; (8007bc0 <TIM_OC4_SetConfig+0x100>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00f      	beq.n	8007b70 <TIM_OC4_SetConfig+0xb0>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a1c      	ldr	r2, [pc, #112]	; (8007bc4 <TIM_OC4_SetConfig+0x104>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00b      	beq.n	8007b70 <TIM_OC4_SetConfig+0xb0>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a1b      	ldr	r2, [pc, #108]	; (8007bc8 <TIM_OC4_SetConfig+0x108>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d007      	beq.n	8007b70 <TIM_OC4_SetConfig+0xb0>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a1a      	ldr	r2, [pc, #104]	; (8007bcc <TIM_OC4_SetConfig+0x10c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_OC4_SetConfig+0xb0>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a19      	ldr	r2, [pc, #100]	; (8007bd0 <TIM_OC4_SetConfig+0x110>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d113      	bne.n	8007b98 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	019b      	lsls	r3, r3, #6
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	019b      	lsls	r3, r3, #6
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	621a      	str	r2, [r3, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40013400 	.word	0x40013400
 8007bc8:	40014000 	.word	0x40014000
 8007bcc:	40014400 	.word	0x40014400
 8007bd0:	40014800 	.word	0x40014800

08007bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <TIM_OC5_SetConfig+0xb4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00f      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a16      	ldr	r2, [pc, #88]	; (8007c8c <TIM_OC5_SetConfig+0xb8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00b      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a15      	ldr	r2, [pc, #84]	; (8007c90 <TIM_OC5_SetConfig+0xbc>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d007      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <TIM_OC5_SetConfig+0xc0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d003      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a13      	ldr	r2, [pc, #76]	; (8007c98 <TIM_OC5_SetConfig+0xc4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d109      	bne.n	8007c62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	621a      	str	r2, [r3, #32]
}
 8007c7c:	bf00      	nop
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	40012c00 	.word	0x40012c00
 8007c8c:	40013400 	.word	0x40013400
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40014400 	.word	0x40014400
 8007c98:	40014800 	.word	0x40014800

08007c9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	051b      	lsls	r3, r3, #20
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a18      	ldr	r2, [pc, #96]	; (8007d54 <TIM_OC6_SetConfig+0xb8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00f      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <TIM_OC6_SetConfig+0xbc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a16      	ldr	r2, [pc, #88]	; (8007d5c <TIM_OC6_SetConfig+0xc0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d007      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a15      	ldr	r2, [pc, #84]	; (8007d60 <TIM_OC6_SetConfig+0xc4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a14      	ldr	r2, [pc, #80]	; (8007d64 <TIM_OC6_SetConfig+0xc8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d109      	bne.n	8007d2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	029b      	lsls	r3, r3, #10
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	40013400 	.word	0x40013400
 8007d5c:	40014000 	.word	0x40014000
 8007d60:	40014400 	.word	0x40014400
 8007d64:	40014800 	.word	0x40014800

08007d68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b60      	cmp	r3, #96	; 0x60
 8007db4:	d06d      	beq.n	8007e92 <TIM_SlaveTimer_SetConfig+0x12a>
 8007db6:	2b60      	cmp	r3, #96	; 0x60
 8007db8:	d80f      	bhi.n	8007dda <TIM_SlaveTimer_SetConfig+0x72>
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d073      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d804      	bhi.n	8007dcc <TIM_SlaveTimer_SetConfig+0x64>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d06f      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	d06d      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8007dca:	e06d      	b.n	8007ea8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d028      	beq.n	8007e22 <TIM_SlaveTimer_SetConfig+0xba>
 8007dd0:	2b50      	cmp	r3, #80	; 0x50
 8007dd2:	d054      	beq.n	8007e7e <TIM_SlaveTimer_SetConfig+0x116>
 8007dd4:	2b30      	cmp	r3, #48	; 0x30
 8007dd6:	d066      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8007dd8:	e066      	b.n	8007ea8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8007dda:	4a36      	ldr	r2, [pc, #216]	; (8007eb4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d062      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
 8007de0:	4a34      	ldr	r2, [pc, #208]	; (8007eb4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d808      	bhi.n	8007df8 <TIM_SlaveTimer_SetConfig+0x90>
 8007de6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007dea:	d05c      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
 8007dec:	4a32      	ldr	r2, [pc, #200]	; (8007eb8 <TIM_SlaveTimer_SetConfig+0x150>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d059      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
 8007df2:	2b70      	cmp	r3, #112	; 0x70
 8007df4:	d00a      	beq.n	8007e0c <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8007df6:	e057      	b.n	8007ea8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8007df8:	4a30      	ldr	r2, [pc, #192]	; (8007ebc <TIM_SlaveTimer_SetConfig+0x154>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d053      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
 8007dfe:	4a30      	ldr	r2, [pc, #192]	; (8007ec0 <TIM_SlaveTimer_SetConfig+0x158>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d050      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
 8007e04:	4a2f      	ldr	r2, [pc, #188]	; (8007ec4 <TIM_SlaveTimer_SetConfig+0x15c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d04d      	beq.n	8007ea6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8007e0a:	e04d      	b.n	8007ea8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	68d9      	ldr	r1, [r3, #12]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	f000 f9ee 	bl	80081fc <TIM_ETR_SetConfig>
      break;
 8007e20:	e042      	b.n	8007ea8 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b05      	cmp	r3, #5
 8007e28:	d004      	beq.n	8007e34 <TIM_SlaveTimer_SetConfig+0xcc>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007e32:	d101      	bne.n	8007e38 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e038      	b.n	8007eaa <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6a1a      	ldr	r2, [r3, #32]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0201 	bic.w	r2, r2, #1
 8007e4e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e5e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	621a      	str	r2, [r3, #32]
      break;
 8007e7c:	e014      	b.n	8007ea8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6899      	ldr	r1, [r3, #8]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f000 f884 	bl	8007f98 <TIM_TI1_ConfigInputStage>
      break;
 8007e90:	e00a      	b.n	8007ea8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6818      	ldr	r0, [r3, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	6899      	ldr	r1, [r3, #8]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f000 f8e6 	bl	8008070 <TIM_TI2_ConfigInputStage>
      break;
 8007ea4:	e000      	b.n	8007ea8 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8007ea6:	bf00      	nop
  }
  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	00100030 	.word	0x00100030
 8007eb8:	00100020 	.word	0x00100020
 8007ebc:	00100060 	.word	0x00100060
 8007ec0:	00100070 	.word	0x00100070
 8007ec4:	00100040 	.word	0x00100040

08007ec8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a24      	ldr	r2, [pc, #144]	; (8007f84 <TIM_TI1_SetConfig+0xbc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d013      	beq.n	8007f1e <TIM_TI1_SetConfig+0x56>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efc:	d00f      	beq.n	8007f1e <TIM_TI1_SetConfig+0x56>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a21      	ldr	r2, [pc, #132]	; (8007f88 <TIM_TI1_SetConfig+0xc0>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00b      	beq.n	8007f1e <TIM_TI1_SetConfig+0x56>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4a20      	ldr	r2, [pc, #128]	; (8007f8c <TIM_TI1_SetConfig+0xc4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d007      	beq.n	8007f1e <TIM_TI1_SetConfig+0x56>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4a1f      	ldr	r2, [pc, #124]	; (8007f90 <TIM_TI1_SetConfig+0xc8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d003      	beq.n	8007f1e <TIM_TI1_SetConfig+0x56>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a1e      	ldr	r2, [pc, #120]	; (8007f94 <TIM_TI1_SetConfig+0xcc>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d101      	bne.n	8007f22 <TIM_TI1_SetConfig+0x5a>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <TIM_TI1_SetConfig+0x5c>
 8007f22:	2300      	movs	r3, #0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d008      	beq.n	8007f3a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e003      	b.n	8007f42 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f023 030a 	bic.w	r3, r3, #10
 8007f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f003 030a 	and.w	r3, r3, #10
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	40000400 	.word	0x40000400
 8007f8c:	40000800 	.word	0x40000800
 8007f90:	40013400 	.word	0x40013400
 8007f94:	40014000 	.word	0x40014000

08007f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	f023 0201 	bic.w	r2, r3, #1
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f023 030a 	bic.w	r3, r3, #10
 8007fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	621a      	str	r2, [r3, #32]
}
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b087      	sub	sp, #28
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f023 0210 	bic.w	r2, r3, #16
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008022:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	4313      	orrs	r3, r2
 800802c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	031b      	lsls	r3, r3, #12
 800803a:	b29b      	uxth	r3, r3
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008048:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	621a      	str	r2, [r3, #32]
}
 8008064:	bf00      	nop
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	f023 0210 	bic.w	r2, r3, #16
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800809a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	031b      	lsls	r3, r3, #12
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	621a      	str	r2, [r3, #32]
}
 80080c4:	bf00      	nop
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f023 0303 	bic.w	r3, r3, #3
 80080fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800810c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	b2db      	uxtb	r3, r3
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008120:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	021b      	lsls	r3, r3, #8
 8008126:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008174:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008186:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	031b      	lsls	r3, r3, #12
 800818c:	b29b      	uxth	r3, r3
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800819a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	031b      	lsls	r3, r3, #12
 80081a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	621a      	str	r2, [r3, #32]
}
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80081d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	f043 0307 	orr.w	r3, r3, #7
 80081e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	609a      	str	r2, [r3, #8]
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	021a      	lsls	r2, r3, #8
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	431a      	orrs	r2, r3
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4313      	orrs	r3, r2
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	609a      	str	r2, [r3, #8]
}
 8008230:	bf00      	nop
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 031f 	and.w	r3, r3, #31
 800824e:	2201      	movs	r2, #1
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a1a      	ldr	r2, [r3, #32]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	43db      	mvns	r3, r3
 800825e:	401a      	ands	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a1a      	ldr	r2, [r3, #32]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f003 031f 	and.w	r3, r3, #31
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	fa01 f303 	lsl.w	r3, r1, r3
 8008274:	431a      	orrs	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
	...

08008288 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d109      	bne.n	80082ac <HAL_TIMEx_PWMN_Start+0x24>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	bf14      	ite	ne
 80082a4:	2301      	movne	r3, #1
 80082a6:	2300      	moveq	r3, #0
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	e022      	b.n	80082f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d109      	bne.n	80082c6 <HAL_TIMEx_PWMN_Start+0x3e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	bf14      	ite	ne
 80082be:	2301      	movne	r3, #1
 80082c0:	2300      	moveq	r3, #0
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	e015      	b.n	80082f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d109      	bne.n	80082e0 <HAL_TIMEx_PWMN_Start+0x58>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	bf14      	ite	ne
 80082d8:	2301      	movne	r3, #1
 80082da:	2300      	moveq	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	e008      	b.n	80082f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	bf14      	ite	ne
 80082ec:	2301      	movne	r3, #1
 80082ee:	2300      	moveq	r3, #0
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e040      	b.n	800837c <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <HAL_TIMEx_PWMN_Start+0x82>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008308:	e013      	b.n	8008332 <HAL_TIMEx_PWMN_Start+0xaa>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b04      	cmp	r3, #4
 800830e:	d104      	bne.n	800831a <HAL_TIMEx_PWMN_Start+0x92>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008318:	e00b      	b.n	8008332 <HAL_TIMEx_PWMN_Start+0xaa>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b08      	cmp	r3, #8
 800831e:	d104      	bne.n	800832a <HAL_TIMEx_PWMN_Start+0xa2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008328:	e003      	b.n	8008332 <HAL_TIMEx_PWMN_Start+0xaa>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2204      	movs	r2, #4
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f000 f9a4 	bl	8008688 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800834e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <HAL_TIMEx_PWMN_Start+0xfc>)
 8008358:	4013      	ands	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b06      	cmp	r3, #6
 8008360:	d00b      	beq.n	800837a <HAL_TIMEx_PWMN_Start+0xf2>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008368:	d007      	beq.n	800837a <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0201 	orr.w	r2, r2, #1
 8008378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	00010007 	.word	0x00010007

08008388 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2200      	movs	r2, #0
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f974 	bl	8008688 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6a1a      	ldr	r2, [r3, #32]
 80083a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10f      	bne.n	80083d0 <HAL_TIMEx_PWMN_Stop+0x48>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6a1a      	ldr	r2, [r3, #32]
 80083b6:	f244 4344 	movw	r3, #17476	; 0x4444
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d107      	bne.n	80083d0 <HAL_TIMEx_PWMN_Stop+0x48>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6a1a      	ldr	r2, [r3, #32]
 80083d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80083da:	4013      	ands	r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10f      	bne.n	8008400 <HAL_TIMEx_PWMN_Stop+0x78>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6a1a      	ldr	r2, [r3, #32]
 80083e6:	f244 4344 	movw	r3, #17476	; 0x4444
 80083ea:	4013      	ands	r3, r2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d107      	bne.n	8008400 <HAL_TIMEx_PWMN_Stop+0x78>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d104      	bne.n	8008410 <HAL_TIMEx_PWMN_Stop+0x88>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800840e:	e013      	b.n	8008438 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b04      	cmp	r3, #4
 8008414:	d104      	bne.n	8008420 <HAL_TIMEx_PWMN_Stop+0x98>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800841e:	e00b      	b.n	8008438 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b08      	cmp	r3, #8
 8008424:	d104      	bne.n	8008430 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800842e:	e003      	b.n	8008438 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008454:	2b01      	cmp	r3, #1
 8008456:	d101      	bne.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008458:	2302      	movs	r3, #2
 800845a:	e065      	b.n	8008528 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a2c      	ldr	r2, [pc, #176]	; (8008534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d004      	beq.n	8008490 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a2b      	ldr	r2, [pc, #172]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d108      	bne.n	80084a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008496:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80084a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d018      	beq.n	80084fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d2:	d013      	beq.n	80084fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a18      	ldr	r2, [pc, #96]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00e      	beq.n	80084fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a17      	ldr	r2, [pc, #92]	; (8008540 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d009      	beq.n	80084fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a12      	ldr	r2, [pc, #72]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d004      	beq.n	80084fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a13      	ldr	r2, [pc, #76]	; (8008544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d10c      	bne.n	8008516 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	4313      	orrs	r3, r2
 800850c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	40012c00 	.word	0x40012c00
 8008538:	40013400 	.word	0x40013400
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800
 8008544:	40014000 	.word	0x40014000

08008548 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008560:	2302      	movs	r3, #2
 8008562:	e087      	b.n	8008674 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	4313      	orrs	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	041b      	lsls	r3, r3, #16
 80085da:	4313      	orrs	r3, r2
 80085dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a27      	ldr	r2, [pc, #156]	; (8008680 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d004      	beq.n	80085f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a25      	ldr	r2, [pc, #148]	; (8008684 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d106      	bne.n	8008600 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a1e      	ldr	r2, [pc, #120]	; (8008680 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d126      	bne.n	8008662 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	051b      	lsls	r3, r3, #20
 8008620:	4313      	orrs	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	4313      	orrs	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a0e      	ldr	r2, [pc, #56]	; (8008680 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d004      	beq.n	8008654 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a0d      	ldr	r2, [pc, #52]	; (8008684 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d106      	bne.n	8008662 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	40012c00 	.word	0x40012c00
 8008684:	40013400 	.word	0x40013400

08008688 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	2204      	movs	r2, #4
 800869c:	fa02 f303 	lsl.w	r3, r2, r3
 80086a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a1a      	ldr	r2, [r3, #32]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	43db      	mvns	r3, r3
 80086aa:	401a      	ands	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1a      	ldr	r2, [r3, #32]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f003 031f 	and.w	r3, r3, #31
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	fa01 f303 	lsl.w	r3, r1, r3
 80086c0:	431a      	orrs	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	621a      	str	r2, [r3, #32]
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b082      	sub	sp, #8
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e042      	b.n	800876a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7fa fae4 	bl	8002cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2224      	movs	r2, #36	; 0x24
 8008700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0201 	bic.w	r2, r2, #1
 8008712:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fa7f 	bl	8008c18 <UART_SetConfig>
 800871a:	4603      	mov	r3, r0
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e022      	b.n	800876a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fc2d 	bl	8009f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008740:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008750:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f042 0201 	orr.w	r2, r2, #1
 8008760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 fcb4 	bl	800a0d0 <UART_CheckIdleState>
 8008768:	4603      	mov	r3, r0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008788:	2b20      	cmp	r3, #32
 800878a:	f040 80bc 	bne.w	8008906 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <HAL_UART_Receive_IT+0x26>
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e0b4      	b.n	8008908 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d101      	bne.n	80087ac <HAL_UART_Receive_IT+0x38>
 80087a8:	2302      	movs	r3, #2
 80087aa:	e0ad      	b.n	8008908 <HAL_UART_Receive_IT+0x194>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	88fa      	ldrh	r2, [r7, #6]
 80087be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d8:	d10e      	bne.n	80087f8 <HAL_UART_Receive_IT+0x84>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d105      	bne.n	80087ee <HAL_UART_Receive_IT+0x7a>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80087e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087ec:	e02d      	b.n	800884a <HAL_UART_Receive_IT+0xd6>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	22ff      	movs	r2, #255	; 0xff
 80087f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087f6:	e028      	b.n	800884a <HAL_UART_Receive_IT+0xd6>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10d      	bne.n	800881c <HAL_UART_Receive_IT+0xa8>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d104      	bne.n	8008812 <HAL_UART_Receive_IT+0x9e>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	22ff      	movs	r2, #255	; 0xff
 800880c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008810:	e01b      	b.n	800884a <HAL_UART_Receive_IT+0xd6>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	227f      	movs	r2, #127	; 0x7f
 8008816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800881a:	e016      	b.n	800884a <HAL_UART_Receive_IT+0xd6>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008824:	d10d      	bne.n	8008842 <HAL_UART_Receive_IT+0xce>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d104      	bne.n	8008838 <HAL_UART_Receive_IT+0xc4>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	227f      	movs	r2, #127	; 0x7f
 8008832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008836:	e008      	b.n	800884a <HAL_UART_Receive_IT+0xd6>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	223f      	movs	r2, #63	; 0x3f
 800883c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008840:	e003      	b.n	800884a <HAL_UART_Receive_IT+0xd6>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2222      	movs	r2, #34	; 0x22
 8008856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0201 	orr.w	r2, r2, #1
 8008868:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800886e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008872:	d12a      	bne.n	80088ca <HAL_UART_Receive_IT+0x156>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800887a:	88fa      	ldrh	r2, [r7, #6]
 800887c:	429a      	cmp	r2, r3
 800887e:	d324      	bcc.n	80088ca <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008888:	d107      	bne.n	800889a <HAL_UART_Receive_IT+0x126>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d103      	bne.n	800889a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4a1f      	ldr	r2, [pc, #124]	; (8008914 <HAL_UART_Receive_IT+0x1a0>)
 8008896:	66da      	str	r2, [r3, #108]	; 0x6c
 8008898:	e002      	b.n	80088a0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	4a1e      	ldr	r2, [pc, #120]	; (8008918 <HAL_UART_Receive_IT+0x1a4>)
 800889e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088b6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80088c6:	609a      	str	r2, [r3, #8]
 80088c8:	e01b      	b.n	8008902 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d2:	d107      	bne.n	80088e4 <HAL_UART_Receive_IT+0x170>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d103      	bne.n	80088e4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4a0f      	ldr	r2, [pc, #60]	; (800891c <HAL_UART_Receive_IT+0x1a8>)
 80088e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80088e2:	e002      	b.n	80088ea <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a0e      	ldr	r2, [pc, #56]	; (8008920 <HAL_UART_Receive_IT+0x1ac>)
 80088e8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008900:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	e000      	b.n	8008908 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8008906:	2302      	movs	r3, #2
  }
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	0800a4f9 	.word	0x0800a4f9
 8008918:	0800a3f1 	.word	0x0800a3f1
 800891c:	0800a345 	.word	0x0800a345
 8008920:	0800a29b 	.word	0x0800a29b

08008924 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	f003 030f 	and.w	r3, r3, #15
 800894a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d118      	bne.n	8008984 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	d013      	beq.n	8008984 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b00      	cmp	r3, #0
 8008964:	d104      	bne.n	8008970 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d009      	beq.n	8008984 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 812e 	beq.w	8008bd6 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	4798      	blx	r3
      }
      return;
 8008982:	e128      	b.n	8008bd6 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 80d1 	beq.w	8008b2e <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4b96      	ldr	r3, [pc, #600]	; (8008be8 <HAL_UART_IRQHandler+0x2c4>)
 8008990:	4013      	ands	r3, r2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 80c6 	beq.w	8008b2e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d010      	beq.n	80089ce <HAL_UART_IRQHandler+0xaa>
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00b      	beq.n	80089ce <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2201      	movs	r2, #1
 80089bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c4:	f043 0201 	orr.w	r2, r3, #1
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d010      	beq.n	80089fa <HAL_UART_IRQHandler+0xd6>
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00b      	beq.n	80089fa <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2202      	movs	r2, #2
 80089e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f0:	f043 0204 	orr.w	r2, r3, #4
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d010      	beq.n	8008a26 <HAL_UART_IRQHandler+0x102>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00b      	beq.n	8008a26 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2204      	movs	r2, #4
 8008a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a1c:	f043 0202 	orr.w	r2, r3, #2
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d015      	beq.n	8008a5c <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d104      	bne.n	8008a44 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	4b6a      	ldr	r3, [pc, #424]	; (8008be8 <HAL_UART_IRQHandler+0x2c4>)
 8008a3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2208      	movs	r2, #8
 8008a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a52:	f043 0208 	orr.w	r2, r3, #8
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 80b9 	beq.w	8008bda <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f003 0320 	and.w	r3, r3, #32
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d011      	beq.n	8008a96 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d104      	bne.n	8008a86 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d007      	beq.n	8008a96 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a9c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	d004      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d031      	beq.n	8008b1a <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 fb9c 	bl	800a1f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac6:	2b40      	cmp	r3, #64	; 0x40
 8008ac8:	d123      	bne.n	8008b12 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ad8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d013      	beq.n	8008b0a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ae6:	4a41      	ldr	r2, [pc, #260]	; (8008bec <HAL_UART_IRQHandler+0x2c8>)
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fc f8b9 	bl	8004c66 <HAL_DMA_Abort_IT>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d017      	beq.n	8008b2a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b08:	e00f      	b.n	8008b2a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f87a 	bl	8008c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b10:	e00b      	b.n	8008b2a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f876 	bl	8008c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b18:	e007      	b.n	8008b2a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f872 	bl	8008c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8008b28:	e057      	b.n	8008bda <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b2a:	bf00      	nop
    return;
 8008b2c:	e055      	b.n	8008bda <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00d      	beq.n	8008b54 <HAL_UART_IRQHandler+0x230>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d008      	beq.n	8008b54 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 fd57 	bl	800a600 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b52:	e045      	b.n	8008be0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d012      	beq.n	8008b84 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d104      	bne.n	8008b72 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d008      	beq.n	8008b84 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d031      	beq.n	8008bde <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4798      	blx	r3
    }
    return;
 8008b82:	e02c      	b.n	8008bde <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <HAL_UART_IRQHandler+0x27c>
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 fb64 	bl	800a266 <UART_EndTransmit_IT>
    return;
 8008b9e:	e01f      	b.n	8008be0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d008      	beq.n	8008bbc <HAL_UART_IRQHandler+0x298>
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fd37 	bl	800a628 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bba:	e011      	b.n	8008be0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00c      	beq.n	8008be0 <HAL_UART_IRQHandler+0x2bc>
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	da09      	bge.n	8008be0 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 fd21 	bl	800a614 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bd2:	bf00      	nop
 8008bd4:	e004      	b.n	8008be0 <HAL_UART_IRQHandler+0x2bc>
      return;
 8008bd6:	bf00      	nop
 8008bd8:	e002      	b.n	8008be0 <HAL_UART_IRQHandler+0x2bc>
    return;
 8008bda:	bf00      	nop
 8008bdc:	e000      	b.n	8008be0 <HAL_UART_IRQHandler+0x2bc>
    return;
 8008bde:	bf00      	nop
  }
}
 8008be0:	3720      	adds	r7, #32
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	10000001 	.word	0x10000001
 8008bec:	0800a23b 	.word	0x0800a23b

08008bf0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008c1c:	b08a      	sub	sp, #40	; 0x28
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4ba4      	ldr	r3, [pc, #656]	; (8008ee8 <UART_SetConfig+0x2d0>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6812      	ldr	r2, [r2, #0]
 8008c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a99      	ldr	r2, [pc, #612]	; (8008eec <UART_SetConfig+0x2d4>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d004      	beq.n	8008c94 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c90:	4313      	orrs	r3, r2
 8008c92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	f023 010f 	bic.w	r1, r3, #15
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a8a      	ldr	r2, [pc, #552]	; (8008ef0 <UART_SetConfig+0x2d8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d126      	bne.n	8008d1a <UART_SetConfig+0x102>
 8008ccc:	4b89      	ldr	r3, [pc, #548]	; (8008ef4 <UART_SetConfig+0x2dc>)
 8008cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d81a      	bhi.n	8008d10 <UART_SetConfig+0xf8>
 8008cda:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <UART_SetConfig+0xc8>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008cf1 	.word	0x08008cf1
 8008ce4:	08008d01 	.word	0x08008d01
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cf6:	e0d6      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cfe:	e0d2      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008d00:	2304      	movs	r3, #4
 8008d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d06:	e0ce      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008d08:	2308      	movs	r3, #8
 8008d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d0e:	e0ca      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008d10:	2310      	movs	r3, #16
 8008d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d16:	bf00      	nop
 8008d18:	e0c5      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a76      	ldr	r2, [pc, #472]	; (8008ef8 <UART_SetConfig+0x2e0>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d138      	bne.n	8008d96 <UART_SetConfig+0x17e>
 8008d24:	4b73      	ldr	r3, [pc, #460]	; (8008ef4 <UART_SetConfig+0x2dc>)
 8008d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2a:	f003 030c 	and.w	r3, r3, #12
 8008d2e:	2b0c      	cmp	r3, #12
 8008d30:	d82c      	bhi.n	8008d8c <UART_SetConfig+0x174>
 8008d32:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <UART_SetConfig+0x120>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008d8d 	.word	0x08008d8d
 8008d40:	08008d8d 	.word	0x08008d8d
 8008d44:	08008d8d 	.word	0x08008d8d
 8008d48:	08008d7d 	.word	0x08008d7d
 8008d4c:	08008d8d 	.word	0x08008d8d
 8008d50:	08008d8d 	.word	0x08008d8d
 8008d54:	08008d8d 	.word	0x08008d8d
 8008d58:	08008d75 	.word	0x08008d75
 8008d5c:	08008d8d 	.word	0x08008d8d
 8008d60:	08008d8d 	.word	0x08008d8d
 8008d64:	08008d8d 	.word	0x08008d8d
 8008d68:	08008d85 	.word	0x08008d85
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d72:	e098      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008d74:	2302      	movs	r3, #2
 8008d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d7a:	e094      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008d7c:	2304      	movs	r3, #4
 8008d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d82:	e090      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008d84:	2308      	movs	r3, #8
 8008d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d8a:	e08c      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d92:	bf00      	nop
 8008d94:	e087      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a58      	ldr	r2, [pc, #352]	; (8008efc <UART_SetConfig+0x2e4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d125      	bne.n	8008dec <UART_SetConfig+0x1d4>
 8008da0:	4b54      	ldr	r3, [pc, #336]	; (8008ef4 <UART_SetConfig+0x2dc>)
 8008da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008daa:	2b10      	cmp	r3, #16
 8008dac:	d011      	beq.n	8008dd2 <UART_SetConfig+0x1ba>
 8008dae:	2b10      	cmp	r3, #16
 8008db0:	d802      	bhi.n	8008db8 <UART_SetConfig+0x1a0>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <UART_SetConfig+0x1aa>
 8008db6:	e014      	b.n	8008de2 <UART_SetConfig+0x1ca>
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	d006      	beq.n	8008dca <UART_SetConfig+0x1b2>
 8008dbc:	2b30      	cmp	r3, #48	; 0x30
 8008dbe:	d00c      	beq.n	8008dda <UART_SetConfig+0x1c2>
 8008dc0:	e00f      	b.n	8008de2 <UART_SetConfig+0x1ca>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dc8:	e06d      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dd0:	e069      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008dd2:	2304      	movs	r3, #4
 8008dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dd8:	e065      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008dda:	2308      	movs	r3, #8
 8008ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008de0:	e061      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008de2:	2310      	movs	r3, #16
 8008de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008de8:	bf00      	nop
 8008dea:	e05c      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a43      	ldr	r2, [pc, #268]	; (8008f00 <UART_SetConfig+0x2e8>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d125      	bne.n	8008e42 <UART_SetConfig+0x22a>
 8008df6:	4b3f      	ldr	r3, [pc, #252]	; (8008ef4 <UART_SetConfig+0x2dc>)
 8008df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e00:	2b40      	cmp	r3, #64	; 0x40
 8008e02:	d011      	beq.n	8008e28 <UART_SetConfig+0x210>
 8008e04:	2b40      	cmp	r3, #64	; 0x40
 8008e06:	d802      	bhi.n	8008e0e <UART_SetConfig+0x1f6>
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <UART_SetConfig+0x200>
 8008e0c:	e014      	b.n	8008e38 <UART_SetConfig+0x220>
 8008e0e:	2b80      	cmp	r3, #128	; 0x80
 8008e10:	d006      	beq.n	8008e20 <UART_SetConfig+0x208>
 8008e12:	2bc0      	cmp	r3, #192	; 0xc0
 8008e14:	d00c      	beq.n	8008e30 <UART_SetConfig+0x218>
 8008e16:	e00f      	b.n	8008e38 <UART_SetConfig+0x220>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e1e:	e042      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008e20:	2302      	movs	r3, #2
 8008e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e26:	e03e      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008e28:	2304      	movs	r3, #4
 8008e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e2e:	e03a      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008e30:	2308      	movs	r3, #8
 8008e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e36:	e036      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e3e:	bf00      	nop
 8008e40:	e031      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a29      	ldr	r2, [pc, #164]	; (8008eec <UART_SetConfig+0x2d4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d129      	bne.n	8008ea0 <UART_SetConfig+0x288>
 8008e4c:	4b29      	ldr	r3, [pc, #164]	; (8008ef4 <UART_SetConfig+0x2dc>)
 8008e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e5a:	d014      	beq.n	8008e86 <UART_SetConfig+0x26e>
 8008e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e60:	d802      	bhi.n	8008e68 <UART_SetConfig+0x250>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d007      	beq.n	8008e76 <UART_SetConfig+0x25e>
 8008e66:	e016      	b.n	8008e96 <UART_SetConfig+0x27e>
 8008e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e6c:	d007      	beq.n	8008e7e <UART_SetConfig+0x266>
 8008e6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e72:	d00c      	beq.n	8008e8e <UART_SetConfig+0x276>
 8008e74:	e00f      	b.n	8008e96 <UART_SetConfig+0x27e>
 8008e76:	2300      	movs	r3, #0
 8008e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e7c:	e013      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008e7e:	2302      	movs	r3, #2
 8008e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e84:	e00f      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008e86:	2304      	movs	r3, #4
 8008e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e8c:	e00b      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008e8e:	2308      	movs	r3, #8
 8008e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e94:	e007      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008e96:	2310      	movs	r3, #16
 8008e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e9c:	bf00      	nop
 8008e9e:	e002      	b.n	8008ea6 <UART_SetConfig+0x28e>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a10      	ldr	r2, [pc, #64]	; (8008eec <UART_SetConfig+0x2d4>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	f040 842e 	bne.w	800970e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eb6:	2b08      	cmp	r3, #8
 8008eb8:	f200 8169 	bhi.w	800918e <UART_SetConfig+0x576>
 8008ebc:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <UART_SetConfig+0x2ac>)
 8008ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec2:	bf00      	nop
 8008ec4:	08008f05 	.word	0x08008f05
 8008ec8:	0800918f 	.word	0x0800918f
 8008ecc:	08008fa7 	.word	0x08008fa7
 8008ed0:	0800918f 	.word	0x0800918f
 8008ed4:	0800903f 	.word	0x0800903f
 8008ed8:	0800918f 	.word	0x0800918f
 8008edc:	0800918f 	.word	0x0800918f
 8008ee0:	0800918f 	.word	0x0800918f
 8008ee4:	080090e1 	.word	0x080090e1
 8008ee8:	cfff69f3 	.word	0xcfff69f3
 8008eec:	40008000 	.word	0x40008000
 8008ef0:	40013800 	.word	0x40013800
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	40004400 	.word	0x40004400
 8008efc:	40004800 	.word	0x40004800
 8008f00:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008f04:	f7fd fa0c 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d044      	beq.n	8008f9c <UART_SetConfig+0x384>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d03e      	beq.n	8008f98 <UART_SetConfig+0x380>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d038      	beq.n	8008f94 <UART_SetConfig+0x37c>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d032      	beq.n	8008f90 <UART_SetConfig+0x378>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	d02c      	beq.n	8008f8c <UART_SetConfig+0x374>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	2b05      	cmp	r3, #5
 8008f38:	d026      	beq.n	8008f88 <UART_SetConfig+0x370>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	2b06      	cmp	r3, #6
 8008f40:	d020      	beq.n	8008f84 <UART_SetConfig+0x36c>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	2b07      	cmp	r3, #7
 8008f48:	d01a      	beq.n	8008f80 <UART_SetConfig+0x368>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	2b08      	cmp	r3, #8
 8008f50:	d014      	beq.n	8008f7c <UART_SetConfig+0x364>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	2b09      	cmp	r3, #9
 8008f58:	d00e      	beq.n	8008f78 <UART_SetConfig+0x360>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	2b0a      	cmp	r3, #10
 8008f60:	d008      	beq.n	8008f74 <UART_SetConfig+0x35c>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	2b0b      	cmp	r3, #11
 8008f68:	d102      	bne.n	8008f70 <UART_SetConfig+0x358>
 8008f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f6e:	e016      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e014      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f74:	2380      	movs	r3, #128	; 0x80
 8008f76:	e012      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f78:	2340      	movs	r3, #64	; 0x40
 8008f7a:	e010      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f7c:	2320      	movs	r3, #32
 8008f7e:	e00e      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f80:	2310      	movs	r3, #16
 8008f82:	e00c      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f84:	230c      	movs	r3, #12
 8008f86:	e00a      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f88:	230a      	movs	r3, #10
 8008f8a:	e008      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	e006      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f90:	2306      	movs	r3, #6
 8008f92:	e004      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f94:	2304      	movs	r3, #4
 8008f96:	e002      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e000      	b.n	8008f9e <UART_SetConfig+0x386>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa2:	617b      	str	r3, [r7, #20]
        break;
 8008fa4:	e0f6      	b.n	8009194 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d044      	beq.n	8009038 <UART_SetConfig+0x420>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d03e      	beq.n	8009034 <UART_SetConfig+0x41c>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d038      	beq.n	8009030 <UART_SetConfig+0x418>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d032      	beq.n	800902c <UART_SetConfig+0x414>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d02c      	beq.n	8009028 <UART_SetConfig+0x410>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd2:	2b05      	cmp	r3, #5
 8008fd4:	d026      	beq.n	8009024 <UART_SetConfig+0x40c>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	2b06      	cmp	r3, #6
 8008fdc:	d020      	beq.n	8009020 <UART_SetConfig+0x408>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	2b07      	cmp	r3, #7
 8008fe4:	d01a      	beq.n	800901c <UART_SetConfig+0x404>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	2b08      	cmp	r3, #8
 8008fec:	d014      	beq.n	8009018 <UART_SetConfig+0x400>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	2b09      	cmp	r3, #9
 8008ff4:	d00e      	beq.n	8009014 <UART_SetConfig+0x3fc>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	2b0a      	cmp	r3, #10
 8008ffc:	d008      	beq.n	8009010 <UART_SetConfig+0x3f8>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009002:	2b0b      	cmp	r3, #11
 8009004:	d102      	bne.n	800900c <UART_SetConfig+0x3f4>
 8009006:	f24f 4324 	movw	r3, #62500	; 0xf424
 800900a:	e016      	b.n	800903a <UART_SetConfig+0x422>
 800900c:	4ba1      	ldr	r3, [pc, #644]	; (8009294 <UART_SetConfig+0x67c>)
 800900e:	e014      	b.n	800903a <UART_SetConfig+0x422>
 8009010:	4ba1      	ldr	r3, [pc, #644]	; (8009298 <UART_SetConfig+0x680>)
 8009012:	e012      	b.n	800903a <UART_SetConfig+0x422>
 8009014:	4ba1      	ldr	r3, [pc, #644]	; (800929c <UART_SetConfig+0x684>)
 8009016:	e010      	b.n	800903a <UART_SetConfig+0x422>
 8009018:	4ba1      	ldr	r3, [pc, #644]	; (80092a0 <UART_SetConfig+0x688>)
 800901a:	e00e      	b.n	800903a <UART_SetConfig+0x422>
 800901c:	4ba1      	ldr	r3, [pc, #644]	; (80092a4 <UART_SetConfig+0x68c>)
 800901e:	e00c      	b.n	800903a <UART_SetConfig+0x422>
 8009020:	4ba1      	ldr	r3, [pc, #644]	; (80092a8 <UART_SetConfig+0x690>)
 8009022:	e00a      	b.n	800903a <UART_SetConfig+0x422>
 8009024:	4ba1      	ldr	r3, [pc, #644]	; (80092ac <UART_SetConfig+0x694>)
 8009026:	e008      	b.n	800903a <UART_SetConfig+0x422>
 8009028:	4ba1      	ldr	r3, [pc, #644]	; (80092b0 <UART_SetConfig+0x698>)
 800902a:	e006      	b.n	800903a <UART_SetConfig+0x422>
 800902c:	4ba1      	ldr	r3, [pc, #644]	; (80092b4 <UART_SetConfig+0x69c>)
 800902e:	e004      	b.n	800903a <UART_SetConfig+0x422>
 8009030:	4ba1      	ldr	r3, [pc, #644]	; (80092b8 <UART_SetConfig+0x6a0>)
 8009032:	e002      	b.n	800903a <UART_SetConfig+0x422>
 8009034:	4ba1      	ldr	r3, [pc, #644]	; (80092bc <UART_SetConfig+0x6a4>)
 8009036:	e000      	b.n	800903a <UART_SetConfig+0x422>
 8009038:	4b96      	ldr	r3, [pc, #600]	; (8009294 <UART_SetConfig+0x67c>)
 800903a:	617b      	str	r3, [r7, #20]
        break;
 800903c:	e0aa      	b.n	8009194 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800903e:	f7fd f901 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 8009042:	4602      	mov	r2, r0
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	2b00      	cmp	r3, #0
 800904a:	d044      	beq.n	80090d6 <UART_SetConfig+0x4be>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	2b01      	cmp	r3, #1
 8009052:	d03e      	beq.n	80090d2 <UART_SetConfig+0x4ba>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	2b02      	cmp	r3, #2
 800905a:	d038      	beq.n	80090ce <UART_SetConfig+0x4b6>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	2b03      	cmp	r3, #3
 8009062:	d032      	beq.n	80090ca <UART_SetConfig+0x4b2>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	2b04      	cmp	r3, #4
 800906a:	d02c      	beq.n	80090c6 <UART_SetConfig+0x4ae>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	2b05      	cmp	r3, #5
 8009072:	d026      	beq.n	80090c2 <UART_SetConfig+0x4aa>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	2b06      	cmp	r3, #6
 800907a:	d020      	beq.n	80090be <UART_SetConfig+0x4a6>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2b07      	cmp	r3, #7
 8009082:	d01a      	beq.n	80090ba <UART_SetConfig+0x4a2>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	2b08      	cmp	r3, #8
 800908a:	d014      	beq.n	80090b6 <UART_SetConfig+0x49e>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	2b09      	cmp	r3, #9
 8009092:	d00e      	beq.n	80090b2 <UART_SetConfig+0x49a>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	2b0a      	cmp	r3, #10
 800909a:	d008      	beq.n	80090ae <UART_SetConfig+0x496>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	2b0b      	cmp	r3, #11
 80090a2:	d102      	bne.n	80090aa <UART_SetConfig+0x492>
 80090a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090a8:	e016      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e014      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090ae:	2380      	movs	r3, #128	; 0x80
 80090b0:	e012      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090b2:	2340      	movs	r3, #64	; 0x40
 80090b4:	e010      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090b6:	2320      	movs	r3, #32
 80090b8:	e00e      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090ba:	2310      	movs	r3, #16
 80090bc:	e00c      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090be:	230c      	movs	r3, #12
 80090c0:	e00a      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090c2:	230a      	movs	r3, #10
 80090c4:	e008      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090c6:	2308      	movs	r3, #8
 80090c8:	e006      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090ca:	2306      	movs	r3, #6
 80090cc:	e004      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090ce:	2304      	movs	r3, #4
 80090d0:	e002      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e000      	b.n	80090d8 <UART_SetConfig+0x4c0>
 80090d6:	2301      	movs	r3, #1
 80090d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090dc:	617b      	str	r3, [r7, #20]
        break;
 80090de:	e059      	b.n	8009194 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d04e      	beq.n	8009186 <UART_SetConfig+0x56e>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d047      	beq.n	8009180 <UART_SetConfig+0x568>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d040      	beq.n	800917a <UART_SetConfig+0x562>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d039      	beq.n	8009174 <UART_SetConfig+0x55c>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	2b04      	cmp	r3, #4
 8009106:	d032      	beq.n	800916e <UART_SetConfig+0x556>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	2b05      	cmp	r3, #5
 800910e:	d02b      	beq.n	8009168 <UART_SetConfig+0x550>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	2b06      	cmp	r3, #6
 8009116:	d024      	beq.n	8009162 <UART_SetConfig+0x54a>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	2b07      	cmp	r3, #7
 800911e:	d01d      	beq.n	800915c <UART_SetConfig+0x544>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	2b08      	cmp	r3, #8
 8009126:	d016      	beq.n	8009156 <UART_SetConfig+0x53e>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	2b09      	cmp	r3, #9
 800912e:	d00f      	beq.n	8009150 <UART_SetConfig+0x538>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	2b0a      	cmp	r3, #10
 8009136:	d008      	beq.n	800914a <UART_SetConfig+0x532>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b0b      	cmp	r3, #11
 800913e:	d101      	bne.n	8009144 <UART_SetConfig+0x52c>
 8009140:	2380      	movs	r3, #128	; 0x80
 8009142:	e022      	b.n	800918a <UART_SetConfig+0x572>
 8009144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009148:	e01f      	b.n	800918a <UART_SetConfig+0x572>
 800914a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800914e:	e01c      	b.n	800918a <UART_SetConfig+0x572>
 8009150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009154:	e019      	b.n	800918a <UART_SetConfig+0x572>
 8009156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800915a:	e016      	b.n	800918a <UART_SetConfig+0x572>
 800915c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009160:	e013      	b.n	800918a <UART_SetConfig+0x572>
 8009162:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009166:	e010      	b.n	800918a <UART_SetConfig+0x572>
 8009168:	f640 43cc 	movw	r3, #3276	; 0xccc
 800916c:	e00d      	b.n	800918a <UART_SetConfig+0x572>
 800916e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009172:	e00a      	b.n	800918a <UART_SetConfig+0x572>
 8009174:	f241 5355 	movw	r3, #5461	; 0x1555
 8009178:	e007      	b.n	800918a <UART_SetConfig+0x572>
 800917a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800917e:	e004      	b.n	800918a <UART_SetConfig+0x572>
 8009180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009184:	e001      	b.n	800918a <UART_SetConfig+0x572>
 8009186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800918a:	617b      	str	r3, [r7, #20]
        break;
 800918c:	e002      	b.n	8009194 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	76fb      	strb	r3, [r7, #27]
        break;
 8009192:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 86cd 	beq.w	8009f36 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	4613      	mov	r3, r2
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	4413      	add	r3, r2
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d305      	bcc.n	80091b8 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d903      	bls.n	80091c0 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	76fb      	strb	r3, [r7, #27]
 80091bc:	f000 bebb 	b.w	8009f36 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80091c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091c4:	2b08      	cmp	r3, #8
 80091c6:	f200 828d 	bhi.w	80096e4 <UART_SetConfig+0xacc>
 80091ca:	a201      	add	r2, pc, #4	; (adr r2, 80091d0 <UART_SetConfig+0x5b8>)
 80091cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d0:	080091f5 	.word	0x080091f5
 80091d4:	080096e5 	.word	0x080096e5
 80091d8:	0800935f 	.word	0x0800935f
 80091dc:	080096e5 	.word	0x080096e5
 80091e0:	08009455 	.word	0x08009455
 80091e4:	080096e5 	.word	0x080096e5
 80091e8:	080096e5 	.word	0x080096e5
 80091ec:	080096e5 	.word	0x080096e5
 80091f0:	08009593 	.word	0x08009593
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80091f4:	f7fd f894 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 80091f8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f04f 0100 	mov.w	r1, #0
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	2b00      	cmp	r3, #0
 8009208:	d07d      	beq.n	8009306 <UART_SetConfig+0x6ee>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	2b01      	cmp	r3, #1
 8009210:	d074      	beq.n	80092fc <UART_SetConfig+0x6e4>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009216:	2b02      	cmp	r3, #2
 8009218:	d06b      	beq.n	80092f2 <UART_SetConfig+0x6da>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	2b03      	cmp	r3, #3
 8009220:	d062      	beq.n	80092e8 <UART_SetConfig+0x6d0>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	2b04      	cmp	r3, #4
 8009228:	d059      	beq.n	80092de <UART_SetConfig+0x6c6>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	2b05      	cmp	r3, #5
 8009230:	d050      	beq.n	80092d4 <UART_SetConfig+0x6bc>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	2b06      	cmp	r3, #6
 8009238:	d047      	beq.n	80092ca <UART_SetConfig+0x6b2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	2b07      	cmp	r3, #7
 8009240:	d03e      	beq.n	80092c0 <UART_SetConfig+0x6a8>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	2b08      	cmp	r3, #8
 8009248:	d01f      	beq.n	800928a <UART_SetConfig+0x672>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	2b09      	cmp	r3, #9
 8009250:	d016      	beq.n	8009280 <UART_SetConfig+0x668>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	2b0a      	cmp	r3, #10
 8009258:	d00d      	beq.n	8009276 <UART_SetConfig+0x65e>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	2b0b      	cmp	r3, #11
 8009260:	d104      	bne.n	800926c <UART_SetConfig+0x654>
 8009262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009266:	f04f 0400 	mov.w	r4, #0
 800926a:	e050      	b.n	800930e <UART_SetConfig+0x6f6>
 800926c:	f04f 0301 	mov.w	r3, #1
 8009270:	f04f 0400 	mov.w	r4, #0
 8009274:	e04b      	b.n	800930e <UART_SetConfig+0x6f6>
 8009276:	f04f 0380 	mov.w	r3, #128	; 0x80
 800927a:	f04f 0400 	mov.w	r4, #0
 800927e:	e046      	b.n	800930e <UART_SetConfig+0x6f6>
 8009280:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009284:	f04f 0400 	mov.w	r4, #0
 8009288:	e041      	b.n	800930e <UART_SetConfig+0x6f6>
 800928a:	f04f 0320 	mov.w	r3, #32
 800928e:	f04f 0400 	mov.w	r4, #0
 8009292:	e03c      	b.n	800930e <UART_SetConfig+0x6f6>
 8009294:	00f42400 	.word	0x00f42400
 8009298:	0001e848 	.word	0x0001e848
 800929c:	0003d090 	.word	0x0003d090
 80092a0:	0007a120 	.word	0x0007a120
 80092a4:	000f4240 	.word	0x000f4240
 80092a8:	00145855 	.word	0x00145855
 80092ac:	00186a00 	.word	0x00186a00
 80092b0:	001e8480 	.word	0x001e8480
 80092b4:	0028b0aa 	.word	0x0028b0aa
 80092b8:	003d0900 	.word	0x003d0900
 80092bc:	007a1200 	.word	0x007a1200
 80092c0:	f04f 0310 	mov.w	r3, #16
 80092c4:	f04f 0400 	mov.w	r4, #0
 80092c8:	e021      	b.n	800930e <UART_SetConfig+0x6f6>
 80092ca:	f04f 030c 	mov.w	r3, #12
 80092ce:	f04f 0400 	mov.w	r4, #0
 80092d2:	e01c      	b.n	800930e <UART_SetConfig+0x6f6>
 80092d4:	f04f 030a 	mov.w	r3, #10
 80092d8:	f04f 0400 	mov.w	r4, #0
 80092dc:	e017      	b.n	800930e <UART_SetConfig+0x6f6>
 80092de:	f04f 0308 	mov.w	r3, #8
 80092e2:	f04f 0400 	mov.w	r4, #0
 80092e6:	e012      	b.n	800930e <UART_SetConfig+0x6f6>
 80092e8:	f04f 0306 	mov.w	r3, #6
 80092ec:	f04f 0400 	mov.w	r4, #0
 80092f0:	e00d      	b.n	800930e <UART_SetConfig+0x6f6>
 80092f2:	f04f 0304 	mov.w	r3, #4
 80092f6:	f04f 0400 	mov.w	r4, #0
 80092fa:	e008      	b.n	800930e <UART_SetConfig+0x6f6>
 80092fc:	f04f 0302 	mov.w	r3, #2
 8009300:	f04f 0400 	mov.w	r4, #0
 8009304:	e003      	b.n	800930e <UART_SetConfig+0x6f6>
 8009306:	f04f 0301 	mov.w	r3, #1
 800930a:	f04f 0400 	mov.w	r4, #0
 800930e:	461a      	mov	r2, r3
 8009310:	4623      	mov	r3, r4
 8009312:	f7f7 fc27 	bl	8000b64 <__aeabi_uldivmod>
 8009316:	4603      	mov	r3, r0
 8009318:	460c      	mov	r4, r1
 800931a:	4619      	mov	r1, r3
 800931c:	4622      	mov	r2, r4
 800931e:	f04f 0300 	mov.w	r3, #0
 8009322:	f04f 0400 	mov.w	r4, #0
 8009326:	0214      	lsls	r4, r2, #8
 8009328:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800932c:	020b      	lsls	r3, r1, #8
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	6852      	ldr	r2, [r2, #4]
 8009332:	0852      	lsrs	r2, r2, #1
 8009334:	4611      	mov	r1, r2
 8009336:	f04f 0200 	mov.w	r2, #0
 800933a:	eb13 0b01 	adds.w	fp, r3, r1
 800933e:	eb44 0c02 	adc.w	ip, r4, r2
 8009342:	4658      	mov	r0, fp
 8009344:	4661      	mov	r1, ip
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	f04f 0400 	mov.w	r4, #0
 800934e:	461a      	mov	r2, r3
 8009350:	4623      	mov	r3, r4
 8009352:	f7f7 fc07 	bl	8000b64 <__aeabi_uldivmod>
 8009356:	4603      	mov	r3, r0
 8009358:	460c      	mov	r4, r1
 800935a:	61fb      	str	r3, [r7, #28]
            break;
 800935c:	e1c5      	b.n	80096ea <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	2b00      	cmp	r3, #0
 8009364:	d05b      	beq.n	800941e <UART_SetConfig+0x806>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	2b01      	cmp	r3, #1
 800936c:	d053      	beq.n	8009416 <UART_SetConfig+0x7fe>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	2b02      	cmp	r3, #2
 8009374:	d04b      	beq.n	800940e <UART_SetConfig+0x7f6>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	2b03      	cmp	r3, #3
 800937c:	d043      	beq.n	8009406 <UART_SetConfig+0x7ee>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	2b04      	cmp	r3, #4
 8009384:	d03b      	beq.n	80093fe <UART_SetConfig+0x7e6>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	2b05      	cmp	r3, #5
 800938c:	d033      	beq.n	80093f6 <UART_SetConfig+0x7de>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	2b06      	cmp	r3, #6
 8009394:	d02b      	beq.n	80093ee <UART_SetConfig+0x7d6>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	2b07      	cmp	r3, #7
 800939c:	d023      	beq.n	80093e6 <UART_SetConfig+0x7ce>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	d01b      	beq.n	80093de <UART_SetConfig+0x7c6>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093aa:	2b09      	cmp	r3, #9
 80093ac:	d013      	beq.n	80093d6 <UART_SetConfig+0x7be>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	2b0a      	cmp	r3, #10
 80093b4:	d00b      	beq.n	80093ce <UART_SetConfig+0x7b6>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ba:	2b0b      	cmp	r3, #11
 80093bc:	d103      	bne.n	80093c6 <UART_SetConfig+0x7ae>
 80093be:	4bae      	ldr	r3, [pc, #696]	; (8009678 <UART_SetConfig+0xa60>)
 80093c0:	f04f 0400 	mov.w	r4, #0
 80093c4:	e02e      	b.n	8009424 <UART_SetConfig+0x80c>
 80093c6:	4bad      	ldr	r3, [pc, #692]	; (800967c <UART_SetConfig+0xa64>)
 80093c8:	f04f 0400 	mov.w	r4, #0
 80093cc:	e02a      	b.n	8009424 <UART_SetConfig+0x80c>
 80093ce:	4bac      	ldr	r3, [pc, #688]	; (8009680 <UART_SetConfig+0xa68>)
 80093d0:	f04f 0400 	mov.w	r4, #0
 80093d4:	e026      	b.n	8009424 <UART_SetConfig+0x80c>
 80093d6:	4bab      	ldr	r3, [pc, #684]	; (8009684 <UART_SetConfig+0xa6c>)
 80093d8:	f04f 0400 	mov.w	r4, #0
 80093dc:	e022      	b.n	8009424 <UART_SetConfig+0x80c>
 80093de:	4baa      	ldr	r3, [pc, #680]	; (8009688 <UART_SetConfig+0xa70>)
 80093e0:	f04f 0400 	mov.w	r4, #0
 80093e4:	e01e      	b.n	8009424 <UART_SetConfig+0x80c>
 80093e6:	4ba9      	ldr	r3, [pc, #676]	; (800968c <UART_SetConfig+0xa74>)
 80093e8:	f04f 0400 	mov.w	r4, #0
 80093ec:	e01a      	b.n	8009424 <UART_SetConfig+0x80c>
 80093ee:	a49e      	add	r4, pc, #632	; (adr r4, 8009668 <UART_SetConfig+0xa50>)
 80093f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80093f4:	e016      	b.n	8009424 <UART_SetConfig+0x80c>
 80093f6:	4ba6      	ldr	r3, [pc, #664]	; (8009690 <UART_SetConfig+0xa78>)
 80093f8:	f04f 0400 	mov.w	r4, #0
 80093fc:	e012      	b.n	8009424 <UART_SetConfig+0x80c>
 80093fe:	4ba5      	ldr	r3, [pc, #660]	; (8009694 <UART_SetConfig+0xa7c>)
 8009400:	f04f 0400 	mov.w	r4, #0
 8009404:	e00e      	b.n	8009424 <UART_SetConfig+0x80c>
 8009406:	a49a      	add	r4, pc, #616	; (adr r4, 8009670 <UART_SetConfig+0xa58>)
 8009408:	e9d4 3400 	ldrd	r3, r4, [r4]
 800940c:	e00a      	b.n	8009424 <UART_SetConfig+0x80c>
 800940e:	4ba2      	ldr	r3, [pc, #648]	; (8009698 <UART_SetConfig+0xa80>)
 8009410:	f04f 0400 	mov.w	r4, #0
 8009414:	e006      	b.n	8009424 <UART_SetConfig+0x80c>
 8009416:	4ba1      	ldr	r3, [pc, #644]	; (800969c <UART_SetConfig+0xa84>)
 8009418:	f04f 0400 	mov.w	r4, #0
 800941c:	e002      	b.n	8009424 <UART_SetConfig+0x80c>
 800941e:	4b97      	ldr	r3, [pc, #604]	; (800967c <UART_SetConfig+0xa64>)
 8009420:	f04f 0400 	mov.w	r4, #0
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6852      	ldr	r2, [r2, #4]
 8009428:	0852      	lsrs	r2, r2, #1
 800942a:	4611      	mov	r1, r2
 800942c:	f04f 0200 	mov.w	r2, #0
 8009430:	eb13 0b01 	adds.w	fp, r3, r1
 8009434:	eb44 0c02 	adc.w	ip, r4, r2
 8009438:	4658      	mov	r0, fp
 800943a:	4661      	mov	r1, ip
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f04f 0400 	mov.w	r4, #0
 8009444:	461a      	mov	r2, r3
 8009446:	4623      	mov	r3, r4
 8009448:	f7f7 fb8c 	bl	8000b64 <__aeabi_uldivmod>
 800944c:	4603      	mov	r3, r0
 800944e:	460c      	mov	r4, r1
 8009450:	61fb      	str	r3, [r7, #28]
            break;
 8009452:	e14a      	b.n	80096ea <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8009454:	f7fc fef6 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 8009458:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	4618      	mov	r0, r3
 800945e:	f04f 0100 	mov.w	r1, #0
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	2b00      	cmp	r3, #0
 8009468:	d067      	beq.n	800953a <UART_SetConfig+0x922>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	2b01      	cmp	r3, #1
 8009470:	d05e      	beq.n	8009530 <UART_SetConfig+0x918>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	2b02      	cmp	r3, #2
 8009478:	d055      	beq.n	8009526 <UART_SetConfig+0x90e>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	2b03      	cmp	r3, #3
 8009480:	d04c      	beq.n	800951c <UART_SetConfig+0x904>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	2b04      	cmp	r3, #4
 8009488:	d043      	beq.n	8009512 <UART_SetConfig+0x8fa>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	2b05      	cmp	r3, #5
 8009490:	d03a      	beq.n	8009508 <UART_SetConfig+0x8f0>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	2b06      	cmp	r3, #6
 8009498:	d031      	beq.n	80094fe <UART_SetConfig+0x8e6>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949e:	2b07      	cmp	r3, #7
 80094a0:	d028      	beq.n	80094f4 <UART_SetConfig+0x8dc>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	2b08      	cmp	r3, #8
 80094a8:	d01f      	beq.n	80094ea <UART_SetConfig+0x8d2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	2b09      	cmp	r3, #9
 80094b0:	d016      	beq.n	80094e0 <UART_SetConfig+0x8c8>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	2b0a      	cmp	r3, #10
 80094b8:	d00d      	beq.n	80094d6 <UART_SetConfig+0x8be>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094be:	2b0b      	cmp	r3, #11
 80094c0:	d104      	bne.n	80094cc <UART_SetConfig+0x8b4>
 80094c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094c6:	f04f 0400 	mov.w	r4, #0
 80094ca:	e03a      	b.n	8009542 <UART_SetConfig+0x92a>
 80094cc:	f04f 0301 	mov.w	r3, #1
 80094d0:	f04f 0400 	mov.w	r4, #0
 80094d4:	e035      	b.n	8009542 <UART_SetConfig+0x92a>
 80094d6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80094da:	f04f 0400 	mov.w	r4, #0
 80094de:	e030      	b.n	8009542 <UART_SetConfig+0x92a>
 80094e0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80094e4:	f04f 0400 	mov.w	r4, #0
 80094e8:	e02b      	b.n	8009542 <UART_SetConfig+0x92a>
 80094ea:	f04f 0320 	mov.w	r3, #32
 80094ee:	f04f 0400 	mov.w	r4, #0
 80094f2:	e026      	b.n	8009542 <UART_SetConfig+0x92a>
 80094f4:	f04f 0310 	mov.w	r3, #16
 80094f8:	f04f 0400 	mov.w	r4, #0
 80094fc:	e021      	b.n	8009542 <UART_SetConfig+0x92a>
 80094fe:	f04f 030c 	mov.w	r3, #12
 8009502:	f04f 0400 	mov.w	r4, #0
 8009506:	e01c      	b.n	8009542 <UART_SetConfig+0x92a>
 8009508:	f04f 030a 	mov.w	r3, #10
 800950c:	f04f 0400 	mov.w	r4, #0
 8009510:	e017      	b.n	8009542 <UART_SetConfig+0x92a>
 8009512:	f04f 0308 	mov.w	r3, #8
 8009516:	f04f 0400 	mov.w	r4, #0
 800951a:	e012      	b.n	8009542 <UART_SetConfig+0x92a>
 800951c:	f04f 0306 	mov.w	r3, #6
 8009520:	f04f 0400 	mov.w	r4, #0
 8009524:	e00d      	b.n	8009542 <UART_SetConfig+0x92a>
 8009526:	f04f 0304 	mov.w	r3, #4
 800952a:	f04f 0400 	mov.w	r4, #0
 800952e:	e008      	b.n	8009542 <UART_SetConfig+0x92a>
 8009530:	f04f 0302 	mov.w	r3, #2
 8009534:	f04f 0400 	mov.w	r4, #0
 8009538:	e003      	b.n	8009542 <UART_SetConfig+0x92a>
 800953a:	f04f 0301 	mov.w	r3, #1
 800953e:	f04f 0400 	mov.w	r4, #0
 8009542:	461a      	mov	r2, r3
 8009544:	4623      	mov	r3, r4
 8009546:	f7f7 fb0d 	bl	8000b64 <__aeabi_uldivmod>
 800954a:	4603      	mov	r3, r0
 800954c:	460c      	mov	r4, r1
 800954e:	4619      	mov	r1, r3
 8009550:	4622      	mov	r2, r4
 8009552:	f04f 0300 	mov.w	r3, #0
 8009556:	f04f 0400 	mov.w	r4, #0
 800955a:	0214      	lsls	r4, r2, #8
 800955c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009560:	020b      	lsls	r3, r1, #8
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6852      	ldr	r2, [r2, #4]
 8009566:	0852      	lsrs	r2, r2, #1
 8009568:	4611      	mov	r1, r2
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	eb13 0b01 	adds.w	fp, r3, r1
 8009572:	eb44 0c02 	adc.w	ip, r4, r2
 8009576:	4658      	mov	r0, fp
 8009578:	4661      	mov	r1, ip
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f04f 0400 	mov.w	r4, #0
 8009582:	461a      	mov	r2, r3
 8009584:	4623      	mov	r3, r4
 8009586:	f7f7 faed 	bl	8000b64 <__aeabi_uldivmod>
 800958a:	4603      	mov	r3, r0
 800958c:	460c      	mov	r4, r1
 800958e:	61fb      	str	r3, [r7, #28]
            break;
 8009590:	e0ab      	b.n	80096ea <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 8088 	beq.w	80096ac <UART_SetConfig+0xa94>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d05b      	beq.n	800965c <UART_SetConfig+0xa44>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d052      	beq.n	8009652 <UART_SetConfig+0xa3a>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d04a      	beq.n	800964a <UART_SetConfig+0xa32>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d041      	beq.n	8009640 <UART_SetConfig+0xa28>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2b05      	cmp	r3, #5
 80095c2:	d039      	beq.n	8009638 <UART_SetConfig+0xa20>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	2b06      	cmp	r3, #6
 80095ca:	d031      	beq.n	8009630 <UART_SetConfig+0xa18>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	2b07      	cmp	r3, #7
 80095d2:	d028      	beq.n	8009626 <UART_SetConfig+0xa0e>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d01f      	beq.n	800961c <UART_SetConfig+0xa04>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b09      	cmp	r3, #9
 80095e2:	d016      	beq.n	8009612 <UART_SetConfig+0x9fa>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	2b0a      	cmp	r3, #10
 80095ea:	d00d      	beq.n	8009608 <UART_SetConfig+0x9f0>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	2b0b      	cmp	r3, #11
 80095f2:	d104      	bne.n	80095fe <UART_SetConfig+0x9e6>
 80095f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095f8:	f04f 0400 	mov.w	r4, #0
 80095fc:	e05a      	b.n	80096b4 <UART_SetConfig+0xa9c>
 80095fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009602:	f04f 0400 	mov.w	r4, #0
 8009606:	e055      	b.n	80096b4 <UART_SetConfig+0xa9c>
 8009608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800960c:	f04f 0400 	mov.w	r4, #0
 8009610:	e050      	b.n	80096b4 <UART_SetConfig+0xa9c>
 8009612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009616:	f04f 0400 	mov.w	r4, #0
 800961a:	e04b      	b.n	80096b4 <UART_SetConfig+0xa9c>
 800961c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009620:	f04f 0400 	mov.w	r4, #0
 8009624:	e046      	b.n	80096b4 <UART_SetConfig+0xa9c>
 8009626:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800962a:	f04f 0400 	mov.w	r4, #0
 800962e:	e041      	b.n	80096b4 <UART_SetConfig+0xa9c>
 8009630:	4b1b      	ldr	r3, [pc, #108]	; (80096a0 <UART_SetConfig+0xa88>)
 8009632:	f04f 0400 	mov.w	r4, #0
 8009636:	e03d      	b.n	80096b4 <UART_SetConfig+0xa9c>
 8009638:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <UART_SetConfig+0xa8c>)
 800963a:	f04f 0400 	mov.w	r4, #0
 800963e:	e039      	b.n	80096b4 <UART_SetConfig+0xa9c>
 8009640:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009644:	f04f 0400 	mov.w	r4, #0
 8009648:	e034      	b.n	80096b4 <UART_SetConfig+0xa9c>
 800964a:	4b17      	ldr	r3, [pc, #92]	; (80096a8 <UART_SetConfig+0xa90>)
 800964c:	f04f 0400 	mov.w	r4, #0
 8009650:	e030      	b.n	80096b4 <UART_SetConfig+0xa9c>
 8009652:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009656:	f04f 0400 	mov.w	r4, #0
 800965a:	e02b      	b.n	80096b4 <UART_SetConfig+0xa9c>
 800965c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009660:	f04f 0400 	mov.w	r4, #0
 8009664:	e026      	b.n	80096b4 <UART_SetConfig+0xa9c>
 8009666:	bf00      	nop
 8009668:	14585500 	.word	0x14585500
 800966c:	00000000 	.word	0x00000000
 8009670:	28b0aa00 	.word	0x28b0aa00
 8009674:	00000000 	.word	0x00000000
 8009678:	00f42400 	.word	0x00f42400
 800967c:	f4240000 	.word	0xf4240000
 8009680:	01e84800 	.word	0x01e84800
 8009684:	03d09000 	.word	0x03d09000
 8009688:	07a12000 	.word	0x07a12000
 800968c:	0f424000 	.word	0x0f424000
 8009690:	186a0000 	.word	0x186a0000
 8009694:	1e848000 	.word	0x1e848000
 8009698:	3d090000 	.word	0x3d090000
 800969c:	7a120000 	.word	0x7a120000
 80096a0:	000aaa00 	.word	0x000aaa00
 80096a4:	000ccc00 	.word	0x000ccc00
 80096a8:	00155500 	.word	0x00155500
 80096ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80096b0:	f04f 0400 	mov.w	r4, #0
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6852      	ldr	r2, [r2, #4]
 80096b8:	0852      	lsrs	r2, r2, #1
 80096ba:	4611      	mov	r1, r2
 80096bc:	f04f 0200 	mov.w	r2, #0
 80096c0:	eb13 0b01 	adds.w	fp, r3, r1
 80096c4:	eb44 0c02 	adc.w	ip, r4, r2
 80096c8:	4658      	mov	r0, fp
 80096ca:	4661      	mov	r1, ip
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	f04f 0400 	mov.w	r4, #0
 80096d4:	461a      	mov	r2, r3
 80096d6:	4623      	mov	r3, r4
 80096d8:	f7f7 fa44 	bl	8000b64 <__aeabi_uldivmod>
 80096dc:	4603      	mov	r3, r0
 80096de:	460c      	mov	r4, r1
 80096e0:	61fb      	str	r3, [r7, #28]
            break;
 80096e2:	e002      	b.n	80096ea <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	76fb      	strb	r3, [r7, #27]
            break;
 80096e8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096f0:	d309      	bcc.n	8009706 <UART_SetConfig+0xaee>
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096f8:	d205      	bcs.n	8009706 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	60da      	str	r2, [r3, #12]
 8009702:	f000 bc18 	b.w	8009f36 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	76fb      	strb	r3, [r7, #27]
 800970a:	f000 bc14 	b.w	8009f36 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009716:	f040 8204 	bne.w	8009b22 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800971a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800971e:	2b08      	cmp	r3, #8
 8009720:	f200 81df 	bhi.w	8009ae2 <UART_SetConfig+0xeca>
 8009724:	a201      	add	r2, pc, #4	; (adr r2, 800972c <UART_SetConfig+0xb14>)
 8009726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972a:	bf00      	nop
 800972c:	08009751 	.word	0x08009751
 8009730:	08009809 	.word	0x08009809
 8009734:	080098c1 	.word	0x080098c1
 8009738:	08009ae3 	.word	0x08009ae3
 800973c:	08009969 	.word	0x08009969
 8009740:	08009ae3 	.word	0x08009ae3
 8009744:	08009ae3 	.word	0x08009ae3
 8009748:	08009ae3 	.word	0x08009ae3
 800974c:	08009a21 	.word	0x08009a21
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009750:	f7fc fde6 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 8009754:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	2b00      	cmp	r3, #0
 800975c:	d044      	beq.n	80097e8 <UART_SetConfig+0xbd0>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b01      	cmp	r3, #1
 8009764:	d03e      	beq.n	80097e4 <UART_SetConfig+0xbcc>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976a:	2b02      	cmp	r3, #2
 800976c:	d038      	beq.n	80097e0 <UART_SetConfig+0xbc8>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	2b03      	cmp	r3, #3
 8009774:	d032      	beq.n	80097dc <UART_SetConfig+0xbc4>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	2b04      	cmp	r3, #4
 800977c:	d02c      	beq.n	80097d8 <UART_SetConfig+0xbc0>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	2b05      	cmp	r3, #5
 8009784:	d026      	beq.n	80097d4 <UART_SetConfig+0xbbc>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	2b06      	cmp	r3, #6
 800978c:	d020      	beq.n	80097d0 <UART_SetConfig+0xbb8>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	2b07      	cmp	r3, #7
 8009794:	d01a      	beq.n	80097cc <UART_SetConfig+0xbb4>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	2b08      	cmp	r3, #8
 800979c:	d014      	beq.n	80097c8 <UART_SetConfig+0xbb0>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	2b09      	cmp	r3, #9
 80097a4:	d00e      	beq.n	80097c4 <UART_SetConfig+0xbac>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	2b0a      	cmp	r3, #10
 80097ac:	d008      	beq.n	80097c0 <UART_SetConfig+0xba8>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	2b0b      	cmp	r3, #11
 80097b4:	d102      	bne.n	80097bc <UART_SetConfig+0xba4>
 80097b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097ba:	e016      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097bc:	2301      	movs	r3, #1
 80097be:	e014      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097c0:	2380      	movs	r3, #128	; 0x80
 80097c2:	e012      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	e010      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097c8:	2320      	movs	r3, #32
 80097ca:	e00e      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097cc:	2310      	movs	r3, #16
 80097ce:	e00c      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097d0:	230c      	movs	r3, #12
 80097d2:	e00a      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097d4:	230a      	movs	r3, #10
 80097d6:	e008      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097d8:	2308      	movs	r3, #8
 80097da:	e006      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097dc:	2306      	movs	r3, #6
 80097de:	e004      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097e0:	2304      	movs	r3, #4
 80097e2:	e002      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e000      	b.n	80097ea <UART_SetConfig+0xbd2>
 80097e8:	2301      	movs	r3, #1
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f0:	005a      	lsls	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	085b      	lsrs	r3, r3, #1
 80097f8:	441a      	add	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009802:	b29b      	uxth	r3, r3
 8009804:	61fb      	str	r3, [r7, #28]
        break;
 8009806:	e16f      	b.n	8009ae8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009808:	f7fc fda0 	bl	800634c <HAL_RCC_GetPCLK2Freq>
 800980c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009812:	2b00      	cmp	r3, #0
 8009814:	d044      	beq.n	80098a0 <UART_SetConfig+0xc88>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	2b01      	cmp	r3, #1
 800981c:	d03e      	beq.n	800989c <UART_SetConfig+0xc84>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009822:	2b02      	cmp	r3, #2
 8009824:	d038      	beq.n	8009898 <UART_SetConfig+0xc80>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982a:	2b03      	cmp	r3, #3
 800982c:	d032      	beq.n	8009894 <UART_SetConfig+0xc7c>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	2b04      	cmp	r3, #4
 8009834:	d02c      	beq.n	8009890 <UART_SetConfig+0xc78>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	2b05      	cmp	r3, #5
 800983c:	d026      	beq.n	800988c <UART_SetConfig+0xc74>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009842:	2b06      	cmp	r3, #6
 8009844:	d020      	beq.n	8009888 <UART_SetConfig+0xc70>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984a:	2b07      	cmp	r3, #7
 800984c:	d01a      	beq.n	8009884 <UART_SetConfig+0xc6c>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009852:	2b08      	cmp	r3, #8
 8009854:	d014      	beq.n	8009880 <UART_SetConfig+0xc68>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985a:	2b09      	cmp	r3, #9
 800985c:	d00e      	beq.n	800987c <UART_SetConfig+0xc64>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009862:	2b0a      	cmp	r3, #10
 8009864:	d008      	beq.n	8009878 <UART_SetConfig+0xc60>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	2b0b      	cmp	r3, #11
 800986c:	d102      	bne.n	8009874 <UART_SetConfig+0xc5c>
 800986e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009872:	e016      	b.n	80098a2 <UART_SetConfig+0xc8a>
 8009874:	2301      	movs	r3, #1
 8009876:	e014      	b.n	80098a2 <UART_SetConfig+0xc8a>
 8009878:	2380      	movs	r3, #128	; 0x80
 800987a:	e012      	b.n	80098a2 <UART_SetConfig+0xc8a>
 800987c:	2340      	movs	r3, #64	; 0x40
 800987e:	e010      	b.n	80098a2 <UART_SetConfig+0xc8a>
 8009880:	2320      	movs	r3, #32
 8009882:	e00e      	b.n	80098a2 <UART_SetConfig+0xc8a>
 8009884:	2310      	movs	r3, #16
 8009886:	e00c      	b.n	80098a2 <UART_SetConfig+0xc8a>
 8009888:	230c      	movs	r3, #12
 800988a:	e00a      	b.n	80098a2 <UART_SetConfig+0xc8a>
 800988c:	230a      	movs	r3, #10
 800988e:	e008      	b.n	80098a2 <UART_SetConfig+0xc8a>
 8009890:	2308      	movs	r3, #8
 8009892:	e006      	b.n	80098a2 <UART_SetConfig+0xc8a>
 8009894:	2306      	movs	r3, #6
 8009896:	e004      	b.n	80098a2 <UART_SetConfig+0xc8a>
 8009898:	2304      	movs	r3, #4
 800989a:	e002      	b.n	80098a2 <UART_SetConfig+0xc8a>
 800989c:	2302      	movs	r3, #2
 800989e:	e000      	b.n	80098a2 <UART_SetConfig+0xc8a>
 80098a0:	2301      	movs	r3, #1
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a8:	005a      	lsls	r2, r3, #1
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	085b      	lsrs	r3, r3, #1
 80098b0:	441a      	add	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	61fb      	str	r3, [r7, #28]
        break;
 80098be:	e113      	b.n	8009ae8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d043      	beq.n	8009950 <UART_SetConfig+0xd38>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d03d      	beq.n	800994c <UART_SetConfig+0xd34>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d037      	beq.n	8009948 <UART_SetConfig+0xd30>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	2b03      	cmp	r3, #3
 80098de:	d031      	beq.n	8009944 <UART_SetConfig+0xd2c>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d02b      	beq.n	8009940 <UART_SetConfig+0xd28>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	2b05      	cmp	r3, #5
 80098ee:	d025      	beq.n	800993c <UART_SetConfig+0xd24>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	2b06      	cmp	r3, #6
 80098f6:	d01f      	beq.n	8009938 <UART_SetConfig+0xd20>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	2b07      	cmp	r3, #7
 80098fe:	d019      	beq.n	8009934 <UART_SetConfig+0xd1c>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	2b08      	cmp	r3, #8
 8009906:	d013      	beq.n	8009930 <UART_SetConfig+0xd18>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	2b09      	cmp	r3, #9
 800990e:	d00d      	beq.n	800992c <UART_SetConfig+0xd14>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	2b0a      	cmp	r3, #10
 8009916:	d007      	beq.n	8009928 <UART_SetConfig+0xd10>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	2b0b      	cmp	r3, #11
 800991e:	d101      	bne.n	8009924 <UART_SetConfig+0xd0c>
 8009920:	4b8d      	ldr	r3, [pc, #564]	; (8009b58 <UART_SetConfig+0xf40>)
 8009922:	e016      	b.n	8009952 <UART_SetConfig+0xd3a>
 8009924:	4b8d      	ldr	r3, [pc, #564]	; (8009b5c <UART_SetConfig+0xf44>)
 8009926:	e014      	b.n	8009952 <UART_SetConfig+0xd3a>
 8009928:	4b8d      	ldr	r3, [pc, #564]	; (8009b60 <UART_SetConfig+0xf48>)
 800992a:	e012      	b.n	8009952 <UART_SetConfig+0xd3a>
 800992c:	4b8d      	ldr	r3, [pc, #564]	; (8009b64 <UART_SetConfig+0xf4c>)
 800992e:	e010      	b.n	8009952 <UART_SetConfig+0xd3a>
 8009930:	4b8d      	ldr	r3, [pc, #564]	; (8009b68 <UART_SetConfig+0xf50>)
 8009932:	e00e      	b.n	8009952 <UART_SetConfig+0xd3a>
 8009934:	4b8d      	ldr	r3, [pc, #564]	; (8009b6c <UART_SetConfig+0xf54>)
 8009936:	e00c      	b.n	8009952 <UART_SetConfig+0xd3a>
 8009938:	4b8d      	ldr	r3, [pc, #564]	; (8009b70 <UART_SetConfig+0xf58>)
 800993a:	e00a      	b.n	8009952 <UART_SetConfig+0xd3a>
 800993c:	4b8d      	ldr	r3, [pc, #564]	; (8009b74 <UART_SetConfig+0xf5c>)
 800993e:	e008      	b.n	8009952 <UART_SetConfig+0xd3a>
 8009940:	4b8d      	ldr	r3, [pc, #564]	; (8009b78 <UART_SetConfig+0xf60>)
 8009942:	e006      	b.n	8009952 <UART_SetConfig+0xd3a>
 8009944:	4b8d      	ldr	r3, [pc, #564]	; (8009b7c <UART_SetConfig+0xf64>)
 8009946:	e004      	b.n	8009952 <UART_SetConfig+0xd3a>
 8009948:	4b8d      	ldr	r3, [pc, #564]	; (8009b80 <UART_SetConfig+0xf68>)
 800994a:	e002      	b.n	8009952 <UART_SetConfig+0xd3a>
 800994c:	4b8d      	ldr	r3, [pc, #564]	; (8009b84 <UART_SetConfig+0xf6c>)
 800994e:	e000      	b.n	8009952 <UART_SetConfig+0xd3a>
 8009950:	4b82      	ldr	r3, [pc, #520]	; (8009b5c <UART_SetConfig+0xf44>)
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	6852      	ldr	r2, [r2, #4]
 8009956:	0852      	lsrs	r2, r2, #1
 8009958:	441a      	add	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009962:	b29b      	uxth	r3, r3
 8009964:	61fb      	str	r3, [r7, #28]
        break;
 8009966:	e0bf      	b.n	8009ae8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009968:	f7fc fc6c 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 800996c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	2b00      	cmp	r3, #0
 8009974:	d044      	beq.n	8009a00 <UART_SetConfig+0xde8>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	2b01      	cmp	r3, #1
 800997c:	d03e      	beq.n	80099fc <UART_SetConfig+0xde4>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	2b02      	cmp	r3, #2
 8009984:	d038      	beq.n	80099f8 <UART_SetConfig+0xde0>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998a:	2b03      	cmp	r3, #3
 800998c:	d032      	beq.n	80099f4 <UART_SetConfig+0xddc>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	2b04      	cmp	r3, #4
 8009994:	d02c      	beq.n	80099f0 <UART_SetConfig+0xdd8>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	2b05      	cmp	r3, #5
 800999c:	d026      	beq.n	80099ec <UART_SetConfig+0xdd4>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	2b06      	cmp	r3, #6
 80099a4:	d020      	beq.n	80099e8 <UART_SetConfig+0xdd0>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	2b07      	cmp	r3, #7
 80099ac:	d01a      	beq.n	80099e4 <UART_SetConfig+0xdcc>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	2b08      	cmp	r3, #8
 80099b4:	d014      	beq.n	80099e0 <UART_SetConfig+0xdc8>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ba:	2b09      	cmp	r3, #9
 80099bc:	d00e      	beq.n	80099dc <UART_SetConfig+0xdc4>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	2b0a      	cmp	r3, #10
 80099c4:	d008      	beq.n	80099d8 <UART_SetConfig+0xdc0>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	2b0b      	cmp	r3, #11
 80099cc:	d102      	bne.n	80099d4 <UART_SetConfig+0xdbc>
 80099ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099d2:	e016      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099d4:	2301      	movs	r3, #1
 80099d6:	e014      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099d8:	2380      	movs	r3, #128	; 0x80
 80099da:	e012      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099dc:	2340      	movs	r3, #64	; 0x40
 80099de:	e010      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099e0:	2320      	movs	r3, #32
 80099e2:	e00e      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099e4:	2310      	movs	r3, #16
 80099e6:	e00c      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099e8:	230c      	movs	r3, #12
 80099ea:	e00a      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099ec:	230a      	movs	r3, #10
 80099ee:	e008      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099f0:	2308      	movs	r3, #8
 80099f2:	e006      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099f4:	2306      	movs	r3, #6
 80099f6:	e004      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099f8:	2304      	movs	r3, #4
 80099fa:	e002      	b.n	8009a02 <UART_SetConfig+0xdea>
 80099fc:	2302      	movs	r3, #2
 80099fe:	e000      	b.n	8009a02 <UART_SetConfig+0xdea>
 8009a00:	2301      	movs	r3, #1
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a08:	005a      	lsls	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	085b      	lsrs	r3, r3, #1
 8009a10:	441a      	add	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	61fb      	str	r3, [r7, #28]
        break;
 8009a1e:	e063      	b.n	8009ae8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d04f      	beq.n	8009ac8 <UART_SetConfig+0xeb0>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d048      	beq.n	8009ac2 <UART_SetConfig+0xeaa>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d041      	beq.n	8009abc <UART_SetConfig+0xea4>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d03a      	beq.n	8009ab6 <UART_SetConfig+0xe9e>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d033      	beq.n	8009ab0 <UART_SetConfig+0xe98>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	d02c      	beq.n	8009aaa <UART_SetConfig+0xe92>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	2b06      	cmp	r3, #6
 8009a56:	d025      	beq.n	8009aa4 <UART_SetConfig+0xe8c>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	2b07      	cmp	r3, #7
 8009a5e:	d01e      	beq.n	8009a9e <UART_SetConfig+0xe86>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	d017      	beq.n	8009a98 <UART_SetConfig+0xe80>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6c:	2b09      	cmp	r3, #9
 8009a6e:	d010      	beq.n	8009a92 <UART_SetConfig+0xe7a>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	2b0a      	cmp	r3, #10
 8009a76:	d009      	beq.n	8009a8c <UART_SetConfig+0xe74>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	2b0b      	cmp	r3, #11
 8009a7e:	d102      	bne.n	8009a86 <UART_SetConfig+0xe6e>
 8009a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a84:	e022      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009a8a:	e01f      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a90:	e01c      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a96:	e019      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a9c:	e016      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aa2:	e013      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009aa4:	f241 5354 	movw	r3, #5460	; 0x1554
 8009aa8:	e010      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009aaa:	f641 1398 	movw	r3, #6552	; 0x1998
 8009aae:	e00d      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ab4:	e00a      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009ab6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009aba:	e007      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009abc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ac0:	e004      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ac6:	e001      	b.n	8009acc <UART_SetConfig+0xeb4>
 8009ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6852      	ldr	r2, [r2, #4]
 8009ad0:	0852      	lsrs	r2, r2, #1
 8009ad2:	441a      	add	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	61fb      	str	r3, [r7, #28]
        break;
 8009ae0:	e002      	b.n	8009ae8 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	76fb      	strb	r3, [r7, #27]
        break;
 8009ae6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	2b0f      	cmp	r3, #15
 8009aec:	d916      	bls.n	8009b1c <UART_SetConfig+0xf04>
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af4:	d212      	bcs.n	8009b1c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f023 030f 	bic.w	r3, r3, #15
 8009afe:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	085b      	lsrs	r3, r3, #1
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	89fb      	ldrh	r3, [r7, #14]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	89fa      	ldrh	r2, [r7, #14]
 8009b18:	60da      	str	r2, [r3, #12]
 8009b1a:	e20c      	b.n	8009f36 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	76fb      	strb	r3, [r7, #27]
 8009b20:	e209      	b.n	8009f36 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8009b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	f200 81f4 	bhi.w	8009f14 <UART_SetConfig+0x12fc>
 8009b2c:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <UART_SetConfig+0xf1c>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b89 	.word	0x08009b89
 8009b38:	08009c3f 	.word	0x08009c3f
 8009b3c:	08009cf5 	.word	0x08009cf5
 8009b40:	08009f15 	.word	0x08009f15
 8009b44:	08009d9f 	.word	0x08009d9f
 8009b48:	08009f15 	.word	0x08009f15
 8009b4c:	08009f15 	.word	0x08009f15
 8009b50:	08009f15 	.word	0x08009f15
 8009b54:	08009e55 	.word	0x08009e55
 8009b58:	0001e848 	.word	0x0001e848
 8009b5c:	01e84800 	.word	0x01e84800
 8009b60:	0003d090 	.word	0x0003d090
 8009b64:	0007a120 	.word	0x0007a120
 8009b68:	000f4240 	.word	0x000f4240
 8009b6c:	001e8480 	.word	0x001e8480
 8009b70:	0028b0aa 	.word	0x0028b0aa
 8009b74:	0030d400 	.word	0x0030d400
 8009b78:	003d0900 	.word	0x003d0900
 8009b7c:	00516154 	.word	0x00516154
 8009b80:	007a1200 	.word	0x007a1200
 8009b84:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b88:	f7fc fbca 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 8009b8c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d044      	beq.n	8009c20 <UART_SetConfig+0x1008>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d03e      	beq.n	8009c1c <UART_SetConfig+0x1004>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d038      	beq.n	8009c18 <UART_SetConfig+0x1000>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d032      	beq.n	8009c14 <UART_SetConfig+0xffc>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d02c      	beq.n	8009c10 <UART_SetConfig+0xff8>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	d026      	beq.n	8009c0c <UART_SetConfig+0xff4>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc2:	2b06      	cmp	r3, #6
 8009bc4:	d020      	beq.n	8009c08 <UART_SetConfig+0xff0>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bca:	2b07      	cmp	r3, #7
 8009bcc:	d01a      	beq.n	8009c04 <UART_SetConfig+0xfec>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	2b08      	cmp	r3, #8
 8009bd4:	d014      	beq.n	8009c00 <UART_SetConfig+0xfe8>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	2b09      	cmp	r3, #9
 8009bdc:	d00e      	beq.n	8009bfc <UART_SetConfig+0xfe4>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	2b0a      	cmp	r3, #10
 8009be4:	d008      	beq.n	8009bf8 <UART_SetConfig+0xfe0>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	2b0b      	cmp	r3, #11
 8009bec:	d102      	bne.n	8009bf4 <UART_SetConfig+0xfdc>
 8009bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bf2:	e016      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e014      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009bf8:	2380      	movs	r3, #128	; 0x80
 8009bfa:	e012      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009bfc:	2340      	movs	r3, #64	; 0x40
 8009bfe:	e010      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009c00:	2320      	movs	r3, #32
 8009c02:	e00e      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009c04:	2310      	movs	r3, #16
 8009c06:	e00c      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009c08:	230c      	movs	r3, #12
 8009c0a:	e00a      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009c0c:	230a      	movs	r3, #10
 8009c0e:	e008      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009c10:	2308      	movs	r3, #8
 8009c12:	e006      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009c14:	2306      	movs	r3, #6
 8009c16:	e004      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009c18:	2304      	movs	r3, #4
 8009c1a:	e002      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e000      	b.n	8009c22 <UART_SetConfig+0x100a>
 8009c20:	2301      	movs	r3, #1
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	085b      	lsrs	r3, r3, #1
 8009c2e:	441a      	add	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	61fb      	str	r3, [r7, #28]
        break;
 8009c3c:	e16d      	b.n	8009f1a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c3e:	f7fc fb85 	bl	800634c <HAL_RCC_GetPCLK2Freq>
 8009c42:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d044      	beq.n	8009cd6 <UART_SetConfig+0x10be>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d03e      	beq.n	8009cd2 <UART_SetConfig+0x10ba>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d038      	beq.n	8009cce <UART_SetConfig+0x10b6>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d032      	beq.n	8009cca <UART_SetConfig+0x10b2>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d02c      	beq.n	8009cc6 <UART_SetConfig+0x10ae>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	2b05      	cmp	r3, #5
 8009c72:	d026      	beq.n	8009cc2 <UART_SetConfig+0x10aa>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	2b06      	cmp	r3, #6
 8009c7a:	d020      	beq.n	8009cbe <UART_SetConfig+0x10a6>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	2b07      	cmp	r3, #7
 8009c82:	d01a      	beq.n	8009cba <UART_SetConfig+0x10a2>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d014      	beq.n	8009cb6 <UART_SetConfig+0x109e>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	2b09      	cmp	r3, #9
 8009c92:	d00e      	beq.n	8009cb2 <UART_SetConfig+0x109a>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	2b0a      	cmp	r3, #10
 8009c9a:	d008      	beq.n	8009cae <UART_SetConfig+0x1096>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	2b0b      	cmp	r3, #11
 8009ca2:	d102      	bne.n	8009caa <UART_SetConfig+0x1092>
 8009ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ca8:	e016      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e014      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cae:	2380      	movs	r3, #128	; 0x80
 8009cb0:	e012      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cb2:	2340      	movs	r3, #64	; 0x40
 8009cb4:	e010      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cb6:	2320      	movs	r3, #32
 8009cb8:	e00e      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cba:	2310      	movs	r3, #16
 8009cbc:	e00c      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cbe:	230c      	movs	r3, #12
 8009cc0:	e00a      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cc2:	230a      	movs	r3, #10
 8009cc4:	e008      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	e006      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cca:	2306      	movs	r3, #6
 8009ccc:	e004      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cce:	2304      	movs	r3, #4
 8009cd0:	e002      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e000      	b.n	8009cd8 <UART_SetConfig+0x10c0>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	085b      	lsrs	r3, r3, #1
 8009ce4:	441a      	add	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	61fb      	str	r3, [r7, #28]
        break;
 8009cf2:	e112      	b.n	8009f1a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d044      	beq.n	8009d86 <UART_SetConfig+0x116e>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d03e      	beq.n	8009d82 <UART_SetConfig+0x116a>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d038      	beq.n	8009d7e <UART_SetConfig+0x1166>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d032      	beq.n	8009d7a <UART_SetConfig+0x1162>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d02c      	beq.n	8009d76 <UART_SetConfig+0x115e>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	2b05      	cmp	r3, #5
 8009d22:	d026      	beq.n	8009d72 <UART_SetConfig+0x115a>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	2b06      	cmp	r3, #6
 8009d2a:	d020      	beq.n	8009d6e <UART_SetConfig+0x1156>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	2b07      	cmp	r3, #7
 8009d32:	d01a      	beq.n	8009d6a <UART_SetConfig+0x1152>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d014      	beq.n	8009d66 <UART_SetConfig+0x114e>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	2b09      	cmp	r3, #9
 8009d42:	d00e      	beq.n	8009d62 <UART_SetConfig+0x114a>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	2b0a      	cmp	r3, #10
 8009d4a:	d008      	beq.n	8009d5e <UART_SetConfig+0x1146>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2b0b      	cmp	r3, #11
 8009d52:	d102      	bne.n	8009d5a <UART_SetConfig+0x1142>
 8009d54:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009d58:	e016      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d5a:	4b81      	ldr	r3, [pc, #516]	; (8009f60 <UART_SetConfig+0x1348>)
 8009d5c:	e014      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d5e:	4b81      	ldr	r3, [pc, #516]	; (8009f64 <UART_SetConfig+0x134c>)
 8009d60:	e012      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d62:	4b81      	ldr	r3, [pc, #516]	; (8009f68 <UART_SetConfig+0x1350>)
 8009d64:	e010      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d66:	4b81      	ldr	r3, [pc, #516]	; (8009f6c <UART_SetConfig+0x1354>)
 8009d68:	e00e      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d6a:	4b81      	ldr	r3, [pc, #516]	; (8009f70 <UART_SetConfig+0x1358>)
 8009d6c:	e00c      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d6e:	4b81      	ldr	r3, [pc, #516]	; (8009f74 <UART_SetConfig+0x135c>)
 8009d70:	e00a      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d72:	4b81      	ldr	r3, [pc, #516]	; (8009f78 <UART_SetConfig+0x1360>)
 8009d74:	e008      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d76:	4b81      	ldr	r3, [pc, #516]	; (8009f7c <UART_SetConfig+0x1364>)
 8009d78:	e006      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d7a:	4b81      	ldr	r3, [pc, #516]	; (8009f80 <UART_SetConfig+0x1368>)
 8009d7c:	e004      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d7e:	4b81      	ldr	r3, [pc, #516]	; (8009f84 <UART_SetConfig+0x136c>)
 8009d80:	e002      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d82:	4b81      	ldr	r3, [pc, #516]	; (8009f88 <UART_SetConfig+0x1370>)
 8009d84:	e000      	b.n	8009d88 <UART_SetConfig+0x1170>
 8009d86:	4b76      	ldr	r3, [pc, #472]	; (8009f60 <UART_SetConfig+0x1348>)
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	6852      	ldr	r2, [r2, #4]
 8009d8c:	0852      	lsrs	r2, r2, #1
 8009d8e:	441a      	add	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	61fb      	str	r3, [r7, #28]
        break;
 8009d9c:	e0bd      	b.n	8009f1a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d9e:	f7fc fa51 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 8009da2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d044      	beq.n	8009e36 <UART_SetConfig+0x121e>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d03e      	beq.n	8009e32 <UART_SetConfig+0x121a>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d038      	beq.n	8009e2e <UART_SetConfig+0x1216>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	2b03      	cmp	r3, #3
 8009dc2:	d032      	beq.n	8009e2a <UART_SetConfig+0x1212>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d02c      	beq.n	8009e26 <UART_SetConfig+0x120e>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	2b05      	cmp	r3, #5
 8009dd2:	d026      	beq.n	8009e22 <UART_SetConfig+0x120a>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd8:	2b06      	cmp	r3, #6
 8009dda:	d020      	beq.n	8009e1e <UART_SetConfig+0x1206>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	2b07      	cmp	r3, #7
 8009de2:	d01a      	beq.n	8009e1a <UART_SetConfig+0x1202>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	2b08      	cmp	r3, #8
 8009dea:	d014      	beq.n	8009e16 <UART_SetConfig+0x11fe>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	2b09      	cmp	r3, #9
 8009df2:	d00e      	beq.n	8009e12 <UART_SetConfig+0x11fa>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	2b0a      	cmp	r3, #10
 8009dfa:	d008      	beq.n	8009e0e <UART_SetConfig+0x11f6>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	2b0b      	cmp	r3, #11
 8009e02:	d102      	bne.n	8009e0a <UART_SetConfig+0x11f2>
 8009e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e08:	e016      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e014      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e0e:	2380      	movs	r3, #128	; 0x80
 8009e10:	e012      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e12:	2340      	movs	r3, #64	; 0x40
 8009e14:	e010      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e16:	2320      	movs	r3, #32
 8009e18:	e00e      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e1a:	2310      	movs	r3, #16
 8009e1c:	e00c      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e1e:	230c      	movs	r3, #12
 8009e20:	e00a      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e22:	230a      	movs	r3, #10
 8009e24:	e008      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e26:	2308      	movs	r3, #8
 8009e28:	e006      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e2a:	2306      	movs	r3, #6
 8009e2c:	e004      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e2e:	2304      	movs	r3, #4
 8009e30:	e002      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e000      	b.n	8009e38 <UART_SetConfig+0x1220>
 8009e36:	2301      	movs	r3, #1
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	085b      	lsrs	r3, r3, #1
 8009e44:	441a      	add	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	61fb      	str	r3, [r7, #28]
        break;
 8009e52:	e062      	b.n	8009f1a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d04e      	beq.n	8009efa <UART_SetConfig+0x12e2>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d047      	beq.n	8009ef4 <UART_SetConfig+0x12dc>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d040      	beq.n	8009eee <UART_SetConfig+0x12d6>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d039      	beq.n	8009ee8 <UART_SetConfig+0x12d0>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d032      	beq.n	8009ee2 <UART_SetConfig+0x12ca>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	2b05      	cmp	r3, #5
 8009e82:	d02b      	beq.n	8009edc <UART_SetConfig+0x12c4>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	2b06      	cmp	r3, #6
 8009e8a:	d024      	beq.n	8009ed6 <UART_SetConfig+0x12be>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	2b07      	cmp	r3, #7
 8009e92:	d01d      	beq.n	8009ed0 <UART_SetConfig+0x12b8>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d016      	beq.n	8009eca <UART_SetConfig+0x12b2>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	2b09      	cmp	r3, #9
 8009ea2:	d00f      	beq.n	8009ec4 <UART_SetConfig+0x12ac>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	2b0a      	cmp	r3, #10
 8009eaa:	d008      	beq.n	8009ebe <UART_SetConfig+0x12a6>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	2b0b      	cmp	r3, #11
 8009eb2:	d101      	bne.n	8009eb8 <UART_SetConfig+0x12a0>
 8009eb4:	2380      	movs	r3, #128	; 0x80
 8009eb6:	e022      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ebc:	e01f      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ec2:	e01c      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ec8:	e019      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ece:	e016      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009ed0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ed4:	e013      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009ed6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009eda:	e010      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009edc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009ee0:	e00d      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ee6:	e00a      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009ee8:	f241 5355 	movw	r3, #5461	; 0x1555
 8009eec:	e007      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ef2:	e004      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009ef4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ef8:	e001      	b.n	8009efe <UART_SetConfig+0x12e6>
 8009efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	6852      	ldr	r2, [r2, #4]
 8009f02:	0852      	lsrs	r2, r2, #1
 8009f04:	441a      	add	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	61fb      	str	r3, [r7, #28]
        break;
 8009f12:	e002      	b.n	8009f1a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	76fb      	strb	r3, [r7, #27]
        break;
 8009f18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	2b0f      	cmp	r3, #15
 8009f1e:	d908      	bls.n	8009f32 <UART_SetConfig+0x131a>
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f26:	d204      	bcs.n	8009f32 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	69fa      	ldr	r2, [r7, #28]
 8009f2e:	60da      	str	r2, [r3, #12]
 8009f30:	e001      	b.n	8009f36 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009f52:	7efb      	ldrb	r3, [r7, #27]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3728      	adds	r7, #40	; 0x28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009f5e:	bf00      	nop
 8009f60:	00f42400 	.word	0x00f42400
 8009f64:	0001e848 	.word	0x0001e848
 8009f68:	0003d090 	.word	0x0003d090
 8009f6c:	0007a120 	.word	0x0007a120
 8009f70:	000f4240 	.word	0x000f4240
 8009f74:	00145855 	.word	0x00145855
 8009f78:	00186a00 	.word	0x00186a00
 8009f7c:	001e8480 	.word	0x001e8480
 8009f80:	0028b0aa 	.word	0x0028b0aa
 8009f84:	003d0900 	.word	0x003d0900
 8009f88:	007a1200 	.word	0x007a1200

08009f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00a      	beq.n	8009fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00a      	beq.n	8009fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00a      	beq.n	8009ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffe:	f003 0308 	and.w	r3, r3, #8
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a020:	f003 0310 	and.w	r3, r3, #16
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00a      	beq.n	800a03e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	430a      	orrs	r2, r1
 800a05e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01a      	beq.n	800a0a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a08a:	d10a      	bne.n	800a0a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00a      	beq.n	800a0c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	605a      	str	r2, [r3, #4]
  }
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af02      	add	r7, sp, #8
 800a0d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a0e0:	f7f8 feca 	bl	8002e78 <HAL_GetTick>
 800a0e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0308 	and.w	r3, r3, #8
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d10e      	bne.n	800a112 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f82c 	bl	800a160 <UART_WaitOnFlagUntilTimeout>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e022      	b.n	800a158 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d10e      	bne.n	800a13e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f816 	bl	800a160 <UART_WaitOnFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e00c      	b.n	800a158 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2220      	movs	r2, #32
 800a142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	4613      	mov	r3, r2
 800a16e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a170:	e02c      	b.n	800a1cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a178:	d028      	beq.n	800a1cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a17a:	f7f8 fe7d 	bl	8002e78 <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	429a      	cmp	r2, r3
 800a188:	d302      	bcc.n	800a190 <UART_WaitOnFlagUntilTimeout+0x30>
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d11d      	bne.n	800a1cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a19e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0201 	bic.w	r2, r2, #1
 800a1ae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e00f      	b.n	800a1ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	69da      	ldr	r2, [r3, #28]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	bf0c      	ite	eq
 800a1dc:	2301      	moveq	r3, #1
 800a1de:	2300      	movne	r3, #0
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d0c3      	beq.n	800a172 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a20a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a21a:	f023 0301 	bic.w	r3, r3, #1
 800a21e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2220      	movs	r2, #32
 800a224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a22e:	bf00      	nop
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr

0800a23a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f7fe fcd3 	bl	8008c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a27c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2220      	movs	r2, #32
 800a282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7fe fcaf 	bl	8008bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a292:	bf00      	nop
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2a8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2b0:	2b22      	cmp	r3, #34	; 0x22
 800a2b2:	d13b      	bne.n	800a32c <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a2bc:	89bb      	ldrh	r3, [r7, #12]
 800a2be:	b2d9      	uxtb	r1, r3
 800a2c0:	89fb      	ldrh	r3, [r7, #14]
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c8:	400a      	ands	r2, r1
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d122      	bne.n	800a33c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a304:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f022 0201 	bic.w	r2, r2, #1
 800a314:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2220      	movs	r2, #32
 800a31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7f7 ff53 	bl	80021d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a32a:	e007      	b.n	800a33c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0208 	orr.w	r2, r2, #8
 800a33a:	619a      	str	r2, [r3, #24]
}
 800a33c:	bf00      	nop
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a352:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a35a:	2b22      	cmp	r3, #34	; 0x22
 800a35c:	d13b      	bne.n	800a3d6 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a36a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a36c:	89ba      	ldrh	r2, [r7, #12]
 800a36e:	89fb      	ldrh	r3, [r7, #14]
 800a370:	4013      	ands	r3, r2
 800a372:	b29a      	uxth	r2, r3
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37c:	1c9a      	adds	r2, r3, #2
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d122      	bne.n	800a3e6 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a3ae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f022 0201 	bic.w	r2, r2, #1
 800a3be:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7f7 fefe 	bl	80021d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3d4:	e007      	b.n	800a3e6 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	699a      	ldr	r2, [r3, #24]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f042 0208 	orr.w	r2, r2, #8
 800a3e4:	619a      	str	r2, [r3, #24]
}
 800a3e6:	bf00      	nop
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a3fe:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a406:	2b22      	cmp	r3, #34	; 0x22
 800a408:	d168      	bne.n	800a4dc <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a410:	81fb      	strh	r3, [r7, #14]
 800a412:	e03f      	b.n	800a494 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a41c:	893b      	ldrh	r3, [r7, #8]
 800a41e:	b2d9      	uxtb	r1, r3
 800a420:	89bb      	ldrh	r3, [r7, #12]
 800a422:	b2da      	uxtb	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a428:	400a      	ands	r2, r1
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a43e:	b29b      	uxth	r3, r3
 800a440:	3b01      	subs	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a450:	b29b      	uxth	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d11b      	bne.n	800a48e <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a464:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	6812      	ldr	r2, [r2, #0]
 800a470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a474:	f023 0301 	bic.w	r3, r3, #1
 800a478:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2220      	movs	r2, #32
 800a47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7f7 fea1 	bl	80021d0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a48e:	89fb      	ldrh	r3, [r7, #14]
 800a490:	3b01      	subs	r3, #1
 800a492:	81fb      	strh	r3, [r7, #14]
 800a494:	89fb      	ldrh	r3, [r7, #14]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1bc      	bne.n	800a414 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4a0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a4a2:	897b      	ldrh	r3, [r7, #10]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d021      	beq.n	800a4ec <UART_RxISR_8BIT_FIFOEN+0xfc>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a4ae:	897a      	ldrh	r2, [r7, #10]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d21b      	bcs.n	800a4ec <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a4c2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a0b      	ldr	r2, [pc, #44]	; (800a4f4 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800a4c8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 0220 	orr.w	r2, r2, #32
 800a4d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4da:	e007      	b.n	800a4ec <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	699a      	ldr	r2, [r3, #24]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0208 	orr.w	r2, r2, #8
 800a4ea:	619a      	str	r2, [r3, #24]
}
 800a4ec:	bf00      	nop
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	0800a29b 	.word	0x0800a29b

0800a4f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a506:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a50e:	2b22      	cmp	r3, #34	; 0x22
 800a510:	d168      	bne.n	800a5e4 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a518:	82fb      	strh	r3, [r7, #22]
 800a51a:	e03f      	b.n	800a59c <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a528:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a52a:	8a3a      	ldrh	r2, [r7, #16]
 800a52c:	8abb      	ldrh	r3, [r7, #20]
 800a52e:	4013      	ands	r3, r2
 800a530:	b29a      	uxth	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53a:	1c9a      	adds	r2, r3, #2
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a546:	b29b      	uxth	r3, r3
 800a548:	3b01      	subs	r3, #1
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d11b      	bne.n	800a596 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a56c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	6812      	ldr	r2, [r2, #0]
 800a578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a57c:	f023 0301 	bic.w	r3, r3, #1
 800a580:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2220      	movs	r2, #32
 800a586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7f7 fe1d 	bl	80021d0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a596:	8afb      	ldrh	r3, [r7, #22]
 800a598:	3b01      	subs	r3, #1
 800a59a:	82fb      	strh	r3, [r7, #22]
 800a59c:	8afb      	ldrh	r3, [r7, #22]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1bc      	bne.n	800a51c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5a8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a5aa:	8a7b      	ldrh	r3, [r7, #18]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d021      	beq.n	800a5f4 <UART_RxISR_16BIT_FIFOEN+0xfc>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a5b6:	8a7a      	ldrh	r2, [r7, #18]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d21b      	bcs.n	800a5f4 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689a      	ldr	r2, [r3, #8]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a5ca:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a0b      	ldr	r2, [pc, #44]	; (800a5fc <UART_RxISR_16BIT_FIFOEN+0x104>)
 800a5d0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f042 0220 	orr.w	r2, r2, #32
 800a5e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5e2:	e007      	b.n	800a5f4 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	699a      	ldr	r2, [r3, #24]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0208 	orr.w	r2, r2, #8
 800a5f2:	619a      	str	r2, [r3, #24]
}
 800a5f4:	bf00      	nop
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	0800a345 	.word	0x0800a345

0800a600 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d101      	bne.n	800a652 <HAL_UARTEx_DisableFifoMode+0x16>
 800a64e:	2302      	movs	r3, #2
 800a650:	e027      	b.n	800a6a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2224      	movs	r2, #36	; 0x24
 800a65e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f022 0201 	bic.w	r2, r2, #1
 800a678:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a680:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2220      	movs	r2, #32
 800a694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e02d      	b.n	800a722 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2224      	movs	r2, #36	; 0x24
 800a6d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f850 	bl	800a7a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2220      	movs	r2, #32
 800a714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d101      	bne.n	800a742 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a73e:	2302      	movs	r3, #2
 800a740:	e02d      	b.n	800a79e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2224      	movs	r2, #36	; 0x24
 800a74e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f022 0201 	bic.w	r2, r2, #1
 800a768:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	430a      	orrs	r2, r1
 800a77c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f812 	bl	800a7a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b089      	sub	sp, #36	; 0x24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a7b0:	4a2f      	ldr	r2, [pc, #188]	; (800a870 <UARTEx_SetNbDataToProcess+0xc8>)
 800a7b2:	f107 0314 	add.w	r3, r7, #20
 800a7b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a7be:	4a2d      	ldr	r2, [pc, #180]	; (800a874 <UARTEx_SetNbDataToProcess+0xcc>)
 800a7c0:	f107 030c 	add.w	r3, r7, #12
 800a7c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7c8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d108      	bne.n	800a7e6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7e4:	e03d      	b.n	800a862 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7e6:	2308      	movs	r3, #8
 800a7e8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7ea:	2308      	movs	r3, #8
 800a7ec:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	0e5b      	lsrs	r3, r3, #25
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0307 	and.w	r3, r3, #7
 800a7fc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	0f5b      	lsrs	r3, r3, #29
 800a806:	b2db      	uxtb	r3, r3
 800a808:	f003 0307 	and.w	r3, r3, #7
 800a80c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a80e:	7fbb      	ldrb	r3, [r7, #30]
 800a810:	7f3a      	ldrb	r2, [r7, #28]
 800a812:	f107 0120 	add.w	r1, r7, #32
 800a816:	440a      	add	r2, r1
 800a818:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a81c:	fb02 f303 	mul.w	r3, r2, r3
 800a820:	7f3a      	ldrb	r2, [r7, #28]
 800a822:	f107 0120 	add.w	r1, r7, #32
 800a826:	440a      	add	r2, r1
 800a828:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a82c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a830:	b29a      	uxth	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a838:	7ffb      	ldrb	r3, [r7, #31]
 800a83a:	7f7a      	ldrb	r2, [r7, #29]
 800a83c:	f107 0120 	add.w	r1, r7, #32
 800a840:	440a      	add	r2, r1
 800a842:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a846:	fb02 f303 	mul.w	r3, r2, r3
 800a84a:	7f7a      	ldrb	r2, [r7, #29]
 800a84c:	f107 0120 	add.w	r1, r7, #32
 800a850:	440a      	add	r2, r1
 800a852:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a856:	fb93 f3f2 	sdiv	r3, r3, r2
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a862:	bf00      	nop
 800a864:	3724      	adds	r7, #36	; 0x24
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	0800b130 	.word	0x0800b130
 800a874:	0800b138 	.word	0x0800b138

0800a878 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	ed93 7a06 	vldr	s14, [r3, #24]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	edd3 7a07 	vldr	s15, [r3, #28]
 800a88e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	edd3 7a08 	vldr	s15, [r3, #32]
 800a898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	edd3 7a06 	vldr	s15, [r3, #24]
 800a8a8:	eeb1 7a67 	vneg.f32	s14, s15
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	edd3 7a08 	vldr	s15, [r3, #32]
 800a8b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a8b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a1a      	ldr	r2, [r3, #32]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d006      	beq.n	800a8dc <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	330c      	adds	r3, #12
 800a8d2:	220c      	movs	r2, #12
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 fa34 	bl	800ad44 <memset>
  }

}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <arm_sin_cos_f32>:

void arm_sin_cos_f32(
                      float32_t theta,
                      float32_t * pSinVal,
                      float32_t * pCosVal)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b091      	sub	sp, #68	; 0x44
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	ed87 0a03 	vstr	s0, [r7, #12]
 800a8ee:	60b8      	str	r0, [r7, #8]
 800a8f0:	6079      	str	r1, [r7, #4]
    float32_t f1, f2, d1, d2;                        /* Two nearest output values */
    float32_t findex, Dn, Df, temp;

    /* input x is in degrees */
    /* Scale the input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
    in = theta * 0.00277777777778f;
 800a8f2:	edd7 7a03 	vldr	s15, [r7, #12]
 800a8f6:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800abc8 <arm_sin_cos_f32+0x2e4>
 800a8fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if (in < 0.0f)
 800a902:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a906:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90e:	d505      	bpl.n	800a91c <arm_sin_cos_f32+0x38>
    {
        in = -in;
 800a910:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a914:	eef1 7a67 	vneg.f32	s15, s15
 800a918:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    in = in - (int32_t)in;
 800a91c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a928:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a92c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a930:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculation of index of the table */
    findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800a934:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a938:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800abcc <arm_sin_cos_f32+0x2e8>
 800a93c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a940:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    indexS = ((uint16_t)findex) & 0x1ff;
 800a944:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a94c:	ee17 3a90 	vmov	r3, s15
 800a950:	b29b      	uxth	r3, r3
 800a952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a956:	86fb      	strh	r3, [r7, #54]	; 0x36
    indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
 800a958:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a95a:	3380      	adds	r3, #128	; 0x80
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a962:	86bb      	strh	r3, [r7, #52]	; 0x34

    /* fractional value calculation */
    fract = findex - (float32_t) indexS;
 800a964:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a972:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a976:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexC+0];
 800a97a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a97c:	4a94      	ldr	r2, [pc, #592]	; (800abd0 <arm_sin_cos_f32+0x2ec>)
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexC+1];
 800a986:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a988:	3301      	adds	r3, #1
 800a98a:	4a91      	ldr	r2, [pc, #580]	; (800abd0 <arm_sin_cos_f32+0x2ec>)
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = -sinTable_f32[indexS+0];
 800a994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a996:	4a8e      	ldr	r2, [pc, #568]	; (800abd0 <arm_sin_cos_f32+0x2ec>)
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	edd3 7a00 	vldr	s15, [r3]
 800a9a0:	eef1 7a67 	vneg.f32	s15, s15
 800a9a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    d2 = -sinTable_f32[indexS+1];
 800a9a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	4a88      	ldr	r2, [pc, #544]	; (800abd0 <arm_sin_cos_f32+0x2ec>)
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	edd3 7a00 	vldr	s15, [r3]
 800a9b6:	eef1 7a67 	vneg.f32	s15, s15
 800a9ba:	edc7 7a08 	vstr	s15, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 800a9be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a9c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a9ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9d2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a9d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a9da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9e2:	edc7 7a07 	vstr	s15, [r7, #28]

    Dn = 0.0122718463030f; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
 800a9e6:	4b7b      	ldr	r3, [pc, #492]	; (800abd4 <arm_sin_cos_f32+0x2f0>)
 800a9e8:	61bb      	str	r3, [r7, #24]
    Df = f2 - f1;          // delta between the values of the functions
 800a9ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a9ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a9f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9f6:	edc7 7a05 	vstr	s15, [r7, #20]

    temp = Dn *(d1 + d2) - 2 * Df;
 800a9fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a9fe:	edd7 7a08 	vldr	s15, [r7, #32]
 800aa02:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa06:	edd7 7a06 	vldr	s15, [r7, #24]
 800aa0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa0e:	edd7 7a05 	vldr	s15, [r7, #20]
 800aa12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aa16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa1a:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 800aa1e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800aa22:	edd7 7a07 	vldr	s15, [r7, #28]
 800aa26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa2a:	edd7 7a05 	vldr	s15, [r7, #20]
 800aa2e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800aa32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800aa36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800aa3a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800aa3e:	edd7 7a08 	vldr	s15, [r7, #32]
 800aa42:	ee36 6a27 	vadd.f32	s12, s12, s15
 800aa46:	edd7 7a06 	vldr	s15, [r7, #24]
 800aa4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800aa4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800aa52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa56:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + d1 * Dn;
 800aa5a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800aa5e:	edd7 7a07 	vldr	s15, [r7, #28]
 800aa62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa66:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800aa6a:	edd7 7a06 	vldr	s15, [r7, #24]
 800aa6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa76:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of cosine value */
    *pCosVal = fract * temp + f1;
 800aa7a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800aa7e:	edd7 7a07 	vldr	s15, [r7, #28]
 800aa82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa86:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aa8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	edc3 7a00 	vstr	s15, [r3]

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexS+0];
 800aa94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa96:	4a4e      	ldr	r2, [pc, #312]	; (800abd0 <arm_sin_cos_f32+0x2ec>)
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexS+1];
 800aaa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	4a4a      	ldr	r2, [pc, #296]	; (800abd0 <arm_sin_cos_f32+0x2ec>)
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = sinTable_f32[indexC+0];
 800aaae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aab0:	4a47      	ldr	r2, [pc, #284]	; (800abd0 <arm_sin_cos_f32+0x2ec>)
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
    d2 = sinTable_f32[indexC+1];
 800aaba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aabc:	3301      	adds	r3, #1
 800aabe:	4a44      	ldr	r2, [pc, #272]	; (800abd0 <arm_sin_cos_f32+0x2ec>)
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	623b      	str	r3, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 800aac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aacc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aad0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aad4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aadc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800aae0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaec:	edc7 7a07 	vstr	s15, [r7, #28]

    Df = f2 - f1; // delta between the values of the functions
 800aaf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aaf4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aaf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aafc:	edc7 7a05 	vstr	s15, [r7, #20]
    temp = Dn*(d1 + d2) - 2*Df;
 800ab00:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ab04:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab08:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab0c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ab10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab14:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ab1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab20:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + (3*Df - (d2 + 2*d1)*Dn);
 800ab24:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ab28:	edd7 7a07 	vldr	s15, [r7, #28]
 800ab2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab30:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab34:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800ab38:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ab3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ab40:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800ab44:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab48:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ab4c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ab50:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ab54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ab58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab5c:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + d1*Dn;
 800ab60:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ab64:	edd7 7a07 	vldr	s15, [r7, #28]
 800ab68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab6c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ab70:	edd7 7a06 	vldr	s15, [r7, #24]
 800ab74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab7c:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of sine value */
    *pSinVal = fract*temp + f1;
 800ab80:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ab84:	edd7 7a07 	vldr	s15, [r7, #28]
 800ab88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab8c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ab90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	edc3 7a00 	vstr	s15, [r3]

    if (theta < 0.0f)
 800ab9a:	edd7 7a03 	vldr	s15, [r7, #12]
 800ab9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba6:	d400      	bmi.n	800abaa <arm_sin_cos_f32+0x2c6>
    {
        *pSinVal = -*pSinVal;
    }
}
 800aba8:	e007      	b.n	800abba <arm_sin_cos_f32+0x2d6>
        *pSinVal = -*pSinVal;
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	edd3 7a00 	vldr	s15, [r3]
 800abb0:	eef1 7a67 	vneg.f32	s15, s15
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	edc3 7a00 	vstr	s15, [r3]
}
 800abba:	bf00      	nop
 800abbc:	3744      	adds	r7, #68	; 0x44
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	3b360b61 	.word	0x3b360b61
 800abcc:	44000000 	.word	0x44000000
 800abd0:	0800b158 	.word	0x0800b158
 800abd4:	3c490fdb 	.word	0x3c490fdb

0800abd8 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800abd8:	b480      	push	{r7}
 800abda:	b08b      	sub	sp, #44	; 0x2c
 800abdc:	af00      	add	r7, sp, #0
 800abde:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 800abe2:	edd7 7a01 	vldr	s15, [r7, #4]
 800abe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800abea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abee:	d50a      	bpl.n	800ac06 <arm_sin_f32+0x2e>
 800abf0:	edd7 7a01 	vldr	s15, [r7, #4]
 800abf4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800ace0 <arm_sin_f32+0x108>
 800abf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac00:	db01      	blt.n	800ac06 <arm_sin_f32+0x2e>
     return x;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	e062      	b.n	800accc <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800ac06:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac0a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ace4 <arm_sin_f32+0x10c>
 800ac0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac12:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800ac16:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac1e:	ee17 3a90 	vmov	r3, s15
 800ac22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 800ac24:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac30:	d502      	bpl.n	800ac38 <arm_sin_f32+0x60>
  {
    n--;
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	3b01      	subs	r3, #1
 800ac36:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac42:	ed97 7a08 	vldr	s14, [r7, #32]
 800ac46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac4a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800ac4e:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac52:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800ace8 <arm_sin_f32+0x110>
 800ac56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac5a:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 800ac5e:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac66:	ee17 3a90 	vmov	r3, s15
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac70:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800ac72:	8b7b      	ldrh	r3, [r7, #26]
 800ac74:	ee07 3a90 	vmov	s15, r3
 800ac78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7c:	ed97 7a07 	vldr	s14, [r7, #28]
 800ac80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac84:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800ac88:	8b7b      	ldrh	r3, [r7, #26]
 800ac8a:	4a18      	ldr	r2, [pc, #96]	; (800acec <arm_sin_f32+0x114>)
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800ac94:	8b7b      	ldrh	r3, [r7, #26]
 800ac96:	3301      	adds	r3, #1
 800ac98:	4a14      	ldr	r2, [pc, #80]	; (800acec <arm_sin_f32+0x114>)
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800aca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aca6:	edd7 7a05 	vldr	s15, [r7, #20]
 800acaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800acae:	edd7 7a04 	vldr	s15, [r7, #16]
 800acb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acb6:	edd7 6a05 	vldr	s13, [r7, #20]
 800acba:	edd7 7a03 	vldr	s15, [r7, #12]
 800acbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acc6:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	ee07 3a90 	vmov	s15, r3
}
 800acd0:	eeb0 0a67 	vmov.f32	s0, s15
 800acd4:	372c      	adds	r7, #44	; 0x2c
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	b44c02cd 	.word	0xb44c02cd
 800ace4:	3e22f983 	.word	0x3e22f983
 800ace8:	44000000 	.word	0x44000000
 800acec:	0800b158 	.word	0x0800b158

0800acf0 <__errno>:
 800acf0:	4b01      	ldr	r3, [pc, #4]	; (800acf8 <__errno+0x8>)
 800acf2:	6818      	ldr	r0, [r3, #0]
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	2000000c 	.word	0x2000000c

0800acfc <__libc_init_array>:
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	4e0d      	ldr	r6, [pc, #52]	; (800ad34 <__libc_init_array+0x38>)
 800ad00:	4c0d      	ldr	r4, [pc, #52]	; (800ad38 <__libc_init_array+0x3c>)
 800ad02:	1ba4      	subs	r4, r4, r6
 800ad04:	10a4      	asrs	r4, r4, #2
 800ad06:	2500      	movs	r5, #0
 800ad08:	42a5      	cmp	r5, r4
 800ad0a:	d109      	bne.n	800ad20 <__libc_init_array+0x24>
 800ad0c:	4e0b      	ldr	r6, [pc, #44]	; (800ad3c <__libc_init_array+0x40>)
 800ad0e:	4c0c      	ldr	r4, [pc, #48]	; (800ad40 <__libc_init_array+0x44>)
 800ad10:	f000 fa02 	bl	800b118 <_init>
 800ad14:	1ba4      	subs	r4, r4, r6
 800ad16:	10a4      	asrs	r4, r4, #2
 800ad18:	2500      	movs	r5, #0
 800ad1a:	42a5      	cmp	r5, r4
 800ad1c:	d105      	bne.n	800ad2a <__libc_init_array+0x2e>
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad24:	4798      	blx	r3
 800ad26:	3501      	adds	r5, #1
 800ad28:	e7ee      	b.n	800ad08 <__libc_init_array+0xc>
 800ad2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad2e:	4798      	blx	r3
 800ad30:	3501      	adds	r5, #1
 800ad32:	e7f2      	b.n	800ad1a <__libc_init_array+0x1e>
 800ad34:	0800b98c 	.word	0x0800b98c
 800ad38:	0800b98c 	.word	0x0800b98c
 800ad3c:	0800b98c 	.word	0x0800b98c
 800ad40:	0800b990 	.word	0x0800b990

0800ad44 <memset>:
 800ad44:	4402      	add	r2, r0
 800ad46:	4603      	mov	r3, r0
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d100      	bne.n	800ad4e <memset+0xa>
 800ad4c:	4770      	bx	lr
 800ad4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad52:	e7f9      	b.n	800ad48 <memset+0x4>

0800ad54 <atan2f>:
 800ad54:	f000 b850 	b.w	800adf8 <__ieee754_atan2f>

0800ad58 <sqrtf>:
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	ed2d 8b02 	vpush	{d8}
 800ad5e:	b08a      	sub	sp, #40	; 0x28
 800ad60:	eeb0 8a40 	vmov.f32	s16, s0
 800ad64:	f000 f8f6 	bl	800af54 <__ieee754_sqrtf>
 800ad68:	4b21      	ldr	r3, [pc, #132]	; (800adf0 <sqrtf+0x98>)
 800ad6a:	f993 4000 	ldrsb.w	r4, [r3]
 800ad6e:	1c63      	adds	r3, r4, #1
 800ad70:	d02c      	beq.n	800adcc <sqrtf+0x74>
 800ad72:	eeb4 8a48 	vcmp.f32	s16, s16
 800ad76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7a:	d627      	bvs.n	800adcc <sqrtf+0x74>
 800ad7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ad80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad84:	d522      	bpl.n	800adcc <sqrtf+0x74>
 800ad86:	2301      	movs	r3, #1
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <sqrtf+0x9c>)
 800ad8c:	9301      	str	r3, [sp, #4]
 800ad8e:	ee18 0a10 	vmov	r0, s16
 800ad92:	2300      	movs	r3, #0
 800ad94:	9308      	str	r3, [sp, #32]
 800ad96:	f7f5 fba3 	bl	80004e0 <__aeabi_f2d>
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ada0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ada4:	2300      	movs	r3, #0
 800ada6:	b9ac      	cbnz	r4, 800add4 <sqrtf+0x7c>
 800ada8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800adac:	4668      	mov	r0, sp
 800adae:	f000 f8d4 	bl	800af5a <matherr>
 800adb2:	b1b8      	cbz	r0, 800ade4 <sqrtf+0x8c>
 800adb4:	9b08      	ldr	r3, [sp, #32]
 800adb6:	b11b      	cbz	r3, 800adc0 <sqrtf+0x68>
 800adb8:	f7ff ff9a 	bl	800acf0 <__errno>
 800adbc:	9b08      	ldr	r3, [sp, #32]
 800adbe:	6003      	str	r3, [r0, #0]
 800adc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adc4:	f7f5 fe7e 	bl	8000ac4 <__aeabi_d2f>
 800adc8:	ee00 0a10 	vmov	s0, r0
 800adcc:	b00a      	add	sp, #40	; 0x28
 800adce:	ecbd 8b02 	vpop	{d8}
 800add2:	bd10      	pop	{r4, pc}
 800add4:	4610      	mov	r0, r2
 800add6:	4619      	mov	r1, r3
 800add8:	f7f5 fd04 	bl	80007e4 <__aeabi_ddiv>
 800addc:	2c02      	cmp	r4, #2
 800adde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ade2:	d1e3      	bne.n	800adac <sqrtf+0x54>
 800ade4:	f7ff ff84 	bl	800acf0 <__errno>
 800ade8:	2321      	movs	r3, #33	; 0x21
 800adea:	6003      	str	r3, [r0, #0]
 800adec:	e7e2      	b.n	800adb4 <sqrtf+0x5c>
 800adee:	bf00      	nop
 800adf0:	20000070 	.word	0x20000070
 800adf4:	0800b95c 	.word	0x0800b95c

0800adf8 <__ieee754_atan2f>:
 800adf8:	ee10 2a90 	vmov	r2, s1
 800adfc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ae00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ae04:	b510      	push	{r4, lr}
 800ae06:	eef0 7a40 	vmov.f32	s15, s0
 800ae0a:	dc06      	bgt.n	800ae1a <__ieee754_atan2f+0x22>
 800ae0c:	ee10 0a10 	vmov	r0, s0
 800ae10:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ae14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae18:	dd04      	ble.n	800ae24 <__ieee754_atan2f+0x2c>
 800ae1a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ae1e:	eeb0 0a67 	vmov.f32	s0, s15
 800ae22:	bd10      	pop	{r4, pc}
 800ae24:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ae28:	d103      	bne.n	800ae32 <__ieee754_atan2f+0x3a>
 800ae2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae2e:	f000 b897 	b.w	800af60 <atanf>
 800ae32:	1794      	asrs	r4, r2, #30
 800ae34:	f004 0402 	and.w	r4, r4, #2
 800ae38:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ae3c:	b943      	cbnz	r3, 800ae50 <__ieee754_atan2f+0x58>
 800ae3e:	2c02      	cmp	r4, #2
 800ae40:	d06e      	beq.n	800af20 <__ieee754_atan2f+0x128>
 800ae42:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800af28 <__ieee754_atan2f+0x130>
 800ae46:	2c03      	cmp	r4, #3
 800ae48:	bf08      	it	eq
 800ae4a:	eef0 7a47 	vmoveq.f32	s15, s14
 800ae4e:	e7e6      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800ae50:	b941      	cbnz	r1, 800ae64 <__ieee754_atan2f+0x6c>
 800ae52:	eddf 7a36 	vldr	s15, [pc, #216]	; 800af2c <__ieee754_atan2f+0x134>
 800ae56:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800af30 <__ieee754_atan2f+0x138>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	bfb8      	it	lt
 800ae5e:	eef0 7a47 	vmovlt.f32	s15, s14
 800ae62:	e7dc      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800ae64:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ae68:	d122      	bne.n	800aeb0 <__ieee754_atan2f+0xb8>
 800ae6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae6e:	d112      	bne.n	800ae96 <__ieee754_atan2f+0x9e>
 800ae70:	2c02      	cmp	r4, #2
 800ae72:	d00a      	beq.n	800ae8a <__ieee754_atan2f+0x92>
 800ae74:	2c03      	cmp	r4, #3
 800ae76:	d00b      	beq.n	800ae90 <__ieee754_atan2f+0x98>
 800ae78:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800af34 <__ieee754_atan2f+0x13c>
 800ae7c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800af38 <__ieee754_atan2f+0x140>
 800ae80:	2c01      	cmp	r4, #1
 800ae82:	bf18      	it	ne
 800ae84:	eef0 7a47 	vmovne.f32	s15, s14
 800ae88:	e7c9      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800ae8a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800af3c <__ieee754_atan2f+0x144>
 800ae8e:	e7c6      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800ae90:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800af40 <__ieee754_atan2f+0x148>
 800ae94:	e7c3      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800ae96:	2c02      	cmp	r4, #2
 800ae98:	d042      	beq.n	800af20 <__ieee754_atan2f+0x128>
 800ae9a:	2c03      	cmp	r4, #3
 800ae9c:	d005      	beq.n	800aeaa <__ieee754_atan2f+0xb2>
 800ae9e:	2c01      	cmp	r4, #1
 800aea0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800af44 <__ieee754_atan2f+0x14c>
 800aea4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800af48 <__ieee754_atan2f+0x150>
 800aea8:	e7eb      	b.n	800ae82 <__ieee754_atan2f+0x8a>
 800aeaa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800af28 <__ieee754_atan2f+0x130>
 800aeae:	e7b6      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800aeb0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aeb4:	d0cd      	beq.n	800ae52 <__ieee754_atan2f+0x5a>
 800aeb6:	1a5b      	subs	r3, r3, r1
 800aeb8:	15db      	asrs	r3, r3, #23
 800aeba:	2b3c      	cmp	r3, #60	; 0x3c
 800aebc:	dc1a      	bgt.n	800aef4 <__ieee754_atan2f+0xfc>
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	da01      	bge.n	800aec6 <__ieee754_atan2f+0xce>
 800aec2:	333c      	adds	r3, #60	; 0x3c
 800aec4:	db19      	blt.n	800aefa <__ieee754_atan2f+0x102>
 800aec6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800aeca:	f000 f91d 	bl	800b108 <fabsf>
 800aece:	f000 f847 	bl	800af60 <atanf>
 800aed2:	eef0 7a40 	vmov.f32	s15, s0
 800aed6:	2c01      	cmp	r4, #1
 800aed8:	d012      	beq.n	800af00 <__ieee754_atan2f+0x108>
 800aeda:	2c02      	cmp	r4, #2
 800aedc:	d017      	beq.n	800af0e <__ieee754_atan2f+0x116>
 800aede:	2c00      	cmp	r4, #0
 800aee0:	d09d      	beq.n	800ae1e <__ieee754_atan2f+0x26>
 800aee2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800af4c <__ieee754_atan2f+0x154>
 800aee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aeea:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800af50 <__ieee754_atan2f+0x158>
 800aeee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aef2:	e794      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800aef4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800af2c <__ieee754_atan2f+0x134>
 800aef8:	e7ed      	b.n	800aed6 <__ieee754_atan2f+0xde>
 800aefa:	eddf 7a13 	vldr	s15, [pc, #76]	; 800af48 <__ieee754_atan2f+0x150>
 800aefe:	e7ea      	b.n	800aed6 <__ieee754_atan2f+0xde>
 800af00:	ee17 3a90 	vmov	r3, s15
 800af04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af08:	ee07 3a90 	vmov	s15, r3
 800af0c:	e787      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800af0e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800af4c <__ieee754_atan2f+0x154>
 800af12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af16:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800af50 <__ieee754_atan2f+0x158>
 800af1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af1e:	e77e      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800af20:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800af50 <__ieee754_atan2f+0x158>
 800af24:	e77b      	b.n	800ae1e <__ieee754_atan2f+0x26>
 800af26:	bf00      	nop
 800af28:	c0490fdb 	.word	0xc0490fdb
 800af2c:	3fc90fdb 	.word	0x3fc90fdb
 800af30:	bfc90fdb 	.word	0xbfc90fdb
 800af34:	bf490fdb 	.word	0xbf490fdb
 800af38:	3f490fdb 	.word	0x3f490fdb
 800af3c:	4016cbe4 	.word	0x4016cbe4
 800af40:	c016cbe4 	.word	0xc016cbe4
 800af44:	80000000 	.word	0x80000000
 800af48:	00000000 	.word	0x00000000
 800af4c:	33bbbd2e 	.word	0x33bbbd2e
 800af50:	40490fdb 	.word	0x40490fdb

0800af54 <__ieee754_sqrtf>:
 800af54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af58:	4770      	bx	lr

0800af5a <matherr>:
 800af5a:	2000      	movs	r0, #0
 800af5c:	4770      	bx	lr
	...

0800af60 <atanf>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	ee10 5a10 	vmov	r5, s0
 800af66:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800af6a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800af6e:	eef0 7a40 	vmov.f32	s15, s0
 800af72:	db10      	blt.n	800af96 <atanf+0x36>
 800af74:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800af78:	dd04      	ble.n	800af84 <atanf+0x24>
 800af7a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800af7e:	eeb0 0a67 	vmov.f32	s0, s15
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b0bc <atanf+0x15c>
 800af88:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b0c0 <atanf+0x160>
 800af8c:	2d00      	cmp	r5, #0
 800af8e:	bfd8      	it	le
 800af90:	eef0 7a47 	vmovle.f32	s15, s14
 800af94:	e7f3      	b.n	800af7e <atanf+0x1e>
 800af96:	4b4b      	ldr	r3, [pc, #300]	; (800b0c4 <atanf+0x164>)
 800af98:	429c      	cmp	r4, r3
 800af9a:	dc10      	bgt.n	800afbe <atanf+0x5e>
 800af9c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800afa0:	da0a      	bge.n	800afb8 <atanf+0x58>
 800afa2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b0c8 <atanf+0x168>
 800afa6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800afaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800afb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb6:	dce2      	bgt.n	800af7e <atanf+0x1e>
 800afb8:	f04f 33ff 	mov.w	r3, #4294967295
 800afbc:	e013      	b.n	800afe6 <atanf+0x86>
 800afbe:	f000 f8a3 	bl	800b108 <fabsf>
 800afc2:	4b42      	ldr	r3, [pc, #264]	; (800b0cc <atanf+0x16c>)
 800afc4:	429c      	cmp	r4, r3
 800afc6:	dc4f      	bgt.n	800b068 <atanf+0x108>
 800afc8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800afcc:	429c      	cmp	r4, r3
 800afce:	dc41      	bgt.n	800b054 <atanf+0xf4>
 800afd0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800afd4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800afd8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800afdc:	2300      	movs	r3, #0
 800afde:	ee30 0a27 	vadd.f32	s0, s0, s15
 800afe2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800afe6:	1c5a      	adds	r2, r3, #1
 800afe8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800afec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b0d0 <atanf+0x170>
 800aff0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b0d4 <atanf+0x174>
 800aff4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b0d8 <atanf+0x178>
 800aff8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800affc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b000:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b0dc <atanf+0x17c>
 800b004:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b008:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b0e0 <atanf+0x180>
 800b00c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b010:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b0e4 <atanf+0x184>
 800b014:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b018:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b0e8 <atanf+0x188>
 800b01c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b020:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b0ec <atanf+0x18c>
 800b024:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b028:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b0f0 <atanf+0x190>
 800b02c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b030:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b0f4 <atanf+0x194>
 800b034:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b038:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b0f8 <atanf+0x198>
 800b03c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b040:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b044:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b04c:	d121      	bne.n	800b092 <atanf+0x132>
 800b04e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b052:	e794      	b.n	800af7e <atanf+0x1e>
 800b054:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b058:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b05c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b060:	2301      	movs	r3, #1
 800b062:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b066:	e7be      	b.n	800afe6 <atanf+0x86>
 800b068:	4b24      	ldr	r3, [pc, #144]	; (800b0fc <atanf+0x19c>)
 800b06a:	429c      	cmp	r4, r3
 800b06c:	dc0b      	bgt.n	800b086 <atanf+0x126>
 800b06e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b076:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b07a:	2302      	movs	r3, #2
 800b07c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b084:	e7af      	b.n	800afe6 <atanf+0x86>
 800b086:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b08a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b08e:	2303      	movs	r3, #3
 800b090:	e7a9      	b.n	800afe6 <atanf+0x86>
 800b092:	4a1b      	ldr	r2, [pc, #108]	; (800b100 <atanf+0x1a0>)
 800b094:	491b      	ldr	r1, [pc, #108]	; (800b104 <atanf+0x1a4>)
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	441a      	add	r2, r3
 800b09a:	440b      	add	r3, r1
 800b09c:	edd3 6a00 	vldr	s13, [r3]
 800b0a0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0aa:	ed92 7a00 	vldr	s14, [r2]
 800b0ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0b2:	bfb8      	it	lt
 800b0b4:	eef1 7a67 	vneglt.f32	s15, s15
 800b0b8:	e761      	b.n	800af7e <atanf+0x1e>
 800b0ba:	bf00      	nop
 800b0bc:	bfc90fdb 	.word	0xbfc90fdb
 800b0c0:	3fc90fdb 	.word	0x3fc90fdb
 800b0c4:	3edfffff 	.word	0x3edfffff
 800b0c8:	7149f2ca 	.word	0x7149f2ca
 800b0cc:	3f97ffff 	.word	0x3f97ffff
 800b0d0:	3c8569d7 	.word	0x3c8569d7
 800b0d4:	3d4bda59 	.word	0x3d4bda59
 800b0d8:	bd6ef16b 	.word	0xbd6ef16b
 800b0dc:	3d886b35 	.word	0x3d886b35
 800b0e0:	3dba2e6e 	.word	0x3dba2e6e
 800b0e4:	3e124925 	.word	0x3e124925
 800b0e8:	3eaaaaab 	.word	0x3eaaaaab
 800b0ec:	bd15a221 	.word	0xbd15a221
 800b0f0:	bd9d8795 	.word	0xbd9d8795
 800b0f4:	bde38e38 	.word	0xbde38e38
 800b0f8:	be4ccccd 	.word	0xbe4ccccd
 800b0fc:	401bffff 	.word	0x401bffff
 800b100:	0800b964 	.word	0x0800b964
 800b104:	0800b974 	.word	0x0800b974

0800b108 <fabsf>:
 800b108:	ee10 3a10 	vmov	r3, s0
 800b10c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b110:	ee00 3a10 	vmov	s0, r3
 800b114:	4770      	bx	lr
	...

0800b118 <_init>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr

0800b124 <_fini>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr
