
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008454  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008654  08008654  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008654  08008654  00018654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800865c  0800865c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800865c  0800865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  2000000c  08008670  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08008670  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192c6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb5  00000000  00000000  00039302  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0003c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  0003d760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021941  00000000  00000000  0003eb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012da9  00000000  00000000  000604c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de009  00000000  00000000  0007326a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151273  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bac  00000000  00000000  001512f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008614 	.word	0x08008614

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008614 	.word	0x08008614

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b092      	sub	sp, #72	; 0x48
 800051c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800051e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	223c      	movs	r2, #60	; 0x3c
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f008 f867 	bl	8008604 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800053c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800053e:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000540:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000544:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000546:	4b3b      	ldr	r3, [pc, #236]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054c:	4b39      	ldr	r3, [pc, #228]	; (8000634 <MX_ADC1_Init+0x11c>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000558:	4b36      	ldr	r3, [pc, #216]	; (8000634 <MX_ADC1_Init+0x11c>)
 800055a:	2201      	movs	r2, #1
 800055c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b35      	ldr	r3, [pc, #212]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000560:	2204      	movs	r2, #4
 8000562:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000566:	2200      	movs	r2, #0
 8000568:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056a:	4b32      	ldr	r3, [pc, #200]	; (8000634 <MX_ADC1_Init+0x11c>)
 800056c:	2200      	movs	r2, #0
 800056e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000570:	4b30      	ldr	r3, [pc, #192]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000572:	2201      	movs	r2, #1
 8000574:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000586:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000588:	2200      	movs	r2, #0
 800058a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <MX_ADC1_Init+0x11c>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4827      	ldr	r0, [pc, #156]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000596:	f001 fa1f 	bl	80019d8 <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005a0:	f000 fbaa 	bl	8000cf8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ac:	4619      	mov	r1, r3
 80005ae:	4821      	ldr	r0, [pc, #132]	; (8000634 <MX_ADC1_Init+0x11c>)
 80005b0:	f002 fe14 	bl	80031dc <HAL_ADCEx_MultiModeConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005ba:	f000 fb9d 	bl	8000cf8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <MX_ADC1_Init+0x120>)
 80005c0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80005ca:	237f      	movs	r3, #127	; 0x7f
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80005ce:	2304      	movs	r3, #4
 80005d0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80005ec:	2384      	movs	r3, #132	; 0x84
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000600:	f002 f994 	bl	800292c <HAL_ADCEx_InjectedConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800060a:	f000 fb75 	bl	8000cf8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_ADC1_Init+0x124>)
 8000610:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000612:	f240 130f 	movw	r3, #271	; 0x10f
 8000616:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_ADC1_Init+0x11c>)
 800061e:	f002 f985 	bl	800292c <HAL_ADCEx_InjectedConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000628:	f000 fb66 	bl	8000cf8 <Error_Handler>
  }

}
 800062c:	bf00      	nop
 800062e:	3748      	adds	r7, #72	; 0x48
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000098 	.word	0x20000098
 8000638:	0c900008 	.word	0x0c900008
 800063c:	32601000 	.word	0x32601000

08000640 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	223c      	movs	r2, #60	; 0x3c
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f007 ffd9 	bl	8008604 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000652:	4b38      	ldr	r3, [pc, #224]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000654:	4a38      	ldr	r2, [pc, #224]	; (8000738 <MX_ADC2_Init+0xf8>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000658:	4b36      	ldr	r3, [pc, #216]	; (8000734 <MX_ADC2_Init+0xf4>)
 800065a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800065e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000660:	4b34      	ldr	r3, [pc, #208]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000666:	4b33      	ldr	r3, [pc, #204]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800066c:	4b31      	ldr	r3, [pc, #196]	; (8000734 <MX_ADC2_Init+0xf4>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000674:	2201      	movs	r2, #1
 8000676:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <MX_ADC2_Init+0xf4>)
 800067a:	2204      	movs	r2, #4
 800067c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000680:	2200      	movs	r2, #0
 8000682:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000686:	2200      	movs	r2, #0
 8000688:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_ADC2_Init+0xf4>)
 800068c:	2201      	movs	r2, #1
 800068e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <MX_ADC2_Init+0xf4>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_ADC2_Init+0xf4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <MX_ADC2_Init+0xf4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ae:	4821      	ldr	r0, [pc, #132]	; (8000734 <MX_ADC2_Init+0xf4>)
 80006b0:	f001 f992 	bl	80019d8 <HAL_ADC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80006ba:	f000 fb1d 	bl	8000cf8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC2_Init+0xfc>)
 80006c0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006c2:	2309      	movs	r3, #9
 80006c4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006ca:	237f      	movs	r3, #127	; 0x7f
 80006cc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80006ec:	2384      	movs	r3, #132	; 0x84
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000700:	f002 f914 	bl	800292c <HAL_ADCEx_InjectedConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800070a:	f000 faf5 	bl	8000cf8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_ADC2_Init+0x100>)
 8000710:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000712:	f240 130f 	movw	r3, #271	; 0x10f
 8000716:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_ADC2_Init+0xf4>)
 800071e:	f002 f905 	bl	800292c <HAL_ADCEx_InjectedConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 8000728:	f000 fae6 	bl	8000cf8 <Error_Handler>
  }

}
 800072c:	bf00      	nop
 800072e:	3740      	adds	r7, #64	; 0x40
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000002c 	.word	0x2000002c
 8000738:	50000100 	.word	0x50000100
 800073c:	0c900008 	.word	0x0c900008
 8000740:	cb8c0000 	.word	0xcb8c0000

08000744 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000764:	d14e      	bne.n	8000804 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000766:	4b47      	ldr	r3, [pc, #284]	; (8000884 <HAL_ADC_MspInit+0x140>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	4a45      	ldr	r2, [pc, #276]	; (8000884 <HAL_ADC_MspInit+0x140>)
 800076e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000770:	4b44      	ldr	r3, [pc, #272]	; (8000884 <HAL_ADC_MspInit+0x140>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d10b      	bne.n	8000790 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000778:	4b43      	ldr	r3, [pc, #268]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077c:	4a42      	ldr	r2, [pc, #264]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800077e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000784:	4b40      	ldr	r3, [pc, #256]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b3d      	ldr	r3, [pc, #244]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000794:	4a3c      	ldr	r2, [pc, #240]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800079e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a8:	4b37      	ldr	r3, [pc, #220]	; (8000888 <HAL_ADC_MspInit+0x144>)
 80007aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ac:	4a36      	ldr	r2, [pc, #216]	; (8000888 <HAL_ADC_MspInit+0x144>)
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b4:	4b34      	ldr	r3, [pc, #208]	; (8000888 <HAL_ADC_MspInit+0x144>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80007c0:	2305      	movs	r3, #5
 80007c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c4:	2303      	movs	r3, #3
 80007c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f002 ff17 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4827      	ldr	r0, [pc, #156]	; (800088c <HAL_ADC_MspInit+0x148>)
 80007ee:	f002 ff0b 	bl	8003608 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2102      	movs	r1, #2
 80007f6:	2012      	movs	r0, #18
 80007f8:	f002 fe6b 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007fc:	2012      	movs	r0, #18
 80007fe:	f002 fe82 	bl	8003506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000802:	e03a      	b.n	800087a <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <HAL_ADC_MspInit+0x14c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d135      	bne.n	800087a <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <HAL_ADC_MspInit+0x140>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <HAL_ADC_MspInit+0x140>)
 8000816:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_ADC_MspInit+0x140>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10b      	bne.n	8000838 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	4a18      	ldr	r2, [pc, #96]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800082a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800083a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000850:	2340      	movs	r3, #64	; 0x40
 8000852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000854:	2303      	movs	r3, #3
 8000856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f002 fecf 	bl	8003608 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2102      	movs	r1, #2
 800086e:	2012      	movs	r0, #18
 8000870:	f002 fe2f 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000874:	2012      	movs	r0, #18
 8000876:	f002 fe46 	bl	8003506 <HAL_NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3730      	adds	r7, #48	; 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000028 	.word	0x20000028
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400
 8000890:	50000100 	.word	0x50000100

08000894 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a26      	ldr	r2, [pc, #152]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <MX_GPIO_Init+0xcc>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_GPIO_Init+0xcc>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 800090a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800091c:	2301      	movs	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f002 fe6d 	bl	8003608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_GPIO_Init+0xd0>)
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_GPIO_Init+0xd4>)
 8000944:	f002 fe60 	bl	8003608 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2107      	movs	r1, #7
 800094c:	2028      	movs	r0, #40	; 0x28
 800094e:	f002 fdc0 	bl	80034d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000952:	2028      	movs	r0, #40	; 0x28
 8000954:	f002 fdd7 	bl	8003506 <HAL_NVIC_EnableIRQ>

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	10110000 	.word	0x10110000
 8000968:	48000800 	.word	0x48000800

0800096c <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 8000970:	217f      	movs	r1, #127	; 0x7f
 8000972:	4849      	ldr	r0, [pc, #292]	; (8000a98 <start_up+0x12c>)
 8000974:	f001 fe38 	bl	80025e8 <HAL_ADCEx_Calibration_Start>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d008      	beq.n	8000990 <start_up+0x24>
 800097e:	217f      	movs	r1, #127	; 0x7f
 8000980:	4846      	ldr	r0, [pc, #280]	; (8000a9c <start_up+0x130>)
 8000982:	f001 fe31 	bl	80025e8 <HAL_ADCEx_Calibration_Start>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <start_up+0x24>
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <start_up+0x26>
 8000990:	2300      	movs	r3, #0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d17e      	bne.n	8000a94 <start_up+0x128>
	   {
		//////// start ADC 1 2 ///////////////////////////////////
	    HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000996:	4840      	ldr	r0, [pc, #256]	; (8000a98 <start_up+0x12c>)
 8000998:	f001 fe88 	bl	80026ac <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 800099c:	483f      	ldr	r0, [pc, #252]	; (8000a9c <start_up+0x130>)
 800099e:	f001 fe85 	bl	80026ac <HAL_ADCEx_InjectedStart_IT>

	    //////// konfiguracja Timer 1  //////////////////////////
	    TIM1->ARR= TIM1_ARR;
 80009a2:	4b3f      	ldr	r3, [pc, #252]	; (8000aa0 <start_up+0x134>)
 80009a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
	    TIM1->PSC= TIM1_PSC;
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <start_up+0x134>)
 80009ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009b2:	2100      	movs	r1, #0
 80009b4:	483b      	ldr	r0, [pc, #236]	; (8000aa4 <start_up+0x138>)
 80009b6:	f004 f911 	bl	8004bdc <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80009ba:	2100      	movs	r1, #0
 80009bc:	4839      	ldr	r0, [pc, #228]	; (8000aa4 <start_up+0x138>)
 80009be:	f005 fae5 	bl	8005f8c <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009c2:	2104      	movs	r1, #4
 80009c4:	4837      	ldr	r0, [pc, #220]	; (8000aa4 <start_up+0x138>)
 80009c6:	f004 f909 	bl	8004bdc <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80009ca:	2104      	movs	r1, #4
 80009cc:	4835      	ldr	r0, [pc, #212]	; (8000aa4 <start_up+0x138>)
 80009ce:	f005 fadd 	bl	8005f8c <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009d2:	2108      	movs	r1, #8
 80009d4:	4833      	ldr	r0, [pc, #204]	; (8000aa4 <start_up+0x138>)
 80009d6:	f004 f901 	bl	8004bdc <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80009da:	2108      	movs	r1, #8
 80009dc:	4831      	ldr	r0, [pc, #196]	; (8000aa4 <start_up+0x138>)
 80009de:	f005 fad5 	bl	8005f8c <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80009e2:	210c      	movs	r1, #12
 80009e4:	482f      	ldr	r0, [pc, #188]	; (8000aa4 <start_up+0x138>)
 80009e6:	f004 f8f9 	bl	8004bdc <HAL_TIM_PWM_Start>

	    TIM1->CCR1=(TIM1->ARR/20);
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <start_up+0x134>)
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	4a2c      	ldr	r2, [pc, #176]	; (8000aa0 <start_up+0x134>)
 80009f0:	492d      	ldr	r1, [pc, #180]	; (8000aa8 <start_up+0x13c>)
 80009f2:	fba1 1303 	umull	r1, r3, r1, r3
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	6353      	str	r3, [r2, #52]	; 0x34
	    TIM1->CCR2=0;
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <start_up+0x134>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38
	    TIM1->CCR3=0;
 8000a00:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <start_up+0x134>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	63da      	str	r2, [r3, #60]	; 0x3c

	    HAL_Delay(1000);
 8000a06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0a:	f000 feab 	bl	8001764 <HAL_Delay>

	    TIM1->CCR1=0;
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <start_up+0x134>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
	    TIM1->CCR2=0;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <start_up+0x134>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	639a      	str	r2, [r3, #56]	; 0x38
	    TIM1->CCR3=0;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <start_up+0x134>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	63da      	str	r2, [r3, #60]	; 0x3c

	    //////// konfiguracja Timer 4 - encoder ///////////////////
	     TIM4->ARR= TIM4_ARR;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <start_up+0x140>)
 8000a22:	f240 1267 	movw	r2, #359	; 0x167
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
	     TIM4->PSC= TIM4_PSC;
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <start_up+0x140>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
	     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	481f      	ldr	r0, [pc, #124]	; (8000ab0 <start_up+0x144>)
 8000a32:	f004 fa4b 	bl	8004ecc <HAL_TIM_Encoder_Start>
	     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a36:	2104      	movs	r1, #4
 8000a38:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <start_up+0x144>)
 8000a3a:	f004 fa47 	bl	8004ecc <HAL_TIM_Encoder_Start>

	     ////////  UASRT 2 /////////////////////////////////////////
	     HAL_UART_Receive_IT(&huart2, &recive, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	491c      	ldr	r1, [pc, #112]	; (8000ab4 <start_up+0x148>)
 8000a42:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <start_up+0x14c>)
 8000a44:	f005 fd00 	bl	8006448 <HAL_UART_Receive_IT>


	     /////////// inicjalizacja pid_d ////////////////
	      set_d=0;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <start_up+0x150>)
 8000a4a:	f04f 0200 	mov.w	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
	      pid_d.Kp=1;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <start_up+0x154>)
 8000a52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a56:	619a      	str	r2, [r3, #24]
	      pid_d.Ki=100;
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <start_up+0x154>)
 8000a5a:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <start_up+0x158>)
 8000a5c:	61da      	str	r2, [r3, #28]
	      pid_d.Kd=0;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <start_up+0x154>)
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
	      arm_pid_init_f32(&pid_d, 1);
 8000a66:	2101      	movs	r1, #1
 8000a68:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <start_up+0x154>)
 8000a6a:	f007 fd71 	bl	8008550 <arm_pid_init_f32>

	     /////////// inicjalizacja pid_q ////////////////
	      set_q=1;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <start_up+0x15c>)
 8000a70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a74:	601a      	str	r2, [r3, #0]
	      pid_q.Kp=100;
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <start_up+0x160>)
 8000a78:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <start_up+0x158>)
 8000a7a:	619a      	str	r2, [r3, #24]
	      pid_q.Ki=1;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <start_up+0x160>)
 8000a7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a82:	61da      	str	r2, [r3, #28]
	      pid_q.Kd=0;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <start_up+0x160>)
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
	      arm_pid_init_f32(&pid_q, 1);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	480f      	ldr	r0, [pc, #60]	; (8000acc <start_up+0x160>)
 8000a90:	f007 fd5e 	bl	8008550 <arm_pid_init_f32>


	   }

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000098 	.word	0x20000098
 8000a9c:	2000002c 	.word	0x2000002c
 8000aa0:	40012c00 	.word	0x40012c00
 8000aa4:	200002f4 	.word	0x200002f4
 8000aa8:	cccccccd 	.word	0xcccccccd
 8000aac:	40000800 	.word	0x40000800
 8000ab0:	200002a8 	.word	0x200002a8
 8000ab4:	200001c0 	.word	0x200001c0
 8000ab8:	20000340 	.word	0x20000340
 8000abc:	20000120 	.word	0x20000120
 8000ac0:	20000124 	.word	0x20000124
 8000ac4:	42c80000 	.word	0x42c80000
 8000ac8:	200001e8 	.word	0x200001e8
 8000acc:	20000198 	.word	0x20000198

08000ad0 <HAL_ADCEx_InjectedConvCpltCallback>:
	else{}
}


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]


	z++;
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a2b      	ldr	r2, [pc, #172]	; (8000b8c <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 8000ae0:	6013      	str	r3, [r2, #0]
	adc_measure[0]= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000ae2:	2109      	movs	r1, #9
 8000ae4:	482a      	ldr	r0, [pc, #168]	; (8000b90 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000ae6:	f001 fec7 	bl	8002878 <HAL_ADCEx_InjectedGetValue>
 8000aea:	4602      	mov	r2, r0
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8000aee:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8000af0:	bf00      	nop
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	f003 0320 	and.w	r3, r3, #32
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1f5      	bne.n	8000af2 <HAL_ADCEx_InjectedConvCpltCallback+0x22>
    adc_measure[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8000b06:	f240 110f 	movw	r1, #271	; 0x10f
 8000b0a:	4821      	ldr	r0, [pc, #132]	; (8000b90 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000b0c:	f001 feb4 	bl	8002878 <HAL_ADCEx_InjectedGetValue>
 8000b10:	4602      	mov	r2, r0
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8000b14:	605a      	str	r2, [r3, #4]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8000b16:	bf00      	nop
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	f003 0320 	and.w	r3, r3, #32
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1f5      	bne.n	8000b18 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
	adc_measure[2] =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8000b2c:	2109      	movs	r1, #9
 8000b2e:	481a      	ldr	r0, [pc, #104]	; (8000b98 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8000b30:	f001 fea2 	bl	8002878 <HAL_ADCEx_InjectedGetValue>
 8000b34:	4602      	mov	r2, r0
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8000b38:	609a      	str	r2, [r3, #8]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8000b3a:	bf00      	nop
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	f003 0320 	and.w	r3, r3, #32
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1f5      	bne.n	8000b3c <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
	adc_measure[3] =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 8000b50:	f240 110f 	movw	r1, #271	; 0x10f
 8000b54:	4810      	ldr	r0, [pc, #64]	; (8000b98 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8000b56:	f001 fe8f 	bl	8002878 <HAL_ADCEx_InjectedGetValue>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8000b5e:	60da      	str	r2, [r3, #12]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8000b60:	bf00      	nop
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f5      	bne.n	8000b62 <HAL_ADCEx_InjectedConvCpltCallback+0x92>

	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000b78:	f001 fd98 	bl	80026ac <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8000b7e:	f001 fd95 	bl	80026ac <HAL_ADCEx_InjectedStart_IT>

}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000017c 	.word	0x2000017c
 8000b90:	20000098 	.word	0x20000098
 8000b94:	20000158 	.word	0x20000158
 8000b98:	2000002c 	.word	0x2000002c

08000b9c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	{



	}
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]

		}



}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000


		}
	}

}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
	{
		//HAL_UART_Receive_IT(&huart2, &recive, 1);

	}
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfa:	f000 fd42 	bl	8001682 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfe:	f000 f815 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c02:	f7ff fe47 	bl	8000894 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c06:	f000 fa35 	bl	8001074 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000c0a:	f000 fb11 	bl	8001230 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000c0e:	f000 fc77 	bl	8001500 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c12:	f7ff fc81 	bl	8000518 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c16:	f7ff fd13 	bl	8000640 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8000c1a:	f000 f875 	bl	8000d08 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000c1e:	f000 f8a1 	bl	8000d64 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000c22:	f000 f8cd 	bl	8000dc0 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */



    start_up();
 8000c26:	f7ff fea1 	bl	800096c <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <main+0x34>

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0a4      	sub	sp, #144	; 0x90
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c36:	2238      	movs	r2, #56	; 0x38
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f007 fce2 	bl	8008604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2244      	movs	r2, #68	; 0x44
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f007 fcd4 	bl	8008604 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f002 ff3d 	bl	8003adc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c70:	2303      	movs	r3, #3
 8000c72:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000c78:	2350      	movs	r3, #80	; 0x50
 8000c7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 ffc5 	bl	8003c24 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ca0:	f000 f82a 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cbc:	2107      	movs	r1, #7
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 fac8 	bl	8004254 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000cca:	f000 f815 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000cce:	f248 0302 	movw	r3, #32770	; 0x8002
 8000cd2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cd8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fcd3 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cec:	f000 f804 	bl	8000cf8 <Error_Handler>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3790      	adds	r7, #144	; 0x90
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <MX_OPAMP1_Init+0x58>)
 8000d10:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d1a:	2240      	movs	r2, #64	; 0x40
 8000d1c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d3a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_OPAMP1_Init+0x54>)
 8000d48:	f002 fdf8 	bl	800393c <HAL_OPAMP_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8000d52:	f7ff ffd1 	bl	8000cf8 <Error_Handler>
  }

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000026c 	.word	0x2000026c
 8000d60:	40010300 	.word	0x40010300

08000d64 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <MX_OPAMP2_Init+0x58>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000d76:	2240      	movs	r2, #64	; 0x40
 8000d78:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000d96:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_OPAMP2_Init+0x54>)
 8000da4:	f002 fdca 	bl	800393c <HAL_OPAMP_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8000dae:	f7ff ffa3 	bl	8000cf8 <Error_Handler>
  }

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200001f4 	.word	0x200001f4
 8000dbc:	40010304 	.word	0x40010304

08000dc0 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000dc6:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <MX_OPAMP3_Init+0x58>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000dd2:	2240      	movs	r2, #64	; 0x40
 8000dd4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000df2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_OPAMP3_Init+0x54>)
 8000e00:	f002 fd9c 	bl	800393c <HAL_OPAMP_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8000e0a:	f7ff ff75 	bl	8000cf8 <Error_Handler>
  }

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000230 	.word	0x20000230
 8000e18:	40010308 	.word	0x40010308

08000e1c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <HAL_OPAMP_MspInit+0xd8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d119      	bne.n	8000e72 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <HAL_OPAMP_MspInit+0xdc>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a2d      	ldr	r2, [pc, #180]	; (8000ef8 <HAL_OPAMP_MspInit+0xdc>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_OPAMP_MspInit+0xdc>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e56:	230e      	movs	r3, #14
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f002 fbcc 	bl	8003608 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8000e70:	e03b      	b.n	8000eea <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a21      	ldr	r2, [pc, #132]	; (8000efc <HAL_OPAMP_MspInit+0xe0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d119      	bne.n	8000eb0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_OPAMP_MspInit+0xdc>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_OPAMP_MspInit+0xdc>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <HAL_OPAMP_MspInit+0xdc>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e94:	23e0      	movs	r3, #224	; 0xe0
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f002 fbad 	bl	8003608 <HAL_GPIO_Init>
}
 8000eae:	e01c      	b.n	8000eea <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_OPAMP_MspInit+0xe4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d117      	bne.n	8000eea <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_OPAMP_MspInit+0xdc>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_OPAMP_MspInit+0xdc>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_OPAMP_MspInit+0xdc>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <HAL_OPAMP_MspInit+0xe8>)
 8000ee6:	f002 fb8f 	bl	8003608 <HAL_GPIO_Init>
}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010300 	.word	0x40010300
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010304 	.word	0x40010304
 8000f00:	40010308 	.word	0x40010308
 8000f04:	48000400 	.word	0x48000400

08000f08 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6093      	str	r3, [r2, #8]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40007000 	.word	0x40007000

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_MspInit+0x44>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_MspInit+0x44>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6593      	str	r3, [r2, #88]	; 0x58
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000f5e:	f7ff ffd3 	bl	8000f08 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 fbb0 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <ADC1_2_IRQHandler+0x14>)
 8000fd2:	f000 fe89 	bl	8001ce8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <ADC1_2_IRQHandler+0x18>)
 8000fd8:	f000 fe86 	bl	8001ce8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000098 	.word	0x20000098
 8000fe4:	2000002c 	.word	0x2000002c

08000fe8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fee:	f003 fffa 	bl	8004fe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200002f4 	.word	0x200002f4

08000ffc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001002:	f003 fff0 	bl	8004fe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200002f4 	.word	0x200002f4

08001010 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM1_CC_IRQHandler+0x10>)
 8001016:	f003 ffe6 	bl	8004fe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200002f4 	.word	0x200002f4

08001024 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <USART2_IRQHandler+0x10>)
 800102a:	f005 fae5 	bl	80065f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000340 	.word	0x20000340

08001038 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800103c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001040:	f002 fc64 	bl	800390c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <SystemInit+0x28>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <SystemInit+0x28>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SystemInit+0x28>)
 800105e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001062:	609a      	str	r2, [r3, #8]
#endif
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b09c      	sub	sp, #112	; 0x70
 8001078:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001094:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	615a      	str	r2, [r3, #20]
 80010a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2234      	movs	r2, #52	; 0x34
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 faa8 	bl	8008604 <memset>

  htim1.Instance = TIM1;
 80010b4:	4b5c      	ldr	r3, [pc, #368]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80010b6:	4a5d      	ldr	r2, [pc, #372]	; (800122c <MX_TIM1_Init+0x1b8>)
 80010b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80010c2:	2220      	movs	r2, #32
 80010c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80010c6:	4b58      	ldr	r3, [pc, #352]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010cc:	4b56      	ldr	r3, [pc, #344]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010d2:	4b55      	ldr	r3, [pc, #340]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d8:	4b53      	ldr	r3, [pc, #332]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010de:	4852      	ldr	r0, [pc, #328]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80010e0:	f003 fcc4 	bl	8004a6c <HAL_TIM_Base_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010ea:	f7ff fe05 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f8:	4619      	mov	r1, r3
 80010fa:	484b      	ldr	r0, [pc, #300]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80010fc:	f004 fa02 	bl	8005504 <HAL_TIM_ConfigClockSource>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001106:	f7ff fdf7 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800110a:	4847      	ldr	r0, [pc, #284]	; (8001228 <MX_TIM1_Init+0x1b4>)
 800110c:	f003 fd05 	bl	8004b1a <HAL_TIM_PWM_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001116:	f7ff fdef 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800111a:	2370      	movs	r3, #112	; 0x70
 800111c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001126:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800112a:	4619      	mov	r1, r3
 800112c:	483e      	ldr	r0, [pc, #248]	; (8001228 <MX_TIM1_Init+0x1b4>)
 800112e:	f004 ffad 	bl	800608c <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001138:	f7ff fdde 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	2360      	movs	r3, #96	; 0x60
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001148:	2300      	movs	r3, #0
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001158:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	4831      	ldr	r0, [pc, #196]	; (8001228 <MX_TIM1_Init+0x1b4>)
 8001162:	f004 f8bf 	bl	80052e4 <HAL_TIM_PWM_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800116c:	f7ff fdc4 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001174:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001178:	2204      	movs	r2, #4
 800117a:	4619      	mov	r1, r3
 800117c:	482a      	ldr	r0, [pc, #168]	; (8001228 <MX_TIM1_Init+0x1b4>)
 800117e:	f004 f8b1 	bl	80052e4 <HAL_TIM_PWM_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001188:	f7ff fdb6 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001190:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001194:	2208      	movs	r2, #8
 8001196:	4619      	mov	r1, r3
 8001198:	4823      	ldr	r0, [pc, #140]	; (8001228 <MX_TIM1_Init+0x1b4>)
 800119a:	f004 f8a3 	bl	80052e4 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80011a4:	f7ff fda8 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ac:	2300      	movs	r3, #0
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b4:	220c      	movs	r2, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	481b      	ldr	r0, [pc, #108]	; (8001228 <MX_TIM1_Init+0x1b4>)
 80011ba:	f004 f893 	bl	80052e4 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 80011c4:	f7ff fd98 	bl	8000cf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80011ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 80011d8:	2344      	movs	r3, #68	; 0x44
 80011da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 80011f8:	2303      	movs	r3, #3
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4619      	mov	r1, r3
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <MX_TIM1_Init+0x1b4>)
 800120a:	f004 ffc1 	bl	8006190 <HAL_TIMEx_ConfigBreakDeadTime>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0x1a4>
  {
    Error_Handler();
 8001214:	f7ff fd70 	bl	8000cf8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <MX_TIM1_Init+0x1b4>)
 800121a:	f000 f8e9 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 800121e:	bf00      	nop
 8001220:	3770      	adds	r7, #112	; 0x70
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200002f4 	.word	0x200002f4
 800122c:	40012c00 	.word	0x40012c00

08001230 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	; 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f007 f9e0 	bl	8008604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_TIM4_Init+0xa0>)
 8001250:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <MX_TIM4_Init+0xa4>)
 8001252:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM4_Init+0xa0>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_TIM4_Init+0xa0>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM4_Init+0xa0>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM4_Init+0xa0>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_TIM4_Init+0xa0>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_TIM4_Init+0xa8>)
 8001274:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <MX_TIM4_Init+0xa0>)
 800129e:	f003 fd6f 	bl	8004d80 <HAL_TIM_Encoder_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80012a8:	f7ff fd26 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_TIM4_Init+0xa0>)
 80012ba:	f004 fee7 	bl	800608c <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80012c4:	f7ff fd18 	bl	8000cf8 <Error_Handler>
  }

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200002a8 	.word	0x200002a8
 80012d4:	40000800 	.word	0x40000800
 80012d8:	00010006 	.word	0x00010006

080012dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <HAL_TIM_Base_MspInit+0x64>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d123      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_TIM_Base_MspInit+0x68>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	4a14      	ldr	r2, [pc, #80]	; (8001344 <HAL_TIM_Base_MspInit+0x68>)
 80012f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012f8:	6613      	str	r3, [r2, #96]	; 0x60
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_TIM_Base_MspInit+0x68>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2101      	movs	r1, #1
 800130a:	2019      	movs	r0, #25
 800130c:	f002 f8e1 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001310:	2019      	movs	r0, #25
 8001312:	f002 f8f8 	bl	8003506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2105      	movs	r1, #5
 800131a:	201a      	movs	r0, #26
 800131c:	f002 f8d9 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001320:	201a      	movs	r0, #26
 8001322:	f002 f8f0 	bl	8003506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2103      	movs	r1, #3
 800132a:	201b      	movs	r0, #27
 800132c:	f002 f8d1 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001330:	201b      	movs	r0, #27
 8001332:	f002 f8e8 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40012c00 	.word	0x40012c00
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d138      	bne.n	80013dc <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_TIM_Encoder_MspInit+0xa0>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	4a1e      	ldr	r2, [pc, #120]	; (80013e8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6593      	str	r3, [r2, #88]	; 0x58
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 800139a:	23c0      	movs	r3, #192	; 0xc0
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a6:	2302      	movs	r3, #2
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013aa:	2302      	movs	r3, #2
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <HAL_TIM_Encoder_MspInit+0xa4>)
 80013b6:	f002 f927 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 80013ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2302      	movs	r3, #2
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013cc:	2302      	movs	r3, #2
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_TIM_Encoder_MspInit+0xa4>)
 80013d8:	f002 f916 	bl	8003608 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40000800 	.word	0x40000800
 80013e8:	40021000 	.word	0x40021000
 80013ec:	48000400 	.word	0x48000400

080013f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <HAL_TIM_MspPostInit+0x100>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d169      	bne.n	80014e6 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a37      	ldr	r2, [pc, #220]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a31      	ldr	r2, [pc, #196]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_TIM_MspPostInit+0x104>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800145a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001464:	2302      	movs	r3, #2
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800146c:	2304      	movs	r3, #4
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4820      	ldr	r0, [pc, #128]	; (80014f8 <HAL_TIM_MspPostInit+0x108>)
 8001478:	f002 f8c6 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001486:	2302      	movs	r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800148e:	2304      	movs	r3, #4
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4818      	ldr	r0, [pc, #96]	; (80014fc <HAL_TIM_MspPostInit+0x10c>)
 800149a:	f002 f8b5 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800149e:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014b0:	2306      	movs	r3, #6
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f002 f8a3 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80014d4:	230b      	movs	r3, #11
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f002 f891 	bl	8003608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40012c00 	.word	0x40012c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000400 	.word	0x48000400

08001500 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <MX_USART2_UART_Init+0x90>)
 8001506:	4a23      	ldr	r2, [pc, #140]	; (8001594 <MX_USART2_UART_Init+0x94>)
 8001508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_USART2_UART_Init+0x90>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_USART2_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_USART2_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_USART2_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_USART2_UART_Init+0x90>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_USART2_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_USART2_UART_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_USART2_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_USART2_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_USART2_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001548:	4811      	ldr	r0, [pc, #68]	; (8001590 <MX_USART2_UART_Init+0x90>)
 800154a:	f004 ff2c 	bl	80063a6 <HAL_UART_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001554:	f7ff fbd0 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001558:	2100      	movs	r1, #0
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_USART2_UART_Init+0x90>)
 800155c:	f006 ff13 	bl	8008386 <HAL_UARTEx_SetTxFifoThreshold>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001566:	f7ff fbc7 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156a:	2100      	movs	r1, #0
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <MX_USART2_UART_Init+0x90>)
 800156e:	f006 ff48 	bl	8008402 <HAL_UARTEx_SetRxFifoThreshold>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001578:	f7ff fbbe 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_USART2_UART_Init+0x90>)
 800157e:	f006 fec9 	bl	8008314 <HAL_UARTEx_DisableFifoMode>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001588:	f7ff fbb6 	bl	8000cf8 <Error_Handler>
  }

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000340 	.word	0x20000340
 8001594:	40004400 	.word	0x40004400

08001598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <HAL_UART_MspInit+0x8c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12f      	bne.n	800161a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_UART_MspInit+0x90>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <HAL_UART_MspInit+0x90>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_UART_MspInit+0x90>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_UART_MspInit+0x90>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <HAL_UART_MspInit+0x90>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_UART_MspInit+0x90>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015ea:	2318      	movs	r3, #24
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fa:	2307      	movs	r3, #7
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <HAL_UART_MspInit+0x94>)
 8001606:	f001 ffff 	bl	8003608 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 4, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2104      	movs	r1, #4
 800160e:	2026      	movs	r0, #38	; 0x26
 8001610:	f001 ff5f 	bl	80034d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001614:	2026      	movs	r0, #38	; 0x26
 8001616:	f001 ff76 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40004400 	.word	0x40004400
 8001628:	40021000 	.word	0x40021000
 800162c:	48000400 	.word	0x48000400

08001630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001632:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490e      	ldr	r1, [pc, #56]	; (8001670 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0b      	ldr	r4, [pc, #44]	; (800167c <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800165a:	f7ff fcf5 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165e:	f006 ffad 	bl	80085bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001662:	f7ff fac8 	bl	8000bf6 <main>

08001666 <LoopForever>:

LoopForever:
    b LoopForever
 8001666:	e7fe      	b.n	8001666 <LoopForever>
  ldr   r0, =_estack
 8001668:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001674:	08008664 	.word	0x08008664
  ldr r2, =_sbss
 8001678:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800167c:	200003d0 	.word	0x200003d0

08001680 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <COMP1_2_3_IRQHandler>

08001682 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168c:	2003      	movs	r0, #3
 800168e:	f001 ff15 	bl	80034bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001692:	2000      	movs	r0, #0
 8001694:	f000 f80e 	bl	80016b4 <HAL_InitTick>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	e001      	b.n	80016a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a4:	f7ff fc40 	bl	8000f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016a8:	79fb      	ldrb	r3, [r7, #7]

}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_InitTick+0x68>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d022      	beq.n	800170e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_InitTick+0x6c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_InitTick+0x68>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 ff20 	bl	8003522 <HAL_SYSTICK_Config>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10f      	bne.n	8001708 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	d809      	bhi.n	8001702 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ee:	2200      	movs	r2, #0
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	f04f 30ff 	mov.w	r0, #4294967295
 80016f6:	f001 feec 	bl	80034d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_InitTick+0x70>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e007      	b.n	8001712 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e004      	b.n	8001712 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e001      	b.n	8001712 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000008 	.word	0x20000008
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_IncTick+0x1c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x20>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4413      	add	r3, r2
 8001736:	4a03      	ldr	r2, [pc, #12]	; (8001744 <HAL_IncTick+0x1c>)
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	200003cc 	.word	0x200003cc
 8001748:	20000008 	.word	0x20000008

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200003cc 	.word	0x200003cc

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d004      	beq.n	8001788 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_Delay+0x40>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001788:	bf00      	nop
 800178a:	f7ff ffdf 	bl	800174c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	429a      	cmp	r2, r3
 8001798:	d8f7      	bhi.n	800178a <HAL_Delay+0x26>
  {
  }
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	609a      	str	r2, [r3, #8]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 031f 	and.w	r3, r3, #31
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001862:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6093      	str	r3, [r2, #8]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800188a:	d101      	bne.n	8001890 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018da:	d101      	bne.n	80018e0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001902:	f043 0201 	orr.w	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001926:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800192a:	f043 0202 	orr.w	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <LL_ADC_IsEnabled+0x18>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <LL_ADC_IsEnabled+0x1a>
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b02      	cmp	r3, #2
 8001976:	d101      	bne.n	800197c <LL_ADC_IsDisableOngoing+0x18>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <LL_ADC_IsDisableOngoing+0x1a>
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b04      	cmp	r3, #4
 800199c:	d101      	bne.n	80019a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d101      	bne.n	80019c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e16b      	b.n	8001cca <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7fe fe9f 	bl	8000744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff2c 	bl	8001876 <LL_ADC_IsDeepPowerDownEnabled>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff12 	bl	8001852 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff47 	bl	80018c6 <LL_ADC_IsInternalRegulatorEnabled>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d113      	bne.n	8001a66 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff2b 	bl	800189e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a48:	4ba2      	ldr	r3, [pc, #648]	; (8001cd4 <HAL_ADC_Init+0x2fc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	4aa2      	ldr	r2, [pc, #648]	; (8001cd8 <HAL_ADC_Init+0x300>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a58:	e002      	b.n	8001a60 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f9      	bne.n	8001a5a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff2b 	bl	80018c6 <LL_ADC_IsInternalRegulatorEnabled>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10d      	bne.n	8001a92 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	f043 0210 	orr.w	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff77 	bl	800198a <LL_ADC_REG_IsConversionOngoing>
 8001a9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 8106 	bne.w	8001cb8 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8102 	bne.w	8001cb8 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001abc:	f043 0202 	orr.w	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff38 	bl	800193e <LL_ADC_IsEnabled>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d111      	bne.n	8001af8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ad4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ad8:	f7ff ff31 	bl	800193e <LL_ADC_IsEnabled>
 8001adc:	4604      	mov	r4, r0
 8001ade:	487f      	ldr	r0, [pc, #508]	; (8001cdc <HAL_ADC_Init+0x304>)
 8001ae0:	f7ff ff2d 	bl	800193e <LL_ADC_IsEnabled>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4619      	mov	r1, r3
 8001af2:	487b      	ldr	r0, [pc, #492]	; (8001ce0 <HAL_ADC_Init+0x308>)
 8001af4:	f7ff fe58 	bl	80017a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7f5b      	ldrb	r3, [r3, #29]
 8001afc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d106      	bne.n	8001b34 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	045b      	lsls	r3, r3, #17
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_ADC_Init+0x30c>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff03 	bl	800198a <LL_ADC_REG_IsConversionOngoing>
 8001b84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff10 	bl	80019b0 <LL_ADC_INJ_IsConversionOngoing>
 8001b90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d16d      	bne.n	8001c74 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d16a      	bne.n	8001c74 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ba2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001baa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bba:	f023 0302 	bic.w	r3, r3, #2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d017      	beq.n	8001c00 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001be8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6911      	ldr	r1, [r2, #16]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001bfe:	e013      	b.n	8001c28 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d118      	bne.n	8001c64 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c4e:	4311      	orrs	r1, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c54:	430a      	orrs	r2, r1
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	e007      	b.n	8001c74 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d10c      	bne.n	8001c96 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f023 010f 	bic.w	r1, r3, #15
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
 8001c94:	e007      	b.n	8001ca6 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 020f 	bic.w	r2, r2, #15
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb6:	e007      	b.n	8001cc8 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	f043 0210 	orr.w	r2, r3, #16
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	053e2d63 	.word	0x053e2d63
 8001cdc:	50000100 	.word	0x50000100
 8001ce0:	50000300 	.word	0x50000300
 8001ce4:	fff04007 	.word	0xfff04007

08001ce8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d04:	4883      	ldr	r0, [pc, #524]	; (8001f14 <HAL_ADC_IRQHandler+0x22c>)
 8001d06:	f7ff fd88 	bl	800181a <LL_ADC_GetMultimode>
 8001d0a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d017      	beq.n	8001d46 <HAL_ADC_IRQHandler+0x5e>
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d012      	beq.n	8001d46 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fded 	bl	8002918 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2202      	movs	r2, #2
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <HAL_ADC_IRQHandler+0x72>
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10a      	bne.n	8001d70 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8085 	beq.w	8001e70 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d07f      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fd1e 	bl	80017ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d064      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a5e      	ldr	r2, [pc, #376]	; (8001f18 <HAL_ADC_IRQHandler+0x230>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d002      	beq.n	8001da8 <HAL_ADC_IRQHandler+0xc0>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e001      	b.n	8001dac <HAL_ADC_IRQHandler+0xc4>
 8001da8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d008      	beq.n	8001dc6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d002      	beq.n	8001dc6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b09      	cmp	r3, #9
 8001dc4:	d104      	bne.n	8001dd0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	e00d      	b.n	8001dec <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a50      	ldr	r2, [pc, #320]	; (8001f18 <HAL_ADC_IRQHandler+0x230>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d002      	beq.n	8001de0 <HAL_ADC_IRQHandler+0xf8>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	e001      	b.n	8001de4 <HAL_ADC_IRQHandler+0xfc>
 8001de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001de4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d135      	bne.n	8001e62 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d12e      	bne.n	8001e62 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fdbe 	bl	800198a <LL_ADC_REG_IsConversionOngoing>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d11a      	bne.n	8001e4a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 020c 	bic.w	r2, r2, #12
 8001e22:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d112      	bne.n	8001e62 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e48:	e00b      	b.n	8001e62 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f95a 	bl	800211c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_ADC_IRQHandler+0x19c>
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 809e 	beq.w	8001fcc <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8098 	beq.w	8001fcc <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fc9b 	bl	80017f4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ebe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fc82 	bl	80017ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <HAL_ADC_IRQHandler+0x230>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d002      	beq.n	8001edc <HAL_ADC_IRQHandler+0x1f4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	e001      	b.n	8001ee0 <HAL_ADC_IRQHandler+0x1f8>
 8001edc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d008      	beq.n	8001efa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d002      	beq.n	8001efa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b07      	cmp	r3, #7
 8001ef8:	d104      	bne.n	8001f04 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	623b      	str	r3, [r7, #32]
 8001f02:	e011      	b.n	8001f28 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a03      	ldr	r2, [pc, #12]	; (8001f18 <HAL_ADC_IRQHandler+0x230>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d006      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x234>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	e005      	b.n	8001f20 <HAL_ADC_IRQHandler+0x238>
 8001f14:	50000300 	.word	0x50000300
 8001f18:	50000100 	.word	0x50000100
 8001f1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f20:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d142      	bne.n	8001fbe <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d03f      	beq.n	8001fbe <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d13a      	bne.n	8001fbe <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	2b40      	cmp	r3, #64	; 0x40
 8001f54:	d133      	bne.n	8001fbe <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d12e      	bne.n	8001fbe <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fd23 	bl	80019b0 <LL_ADC_INJ_IsConversionOngoing>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d11a      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f7e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d112      	bne.n	8001fbe <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fa4:	e00b      	b.n	8001fbe <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	f043 0210 	orr.w	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fd86 	bl	8000ad0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2260      	movs	r2, #96	; 0x60
 8001fca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d011      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x312>
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00c      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f89f 	bl	8002130 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <HAL_ADC_IRQHandler+0x342>
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00d      	beq.n	800202a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002012:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fc68 	bl	80028f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002030:	2b00      	cmp	r3, #0
 8002032:	d012      	beq.n	800205a <HAL_ADC_IRQHandler+0x372>
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fc5a 	bl	8002904 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d036      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x3ea>
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d031      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002076:	2301      	movs	r3, #1
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	e014      	b.n	80020a6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002082:	4825      	ldr	r0, [pc, #148]	; (8002118 <HAL_ADC_IRQHandler+0x430>)
 8002084:	f7ff fbd7 	bl	8001836 <LL_ADC_GetMultiDMATransfer>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800208e:	2301      	movs	r3, #1
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	e008      	b.n	80020a6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80020a2:	2301      	movs	r3, #1
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d10e      	bne.n	80020ca <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020bc:	f043 0202 	orr.w	r2, r3, #2
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f83d 	bl	8002144 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2210      	movs	r2, #16
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d018      	beq.n	800210e <HAL_ADC_IRQHandler+0x426>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d013      	beq.n	800210e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	f043 0208 	orr.w	r2, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002106:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fbe7 	bl	80028dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	50000300 	.word	0x50000300

0800211c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fbea 	bl	800193e <LL_ADC_IsEnabled>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d146      	bne.n	80021fe <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <ADC_Enable+0xb0>)
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00d      	beq.n	800219a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e032      	b.n	8002200 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fba5 	bl	80018ee <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021a4:	f7ff fad2 	bl	800174c <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021aa:	e021      	b.n	80021f0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fbc4 	bl	800193e <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fb94 	bl	80018ee <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021c6:	f7ff fac1 	bl	800174c <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d90d      	bls.n	80021f0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	f043 0210 	orr.w	r2, r3, #16
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e007      	b.n	8002200 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d1d6      	bne.n	80021ac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	8000003f 	.word	0x8000003f

0800220c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fba3 	bl	8001964 <LL_ADC_IsDisableOngoing>
 800221e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fb8a 	bl	800193e <LL_ADC_IsEnabled>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d040      	beq.n	80022b2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d13d      	bne.n	80022b2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030d 	and.w	r3, r3, #13
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10c      	bne.n	800225e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fb64 	bl	8001916 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2203      	movs	r2, #3
 8002254:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002256:	f7ff fa79 	bl	800174c <HAL_GetTick>
 800225a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800225c:	e022      	b.n	80022a4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e01c      	b.n	80022b4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800227a:	f7ff fa67 	bl	800174c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d90d      	bls.n	80022a4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	f043 0210 	orr.w	r2, r3, #16
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e007      	b.n	80022b4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1e3      	bne.n	800227a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <LL_ADC_SetCommonPathInternalCh>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	609a      	str	r2, [r3, #8]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_GetCommonPathInternalCh>:
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <LL_ADC_SetOffset>:
{
 8002300:	b490      	push	{r4, r7}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3360      	adds	r3, #96	; 0x60
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800231c:	6822      	ldr	r2, [r4, #0]
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <LL_ADC_SetOffset+0x40>)
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	4313      	orrs	r3, r2
 800232e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002332:	6023      	str	r3, [r4, #0]
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bc90      	pop	{r4, r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	03fff000 	.word	0x03fff000

08002344 <LL_ADC_GetOffsetChannel>:
{
 8002344:	b490      	push	{r4, r7}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3360      	adds	r3, #96	; 0x60
 8002352:	461a      	mov	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bc90      	pop	{r4, r7}
 800236a:	4770      	bx	lr

0800236c <LL_ADC_SetOffsetState>:
{
 800236c:	b490      	push	{r4, r7}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3360      	adds	r3, #96	; 0x60
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4313      	orrs	r3, r2
 8002390:	6023      	str	r3, [r4, #0]
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bc90      	pop	{r4, r7}
 800239a:	4770      	bx	lr

0800239c <LL_ADC_SetOffsetSign>:
{
 800239c:	b490      	push	{r4, r7}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3360      	adds	r3, #96	; 0x60
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4313      	orrs	r3, r2
 80023c0:	6023      	str	r3, [r4, #0]
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc90      	pop	{r4, r7}
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_SetOffsetSaturation>:
{
 80023cc:	b490      	push	{r4, r7}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3360      	adds	r3, #96	; 0x60
 80023dc:	461a      	mov	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	6023      	str	r3, [r4, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc90      	pop	{r4, r7}
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	615a      	str	r2, [r3, #20]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_INJ_GetTrigAuto>:
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_SetChannelSamplingTime>:
{
 800243e:	b490      	push	{r4, r7}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3314      	adds	r3, #20
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	0e5b      	lsrs	r3, r3, #25
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	4413      	add	r3, r2
 800245c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800245e:	6822      	ldr	r2, [r4, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	0d1b      	lsrs	r3, r3, #20
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2107      	movs	r1, #7
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	401a      	ands	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	0d1b      	lsrs	r3, r3, #20
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	6023      	str	r3, [r4, #0]
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bc90      	pop	{r4, r7}
 800248c:	4770      	bx	lr
	...

08002490 <LL_ADC_SetChannelSingleDiff>:
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	43db      	mvns	r3, r3
 80024aa:	401a      	ands	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0318 	and.w	r3, r3, #24
 80024b2:	4908      	ldr	r1, [pc, #32]	; (80024d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024b4:	40d9      	lsrs	r1, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	400b      	ands	r3, r1
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	431a      	orrs	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	0007ffff 	.word	0x0007ffff

080024d8 <LL_ADC_GetMultimode>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 031f 	and.w	r3, r3, #31
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_IsEnabled>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <LL_ADC_IsEnabled+0x18>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <LL_ADC_IsEnabled+0x1a>
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_StartCalibration>:
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800252c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002536:	4313      	orrs	r3, r2
 8002538:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_IsCalibrationOnGoing>:
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800255c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002560:	d101      	bne.n	8002566 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_REG_IsConversionOngoing>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b04      	cmp	r3, #4
 8002586:	d101      	bne.n	800258c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_ADC_INJ_StartConversion>:
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025ae:	f043 0208 	orr.w	r2, r3, #8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	609a      	str	r2, [r3, #8]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_INJ_IsConversionOngoing>:
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d101      	bne.n	80025da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_ADCEx_Calibration_Start+0x1c>
 8002600:	2302      	movs	r3, #2
 8002602:	e04d      	b.n	80026a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fdfd 	bl	800220c <ADC_Disable>
 8002612:	4603      	mov	r3, r0
 8002614:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d136      	bne.n	800268a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002624:	f023 0302 	bic.w	r3, r3, #2
 8002628:	f043 0202 	orr.w	r2, r3, #2
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff6f 	bl	800251a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800263c:	e014      	b.n	8002668 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3301      	adds	r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d90d      	bls.n	8002668 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	f023 0312 	bic.w	r3, r3, #18
 8002654:	f043 0210 	orr.w	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e01b      	b.n	80026a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff6d 	bl	800254c <LL_ADC_IsCalibrationOnGoing>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e2      	bne.n	800263e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f023 0303 	bic.w	r3, r3, #3
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c
 8002688:	e005      	b.n	8002696 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	f043 0210 	orr.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	0004de01 	.word	0x0004de01

080026ac <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b4:	486e      	ldr	r0, [pc, #440]	; (8002870 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80026b6:	f7ff ff0f 	bl	80024d8 <LL_ADC_GetMultimode>
 80026ba:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff7e 	bl	80025c2 <LL_ADC_INJ_IsConversionOngoing>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
 80026ce:	e0ca      	b.n	8002866 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026da:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b2      	b.n	8002866 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_ADCEx_InjectedStart_IT+0x62>
 800270a:	2302      	movs	r3, #2
 800270c:	e0ab      	b.n	8002866 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fd1e 	bl	8002158 <ADC_Enable>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 809a 	bne.w	800285c <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002738:	f023 0208 	bic.w	r2, r3, #8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	661a      	str	r2, [r3, #96]	; 0x60
 8002740:	e002      	b.n	8002748 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a44      	ldr	r2, [pc, #272]	; (8002874 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d002      	beq.n	800276c <HAL_ADCEx_InjectedStart_IT+0xc0>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	e001      	b.n	8002770 <HAL_ADCEx_InjectedStart_IT+0xc4>
 800276c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	4293      	cmp	r3, r2
 8002776:	d002      	beq.n	800277e <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2260      	movs	r2, #96	; 0x60
 8002790:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b6:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d110      	bne.n	80027e2 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0220 	bic.w	r2, r2, #32
 80027ce:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027de:	605a      	str	r2, [r3, #4]
          break;
 80027e0:	e010      	b.n	8002804 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	605a      	str	r2, [r3, #4]
          break;
 8002802:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d002      	beq.n	8002814 <HAL_ADCEx_InjectedStart_IT+0x168>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	e001      	b.n	8002818 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8002814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	4293      	cmp	r3, r2
 800281e:	d008      	beq.n	8002832 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b06      	cmp	r3, #6
 800282a:	d002      	beq.n	8002832 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b07      	cmp	r3, #7
 8002830:	d10d      	bne.n	800284e <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fdf3 	bl	8002422 <LL_ADC_INJ_GetTrigAuto>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d110      	bne.n	8002864 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fea7 	bl	800259a <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800284c:	e00a      	b.n	8002864 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	65da      	str	r2, [r3, #92]	; 0x5c
 800285a:	e003      	b.n	8002864 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	50000300 	.word	0x50000300
 8002874:	50000100 	.word	0x50000100

08002878 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f240 2215 	movw	r2, #533	; 0x215
 8002888:	4293      	cmp	r3, r2
 800288a:	d00e      	beq.n	80028aa <HAL_ADCEx_InjectedGetValue+0x32>
 800288c:	f240 321b 	movw	r2, #795	; 0x31b
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_ADCEx_InjectedGetValue+0x26>
 8002894:	f240 120f 	movw	r2, #271	; 0x10f
 8002898:	4293      	cmp	r3, r2
 800289a:	d00c      	beq.n	80028b6 <HAL_ADCEx_InjectedGetValue+0x3e>
 800289c:	e011      	b.n	80028c2 <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a6:	60fb      	str	r3, [r7, #12]
      break;
 80028a8:	e011      	b.n	80028ce <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	60fb      	str	r3, [r7, #12]
      break;
 80028b4:	e00b      	b.n	80028ce <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	60fb      	str	r3, [r7, #12]
      break;
 80028c0:	e005      	b.n	80028ce <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ca:	60fb      	str	r3, [r7, #12]
      break;
 80028cc:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b0a8      	sub	sp, #160	; 0xa0
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800294c:	2b01      	cmp	r3, #1
 800294e:	d102      	bne.n	8002956 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002950:	2302      	movs	r3, #2
 8002952:	f000 bc39 	b.w	80031c8 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800296a:	2b01      	cmp	r3, #1
 800296c:	d130      	bne.n	80029d0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b09      	cmp	r3, #9
 8002974:	d179      	bne.n	8002a6a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	d010      	beq.n	80029a0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	025b      	lsls	r3, r3, #9
 8002986:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002992:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800299e:	e007      	b.n	80029b0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	025b      	lsls	r3, r3, #9
 80029a8:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80029ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b6:	4ba3      	ldr	r3, [pc, #652]	; (8002c44 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80029c2:	430b      	orrs	r3, r1
 80029c4:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80029cc:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80029ce:	e04c      	b.n	8002a6a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d11d      	bne.n	8002a14 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6a1a      	ldr	r2, [r3, #32]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80029fc:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a08:	e004      	b.n	8002a14 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	f003 021f 	and.w	r2, r3, #31
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a5a:	4b7a      	ldr	r3, [pc, #488]	; (8002c44 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	430b      	orrs	r3, r1
 8002a68:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fda7 	bl	80025c2 <LL_ADC_INJ_IsConversionOngoing>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d124      	bne.n	8002ac4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d112      	bne.n	8002aaa <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a94:	055a      	lsls	r2, r3, #21
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a9c:	051b      	lsls	r3, r3, #20
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	e00c      	b.n	8002ac4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002aba:	055a      	lsls	r2, r3, #21
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fd53 	bl	8002574 <LL_ADC_REG_IsConversionOngoing>
 8002ace:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fd73 	bl	80025c2 <LL_ADC_INJ_IsConversionOngoing>
 8002adc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 81d4 	bne.w	8002e92 <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 81cf 	bne.w	8002e92 <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d108      	bne.n	8002b20 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b1c:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b1e:	e01f      	b.n	8002b60 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b2e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b30:	e016      	b.n	8002b60 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d109      	bne.n	8002b50 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002b4e:	e007      	b.n	8002b60 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b5e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d110      	bne.n	8002b8c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0202 	orr.w	r2, r2, #2
 8002b88:	611a      	str	r2, [r3, #16]
 8002b8a:	e007      	b.n	8002b9c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0202 	bic.w	r2, r2, #2
 8002b9a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ba4:	d10f      	bne.n	8002bc6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7ff fc44 	bl	800243e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fc1c 	bl	80023fc <LL_ADC_SetSamplingTimeCommonConfig>
 8002bc4:	e00e      	b.n	8002be4 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f7ff fc33 	bl	800243e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fc0c 	bl	80023fc <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d025      	beq.n	8002c52 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6919      	ldr	r1, [r3, #16]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c16:	f7ff fb73 	bl	8002300 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6919      	ldr	r1, [r3, #16]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7ff fbb8 	bl	800239c <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002c3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c40:	e003      	b.n	8002c4a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8002c42:	bf00      	nop
 8002c44:	04104000 	.word	0x04104000
 8002c48:	2300      	movs	r3, #0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f7ff fbbe 	bl	80023cc <LL_ADC_SetOffsetSaturation>
 8002c50:	e11f      	b.n	8002e92 <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fb73 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fb68 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002c74:	4603      	mov	r3, r0
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	e014      	b.n	8002ca8 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fb5d 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	e00a      	b.n	8002cd6 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d106      	bne.n	8002ce8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fb42 	bl	800236c <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fb28 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fb1d 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	f003 021f 	and.w	r2, r3, #31
 8002d12:	e010      	b.n	8002d36 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fb12 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <HAL_ADCEx_InjectedConfigChannel+0x422>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	e00a      	b.n	8002d64 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8002d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d106      	bne.n	8002d76 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fafb 	bl	800236c <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fae1 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <HAL_ADCEx_InjectedConfigChannel+0x476>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2102      	movs	r1, #2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fad6 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	e010      	b.n	8002dc4 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2102      	movs	r1, #2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff facb 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	e00a      	b.n	8002df2 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d106      	bne.n	8002e04 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fab4 	bl	800236c <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2103      	movs	r1, #3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fa9a 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <HAL_ADCEx_InjectedConfigChannel+0x504>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2103      	movs	r1, #3
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fa8f 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002e26:	4603      	mov	r3, r0
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	f003 021f 	and.w	r2, r3, #31
 8002e2e:	e010      	b.n	8002e52 <HAL_ADCEx_InjectedConfigChannel+0x526>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2103      	movs	r1, #3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fa84 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8002e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_ADCEx_InjectedConfigChannel+0x53e>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	0e9b      	lsrs	r3, r3, #26
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	e00a      	b.n	8002e80 <HAL_ADCEx_InjectedConfigChannel+0x554>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d106      	bne.n	8002e92 <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fa6d 	bl	800236c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fb2c 	bl	80024f4 <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 810c 	bne.w	80030bc <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6819      	ldr	r1, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f7ff faed 	bl	8002490 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4aab      	ldr	r2, [pc, #684]	; (8003168 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	f040 80fd 	bne.w	80030bc <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10b      	bne.n	8002eea <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	0e9b      	lsrs	r3, r3, #26
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2b09      	cmp	r3, #9
 8002ee0:	bf94      	ite	ls
 8002ee2:	2301      	movls	r3, #1
 8002ee4:	2300      	movhi	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e012      	b.n	8002f10 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2b09      	cmp	r3, #9
 8002f08:	bf94      	ite	ls
 8002f0a:	2301      	movls	r3, #1
 8002f0c:	2300      	movhi	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d064      	beq.n	8002fde <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	3301      	adds	r3, #1
 8002f28:	069b      	lsls	r3, r3, #26
 8002f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2e:	e00e      	b.n	8002f4e <HAL_ADCEx_InjectedConfigChannel+0x622>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	069b      	lsls	r3, r3, #26
 8002f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_ADCEx_InjectedConfigChannel+0x642>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	e010      	b.n	8002f90 <HAL_ADCEx_InjectedConfigChannel+0x664>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	ea42 0103 	orr.w	r1, r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	051b      	lsls	r3, r3, #20
 8002fb4:	e011      	b.n	8002fda <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	f003 021f 	and.w	r2, r3, #31
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	051b      	lsls	r3, r3, #20
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	e069      	b.n	80030b2 <HAL_ADCEx_InjectedConfigChannel+0x786>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0e9b      	lsrs	r3, r3, #26
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	069b      	lsls	r3, r3, #26
 8002ff4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff8:	e00e      	b.n	8003018 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	623b      	str	r3, [r7, #32]
  return result;
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	3301      	adds	r3, #1
 8003012:	069b      	lsls	r3, r3, #26
 8003014:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	3301      	adds	r3, #1
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	2101      	movs	r1, #1
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	e010      	b.n	800305a <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	61bb      	str	r3, [r7, #24]
  return result;
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2101      	movs	r1, #1
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	ea42 0103 	orr.w	r1, r2, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	0e9b      	lsrs	r3, r3, #26
 8003070:	3301      	adds	r3, #1
 8003072:	f003 021f 	and.w	r2, r3, #31
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	3b1e      	subs	r3, #30
 800307e:	051b      	lsls	r3, r3, #20
 8003080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003084:	e014      	b.n	80030b0 <HAL_ADCEx_InjectedConfigChannel+0x784>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	613b      	str	r3, [r7, #16]
  return result;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f003 021f 	and.w	r2, r3, #31
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	3b1e      	subs	r3, #30
 80030aa:	051b      	lsls	r3, r3, #20
 80030ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030b0:	430b      	orrs	r3, r1
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	6892      	ldr	r2, [r2, #8]
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7ff f9c1 	bl	800243e <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_ADCEx_InjectedConfigChannel+0x840>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d079      	beq.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c8:	4829      	ldr	r0, [pc, #164]	; (8003170 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80030ca:	f7ff f90a 	bl	80022e2 <LL_ADC_GetCommonPathInternalCh>
 80030ce:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a27      	ldr	r2, [pc, #156]	; (8003174 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a25      	ldr	r2, [pc, #148]	; (8003178 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d126      	bne.n	8003134 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d120      	bne.n	8003134 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fa:	d15f      	bne.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003100:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003104:	4619      	mov	r1, r3
 8003106:	481a      	ldr	r0, [pc, #104]	; (8003170 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003108:	f7ff f8d8 	bl	80022bc <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_ADCEx_InjectedConfigChannel+0x850>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	099a      	lsrs	r2, r3, #6
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003124:	e002      	b.n	800312c <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3b01      	subs	r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f9      	bne.n	8003126 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003132:	e043      	b.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a12      	ldr	r2, [pc, #72]	; (8003184 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d126      	bne.n	800318c <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800313e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d120      	bne.n	800318c <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d033      	beq.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315c:	4619      	mov	r1, r3
 800315e:	4804      	ldr	r0, [pc, #16]	; (8003170 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003160:	f7ff f8ac 	bl	80022bc <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003164:	e02a      	b.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x890>
 8003166:	bf00      	nop
 8003168:	407f0000 	.word	0x407f0000
 800316c:	80080000 	.word	0x80080000
 8003170:	50000300 	.word	0x50000300
 8003174:	c3210000 	.word	0xc3210000
 8003178:	90c00010 	.word	0x90c00010
 800317c:	20000000 	.word	0x20000000
 8003180:	053e2d63 	.word	0x053e2d63
 8003184:	c7520000 	.word	0xc7520000
 8003188:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d112      	bne.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031b4:	4619      	mov	r1, r3
 80031b6:	4808      	ldr	r0, [pc, #32]	; (80031d8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 80031b8:	f7ff f880 	bl	80022bc <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	37a0      	adds	r7, #160	; 0xa0
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	cb840000 	.word	0xcb840000
 80031d4:	50000100 	.word	0x50000100
 80031d8:	50000300 	.word	0x50000300

080031dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b0a1      	sub	sp, #132	; 0x84
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e087      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800320a:	d102      	bne.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	e001      	b.n	8003216 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e06a      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff f99c 	bl	8002574 <LL_ADC_REG_IsConversionOngoing>
 800323c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f996 	bl	8002574 <LL_ADC_REG_IsConversionOngoing>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d14c      	bne.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800324e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003250:	2b00      	cmp	r3, #0
 8003252:	d149      	bne.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003254:	4b30      	ldr	r3, [pc, #192]	; (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003256:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d028      	beq.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003272:	035b      	lsls	r3, r3, #13
 8003274:	430b      	orrs	r3, r1
 8003276:	431a      	orrs	r2, r3
 8003278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800327c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003280:	f7ff f938 	bl	80024f4 <LL_ADC_IsEnabled>
 8003284:	4604      	mov	r4, r0
 8003286:	4823      	ldr	r0, [pc, #140]	; (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003288:	f7ff f934 	bl	80024f4 <LL_ADC_IsEnabled>
 800328c:	4603      	mov	r3, r0
 800328e:	4323      	orrs	r3, r4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d133      	bne.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800329c:	f023 030f 	bic.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	6811      	ldr	r1, [r2, #0]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	6892      	ldr	r2, [r2, #8]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	431a      	orrs	r2, r3
 80032ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b0:	e024      	b.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032be:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032c2:	f7ff f917 	bl	80024f4 <LL_ADC_IsEnabled>
 80032c6:	4604      	mov	r4, r0
 80032c8:	4812      	ldr	r0, [pc, #72]	; (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80032ca:	f7ff f913 	bl	80024f4 <LL_ADC_IsEnabled>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4323      	orrs	r3, r4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d112      	bne.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032de:	f023 030f 	bic.w	r3, r3, #15
 80032e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80032e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032e6:	e009      	b.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80032fa:	e000      	b.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003306:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800330a:	4618      	mov	r0, r3
 800330c:	3784      	adds	r7, #132	; 0x84
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	bf00      	nop
 8003314:	50000100 	.word	0x50000100
 8003318:	50000300 	.word	0x50000300

0800331c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <__NVIC_SetPriorityGrouping+0x44>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003338:	4013      	ands	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334e:	4a04      	ldr	r2, [pc, #16]	; (8003360 <__NVIC_SetPriorityGrouping+0x44>)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	60d3      	str	r3, [r2, #12]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <__NVIC_GetPriorityGrouping+0x18>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 0307 	and.w	r3, r3, #7
}
 8003372:	4618      	mov	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	2b00      	cmp	r3, #0
 8003390:	db0b      	blt.n	80033aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	f003 021f 	and.w	r2, r3, #31
 8003398:	4907      	ldr	r1, [pc, #28]	; (80033b8 <__NVIC_EnableIRQ+0x38>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2001      	movs	r0, #1
 80033a2:	fa00 f202 	lsl.w	r2, r0, r2
 80033a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000e100 	.word	0xe000e100

080033bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	db0a      	blt.n	80033e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	490c      	ldr	r1, [pc, #48]	; (8003408 <__NVIC_SetPriority+0x4c>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	0112      	lsls	r2, r2, #4
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	440b      	add	r3, r1
 80033e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e4:	e00a      	b.n	80033fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4908      	ldr	r1, [pc, #32]	; (800340c <__NVIC_SetPriority+0x50>)
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	3b04      	subs	r3, #4
 80033f4:	0112      	lsls	r2, r2, #4
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	440b      	add	r3, r1
 80033fa:	761a      	strb	r2, [r3, #24]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000e100 	.word	0xe000e100
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f1c3 0307 	rsb	r3, r3, #7
 800342a:	2b04      	cmp	r3, #4
 800342c:	bf28      	it	cs
 800342e:	2304      	movcs	r3, #4
 8003430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3304      	adds	r3, #4
 8003436:	2b06      	cmp	r3, #6
 8003438:	d902      	bls.n	8003440 <NVIC_EncodePriority+0x30>
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3b03      	subs	r3, #3
 800343e:	e000      	b.n	8003442 <NVIC_EncodePriority+0x32>
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	f04f 32ff 	mov.w	r2, #4294967295
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	401a      	ands	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003458:	f04f 31ff 	mov.w	r1, #4294967295
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43d9      	mvns	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	4313      	orrs	r3, r2
         );
}
 800346a:	4618      	mov	r0, r3
 800346c:	3724      	adds	r7, #36	; 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003488:	d301      	bcc.n	800348e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348a:	2301      	movs	r3, #1
 800348c:	e00f      	b.n	80034ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <SysTick_Config+0x40>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003496:	210f      	movs	r1, #15
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	f7ff ff8e 	bl	80033bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <SysTick_Config+0x40>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <SysTick_Config+0x40>)
 80034a8:	2207      	movs	r2, #7
 80034aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	e000e010 	.word	0xe000e010

080034bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff29 	bl	800331c <__NVIC_SetPriorityGrouping>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034e0:	f7ff ff40 	bl	8003364 <__NVIC_GetPriorityGrouping>
 80034e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f7ff ff90 	bl	8003410 <NVIC_EncodePriority>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff5f 	bl	80033bc <__NVIC_SetPriority>
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff33 	bl	8003380 <__NVIC_EnableIRQ>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffa4 	bl	8003478 <SysTick_Config>
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d00d      	beq.n	800356e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2204      	movs	r2, #4
 8003556:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e047      	b.n	80035fe <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020e 	bic.w	r2, r2, #14
 800357c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800359c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f003 021f 	and.w	r2, r3, #31
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2101      	movs	r1, #1
 80035ac:	fa01 f202 	lsl.w	r2, r1, r2
 80035b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
    }
  }
  return status;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003616:	e15a      	b.n	80038ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	2101      	movs	r1, #1
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	4013      	ands	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 814c 	beq.w	80038c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d00b      	beq.n	8003650 <HAL_GPIO_Init+0x48>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d007      	beq.n	8003650 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003644:	2b11      	cmp	r3, #17
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b12      	cmp	r3, #18
 800364e:	d130      	bne.n	80036b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2203      	movs	r2, #3
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003686:	2201      	movs	r2, #1
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4013      	ands	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 0201 	and.w	r2, r3, #1
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0xea>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b12      	cmp	r3, #18
 80036f0:	d123      	bne.n	800373a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	08da      	lsrs	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3208      	adds	r2, #8
 80036fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	220f      	movs	r2, #15
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	08da      	lsrs	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3208      	adds	r2, #8
 8003734:	6939      	ldr	r1, [r7, #16]
 8003736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	2203      	movs	r2, #3
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4013      	ands	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0203 	and.w	r2, r3, #3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80a6 	beq.w	80038c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377c:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <HAL_GPIO_Init+0x2e4>)
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	4a5a      	ldr	r2, [pc, #360]	; (80038ec <HAL_GPIO_Init+0x2e4>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6613      	str	r3, [r2, #96]	; 0x60
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_GPIO_Init+0x2e4>)
 800378a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003794:	4a56      	ldr	r2, [pc, #344]	; (80038f0 <HAL_GPIO_Init+0x2e8>)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	3302      	adds	r3, #2
 800379c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	220f      	movs	r2, #15
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037be:	d01f      	beq.n	8003800 <HAL_GPIO_Init+0x1f8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a4c      	ldr	r2, [pc, #304]	; (80038f4 <HAL_GPIO_Init+0x2ec>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d019      	beq.n	80037fc <HAL_GPIO_Init+0x1f4>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a4b      	ldr	r2, [pc, #300]	; (80038f8 <HAL_GPIO_Init+0x2f0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <HAL_GPIO_Init+0x1f0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <HAL_GPIO_Init+0x2f4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00d      	beq.n	80037f4 <HAL_GPIO_Init+0x1ec>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a49      	ldr	r2, [pc, #292]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <HAL_GPIO_Init+0x1e8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a48      	ldr	r2, [pc, #288]	; (8003904 <HAL_GPIO_Init+0x2fc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <HAL_GPIO_Init+0x1e4>
 80037e8:	2305      	movs	r3, #5
 80037ea:	e00a      	b.n	8003802 <HAL_GPIO_Init+0x1fa>
 80037ec:	2306      	movs	r3, #6
 80037ee:	e008      	b.n	8003802 <HAL_GPIO_Init+0x1fa>
 80037f0:	2304      	movs	r3, #4
 80037f2:	e006      	b.n	8003802 <HAL_GPIO_Init+0x1fa>
 80037f4:	2303      	movs	r3, #3
 80037f6:	e004      	b.n	8003802 <HAL_GPIO_Init+0x1fa>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e002      	b.n	8003802 <HAL_GPIO_Init+0x1fa>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_GPIO_Init+0x1fa>
 8003800:	2300      	movs	r3, #0
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	f002 0203 	and.w	r2, r2, #3
 8003808:	0092      	lsls	r2, r2, #2
 800380a:	4093      	lsls	r3, r2
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003812:	4937      	ldr	r1, [pc, #220]	; (80038f0 <HAL_GPIO_Init+0x2e8>)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003820:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_GPIO_Init+0x300>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003844:	4a30      	ldr	r2, [pc, #192]	; (8003908 <HAL_GPIO_Init+0x300>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800384a:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <HAL_GPIO_Init+0x300>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800386e:	4a26      	ldr	r2, [pc, #152]	; (8003908 <HAL_GPIO_Init+0x300>)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_GPIO_Init+0x300>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_GPIO_Init+0x300>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800389e:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <HAL_GPIO_Init+0x300>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c2:	4a11      	ldr	r2, [pc, #68]	; (8003908 <HAL_GPIO_Init+0x300>)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3301      	adds	r3, #1
 80038cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f47f ae9d 	bne.w	8003618 <HAL_GPIO_Init+0x10>
  }
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40010000 	.word	0x40010000
 80038f4:	48000400 	.word	0x48000400
 80038f8:	48000800 	.word	0x48000800
 80038fc:	48000c00 	.word	0x48000c00
 8003900:	48001000 	.word	0x48001000
 8003904:	48001400 	.word	0x48001400
 8003908:	40010400 	.word	0x40010400

0800390c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003922:	4a05      	ldr	r2, [pc, #20]	; (8003938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd f936 	bl	8000b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40010400 	.word	0x40010400

0800393c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0bb      	b.n	8003aca <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b05      	cmp	r3, #5
 800395c:	d101      	bne.n	8003962 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0b3      	b.n	8003aca <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d101      	bne.n	8003972 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0ab      	b.n	8003aca <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	4b58      	ldr	r3, [pc, #352]	; (8003ad4 <HAL_OPAMP_Init+0x198>)
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	4a57      	ldr	r2, [pc, #348]	; (8003ad4 <HAL_OPAMP_Init+0x198>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6613      	str	r3, [r2, #96]	; 0x60
 800397e:	4b55      	ldr	r3, [pc, #340]	; (8003ad4 <HAL_OPAMP_Init+0x198>)
 8003980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd fa3c 	bl	8000e1c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d003      	beq.n	80039b4 <HAL_OPAMP_Init+0x78>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d133      	bne.n	8003a1c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0110 	bic.w	r1, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_OPAMP_Init+0x19c>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6851      	ldr	r1, [r2, #4]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6892      	ldr	r2, [r2, #8]
 80039dc:	4311      	orrs	r1, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6912      	ldr	r2, [r2, #16]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	7d09      	ldrb	r1, [r1, #20]
 80039e8:	2901      	cmp	r1, #1
 80039ea:	d102      	bne.n	80039f2 <HAL_OPAMP_Init+0xb6>
 80039ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f0:	e000      	b.n	80039f4 <HAL_OPAMP_Init+0xb8>
 80039f2:	2100      	movs	r1, #0
 80039f4:	4311      	orrs	r1, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039fa:	4311      	orrs	r1, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a00:	4311      	orrs	r1, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a06:	04d2      	lsls	r2, r2, #19
 8003a08:	4311      	orrs	r1, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a0e:	0612      	lsls	r2, r2, #24
 8003a10:	4311      	orrs	r1, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	430b      	orrs	r3, r1
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e035      	b.n	8003a88 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 0110 	bic.w	r1, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <HAL_OPAMP_Init+0x19c>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6851      	ldr	r1, [r2, #4]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6892      	ldr	r2, [r2, #8]
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	4311      	orrs	r1, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6912      	ldr	r2, [r2, #16]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	7d09      	ldrb	r1, [r1, #20]
 8003a56:	2901      	cmp	r1, #1
 8003a58:	d102      	bne.n	8003a60 <HAL_OPAMP_Init+0x124>
 8003a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a5e:	e000      	b.n	8003a62 <HAL_OPAMP_Init+0x126>
 8003a60:	2100      	movs	r1, #0
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a68:	4311      	orrs	r1, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a6e:	4311      	orrs	r1, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a74:	04d2      	lsls	r2, r2, #19
 8003a76:	4311      	orrs	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a7c:	0612      	lsls	r2, r2, #24
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	db10      	blt.n	8003ab4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	e0003e11 	.word	0xe0003e11

08003adc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d141      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aea:	4b4b      	ldr	r3, [pc, #300]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d131      	bne.n	8003b5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003af8:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afe:	4a46      	ldr	r2, [pc, #280]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b08:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b10:	4a41      	ldr	r2, [pc, #260]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b18:	4b40      	ldr	r3, [pc, #256]	; (8003c1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2232      	movs	r2, #50	; 0x32
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	4a3f      	ldr	r2, [pc, #252]	; (8003c20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	0c9b      	lsrs	r3, r3, #18
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b2e:	e002      	b.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b36:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b42:	d102      	bne.n	8003b4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f2      	bne.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b56:	d158      	bne.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e057      	b.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b5c:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b62:	4a2d      	ldr	r2, [pc, #180]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b6c:	e04d      	b.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b74:	d141      	bne.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b76:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d131      	bne.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b84:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8a:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2232      	movs	r2, #50	; 0x32
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	0c9b      	lsrs	r3, r3, #18
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bba:	e002      	b.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d102      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f2      	bne.n	8003bbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d112      	bne.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e011      	b.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bf8:	e007      	b.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c02:	4a05      	ldr	r2, [pc, #20]	; (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	431bde83 	.word	0x431bde83

08003c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e308      	b.n	8004248 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d075      	beq.n	8003d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c42:	4ba3      	ldr	r3, [pc, #652]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c4c:	4ba0      	ldr	r3, [pc, #640]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3e>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_OscConfig+0x44>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d10b      	bne.n	8003c80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	4b99      	ldr	r3, [pc, #612]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d05b      	beq.n	8003d2c <HAL_RCC_OscConfig+0x108>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d157      	bne.n	8003d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e2e3      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d106      	bne.n	8003c98 <HAL_RCC_OscConfig+0x74>
 8003c8a:	4b91      	ldr	r3, [pc, #580]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a90      	ldr	r2, [pc, #576]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0xb0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x98>
 8003ca2:	4b8b      	ldr	r3, [pc, #556]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a8a      	ldr	r2, [pc, #552]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b88      	ldr	r3, [pc, #544]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a87      	ldr	r2, [pc, #540]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xb0>
 8003cbc:	4b84      	ldr	r3, [pc, #528]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a83      	ldr	r2, [pc, #524]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b81      	ldr	r3, [pc, #516]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a80      	ldr	r2, [pc, #512]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fd36 	bl	800174c <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fd fd32 	bl	800174c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	; 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e2a8      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf6:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xc0>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fd fd22 	bl	800174c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fd fd1e 	bl	800174c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e294      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d1e:	4b6c      	ldr	r3, [pc, #432]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0xe8>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d075      	beq.n	8003e26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3a:	4b65      	ldr	r3, [pc, #404]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d44:	4b62      	ldr	r3, [pc, #392]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	d102      	bne.n	8003d5a <HAL_RCC_OscConfig+0x136>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d002      	beq.n	8003d60 <HAL_RCC_OscConfig+0x13c>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d11f      	bne.n	8003da0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d60:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_OscConfig+0x154>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e267      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b55      	ldr	r3, [pc, #340]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	4952      	ldr	r1, [pc, #328]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d8c:	4b51      	ldr	r3, [pc, #324]	; (8003ed4 <HAL_RCC_OscConfig+0x2b0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fd fc8f 	bl	80016b4 <HAL_InitTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d043      	beq.n	8003e24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e253      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d023      	beq.n	8003df0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da8:	4b49      	ldr	r3, [pc, #292]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a48      	ldr	r2, [pc, #288]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fcca 	bl	800174c <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbc:	f7fd fcc6 	bl	800174c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e23c      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dce:	4b40      	ldr	r3, [pc, #256]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b3d      	ldr	r3, [pc, #244]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	4939      	ldr	r1, [pc, #228]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
 8003dee:	e01a      	b.n	8003e26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df0:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a36      	ldr	r2, [pc, #216]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fca6 	bl	800174c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fd fca2 	bl	800174c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e218      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1e0>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d03c      	beq.n	8003eac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3a:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e40:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fd fc7f 	bl	800174c <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e52:	f7fd fc7b 	bl	800174c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1f1      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ef      	beq.n	8003e52 <HAL_RCC_OscConfig+0x22e>
 8003e72:	e01b      	b.n	8003eac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e74:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e84:	f7fd fc62 	bl	800174c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8c:	f7fd fc5e 	bl	800174c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e1d4      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ef      	bne.n	8003e8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80ab 	beq.w	8004010 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2b4>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e005      	b.n	8003eda <HAL_RCC_OscConfig+0x2b6>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	20000004 	.word	0x20000004
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	4baf      	ldr	r3, [pc, #700]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	4aae      	ldr	r2, [pc, #696]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eea:	4bac      	ldr	r3, [pc, #688]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efa:	4ba9      	ldr	r3, [pc, #676]	; (80041a0 <HAL_RCC_OscConfig+0x57c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d118      	bne.n	8003f38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f06:	4ba6      	ldr	r3, [pc, #664]	; (80041a0 <HAL_RCC_OscConfig+0x57c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4aa5      	ldr	r2, [pc, #660]	; (80041a0 <HAL_RCC_OscConfig+0x57c>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7fd fc1b 	bl	800174c <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7fd fc17 	bl	800174c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e18d      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f2c:	4b9c      	ldr	r3, [pc, #624]	; (80041a0 <HAL_RCC_OscConfig+0x57c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d108      	bne.n	8003f52 <HAL_RCC_OscConfig+0x32e>
 8003f40:	4b96      	ldr	r3, [pc, #600]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	4a95      	ldr	r2, [pc, #596]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f50:	e024      	b.n	8003f9c <HAL_RCC_OscConfig+0x378>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d110      	bne.n	8003f7c <HAL_RCC_OscConfig+0x358>
 8003f5a:	4b90      	ldr	r3, [pc, #576]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	4a8e      	ldr	r2, [pc, #568]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f6a:	4b8c      	ldr	r3, [pc, #560]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	4a8a      	ldr	r2, [pc, #552]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f7a:	e00f      	b.n	8003f9c <HAL_RCC_OscConfig+0x378>
 8003f7c:	4b87      	ldr	r3, [pc, #540]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	4a86      	ldr	r2, [pc, #536]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f8c:	4b83      	ldr	r3, [pc, #524]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	4a82      	ldr	r2, [pc, #520]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fd fbd2 	bl	800174c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fd fbce 	bl	800174c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e142      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc2:	4b76      	ldr	r3, [pc, #472]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ed      	beq.n	8003fac <HAL_RCC_OscConfig+0x388>
 8003fd0:	e015      	b.n	8003ffe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fd fbbb 	bl	800174c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fd fbb7 	bl	800174c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e12b      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ed      	bne.n	8003fda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ffe:	7ffb      	ldrb	r3, [r7, #31]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4b65      	ldr	r3, [pc, #404]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	4a64      	ldr	r2, [pc, #400]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800400a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d03c      	beq.n	8004096 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01c      	beq.n	800405e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004024:	4b5d      	ldr	r3, [pc, #372]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402a:	4a5c      	ldr	r2, [pc, #368]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fd fb8a 	bl	800174c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800403c:	f7fd fb86 	bl	800174c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e0fc      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800404e:	4b53      	ldr	r3, [pc, #332]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ef      	beq.n	800403c <HAL_RCC_OscConfig+0x418>
 800405c:	e01b      	b.n	8004096 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800405e:	4b4f      	ldr	r3, [pc, #316]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004060:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004064:	4a4d      	ldr	r2, [pc, #308]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406e:	f7fd fb6d 	bl	800174c <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004076:	f7fd fb69 	bl	800174c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0df      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004088:	4b44      	ldr	r3, [pc, #272]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800408a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ef      	bne.n	8004076 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80d3 	beq.w	8004246 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a0:	4b3e      	ldr	r3, [pc, #248]	; (800419c <HAL_RCC_OscConfig+0x578>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	f000 808d 	beq.w	80041c8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d15a      	bne.n	800416c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	4b39      	ldr	r3, [pc, #228]	; (800419c <HAL_RCC_OscConfig+0x578>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a38      	ldr	r2, [pc, #224]	; (800419c <HAL_RCC_OscConfig+0x578>)
 80040bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd fb43 	bl	800174c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fd fb3f 	bl	800174c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e0b5      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040dc:	4b2f      	ldr	r3, [pc, #188]	; (800419c <HAL_RCC_OscConfig+0x578>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e8:	4b2c      	ldr	r3, [pc, #176]	; (800419c <HAL_RCC_OscConfig+0x578>)
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_RCC_OscConfig+0x580>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6a11      	ldr	r1, [r2, #32]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f8:	3a01      	subs	r2, #1
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	4311      	orrs	r1, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004102:	0212      	lsls	r2, r2, #8
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800410a:	0852      	lsrs	r2, r2, #1
 800410c:	3a01      	subs	r2, #1
 800410e:	0552      	lsls	r2, r2, #21
 8004110:	4311      	orrs	r1, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004116:	0852      	lsrs	r2, r2, #1
 8004118:	3a01      	subs	r2, #1
 800411a:	0652      	lsls	r2, r2, #25
 800411c:	4311      	orrs	r1, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004122:	06d2      	lsls	r2, r2, #27
 8004124:	430a      	orrs	r2, r1
 8004126:	491d      	ldr	r1, [pc, #116]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004128:	4313      	orrs	r3, r2
 800412a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1a      	ldr	r2, [pc, #104]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004136:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a17      	ldr	r2, [pc, #92]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800413e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004142:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fd fb02 	bl	800174c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fd fafe 	bl	800174c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e074      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415e:	4b0f      	ldr	r3, [pc, #60]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x528>
 800416a:	e06c      	b.n	8004246 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004176:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a07      	ldr	r2, [pc, #28]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800417e:	f023 0303 	bic.w	r3, r3, #3
 8004182:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_OscConfig+0x578>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_RCC_OscConfig+0x578>)
 800418a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800418e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004192:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fd fada 	bl	800174c <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800419a:	e00e      	b.n	80041ba <HAL_RCC_OscConfig+0x596>
 800419c:	40021000 	.word	0x40021000
 80041a0:	40007000 	.word	0x40007000
 80041a4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fd fad0 	bl	800174c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e046      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ba:	4b25      	ldr	r3, [pc, #148]	; (8004250 <HAL_RCC_OscConfig+0x62c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x584>
 80041c6:	e03e      	b.n	8004246 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e039      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80041d4:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_RCC_OscConfig+0x62c>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f003 0203 	and.w	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d12c      	bne.n	8004242 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	3b01      	subs	r3, #1
 80041f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d123      	bne.n	8004242 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d11b      	bne.n	8004242 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d113      	bne.n	8004242 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d109      	bne.n	8004242 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	3b01      	subs	r3, #1
 800423c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d001      	beq.n	8004246 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000

08004254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e11e      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800426c:	4b91      	ldr	r3, [pc, #580]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d910      	bls.n	800429c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b8e      	ldr	r3, [pc, #568]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 020f 	bic.w	r2, r3, #15
 8004282:	498c      	ldr	r1, [pc, #560]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b8a      	ldr	r3, [pc, #552]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e106      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d073      	beq.n	8004390 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d129      	bne.n	8004304 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b0:	4b81      	ldr	r3, [pc, #516]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0f4      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042c0:	f000 f99e 	bl	8004600 <RCC_GetSysClockFreqFromPLLSource>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4a7c      	ldr	r2, [pc, #496]	; (80044bc <HAL_RCC_ClockConfig+0x268>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d93f      	bls.n	800434e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042ce:	4b7a      	ldr	r3, [pc, #488]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d033      	beq.n	800434e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d12f      	bne.n	800434e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ee:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f6:	4a70      	ldr	r2, [pc, #448]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80042f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e024      	b.n	800434e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d107      	bne.n	800431c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430c:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0c6      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800431c:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0be      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800432c:	f000 f8ce 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8004330:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4a61      	ldr	r2, [pc, #388]	; (80044bc <HAL_RCC_ClockConfig+0x268>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d909      	bls.n	800434e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800433a:	4b5f      	ldr	r3, [pc, #380]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004342:	4a5d      	ldr	r2, [pc, #372]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 8004344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004348:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800434e:	4b5a      	ldr	r3, [pc, #360]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 0203 	bic.w	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4957      	ldr	r1, [pc, #348]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800435c:	4313      	orrs	r3, r2
 800435e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004360:	f7fd f9f4 	bl	800174c <HAL_GetTick>
 8004364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	e00a      	b.n	800437e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004368:	f7fd f9f0 	bl	800174c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	; 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e095      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 020c 	and.w	r2, r3, #12
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	429a      	cmp	r2, r3
 800438e:	d1eb      	bne.n	8004368 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d023      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a42      	ldr	r2, [pc, #264]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80043c0:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043c8:	4a3b      	ldr	r2, [pc, #236]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d0:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4936      	ldr	r1, [pc, #216]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b80      	cmp	r3, #128	; 0x80
 80043e8:	d105      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043ea:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4a32      	ldr	r2, [pc, #200]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 80043f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d21d      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004404:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 020f 	bic.w	r2, r3, #15
 800440c:	4929      	ldr	r1, [pc, #164]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004414:	f7fd f99a 	bl	800174c <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	e00a      	b.n	8004432 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800441c:	f7fd f996 	bl	800174c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	; 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e03b      	b.n	80044aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCC_ClockConfig+0x260>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d1ed      	bne.n	800441c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4917      	ldr	r1, [pc, #92]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	490f      	ldr	r1, [pc, #60]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800447e:	f000 f825 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8004482:	4601      	mov	r1, r0
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCC_ClockConfig+0x264>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <HAL_RCC_ClockConfig+0x26c>)
 8004490:	5cd3      	ldrb	r3, [r2, r3]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	fa21 f303 	lsr.w	r3, r1, r3
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <HAL_RCC_ClockConfig+0x270>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_RCC_ClockConfig+0x274>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fd f906 	bl	80016b4 <HAL_InitTick>
 80044a8:	4603      	mov	r3, r0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40022000 	.word	0x40022000
 80044b8:	40021000 	.word	0x40021000
 80044bc:	04c4b400 	.word	0x04c4b400
 80044c0:	0800863c 	.word	0x0800863c
 80044c4:	20000000 	.word	0x20000000
 80044c8:	20000004 	.word	0x20000004

080044cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044d2:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d102      	bne.n	80044e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	e047      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d102      	bne.n	80044f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044f0:	4b26      	ldr	r3, [pc, #152]	; (800458c <HAL_RCC_GetSysClockFreq+0xc0>)
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	e03e      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b0c      	cmp	r3, #12
 8004500:	d136      	bne.n	8004570 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004502:	4b20      	ldr	r3, [pc, #128]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800450c:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	3301      	adds	r3, #1
 8004518:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d10c      	bne.n	800453a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004520:	4a1a      	ldr	r2, [pc, #104]	; (800458c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	4a16      	ldr	r2, [pc, #88]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800452a:	68d2      	ldr	r2, [r2, #12]
 800452c:	0a12      	lsrs	r2, r2, #8
 800452e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	617b      	str	r3, [r7, #20]
      break;
 8004538:	e00c      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800453a:	4a13      	ldr	r2, [pc, #76]	; (8004588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004544:	68d2      	ldr	r2, [r2, #12]
 8004546:	0a12      	lsrs	r2, r2, #8
 8004548:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800454c:	fb02 f303 	mul.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
      break;
 8004552:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	0e5b      	lsrs	r3, r3, #25
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	3301      	adds	r3, #1
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e001      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004574:	693b      	ldr	r3, [r7, #16]
}
 8004576:	4618      	mov	r0, r3
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	00f42400 	.word	0x00f42400
 800458c:	007a1200 	.word	0x007a1200

08004590 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000000 	.word	0x20000000

080045a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045ac:	f7ff fff0 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045b0:	4601      	mov	r1, r0
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	0800864c 	.word	0x0800864c

080045d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045d8:	f7ff ffda 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045dc:	4601      	mov	r1, r0
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	0adb      	lsrs	r3, r3, #11
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4a04      	ldr	r2, [pc, #16]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ea:	5cd3      	ldrb	r3, [r2, r3]
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	0800864c 	.word	0x0800864c

08004600 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004610:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d10c      	bne.n	800463e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004624:	4a17      	ldr	r2, [pc, #92]	; (8004684 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800462e:	68d2      	ldr	r2, [r2, #12]
 8004630:	0a12      	lsrs	r2, r2, #8
 8004632:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	617b      	str	r3, [r7, #20]
    break;
 800463c:	e00c      	b.n	8004658 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800463e:	4a12      	ldr	r2, [pc, #72]	; (8004688 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004648:	68d2      	ldr	r2, [r2, #12]
 800464a:	0a12      	lsrs	r2, r2, #8
 800464c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	617b      	str	r3, [r7, #20]
    break;
 8004656:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	0e5b      	lsrs	r3, r3, #25
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	3301      	adds	r3, #1
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004672:	687b      	ldr	r3, [r7, #4]
}
 8004674:	4618      	mov	r0, r3
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40021000 	.word	0x40021000
 8004684:	007a1200 	.word	0x007a1200
 8004688:	00f42400 	.word	0x00f42400

0800468c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004694:	2300      	movs	r3, #0
 8004696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004698:	2300      	movs	r3, #0
 800469a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8098 	beq.w	80047da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ae:	4b43      	ldr	r3, [pc, #268]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	4b40      	ldr	r3, [pc, #256]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	4a3f      	ldr	r2, [pc, #252]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6593      	str	r3, [r2, #88]	; 0x58
 80046c6:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	2301      	movs	r3, #1
 80046d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d6:	4b3a      	ldr	r3, [pc, #232]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a39      	ldr	r2, [pc, #228]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046e2:	f7fd f833 	bl	800174c <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046e8:	e009      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fd f82f 	bl	800174c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d902      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	74fb      	strb	r3, [r7, #19]
        break;
 80046fc:	e005      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046fe:	4b30      	ldr	r3, [pc, #192]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ef      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d159      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01e      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	429a      	cmp	r2, r3
 800472a:	d019      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800472c:	4b23      	ldr	r3, [pc, #140]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004736:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004738:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	4a1f      	ldr	r2, [pc, #124]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004748:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	4a1b      	ldr	r2, [pc, #108]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004758:	4a18      	ldr	r2, [pc, #96]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476a:	f7fc ffef 	bl	800174c <HAL_GetTick>
 800476e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004770:	e00b      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fc ffeb 	bl	800174c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d902      	bls.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	74fb      	strb	r3, [r7, #19]
            break;
 8004788:	e006      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ec      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	4903      	ldr	r1, [pc, #12]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047b4:	e008      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	74bb      	strb	r3, [r7, #18]
 80047ba:	e005      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c8:	7c7b      	ldrb	r3, [r7, #17]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d105      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ce:	4ba6      	ldr	r3, [pc, #664]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	4aa5      	ldr	r2, [pc, #660]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e6:	4ba0      	ldr	r3, [pc, #640]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f023 0203 	bic.w	r2, r3, #3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	499c      	ldr	r1, [pc, #624]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004808:	4b97      	ldr	r3, [pc, #604]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f023 020c 	bic.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	4994      	ldr	r1, [pc, #592]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800482a:	4b8f      	ldr	r3, [pc, #572]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	498b      	ldr	r1, [pc, #556]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800484c:	4b86      	ldr	r3, [pc, #536]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	4983      	ldr	r1, [pc, #524]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800486e:	4b7e      	ldr	r3, [pc, #504]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	497a      	ldr	r1, [pc, #488]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004890:	4b75      	ldr	r3, [pc, #468]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	4972      	ldr	r1, [pc, #456]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048b2:	4b6d      	ldr	r3, [pc, #436]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	4969      	ldr	r1, [pc, #420]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048d4:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4961      	ldr	r1, [pc, #388]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048f6:	4b5c      	ldr	r3, [pc, #368]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	4958      	ldr	r1, [pc, #352]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d015      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004918:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	4950      	ldr	r1, [pc, #320]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004936:	d105      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004938:	4b4b      	ldr	r3, [pc, #300]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a4a      	ldr	r2, [pc, #296]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004942:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004950:	4b45      	ldr	r3, [pc, #276]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4942      	ldr	r1, [pc, #264]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800496e:	d105      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004970:	4b3d      	ldr	r3, [pc, #244]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a3c      	ldr	r2, [pc, #240]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004988:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4934      	ldr	r1, [pc, #208]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049a6:	d105      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a8:	4b2f      	ldr	r3, [pc, #188]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4a2e      	ldr	r2, [pc, #184]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c0:	4b29      	ldr	r3, [pc, #164]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ce:	4926      	ldr	r1, [pc, #152]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049de:	d105      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e0:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	4918      	ldr	r1, [pc, #96]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a16:	d105      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a18:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d015      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a30:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	490a      	ldr	r1, [pc, #40]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000

08004a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e049      	b.n	8004b12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc fc22 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 fe26 	bl	80056fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e049      	b.n	8004bc0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f841 	bl	8004bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 fdcf 	bl	80056fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <HAL_TIM_PWM_Start+0x24>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e03c      	b.n	8004c7a <HAL_TIM_PWM_Start+0x9e>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d109      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x3e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	bf14      	ite	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	2300      	moveq	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	e02f      	b.n	8004c7a <HAL_TIM_PWM_Start+0x9e>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d109      	bne.n	8004c34 <HAL_TIM_PWM_Start+0x58>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e022      	b.n	8004c7a <HAL_TIM_PWM_Start+0x9e>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d109      	bne.n	8004c4e <HAL_TIM_PWM_Start+0x72>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	bf14      	ite	ne
 8004c46:	2301      	movne	r3, #1
 8004c48:	2300      	moveq	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	e015      	b.n	8004c7a <HAL_TIM_PWM_Start+0x9e>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d109      	bne.n	8004c68 <HAL_TIM_PWM_Start+0x8c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e008      	b.n	8004c7a <HAL_TIM_PWM_Start+0x9e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	bf14      	ite	ne
 8004c74:	2301      	movne	r3, #1
 8004c76:	2300      	moveq	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06e      	b.n	8004d60 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <HAL_TIM_PWM_Start+0xb6>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c90:	e023      	b.n	8004cda <HAL_TIM_PWM_Start+0xfe>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d104      	bne.n	8004ca2 <HAL_TIM_PWM_Start+0xc6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca0:	e01b      	b.n	8004cda <HAL_TIM_PWM_Start+0xfe>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d104      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0xd6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb0:	e013      	b.n	8004cda <HAL_TIM_PWM_Start+0xfe>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_PWM_Start+0xe6>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cc0:	e00b      	b.n	8004cda <HAL_TIM_PWM_Start+0xfe>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0xf6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cd0:	e003      	b.n	8004cda <HAL_TIM_PWM_Start+0xfe>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 f92c 	bl	8005f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1e      	ldr	r2, [pc, #120]	; (8004d68 <HAL_TIM_PWM_Start+0x18c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x13e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <HAL_TIM_PWM_Start+0x190>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x13e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <HAL_TIM_PWM_Start+0x194>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x13e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <HAL_TIM_PWM_Start+0x198>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x13e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <HAL_TIM_PWM_Start+0x19c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x142>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <HAL_TIM_PWM_Start+0x144>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <HAL_TIM_PWM_Start+0x1a0>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d00b      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x182>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4c:	d007      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40012c00 	.word	0x40012c00
 8004d6c:	40013400 	.word	0x40013400
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800
 8004d7c:	00010007 	.word	0x00010007

08004d80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e097      	b.n	8004ec4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fc facd 	bl	8001348 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004dc4:	f023 0307 	bic.w	r3, r3, #7
 8004dc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f000 fc91 	bl	80056fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	4313      	orrs	r3, r2
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e20:	f023 030c 	bic.w	r3, r3, #12
 8004e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	011a      	lsls	r2, r3, #4
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	031b      	lsls	r3, r3, #12
 8004e50:	4313      	orrs	r3, r2
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	4313      	orrs	r3, r2
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004edc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ee4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d110      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d102      	bne.n	8004f08 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f02:	7b7b      	ldrb	r3, [r7, #13]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d001      	beq.n	8004f0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e068      	b.n	8004fde <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1c:	e031      	b.n	8004f82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d110      	bne.n	8004f46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f24:	7bbb      	ldrb	r3, [r7, #14]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d102      	bne.n	8004f30 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f2a:	7b3b      	ldrb	r3, [r7, #12]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d001      	beq.n	8004f34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e054      	b.n	8004fde <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f44:	e01d      	b.n	8004f82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d108      	bne.n	8004f5e <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f4c:	7bbb      	ldrb	r3, [r7, #14]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d105      	bne.n	8004f5e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f52:	7b7b      	ldrb	r3, [r7, #13]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d102      	bne.n	8004f5e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f58:	7b3b      	ldrb	r3, [r7, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d001      	beq.n	8004f62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e03d      	b.n	8004fde <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_TIM_Encoder_Start+0xc2>
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d008      	beq.n	8004f9e <HAL_TIM_Encoder_Start+0xd2>
 8004f8c:	e00f      	b.n	8004fae <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2201      	movs	r2, #1
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 ffd2 	bl	8005f40 <TIM_CCxChannelCmd>
      break;
 8004f9c:	e016      	b.n	8004fcc <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 ffca 	bl	8005f40 <TIM_CCxChannelCmd>
      break;
 8004fac:	e00e      	b.n	8004fcc <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 ffc2 	bl	8005f40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	2104      	movs	r1, #4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 ffbb 	bl	8005f40 <TIM_CCxChannelCmd>
      break;
 8004fca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d122      	bne.n	8005042 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d11b      	bne.n	8005042 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f06f 0202 	mvn.w	r2, #2
 8005012:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fb fdcc 	bl	8000bc6 <HAL_TIM_IC_CaptureCallback>
 800502e:	e005      	b.n	800503c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fb45 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fb4c 	bl	80056d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d122      	bne.n	8005096 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d11b      	bne.n	8005096 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f06f 0204 	mvn.w	r2, #4
 8005066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fb fda2 	bl	8000bc6 <HAL_TIM_IC_CaptureCallback>
 8005082:	e005      	b.n	8005090 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fb1b 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fb22 	bl	80056d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d122      	bne.n	80050ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d11b      	bne.n	80050ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f06f 0208 	mvn.w	r2, #8
 80050ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2204      	movs	r2, #4
 80050c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fb fd78 	bl	8000bc6 <HAL_TIM_IC_CaptureCallback>
 80050d6:	e005      	b.n	80050e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 faf1 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 faf8 	bl	80056d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d122      	bne.n	800513e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b10      	cmp	r3, #16
 8005104:	d11b      	bne.n	800513e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f06f 0210 	mvn.w	r2, #16
 800510e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2208      	movs	r2, #8
 8005114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7fb fd4e 	bl	8000bc6 <HAL_TIM_IC_CaptureCallback>
 800512a:	e005      	b.n	8005138 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fac7 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 face 	bl	80056d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	d10e      	bne.n	800516a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d107      	bne.n	800516a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f06f 0201 	mvn.w	r2, #1
 8005162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fb fd24 	bl	8000bb2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005174:	2b80      	cmp	r3, #128	; 0x80
 8005176:	d10e      	bne.n	8005196 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d107      	bne.n	8005196 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800518e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 f8a7 	bl	80062e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b0:	2b80      	cmp	r3, #128	; 0x80
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 f89a 	bl	80062f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d10e      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d107      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa7c 	bl	80056e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d10e      	bne.n	800521c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b20      	cmp	r3, #32
 800520a:	d107      	bne.n	800521c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0220 	mvn.w	r2, #32
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f001 f85a 	bl	80062d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522a:	d10f      	bne.n	800524c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523a:	d107      	bne.n	800524c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 f860 	bl	800630c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800525a:	d10f      	bne.n	800527c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800526a:	d107      	bne.n	800527c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 f852 	bl	8006320 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800528a:	d10f      	bne.n	80052ac <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800529a:	d107      	bne.n	80052ac <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 f844 	bl	8006334 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052ba:	d10f      	bne.n	80052dc <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f001 f836 	bl	8006348 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e0fd      	b.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x216>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b14      	cmp	r3, #20
 800530a:	f200 80f0 	bhi.w	80054ee <HAL_TIM_PWM_ConfigChannel+0x20a>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005369 	.word	0x08005369
 8005318:	080054ef 	.word	0x080054ef
 800531c:	080054ef 	.word	0x080054ef
 8005320:	080054ef 	.word	0x080054ef
 8005324:	080053a9 	.word	0x080053a9
 8005328:	080054ef 	.word	0x080054ef
 800532c:	080054ef 	.word	0x080054ef
 8005330:	080054ef 	.word	0x080054ef
 8005334:	080053eb 	.word	0x080053eb
 8005338:	080054ef 	.word	0x080054ef
 800533c:	080054ef 	.word	0x080054ef
 8005340:	080054ef 	.word	0x080054ef
 8005344:	0800542b 	.word	0x0800542b
 8005348:	080054ef 	.word	0x080054ef
 800534c:	080054ef 	.word	0x080054ef
 8005350:	080054ef 	.word	0x080054ef
 8005354:	0800546d 	.word	0x0800546d
 8005358:	080054ef 	.word	0x080054ef
 800535c:	080054ef 	.word	0x080054ef
 8005360:	080054ef 	.word	0x080054ef
 8005364:	080054ad 	.word	0x080054ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fa54 	bl	800581c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0208 	orr.w	r2, r2, #8
 8005382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0204 	bic.w	r2, r2, #4
 8005392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6999      	ldr	r1, [r3, #24]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	619a      	str	r2, [r3, #24]
      break;
 80053a6:	e0a3      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fac4 	bl	800593c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6999      	ldr	r1, [r3, #24]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	021a      	lsls	r2, r3, #8
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	619a      	str	r2, [r3, #24]
      break;
 80053e8:	e082      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fb2d 	bl	8005a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0208 	orr.w	r2, r2, #8
 8005404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0204 	bic.w	r2, r2, #4
 8005414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69d9      	ldr	r1, [r3, #28]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	61da      	str	r2, [r3, #28]
      break;
 8005428:	e062      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fb95 	bl	8005b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69d9      	ldr	r1, [r3, #28]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	021a      	lsls	r2, r3, #8
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	61da      	str	r2, [r3, #28]
      break;
 800546a:	e041      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fbfe 	bl	8005c74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0208 	orr.w	r2, r2, #8
 8005486:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054aa:	e021      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fc42 	bl	8005d3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054ec:	e000      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80054ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop

08005504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_TIM_ConfigClockSource+0x18>
 8005518:	2302      	movs	r3, #2
 800551a:	e0c3      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x1a0>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800553a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800553e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005546:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b70      	cmp	r3, #112	; 0x70
 8005556:	d038      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0xc6>
 8005558:	2b70      	cmp	r3, #112	; 0x70
 800555a:	d815      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x84>
 800555c:	2b30      	cmp	r3, #48	; 0x30
 800555e:	f000 808e 	beq.w	800567e <HAL_TIM_ConfigClockSource+0x17a>
 8005562:	2b30      	cmp	r3, #48	; 0x30
 8005564:	d809      	bhi.n	800557a <HAL_TIM_ConfigClockSource+0x76>
 8005566:	2b10      	cmp	r3, #16
 8005568:	f000 8089 	beq.w	800567e <HAL_TIM_ConfigClockSource+0x17a>
 800556c:	2b20      	cmp	r3, #32
 800556e:	f000 8086 	beq.w	800567e <HAL_TIM_ConfigClockSource+0x17a>
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8083 	beq.w	800567e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005578:	e08b      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800557a:	2b50      	cmp	r3, #80	; 0x50
 800557c:	d04f      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x11a>
 800557e:	2b60      	cmp	r3, #96	; 0x60
 8005580:	d05d      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x13a>
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d06b      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8005586:	e084      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005588:	4a48      	ldr	r2, [pc, #288]	; (80056ac <HAL_TIM_ConfigClockSource+0x1a8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d077      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x17a>
 800558e:	4a47      	ldr	r2, [pc, #284]	; (80056ac <HAL_TIM_ConfigClockSource+0x1a8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d809      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0xa4>
 8005594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005598:	d02e      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0xf4>
 800559a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800559e:	d06e      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x17a>
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a4:	d074      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80055a6:	e074      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80055a8:	4a41      	ldr	r2, [pc, #260]	; (80056b0 <HAL_TIM_ConfigClockSource+0x1ac>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d067      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x17a>
 80055ae:	4a40      	ldr	r2, [pc, #256]	; (80056b0 <HAL_TIM_ConfigClockSource+0x1ac>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d803      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0xb8>
 80055b4:	4a3f      	ldr	r2, [pc, #252]	; (80056b4 <HAL_TIM_ConfigClockSource+0x1b0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d061      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80055ba:	e06a      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80055bc:	4a3e      	ldr	r2, [pc, #248]	; (80056b8 <HAL_TIM_ConfigClockSource+0x1b4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d05d      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x17a>
 80055c2:	4a3e      	ldr	r2, [pc, #248]	; (80056bc <HAL_TIM_ConfigClockSource+0x1b8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d05a      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80055c8:	e063      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6899      	ldr	r1, [r3, #8]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f000 fc91 	bl	8005f00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	609a      	str	r2, [r3, #8]
      break;
 80055f6:	e04c      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6899      	ldr	r1, [r3, #8]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f000 fc7a 	bl	8005f00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800561a:	609a      	str	r2, [r3, #8]
      break;
 800561c:	e039      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	461a      	mov	r2, r3
 800562c:	f000 fbec 	bl	8005e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2150      	movs	r1, #80	; 0x50
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fc45 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 800563c:	e029      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6859      	ldr	r1, [r3, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	461a      	mov	r2, r3
 800564c:	f000 fc0b 	bl	8005e66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2160      	movs	r1, #96	; 0x60
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fc35 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 800565c:	e019      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	461a      	mov	r2, r3
 800566c:	f000 fbcc 	bl	8005e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2140      	movs	r1, #64	; 0x40
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fc25 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 800567c:	e009      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f000 fc1c 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 800568e:	e000      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8005690:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	00100020 	.word	0x00100020
 80056b0:	00100040 	.word	0x00100040
 80056b4:	00100030 	.word	0x00100030
 80056b8:	00100060 	.word	0x00100060
 80056bc:	00100070 	.word	0x00100070

080056c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a3c      	ldr	r2, [pc, #240]	; (8005800 <TIM_Base_SetConfig+0x104>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a39      	ldr	r2, [pc, #228]	; (8005804 <TIM_Base_SetConfig+0x108>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a38      	ldr	r2, [pc, #224]	; (8005808 <TIM_Base_SetConfig+0x10c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a37      	ldr	r2, [pc, #220]	; (800580c <TIM_Base_SetConfig+0x110>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2d      	ldr	r2, [pc, #180]	; (8005800 <TIM_Base_SetConfig+0x104>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01b      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d017      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2a      	ldr	r2, [pc, #168]	; (8005804 <TIM_Base_SetConfig+0x108>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a29      	ldr	r2, [pc, #164]	; (8005808 <TIM_Base_SetConfig+0x10c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00f      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a28      	ldr	r2, [pc, #160]	; (800580c <TIM_Base_SetConfig+0x110>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a27      	ldr	r2, [pc, #156]	; (8005810 <TIM_Base_SetConfig+0x114>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a26      	ldr	r2, [pc, #152]	; (8005814 <TIM_Base_SetConfig+0x118>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a25      	ldr	r2, [pc, #148]	; (8005818 <TIM_Base_SetConfig+0x11c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d108      	bne.n	8005798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a10      	ldr	r2, [pc, #64]	; (8005800 <TIM_Base_SetConfig+0x104>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00f      	beq.n	80057e4 <TIM_Base_SetConfig+0xe8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a11      	ldr	r2, [pc, #68]	; (800580c <TIM_Base_SetConfig+0x110>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00b      	beq.n	80057e4 <TIM_Base_SetConfig+0xe8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <TIM_Base_SetConfig+0x114>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_Base_SetConfig+0xe8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a0f      	ldr	r2, [pc, #60]	; (8005814 <TIM_Base_SetConfig+0x118>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_Base_SetConfig+0xe8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a0e      	ldr	r2, [pc, #56]	; (8005818 <TIM_Base_SetConfig+0x11c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d103      	bne.n	80057ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	615a      	str	r2, [r3, #20]
}
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40013400 	.word	0x40013400
 8005810:	40014000 	.word	0x40014000
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800

0800581c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0303 	bic.w	r3, r3, #3
 8005856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f023 0302 	bic.w	r3, r3, #2
 8005868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a2c      	ldr	r2, [pc, #176]	; (8005928 <TIM_OC1_SetConfig+0x10c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00f      	beq.n	800589c <TIM_OC1_SetConfig+0x80>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a2b      	ldr	r2, [pc, #172]	; (800592c <TIM_OC1_SetConfig+0x110>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_OC1_SetConfig+0x80>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <TIM_OC1_SetConfig+0x114>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_OC1_SetConfig+0x80>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a29      	ldr	r2, [pc, #164]	; (8005934 <TIM_OC1_SetConfig+0x118>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC1_SetConfig+0x80>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a28      	ldr	r2, [pc, #160]	; (8005938 <TIM_OC1_SetConfig+0x11c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10c      	bne.n	80058b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0308 	bic.w	r3, r3, #8
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 0304 	bic.w	r3, r3, #4
 80058b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1b      	ldr	r2, [pc, #108]	; (8005928 <TIM_OC1_SetConfig+0x10c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00f      	beq.n	80058de <TIM_OC1_SetConfig+0xc2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1a      	ldr	r2, [pc, #104]	; (800592c <TIM_OC1_SetConfig+0x110>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00b      	beq.n	80058de <TIM_OC1_SetConfig+0xc2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a19      	ldr	r2, [pc, #100]	; (8005930 <TIM_OC1_SetConfig+0x114>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d007      	beq.n	80058de <TIM_OC1_SetConfig+0xc2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a18      	ldr	r2, [pc, #96]	; (8005934 <TIM_OC1_SetConfig+0x118>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d003      	beq.n	80058de <TIM_OC1_SetConfig+0xc2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a17      	ldr	r2, [pc, #92]	; (8005938 <TIM_OC1_SetConfig+0x11c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d111      	bne.n	8005902 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40013400 	.word	0x40013400
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800

0800593c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0210 	bic.w	r2, r3, #16
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f023 0320 	bic.w	r3, r3, #32
 800598a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <TIM_OC2_SetConfig+0x100>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_OC2_SetConfig+0x6c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <TIM_OC2_SetConfig+0x104>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d10d      	bne.n	80059c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <TIM_OC2_SetConfig+0x100>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00f      	beq.n	80059ec <TIM_OC2_SetConfig+0xb0>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <TIM_OC2_SetConfig+0x104>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00b      	beq.n	80059ec <TIM_OC2_SetConfig+0xb0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <TIM_OC2_SetConfig+0x108>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d007      	beq.n	80059ec <TIM_OC2_SetConfig+0xb0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1a      	ldr	r2, [pc, #104]	; (8005a48 <TIM_OC2_SetConfig+0x10c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_OC2_SetConfig+0xb0>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a19      	ldr	r2, [pc, #100]	; (8005a4c <TIM_OC2_SetConfig+0x110>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d113      	bne.n	8005a14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	621a      	str	r2, [r3, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40013400 	.word	0x40013400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800

08005a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a27      	ldr	r2, [pc, #156]	; (8005b4c <TIM_OC3_SetConfig+0xfc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_OC3_SetConfig+0x6a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a26      	ldr	r2, [pc, #152]	; (8005b50 <TIM_OC3_SetConfig+0x100>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d10d      	bne.n	8005ad6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	; (8005b4c <TIM_OC3_SetConfig+0xfc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00f      	beq.n	8005afe <TIM_OC3_SetConfig+0xae>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <TIM_OC3_SetConfig+0x100>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00b      	beq.n	8005afe <TIM_OC3_SetConfig+0xae>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1a      	ldr	r2, [pc, #104]	; (8005b54 <TIM_OC3_SetConfig+0x104>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d007      	beq.n	8005afe <TIM_OC3_SetConfig+0xae>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a19      	ldr	r2, [pc, #100]	; (8005b58 <TIM_OC3_SetConfig+0x108>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_OC3_SetConfig+0xae>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a18      	ldr	r2, [pc, #96]	; (8005b5c <TIM_OC3_SetConfig+0x10c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d113      	bne.n	8005b26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	621a      	str	r2, [r3, #32]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40012c00 	.word	0x40012c00
 8005b50:	40013400 	.word	0x40013400
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40014400 	.word	0x40014400
 8005b5c:	40014800 	.word	0x40014800

08005b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	031b      	lsls	r3, r3, #12
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a28      	ldr	r2, [pc, #160]	; (8005c60 <TIM_OC4_SetConfig+0x100>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_OC4_SetConfig+0x6c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a27      	ldr	r2, [pc, #156]	; (8005c64 <TIM_OC4_SetConfig+0x104>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d10d      	bne.n	8005be8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	031b      	lsls	r3, r3, #12
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <TIM_OC4_SetConfig+0x100>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00f      	beq.n	8005c10 <TIM_OC4_SetConfig+0xb0>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a1c      	ldr	r2, [pc, #112]	; (8005c64 <TIM_OC4_SetConfig+0x104>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <TIM_OC4_SetConfig+0xb0>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a1b      	ldr	r2, [pc, #108]	; (8005c68 <TIM_OC4_SetConfig+0x108>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_OC4_SetConfig+0xb0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a1a      	ldr	r2, [pc, #104]	; (8005c6c <TIM_OC4_SetConfig+0x10c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_OC4_SetConfig+0xb0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <TIM_OC4_SetConfig+0x110>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d113      	bne.n	8005c38 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	019b      	lsls	r3, r3, #6
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40013400 	.word	0x40013400
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400
 8005c70:	40014800 	.word	0x40014800

08005c74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <TIM_OC5_SetConfig+0xb4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <TIM_OC5_SetConfig+0x7a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <TIM_OC5_SetConfig+0xb8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <TIM_OC5_SetConfig+0x7a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a15      	ldr	r2, [pc, #84]	; (8005d30 <TIM_OC5_SetConfig+0xbc>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <TIM_OC5_SetConfig+0x7a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <TIM_OC5_SetConfig+0xc0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_OC5_SetConfig+0x7a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <TIM_OC5_SetConfig+0xc4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d109      	bne.n	8005d02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40013400 	.word	0x40013400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800

08005d3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	051b      	lsls	r3, r3, #20
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <TIM_OC6_SetConfig+0xb8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00f      	beq.n	8005db8 <TIM_OC6_SetConfig+0x7c>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <TIM_OC6_SetConfig+0xbc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <TIM_OC6_SetConfig+0x7c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a16      	ldr	r2, [pc, #88]	; (8005dfc <TIM_OC6_SetConfig+0xc0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <TIM_OC6_SetConfig+0x7c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <TIM_OC6_SetConfig+0xc4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_OC6_SetConfig+0x7c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a14      	ldr	r2, [pc, #80]	; (8005e04 <TIM_OC6_SetConfig+0xc8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d109      	bne.n	8005dcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	029b      	lsls	r3, r3, #10
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800

08005e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f023 030a 	bic.w	r3, r3, #10
 8005e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b087      	sub	sp, #28
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0210 	bic.w	r2, r3, #16
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f043 0307 	orr.w	r3, r3, #7
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	021a      	lsls	r2, r3, #8
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	609a      	str	r2, [r3, #8]
}
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	2201      	movs	r2, #1
 8005f54:	fa02 f303 	lsl.w	r3, r2, r3
 8005f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a1a      	ldr	r2, [r3, #32]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	43db      	mvns	r3, r3
 8005f62:	401a      	ands	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1a      	ldr	r2, [r3, #32]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	fa01 f303 	lsl.w	r3, r1, r3
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d109      	bne.n	8005fb0 <HAL_TIMEx_PWMN_Start+0x24>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	bf14      	ite	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	2300      	moveq	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	e022      	b.n	8005ff6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d109      	bne.n	8005fca <HAL_TIMEx_PWMN_Start+0x3e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	bf14      	ite	ne
 8005fc2:	2301      	movne	r3, #1
 8005fc4:	2300      	moveq	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	e015      	b.n	8005ff6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d109      	bne.n	8005fe4 <HAL_TIMEx_PWMN_Start+0x58>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	bf14      	ite	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2300      	moveq	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e008      	b.n	8005ff6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e040      	b.n	8006080 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <HAL_TIMEx_PWMN_Start+0x82>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800600c:	e013      	b.n	8006036 <HAL_TIMEx_PWMN_Start+0xaa>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b04      	cmp	r3, #4
 8006012:	d104      	bne.n	800601e <HAL_TIMEx_PWMN_Start+0x92>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800601c:	e00b      	b.n	8006036 <HAL_TIMEx_PWMN_Start+0xaa>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b08      	cmp	r3, #8
 8006022:	d104      	bne.n	800602e <HAL_TIMEx_PWMN_Start+0xa2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800602c:	e003      	b.n	8006036 <HAL_TIMEx_PWMN_Start+0xaa>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2204      	movs	r2, #4
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f98c 	bl	800635c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006052:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_TIMEx_PWMN_Start+0xfc>)
 800605c:	4013      	ands	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b06      	cmp	r3, #6
 8006064:	d00b      	beq.n	800607e <HAL_TIMEx_PWMN_Start+0xf2>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606c:	d007      	beq.n	800607e <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	00010007 	.word	0x00010007

0800608c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e065      	b.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a2c      	ldr	r2, [pc, #176]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a2b      	ldr	r2, [pc, #172]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d108      	bne.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1b      	ldr	r2, [pc, #108]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d018      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611a:	d013      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a18      	ldr	r2, [pc, #96]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00e      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a17      	ldr	r2, [pc, #92]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d009      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a12      	ldr	r2, [pc, #72]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a13      	ldr	r2, [pc, #76]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10c      	bne.n	800615e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800614a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	4313      	orrs	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40013400 	.word	0x40013400
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40014000 	.word	0x40014000

08006190 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e087      	b.n	80062bc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	041b      	lsls	r3, r3, #16
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a27      	ldr	r2, [pc, #156]	; (80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d004      	beq.n	800623a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a25      	ldr	r2, [pc, #148]	; (80062cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d106      	bne.n	8006248 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1e      	ldr	r2, [pc, #120]	; (80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d126      	bne.n	80062aa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	051b      	lsls	r3, r3, #20
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a0e      	ldr	r2, [pc, #56]	; (80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a0d      	ldr	r2, [pc, #52]	; (80062cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d106      	bne.n	80062aa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	40013400 	.word	0x40013400

080062d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	2204      	movs	r2, #4
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1a      	ldr	r2, [r3, #32]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	43db      	mvns	r3, r3
 800637e:	401a      	ands	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1a      	ldr	r2, [r3, #32]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	fa01 f303 	lsl.w	r3, r1, r3
 8006394:	431a      	orrs	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e042      	b.n	800643e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fb f8e4 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	; 0x24
 80063d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa81 	bl	80068f0 <UART_SetConfig>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e022      	b.n	800643e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 fc2f 	bl	8007c64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006414:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006424:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fcb6 	bl	8007da8 <UART_CheckIdleState>
 800643c:	4603      	mov	r3, r0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645c:	2b20      	cmp	r3, #32
 800645e:	f040 80bc 	bne.w	80065da <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_UART_Receive_IT+0x26>
 8006468:	88fb      	ldrh	r3, [r7, #6]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e0b4      	b.n	80065dc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_UART_Receive_IT+0x38>
 800647c:	2302      	movs	r3, #2
 800647e:	e0ad      	b.n	80065dc <HAL_UART_Receive_IT+0x194>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	88fa      	ldrh	r2, [r7, #6]
 800649a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ac:	d10e      	bne.n	80064cc <HAL_UART_Receive_IT+0x84>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <HAL_UART_Receive_IT+0x7a>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064c0:	e02d      	b.n	800651e <HAL_UART_Receive_IT+0xd6>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ca:	e028      	b.n	800651e <HAL_UART_Receive_IT+0xd6>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10d      	bne.n	80064f0 <HAL_UART_Receive_IT+0xa8>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <HAL_UART_Receive_IT+0x9e>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	22ff      	movs	r2, #255	; 0xff
 80064e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064e4:	e01b      	b.n	800651e <HAL_UART_Receive_IT+0xd6>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	227f      	movs	r2, #127	; 0x7f
 80064ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ee:	e016      	b.n	800651e <HAL_UART_Receive_IT+0xd6>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064f8:	d10d      	bne.n	8006516 <HAL_UART_Receive_IT+0xce>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <HAL_UART_Receive_IT+0xc4>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	227f      	movs	r2, #127	; 0x7f
 8006506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800650a:	e008      	b.n	800651e <HAL_UART_Receive_IT+0xd6>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	223f      	movs	r2, #63	; 0x3f
 8006510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006514:	e003      	b.n	800651e <HAL_UART_Receive_IT+0xd6>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2222      	movs	r2, #34	; 0x22
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006546:	d12a      	bne.n	800659e <HAL_UART_Receive_IT+0x156>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800654e:	88fa      	ldrh	r2, [r7, #6]
 8006550:	429a      	cmp	r2, r3
 8006552:	d324      	bcc.n	800659e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	d107      	bne.n	800656e <HAL_UART_Receive_IT+0x126>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a1f      	ldr	r2, [pc, #124]	; (80065e8 <HAL_UART_Receive_IT+0x1a0>)
 800656a:	66da      	str	r2, [r3, #108]	; 0x6c
 800656c:	e002      	b.n	8006574 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a1e      	ldr	r2, [pc, #120]	; (80065ec <HAL_UART_Receive_IT+0x1a4>)
 8006572:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800658a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800659a:	609a      	str	r2, [r3, #8]
 800659c:	e01b      	b.n	80065d6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a6:	d107      	bne.n	80065b8 <HAL_UART_Receive_IT+0x170>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <HAL_UART_Receive_IT+0x1a8>)
 80065b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80065b6:	e002      	b.n	80065be <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a0e      	ldr	r2, [pc, #56]	; (80065f4 <HAL_UART_Receive_IT+0x1ac>)
 80065bc:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80065d4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	080081d1 	.word	0x080081d1
 80065ec:	080080c9 	.word	0x080080c9
 80065f0:	0800801d 	.word	0x0800801d
 80065f4:	08007f73 	.word	0x08007f73

080065f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d118      	bne.n	8006658 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d013      	beq.n	8006658 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 812e 	beq.w	80068aa <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
      }
      return;
 8006656:	e128      	b.n	80068aa <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 80d1 	beq.w	8006802 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4b96      	ldr	r3, [pc, #600]	; (80068bc <HAL_UART_IRQHandler+0x2c4>)
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80c6 	beq.w	8006802 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d010      	beq.n	80066a2 <HAL_UART_IRQHandler+0xaa>
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2201      	movs	r2, #1
 8006690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006698:	f043 0201 	orr.w	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d010      	beq.n	80066ce <HAL_UART_IRQHandler+0xd6>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2202      	movs	r2, #2
 80066bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	f043 0204 	orr.w	r2, r3, #4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d010      	beq.n	80066fa <HAL_UART_IRQHandler+0x102>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2204      	movs	r2, #4
 80066e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f0:	f043 0202 	orr.w	r2, r3, #2
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d015      	beq.n	8006730 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4b6a      	ldr	r3, [pc, #424]	; (80068bc <HAL_UART_IRQHandler+0x2c4>)
 8006712:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2208      	movs	r2, #8
 800671e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006726:	f043 0208 	orr.w	r2, r3, #8
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 80b9 	beq.w	80068ae <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d011      	beq.n	800676a <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d004      	beq.n	800678a <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006786:	2b00      	cmp	r3, #0
 8006788:	d031      	beq.n	80067ee <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 fb9e 	bl	8007ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d123      	bne.n	80067e6 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d013      	beq.n	80067de <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ba:	4a41      	ldr	r2, [pc, #260]	; (80068c0 <HAL_UART_IRQHandler+0x2c8>)
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fc feb9 	bl	800353a <HAL_DMA_Abort_IT>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d017      	beq.n	80067fe <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80067d8:	4610      	mov	r0, r2
 80067da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067dc:	e00f      	b.n	80067fe <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f87a 	bl	80068d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e4:	e00b      	b.n	80067fe <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f876 	bl	80068d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ec:	e007      	b.n	80067fe <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f872 	bl	80068d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80067fc:	e057      	b.n	80068ae <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fe:	bf00      	nop
    return;
 8006800:	e055      	b.n	80068ae <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00d      	beq.n	8006828 <HAL_UART_IRQHandler+0x230>
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800681e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fd59 	bl	80082d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006826:	e045      	b.n	80068b4 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682e:	2b00      	cmp	r3, #0
 8006830:	d012      	beq.n	8006858 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d008      	beq.n	8006858 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	2b00      	cmp	r3, #0
 800684c:	d031      	beq.n	80068b2 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
    }
    return;
 8006856:	e02c      	b.n	80068b2 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d008      	beq.n	8006874 <HAL_UART_IRQHandler+0x27c>
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 fb66 	bl	8007f3e <UART_EndTransmit_IT>
    return;
 8006872:	e01f      	b.n	80068b4 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_UART_IRQHandler+0x298>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f001 fd39 	bl	8008300 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800688e:	e011      	b.n	80068b4 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <HAL_UART_IRQHandler+0x2bc>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	2b00      	cmp	r3, #0
 800689e:	da09      	bge.n	80068b4 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fd23 	bl	80082ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068a6:	bf00      	nop
 80068a8:	e004      	b.n	80068b4 <HAL_UART_IRQHandler+0x2bc>
      return;
 80068aa:	bf00      	nop
 80068ac:	e002      	b.n	80068b4 <HAL_UART_IRQHandler+0x2bc>
    return;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_UART_IRQHandler+0x2bc>
    return;
 80068b2:	bf00      	nop
  }
}
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	10000001 	.word	0x10000001
 80068c0:	08007f13 	.word	0x08007f13

080068c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	0000      	movs	r0, r0
	...

080068f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80068f4:	b08a      	sub	sp, #40	; 0x28
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4313      	orrs	r3, r2
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006924:	4313      	orrs	r3, r2
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4ba4      	ldr	r3, [pc, #656]	; (8006bc0 <UART_SetConfig+0x2d0>)
 8006930:	4013      	ands	r3, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006938:	430b      	orrs	r3, r1
 800693a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a99      	ldr	r2, [pc, #612]	; (8006bc4 <UART_SetConfig+0x2d4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006968:	4313      	orrs	r3, r2
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006976:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006980:	430b      	orrs	r3, r1
 8006982:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	f023 010f 	bic.w	r1, r3, #15
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a8a      	ldr	r2, [pc, #552]	; (8006bc8 <UART_SetConfig+0x2d8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d126      	bne.n	80069f2 <UART_SetConfig+0x102>
 80069a4:	4b89      	ldr	r3, [pc, #548]	; (8006bcc <UART_SetConfig+0x2dc>)
 80069a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d81a      	bhi.n	80069e8 <UART_SetConfig+0xf8>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0xc8>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069c9 	.word	0x080069c9
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	080069d1 	.word	0x080069d1
 80069c4:	080069e1 	.word	0x080069e1
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ce:	e0d6      	b.n	8006b7e <UART_SetConfig+0x28e>
 80069d0:	2302      	movs	r3, #2
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e0d2      	b.n	8006b7e <UART_SetConfig+0x28e>
 80069d8:	2304      	movs	r3, #4
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e0ce      	b.n	8006b7e <UART_SetConfig+0x28e>
 80069e0:	2308      	movs	r3, #8
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e0ca      	b.n	8006b7e <UART_SetConfig+0x28e>
 80069e8:	2310      	movs	r3, #16
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	bf00      	nop
 80069f0:	e0c5      	b.n	8006b7e <UART_SetConfig+0x28e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a76      	ldr	r2, [pc, #472]	; (8006bd0 <UART_SetConfig+0x2e0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d138      	bne.n	8006a6e <UART_SetConfig+0x17e>
 80069fc:	4b73      	ldr	r3, [pc, #460]	; (8006bcc <UART_SetConfig+0x2dc>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a02:	f003 030c 	and.w	r3, r3, #12
 8006a06:	2b0c      	cmp	r3, #12
 8006a08:	d82c      	bhi.n	8006a64 <UART_SetConfig+0x174>
 8006a0a:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <UART_SetConfig+0x120>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a45 	.word	0x08006a45
 8006a14:	08006a65 	.word	0x08006a65
 8006a18:	08006a65 	.word	0x08006a65
 8006a1c:	08006a65 	.word	0x08006a65
 8006a20:	08006a55 	.word	0x08006a55
 8006a24:	08006a65 	.word	0x08006a65
 8006a28:	08006a65 	.word	0x08006a65
 8006a2c:	08006a65 	.word	0x08006a65
 8006a30:	08006a4d 	.word	0x08006a4d
 8006a34:	08006a65 	.word	0x08006a65
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	08006a65 	.word	0x08006a65
 8006a40:	08006a5d 	.word	0x08006a5d
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e098      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a52:	e094      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5a:	e090      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a62:	e08c      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6a:	bf00      	nop
 8006a6c:	e087      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a58      	ldr	r2, [pc, #352]	; (8006bd4 <UART_SetConfig+0x2e4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d125      	bne.n	8006ac4 <UART_SetConfig+0x1d4>
 8006a78:	4b54      	ldr	r3, [pc, #336]	; (8006bcc <UART_SetConfig+0x2dc>)
 8006a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a82:	2b10      	cmp	r3, #16
 8006a84:	d011      	beq.n	8006aaa <UART_SetConfig+0x1ba>
 8006a86:	2b10      	cmp	r3, #16
 8006a88:	d802      	bhi.n	8006a90 <UART_SetConfig+0x1a0>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <UART_SetConfig+0x1aa>
 8006a8e:	e014      	b.n	8006aba <UART_SetConfig+0x1ca>
 8006a90:	2b20      	cmp	r3, #32
 8006a92:	d006      	beq.n	8006aa2 <UART_SetConfig+0x1b2>
 8006a94:	2b30      	cmp	r3, #48	; 0x30
 8006a96:	d00c      	beq.n	8006ab2 <UART_SetConfig+0x1c2>
 8006a98:	e00f      	b.n	8006aba <UART_SetConfig+0x1ca>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa0:	e06d      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa8:	e069      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006aaa:	2304      	movs	r3, #4
 8006aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab0:	e065      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab8:	e061      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006aba:	2310      	movs	r3, #16
 8006abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac0:	bf00      	nop
 8006ac2:	e05c      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a43      	ldr	r2, [pc, #268]	; (8006bd8 <UART_SetConfig+0x2e8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d125      	bne.n	8006b1a <UART_SetConfig+0x22a>
 8006ace:	4b3f      	ldr	r3, [pc, #252]	; (8006bcc <UART_SetConfig+0x2dc>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d011      	beq.n	8006b00 <UART_SetConfig+0x210>
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d802      	bhi.n	8006ae6 <UART_SetConfig+0x1f6>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <UART_SetConfig+0x200>
 8006ae4:	e014      	b.n	8006b10 <UART_SetConfig+0x220>
 8006ae6:	2b80      	cmp	r3, #128	; 0x80
 8006ae8:	d006      	beq.n	8006af8 <UART_SetConfig+0x208>
 8006aea:	2bc0      	cmp	r3, #192	; 0xc0
 8006aec:	d00c      	beq.n	8006b08 <UART_SetConfig+0x218>
 8006aee:	e00f      	b.n	8006b10 <UART_SetConfig+0x220>
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	e042      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006af8:	2302      	movs	r3, #2
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afe:	e03e      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006b00:	2304      	movs	r3, #4
 8006b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b06:	e03a      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006b08:	2308      	movs	r3, #8
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0e:	e036      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b16:	bf00      	nop
 8006b18:	e031      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a29      	ldr	r2, [pc, #164]	; (8006bc4 <UART_SetConfig+0x2d4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d129      	bne.n	8006b78 <UART_SetConfig+0x288>
 8006b24:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <UART_SetConfig+0x2dc>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b32:	d014      	beq.n	8006b5e <UART_SetConfig+0x26e>
 8006b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b38:	d802      	bhi.n	8006b40 <UART_SetConfig+0x250>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <UART_SetConfig+0x25e>
 8006b3e:	e016      	b.n	8006b6e <UART_SetConfig+0x27e>
 8006b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b44:	d007      	beq.n	8006b56 <UART_SetConfig+0x266>
 8006b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b4a:	d00c      	beq.n	8006b66 <UART_SetConfig+0x276>
 8006b4c:	e00f      	b.n	8006b6e <UART_SetConfig+0x27e>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b54:	e013      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006b56:	2302      	movs	r3, #2
 8006b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5c:	e00f      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006b5e:	2304      	movs	r3, #4
 8006b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b64:	e00b      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006b66:	2308      	movs	r3, #8
 8006b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6c:	e007      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006b6e:	2310      	movs	r3, #16
 8006b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b74:	bf00      	nop
 8006b76:	e002      	b.n	8006b7e <UART_SetConfig+0x28e>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <UART_SetConfig+0x2d4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	f040 842e 	bne.w	80073e6 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	f200 8169 	bhi.w	8006e66 <UART_SetConfig+0x576>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0x2ac>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bdd 	.word	0x08006bdd
 8006ba0:	08006e67 	.word	0x08006e67
 8006ba4:	08006c7f 	.word	0x08006c7f
 8006ba8:	08006e67 	.word	0x08006e67
 8006bac:	08006d17 	.word	0x08006d17
 8006bb0:	08006e67 	.word	0x08006e67
 8006bb4:	08006e67 	.word	0x08006e67
 8006bb8:	08006e67 	.word	0x08006e67
 8006bbc:	08006db9 	.word	0x08006db9
 8006bc0:	cfff69f3 	.word	0xcfff69f3
 8006bc4:	40008000 	.word	0x40008000
 8006bc8:	40013800 	.word	0x40013800
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	40004400 	.word	0x40004400
 8006bd4:	40004800 	.word	0x40004800
 8006bd8:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006bdc:	f7fd fce4 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8006be0:	4602      	mov	r2, r0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d044      	beq.n	8006c74 <UART_SetConfig+0x384>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d03e      	beq.n	8006c70 <UART_SetConfig+0x380>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d038      	beq.n	8006c6c <UART_SetConfig+0x37c>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d032      	beq.n	8006c68 <UART_SetConfig+0x378>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d02c      	beq.n	8006c64 <UART_SetConfig+0x374>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	d026      	beq.n	8006c60 <UART_SetConfig+0x370>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	2b06      	cmp	r3, #6
 8006c18:	d020      	beq.n	8006c5c <UART_SetConfig+0x36c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	2b07      	cmp	r3, #7
 8006c20:	d01a      	beq.n	8006c58 <UART_SetConfig+0x368>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d014      	beq.n	8006c54 <UART_SetConfig+0x364>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	2b09      	cmp	r3, #9
 8006c30:	d00e      	beq.n	8006c50 <UART_SetConfig+0x360>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	2b0a      	cmp	r3, #10
 8006c38:	d008      	beq.n	8006c4c <UART_SetConfig+0x35c>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	2b0b      	cmp	r3, #11
 8006c40:	d102      	bne.n	8006c48 <UART_SetConfig+0x358>
 8006c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c46:	e016      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e014      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	e012      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	e010      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c54:	2320      	movs	r3, #32
 8006c56:	e00e      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	e00c      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c5c:	230c      	movs	r3, #12
 8006c5e:	e00a      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c60:	230a      	movs	r3, #10
 8006c62:	e008      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c64:	2308      	movs	r3, #8
 8006c66:	e006      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c68:	2306      	movs	r3, #6
 8006c6a:	e004      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c6c:	2304      	movs	r3, #4
 8006c6e:	e002      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e000      	b.n	8006c76 <UART_SetConfig+0x386>
 8006c74:	2301      	movs	r3, #1
 8006c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7a:	617b      	str	r3, [r7, #20]
        break;
 8006c7c:	e0f6      	b.n	8006e6c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d044      	beq.n	8006d10 <UART_SetConfig+0x420>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d03e      	beq.n	8006d0c <UART_SetConfig+0x41c>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d038      	beq.n	8006d08 <UART_SetConfig+0x418>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d032      	beq.n	8006d04 <UART_SetConfig+0x414>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d02c      	beq.n	8006d00 <UART_SetConfig+0x410>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	d026      	beq.n	8006cfc <UART_SetConfig+0x40c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	2b06      	cmp	r3, #6
 8006cb4:	d020      	beq.n	8006cf8 <UART_SetConfig+0x408>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	d01a      	beq.n	8006cf4 <UART_SetConfig+0x404>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d014      	beq.n	8006cf0 <UART_SetConfig+0x400>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	d00e      	beq.n	8006cec <UART_SetConfig+0x3fc>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	2b0a      	cmp	r3, #10
 8006cd4:	d008      	beq.n	8006ce8 <UART_SetConfig+0x3f8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	2b0b      	cmp	r3, #11
 8006cdc:	d102      	bne.n	8006ce4 <UART_SetConfig+0x3f4>
 8006cde:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006ce2:	e016      	b.n	8006d12 <UART_SetConfig+0x422>
 8006ce4:	4ba1      	ldr	r3, [pc, #644]	; (8006f6c <UART_SetConfig+0x67c>)
 8006ce6:	e014      	b.n	8006d12 <UART_SetConfig+0x422>
 8006ce8:	4ba1      	ldr	r3, [pc, #644]	; (8006f70 <UART_SetConfig+0x680>)
 8006cea:	e012      	b.n	8006d12 <UART_SetConfig+0x422>
 8006cec:	4ba1      	ldr	r3, [pc, #644]	; (8006f74 <UART_SetConfig+0x684>)
 8006cee:	e010      	b.n	8006d12 <UART_SetConfig+0x422>
 8006cf0:	4ba1      	ldr	r3, [pc, #644]	; (8006f78 <UART_SetConfig+0x688>)
 8006cf2:	e00e      	b.n	8006d12 <UART_SetConfig+0x422>
 8006cf4:	4ba1      	ldr	r3, [pc, #644]	; (8006f7c <UART_SetConfig+0x68c>)
 8006cf6:	e00c      	b.n	8006d12 <UART_SetConfig+0x422>
 8006cf8:	4ba1      	ldr	r3, [pc, #644]	; (8006f80 <UART_SetConfig+0x690>)
 8006cfa:	e00a      	b.n	8006d12 <UART_SetConfig+0x422>
 8006cfc:	4ba1      	ldr	r3, [pc, #644]	; (8006f84 <UART_SetConfig+0x694>)
 8006cfe:	e008      	b.n	8006d12 <UART_SetConfig+0x422>
 8006d00:	4ba1      	ldr	r3, [pc, #644]	; (8006f88 <UART_SetConfig+0x698>)
 8006d02:	e006      	b.n	8006d12 <UART_SetConfig+0x422>
 8006d04:	4ba1      	ldr	r3, [pc, #644]	; (8006f8c <UART_SetConfig+0x69c>)
 8006d06:	e004      	b.n	8006d12 <UART_SetConfig+0x422>
 8006d08:	4ba1      	ldr	r3, [pc, #644]	; (8006f90 <UART_SetConfig+0x6a0>)
 8006d0a:	e002      	b.n	8006d12 <UART_SetConfig+0x422>
 8006d0c:	4ba1      	ldr	r3, [pc, #644]	; (8006f94 <UART_SetConfig+0x6a4>)
 8006d0e:	e000      	b.n	8006d12 <UART_SetConfig+0x422>
 8006d10:	4b96      	ldr	r3, [pc, #600]	; (8006f6c <UART_SetConfig+0x67c>)
 8006d12:	617b      	str	r3, [r7, #20]
        break;
 8006d14:	e0aa      	b.n	8006e6c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d16:	f7fd fbd9 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d044      	beq.n	8006dae <UART_SetConfig+0x4be>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d03e      	beq.n	8006daa <UART_SetConfig+0x4ba>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d038      	beq.n	8006da6 <UART_SetConfig+0x4b6>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d032      	beq.n	8006da2 <UART_SetConfig+0x4b2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d02c      	beq.n	8006d9e <UART_SetConfig+0x4ae>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	2b05      	cmp	r3, #5
 8006d4a:	d026      	beq.n	8006d9a <UART_SetConfig+0x4aa>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	2b06      	cmp	r3, #6
 8006d52:	d020      	beq.n	8006d96 <UART_SetConfig+0x4a6>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	2b07      	cmp	r3, #7
 8006d5a:	d01a      	beq.n	8006d92 <UART_SetConfig+0x4a2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d014      	beq.n	8006d8e <UART_SetConfig+0x49e>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	2b09      	cmp	r3, #9
 8006d6a:	d00e      	beq.n	8006d8a <UART_SetConfig+0x49a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	2b0a      	cmp	r3, #10
 8006d72:	d008      	beq.n	8006d86 <UART_SetConfig+0x496>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	2b0b      	cmp	r3, #11
 8006d7a:	d102      	bne.n	8006d82 <UART_SetConfig+0x492>
 8006d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d80:	e016      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e014      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006d86:	2380      	movs	r3, #128	; 0x80
 8006d88:	e012      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006d8a:	2340      	movs	r3, #64	; 0x40
 8006d8c:	e010      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006d8e:	2320      	movs	r3, #32
 8006d90:	e00e      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006d92:	2310      	movs	r3, #16
 8006d94:	e00c      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006d96:	230c      	movs	r3, #12
 8006d98:	e00a      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006d9a:	230a      	movs	r3, #10
 8006d9c:	e008      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006d9e:	2308      	movs	r3, #8
 8006da0:	e006      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006da2:	2306      	movs	r3, #6
 8006da4:	e004      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006da6:	2304      	movs	r3, #4
 8006da8:	e002      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e000      	b.n	8006db0 <UART_SetConfig+0x4c0>
 8006dae:	2301      	movs	r3, #1
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]
        break;
 8006db6:	e059      	b.n	8006e6c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d04e      	beq.n	8006e5e <UART_SetConfig+0x56e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d047      	beq.n	8006e58 <UART_SetConfig+0x568>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d040      	beq.n	8006e52 <UART_SetConfig+0x562>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d039      	beq.n	8006e4c <UART_SetConfig+0x55c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d032      	beq.n	8006e46 <UART_SetConfig+0x556>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	2b05      	cmp	r3, #5
 8006de6:	d02b      	beq.n	8006e40 <UART_SetConfig+0x550>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	2b06      	cmp	r3, #6
 8006dee:	d024      	beq.n	8006e3a <UART_SetConfig+0x54a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	2b07      	cmp	r3, #7
 8006df6:	d01d      	beq.n	8006e34 <UART_SetConfig+0x544>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d016      	beq.n	8006e2e <UART_SetConfig+0x53e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b09      	cmp	r3, #9
 8006e06:	d00f      	beq.n	8006e28 <UART_SetConfig+0x538>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	2b0a      	cmp	r3, #10
 8006e0e:	d008      	beq.n	8006e22 <UART_SetConfig+0x532>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	2b0b      	cmp	r3, #11
 8006e16:	d101      	bne.n	8006e1c <UART_SetConfig+0x52c>
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	e022      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e20:	e01f      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e26:	e01c      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2c:	e019      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e32:	e016      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e38:	e013      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e3a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006e3e:	e010      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e40:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006e44:	e00d      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e4a:	e00a      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e4c:	f241 5355 	movw	r3, #5461	; 0x1555
 8006e50:	e007      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e56:	e004      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e5c:	e001      	b.n	8006e62 <UART_SetConfig+0x572>
 8006e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e62:	617b      	str	r3, [r7, #20]
        break;
 8006e64:	e002      	b.n	8006e6c <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	76fb      	strb	r3, [r7, #27]
        break;
 8006e6a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 86cd 	beq.w	8007c0e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	4413      	add	r3, r2
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d305      	bcc.n	8006e90 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d903      	bls.n	8006e98 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	76fb      	strb	r3, [r7, #27]
 8006e94:	f000 bebb 	b.w	8007c0e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8006e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	f200 828d 	bhi.w	80073bc <UART_SetConfig+0xacc>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x5b8>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	080073bd 	.word	0x080073bd
 8006eb0:	08007037 	.word	0x08007037
 8006eb4:	080073bd 	.word	0x080073bd
 8006eb8:	0800712d 	.word	0x0800712d
 8006ebc:	080073bd 	.word	0x080073bd
 8006ec0:	080073bd 	.word	0x080073bd
 8006ec4:	080073bd 	.word	0x080073bd
 8006ec8:	0800726b 	.word	0x0800726b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f7fd fb6c 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8006ed0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f04f 0100 	mov.w	r1, #0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d07d      	beq.n	8006fde <UART_SetConfig+0x6ee>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d074      	beq.n	8006fd4 <UART_SetConfig+0x6e4>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d06b      	beq.n	8006fca <UART_SetConfig+0x6da>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d062      	beq.n	8006fc0 <UART_SetConfig+0x6d0>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d059      	beq.n	8006fb6 <UART_SetConfig+0x6c6>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b05      	cmp	r3, #5
 8006f08:	d050      	beq.n	8006fac <UART_SetConfig+0x6bc>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b06      	cmp	r3, #6
 8006f10:	d047      	beq.n	8006fa2 <UART_SetConfig+0x6b2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b07      	cmp	r3, #7
 8006f18:	d03e      	beq.n	8006f98 <UART_SetConfig+0x6a8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d01f      	beq.n	8006f62 <UART_SetConfig+0x672>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d016      	beq.n	8006f58 <UART_SetConfig+0x668>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b0a      	cmp	r3, #10
 8006f30:	d00d      	beq.n	8006f4e <UART_SetConfig+0x65e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b0b      	cmp	r3, #11
 8006f38:	d104      	bne.n	8006f44 <UART_SetConfig+0x654>
 8006f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f3e:	f04f 0400 	mov.w	r4, #0
 8006f42:	e050      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006f44:	f04f 0301 	mov.w	r3, #1
 8006f48:	f04f 0400 	mov.w	r4, #0
 8006f4c:	e04b      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006f4e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006f52:	f04f 0400 	mov.w	r4, #0
 8006f56:	e046      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006f58:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006f5c:	f04f 0400 	mov.w	r4, #0
 8006f60:	e041      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006f62:	f04f 0320 	mov.w	r3, #32
 8006f66:	f04f 0400 	mov.w	r4, #0
 8006f6a:	e03c      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006f6c:	00f42400 	.word	0x00f42400
 8006f70:	0001e848 	.word	0x0001e848
 8006f74:	0003d090 	.word	0x0003d090
 8006f78:	0007a120 	.word	0x0007a120
 8006f7c:	000f4240 	.word	0x000f4240
 8006f80:	00145855 	.word	0x00145855
 8006f84:	00186a00 	.word	0x00186a00
 8006f88:	001e8480 	.word	0x001e8480
 8006f8c:	0028b0aa 	.word	0x0028b0aa
 8006f90:	003d0900 	.word	0x003d0900
 8006f94:	007a1200 	.word	0x007a1200
 8006f98:	f04f 0310 	mov.w	r3, #16
 8006f9c:	f04f 0400 	mov.w	r4, #0
 8006fa0:	e021      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006fa2:	f04f 030c 	mov.w	r3, #12
 8006fa6:	f04f 0400 	mov.w	r4, #0
 8006faa:	e01c      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006fac:	f04f 030a 	mov.w	r3, #10
 8006fb0:	f04f 0400 	mov.w	r4, #0
 8006fb4:	e017      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006fb6:	f04f 0308 	mov.w	r3, #8
 8006fba:	f04f 0400 	mov.w	r4, #0
 8006fbe:	e012      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006fc0:	f04f 0306 	mov.w	r3, #6
 8006fc4:	f04f 0400 	mov.w	r4, #0
 8006fc8:	e00d      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006fca:	f04f 0304 	mov.w	r3, #4
 8006fce:	f04f 0400 	mov.w	r4, #0
 8006fd2:	e008      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006fd4:	f04f 0302 	mov.w	r3, #2
 8006fd8:	f04f 0400 	mov.w	r4, #0
 8006fdc:	e003      	b.n	8006fe6 <UART_SetConfig+0x6f6>
 8006fde:	f04f 0301 	mov.w	r3, #1
 8006fe2:	f04f 0400 	mov.w	r4, #0
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4623      	mov	r3, r4
 8006fea:	f7f9 f915 	bl	8000218 <__aeabi_uldivmod>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	f04f 0400 	mov.w	r4, #0
 8006ffe:	0214      	lsls	r4, r2, #8
 8007000:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007004:	020b      	lsls	r3, r1, #8
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6852      	ldr	r2, [r2, #4]
 800700a:	0852      	lsrs	r2, r2, #1
 800700c:	4611      	mov	r1, r2
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	eb13 0b01 	adds.w	fp, r3, r1
 8007016:	eb44 0c02 	adc.w	ip, r4, r2
 800701a:	4658      	mov	r0, fp
 800701c:	4661      	mov	r1, ip
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f04f 0400 	mov.w	r4, #0
 8007026:	461a      	mov	r2, r3
 8007028:	4623      	mov	r3, r4
 800702a:	f7f9 f8f5 	bl	8000218 <__aeabi_uldivmod>
 800702e:	4603      	mov	r3, r0
 8007030:	460c      	mov	r4, r1
 8007032:	61fb      	str	r3, [r7, #28]
            break;
 8007034:	e1c5      	b.n	80073c2 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	2b00      	cmp	r3, #0
 800703c:	d05b      	beq.n	80070f6 <UART_SetConfig+0x806>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2b01      	cmp	r3, #1
 8007044:	d053      	beq.n	80070ee <UART_SetConfig+0x7fe>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	2b02      	cmp	r3, #2
 800704c:	d04b      	beq.n	80070e6 <UART_SetConfig+0x7f6>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	2b03      	cmp	r3, #3
 8007054:	d043      	beq.n	80070de <UART_SetConfig+0x7ee>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b04      	cmp	r3, #4
 800705c:	d03b      	beq.n	80070d6 <UART_SetConfig+0x7e6>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	2b05      	cmp	r3, #5
 8007064:	d033      	beq.n	80070ce <UART_SetConfig+0x7de>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	2b06      	cmp	r3, #6
 800706c:	d02b      	beq.n	80070c6 <UART_SetConfig+0x7d6>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b07      	cmp	r3, #7
 8007074:	d023      	beq.n	80070be <UART_SetConfig+0x7ce>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	2b08      	cmp	r3, #8
 800707c:	d01b      	beq.n	80070b6 <UART_SetConfig+0x7c6>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	2b09      	cmp	r3, #9
 8007084:	d013      	beq.n	80070ae <UART_SetConfig+0x7be>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	2b0a      	cmp	r3, #10
 800708c:	d00b      	beq.n	80070a6 <UART_SetConfig+0x7b6>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	2b0b      	cmp	r3, #11
 8007094:	d103      	bne.n	800709e <UART_SetConfig+0x7ae>
 8007096:	4bae      	ldr	r3, [pc, #696]	; (8007350 <UART_SetConfig+0xa60>)
 8007098:	f04f 0400 	mov.w	r4, #0
 800709c:	e02e      	b.n	80070fc <UART_SetConfig+0x80c>
 800709e:	4bad      	ldr	r3, [pc, #692]	; (8007354 <UART_SetConfig+0xa64>)
 80070a0:	f04f 0400 	mov.w	r4, #0
 80070a4:	e02a      	b.n	80070fc <UART_SetConfig+0x80c>
 80070a6:	4bac      	ldr	r3, [pc, #688]	; (8007358 <UART_SetConfig+0xa68>)
 80070a8:	f04f 0400 	mov.w	r4, #0
 80070ac:	e026      	b.n	80070fc <UART_SetConfig+0x80c>
 80070ae:	4bab      	ldr	r3, [pc, #684]	; (800735c <UART_SetConfig+0xa6c>)
 80070b0:	f04f 0400 	mov.w	r4, #0
 80070b4:	e022      	b.n	80070fc <UART_SetConfig+0x80c>
 80070b6:	4baa      	ldr	r3, [pc, #680]	; (8007360 <UART_SetConfig+0xa70>)
 80070b8:	f04f 0400 	mov.w	r4, #0
 80070bc:	e01e      	b.n	80070fc <UART_SetConfig+0x80c>
 80070be:	4ba9      	ldr	r3, [pc, #676]	; (8007364 <UART_SetConfig+0xa74>)
 80070c0:	f04f 0400 	mov.w	r4, #0
 80070c4:	e01a      	b.n	80070fc <UART_SetConfig+0x80c>
 80070c6:	a49e      	add	r4, pc, #632	; (adr r4, 8007340 <UART_SetConfig+0xa50>)
 80070c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80070cc:	e016      	b.n	80070fc <UART_SetConfig+0x80c>
 80070ce:	4ba6      	ldr	r3, [pc, #664]	; (8007368 <UART_SetConfig+0xa78>)
 80070d0:	f04f 0400 	mov.w	r4, #0
 80070d4:	e012      	b.n	80070fc <UART_SetConfig+0x80c>
 80070d6:	4ba5      	ldr	r3, [pc, #660]	; (800736c <UART_SetConfig+0xa7c>)
 80070d8:	f04f 0400 	mov.w	r4, #0
 80070dc:	e00e      	b.n	80070fc <UART_SetConfig+0x80c>
 80070de:	a49a      	add	r4, pc, #616	; (adr r4, 8007348 <UART_SetConfig+0xa58>)
 80070e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80070e4:	e00a      	b.n	80070fc <UART_SetConfig+0x80c>
 80070e6:	4ba2      	ldr	r3, [pc, #648]	; (8007370 <UART_SetConfig+0xa80>)
 80070e8:	f04f 0400 	mov.w	r4, #0
 80070ec:	e006      	b.n	80070fc <UART_SetConfig+0x80c>
 80070ee:	4ba1      	ldr	r3, [pc, #644]	; (8007374 <UART_SetConfig+0xa84>)
 80070f0:	f04f 0400 	mov.w	r4, #0
 80070f4:	e002      	b.n	80070fc <UART_SetConfig+0x80c>
 80070f6:	4b97      	ldr	r3, [pc, #604]	; (8007354 <UART_SetConfig+0xa64>)
 80070f8:	f04f 0400 	mov.w	r4, #0
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6852      	ldr	r2, [r2, #4]
 8007100:	0852      	lsrs	r2, r2, #1
 8007102:	4611      	mov	r1, r2
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	eb13 0b01 	adds.w	fp, r3, r1
 800710c:	eb44 0c02 	adc.w	ip, r4, r2
 8007110:	4658      	mov	r0, fp
 8007112:	4661      	mov	r1, ip
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f04f 0400 	mov.w	r4, #0
 800711c:	461a      	mov	r2, r3
 800711e:	4623      	mov	r3, r4
 8007120:	f7f9 f87a 	bl	8000218 <__aeabi_uldivmod>
 8007124:	4603      	mov	r3, r0
 8007126:	460c      	mov	r4, r1
 8007128:	61fb      	str	r3, [r7, #28]
            break;
 800712a:	e14a      	b.n	80073c2 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800712c:	f7fd f9ce 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8007130:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4618      	mov	r0, r3
 8007136:	f04f 0100 	mov.w	r1, #0
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d067      	beq.n	8007212 <UART_SetConfig+0x922>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	2b01      	cmp	r3, #1
 8007148:	d05e      	beq.n	8007208 <UART_SetConfig+0x918>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	2b02      	cmp	r3, #2
 8007150:	d055      	beq.n	80071fe <UART_SetConfig+0x90e>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	2b03      	cmp	r3, #3
 8007158:	d04c      	beq.n	80071f4 <UART_SetConfig+0x904>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	2b04      	cmp	r3, #4
 8007160:	d043      	beq.n	80071ea <UART_SetConfig+0x8fa>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	2b05      	cmp	r3, #5
 8007168:	d03a      	beq.n	80071e0 <UART_SetConfig+0x8f0>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	2b06      	cmp	r3, #6
 8007170:	d031      	beq.n	80071d6 <UART_SetConfig+0x8e6>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	2b07      	cmp	r3, #7
 8007178:	d028      	beq.n	80071cc <UART_SetConfig+0x8dc>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	2b08      	cmp	r3, #8
 8007180:	d01f      	beq.n	80071c2 <UART_SetConfig+0x8d2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	2b09      	cmp	r3, #9
 8007188:	d016      	beq.n	80071b8 <UART_SetConfig+0x8c8>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	2b0a      	cmp	r3, #10
 8007190:	d00d      	beq.n	80071ae <UART_SetConfig+0x8be>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	2b0b      	cmp	r3, #11
 8007198:	d104      	bne.n	80071a4 <UART_SetConfig+0x8b4>
 800719a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719e:	f04f 0400 	mov.w	r4, #0
 80071a2:	e03a      	b.n	800721a <UART_SetConfig+0x92a>
 80071a4:	f04f 0301 	mov.w	r3, #1
 80071a8:	f04f 0400 	mov.w	r4, #0
 80071ac:	e035      	b.n	800721a <UART_SetConfig+0x92a>
 80071ae:	f04f 0380 	mov.w	r3, #128	; 0x80
 80071b2:	f04f 0400 	mov.w	r4, #0
 80071b6:	e030      	b.n	800721a <UART_SetConfig+0x92a>
 80071b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80071bc:	f04f 0400 	mov.w	r4, #0
 80071c0:	e02b      	b.n	800721a <UART_SetConfig+0x92a>
 80071c2:	f04f 0320 	mov.w	r3, #32
 80071c6:	f04f 0400 	mov.w	r4, #0
 80071ca:	e026      	b.n	800721a <UART_SetConfig+0x92a>
 80071cc:	f04f 0310 	mov.w	r3, #16
 80071d0:	f04f 0400 	mov.w	r4, #0
 80071d4:	e021      	b.n	800721a <UART_SetConfig+0x92a>
 80071d6:	f04f 030c 	mov.w	r3, #12
 80071da:	f04f 0400 	mov.w	r4, #0
 80071de:	e01c      	b.n	800721a <UART_SetConfig+0x92a>
 80071e0:	f04f 030a 	mov.w	r3, #10
 80071e4:	f04f 0400 	mov.w	r4, #0
 80071e8:	e017      	b.n	800721a <UART_SetConfig+0x92a>
 80071ea:	f04f 0308 	mov.w	r3, #8
 80071ee:	f04f 0400 	mov.w	r4, #0
 80071f2:	e012      	b.n	800721a <UART_SetConfig+0x92a>
 80071f4:	f04f 0306 	mov.w	r3, #6
 80071f8:	f04f 0400 	mov.w	r4, #0
 80071fc:	e00d      	b.n	800721a <UART_SetConfig+0x92a>
 80071fe:	f04f 0304 	mov.w	r3, #4
 8007202:	f04f 0400 	mov.w	r4, #0
 8007206:	e008      	b.n	800721a <UART_SetConfig+0x92a>
 8007208:	f04f 0302 	mov.w	r3, #2
 800720c:	f04f 0400 	mov.w	r4, #0
 8007210:	e003      	b.n	800721a <UART_SetConfig+0x92a>
 8007212:	f04f 0301 	mov.w	r3, #1
 8007216:	f04f 0400 	mov.w	r4, #0
 800721a:	461a      	mov	r2, r3
 800721c:	4623      	mov	r3, r4
 800721e:	f7f8 fffb 	bl	8000218 <__aeabi_uldivmod>
 8007222:	4603      	mov	r3, r0
 8007224:	460c      	mov	r4, r1
 8007226:	4619      	mov	r1, r3
 8007228:	4622      	mov	r2, r4
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	f04f 0400 	mov.w	r4, #0
 8007232:	0214      	lsls	r4, r2, #8
 8007234:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007238:	020b      	lsls	r3, r1, #8
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6852      	ldr	r2, [r2, #4]
 800723e:	0852      	lsrs	r2, r2, #1
 8007240:	4611      	mov	r1, r2
 8007242:	f04f 0200 	mov.w	r2, #0
 8007246:	eb13 0b01 	adds.w	fp, r3, r1
 800724a:	eb44 0c02 	adc.w	ip, r4, r2
 800724e:	4658      	mov	r0, fp
 8007250:	4661      	mov	r1, ip
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f04f 0400 	mov.w	r4, #0
 800725a:	461a      	mov	r2, r3
 800725c:	4623      	mov	r3, r4
 800725e:	f7f8 ffdb 	bl	8000218 <__aeabi_uldivmod>
 8007262:	4603      	mov	r3, r0
 8007264:	460c      	mov	r4, r1
 8007266:	61fb      	str	r3, [r7, #28]
            break;
 8007268:	e0ab      	b.n	80073c2 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 8088 	beq.w	8007384 <UART_SetConfig+0xa94>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	2b01      	cmp	r3, #1
 800727a:	d05b      	beq.n	8007334 <UART_SetConfig+0xa44>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2b02      	cmp	r3, #2
 8007282:	d052      	beq.n	800732a <UART_SetConfig+0xa3a>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b03      	cmp	r3, #3
 800728a:	d04a      	beq.n	8007322 <UART_SetConfig+0xa32>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	2b04      	cmp	r3, #4
 8007292:	d041      	beq.n	8007318 <UART_SetConfig+0xa28>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	2b05      	cmp	r3, #5
 800729a:	d039      	beq.n	8007310 <UART_SetConfig+0xa20>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	2b06      	cmp	r3, #6
 80072a2:	d031      	beq.n	8007308 <UART_SetConfig+0xa18>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	2b07      	cmp	r3, #7
 80072aa:	d028      	beq.n	80072fe <UART_SetConfig+0xa0e>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d01f      	beq.n	80072f4 <UART_SetConfig+0xa04>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	2b09      	cmp	r3, #9
 80072ba:	d016      	beq.n	80072ea <UART_SetConfig+0x9fa>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	2b0a      	cmp	r3, #10
 80072c2:	d00d      	beq.n	80072e0 <UART_SetConfig+0x9f0>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	2b0b      	cmp	r3, #11
 80072ca:	d104      	bne.n	80072d6 <UART_SetConfig+0x9e6>
 80072cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d0:	f04f 0400 	mov.w	r4, #0
 80072d4:	e05a      	b.n	800738c <UART_SetConfig+0xa9c>
 80072d6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80072da:	f04f 0400 	mov.w	r4, #0
 80072de:	e055      	b.n	800738c <UART_SetConfig+0xa9c>
 80072e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072e4:	f04f 0400 	mov.w	r4, #0
 80072e8:	e050      	b.n	800738c <UART_SetConfig+0xa9c>
 80072ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072ee:	f04f 0400 	mov.w	r4, #0
 80072f2:	e04b      	b.n	800738c <UART_SetConfig+0xa9c>
 80072f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80072f8:	f04f 0400 	mov.w	r4, #0
 80072fc:	e046      	b.n	800738c <UART_SetConfig+0xa9c>
 80072fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007302:	f04f 0400 	mov.w	r4, #0
 8007306:	e041      	b.n	800738c <UART_SetConfig+0xa9c>
 8007308:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <UART_SetConfig+0xa88>)
 800730a:	f04f 0400 	mov.w	r4, #0
 800730e:	e03d      	b.n	800738c <UART_SetConfig+0xa9c>
 8007310:	4b1a      	ldr	r3, [pc, #104]	; (800737c <UART_SetConfig+0xa8c>)
 8007312:	f04f 0400 	mov.w	r4, #0
 8007316:	e039      	b.n	800738c <UART_SetConfig+0xa9c>
 8007318:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800731c:	f04f 0400 	mov.w	r4, #0
 8007320:	e034      	b.n	800738c <UART_SetConfig+0xa9c>
 8007322:	4b17      	ldr	r3, [pc, #92]	; (8007380 <UART_SetConfig+0xa90>)
 8007324:	f04f 0400 	mov.w	r4, #0
 8007328:	e030      	b.n	800738c <UART_SetConfig+0xa9c>
 800732a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800732e:	f04f 0400 	mov.w	r4, #0
 8007332:	e02b      	b.n	800738c <UART_SetConfig+0xa9c>
 8007334:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007338:	f04f 0400 	mov.w	r4, #0
 800733c:	e026      	b.n	800738c <UART_SetConfig+0xa9c>
 800733e:	bf00      	nop
 8007340:	14585500 	.word	0x14585500
 8007344:	00000000 	.word	0x00000000
 8007348:	28b0aa00 	.word	0x28b0aa00
 800734c:	00000000 	.word	0x00000000
 8007350:	00f42400 	.word	0x00f42400
 8007354:	f4240000 	.word	0xf4240000
 8007358:	01e84800 	.word	0x01e84800
 800735c:	03d09000 	.word	0x03d09000
 8007360:	07a12000 	.word	0x07a12000
 8007364:	0f424000 	.word	0x0f424000
 8007368:	186a0000 	.word	0x186a0000
 800736c:	1e848000 	.word	0x1e848000
 8007370:	3d090000 	.word	0x3d090000
 8007374:	7a120000 	.word	0x7a120000
 8007378:	000aaa00 	.word	0x000aaa00
 800737c:	000ccc00 	.word	0x000ccc00
 8007380:	00155500 	.word	0x00155500
 8007384:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007388:	f04f 0400 	mov.w	r4, #0
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6852      	ldr	r2, [r2, #4]
 8007390:	0852      	lsrs	r2, r2, #1
 8007392:	4611      	mov	r1, r2
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	eb13 0b01 	adds.w	fp, r3, r1
 800739c:	eb44 0c02 	adc.w	ip, r4, r2
 80073a0:	4658      	mov	r0, fp
 80073a2:	4661      	mov	r1, ip
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f04f 0400 	mov.w	r4, #0
 80073ac:	461a      	mov	r2, r3
 80073ae:	4623      	mov	r3, r4
 80073b0:	f7f8 ff32 	bl	8000218 <__aeabi_uldivmod>
 80073b4:	4603      	mov	r3, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	61fb      	str	r3, [r7, #28]
            break;
 80073ba:	e002      	b.n	80073c2 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	76fb      	strb	r3, [r7, #27]
            break;
 80073c0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073c8:	d309      	bcc.n	80073de <UART_SetConfig+0xaee>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d0:	d205      	bcs.n	80073de <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	60da      	str	r2, [r3, #12]
 80073da:	f000 bc18 	b.w	8007c0e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	76fb      	strb	r3, [r7, #27]
 80073e2:	f000 bc14 	b.w	8007c0e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ee:	f040 8204 	bne.w	80077fa <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 80073f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	f200 81df 	bhi.w	80077ba <UART_SetConfig+0xeca>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <UART_SetConfig+0xb14>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007429 	.word	0x08007429
 8007408:	080074e1 	.word	0x080074e1
 800740c:	08007599 	.word	0x08007599
 8007410:	080077bb 	.word	0x080077bb
 8007414:	08007641 	.word	0x08007641
 8007418:	080077bb 	.word	0x080077bb
 800741c:	080077bb 	.word	0x080077bb
 8007420:	080077bb 	.word	0x080077bb
 8007424:	080076f9 	.word	0x080076f9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fd f8be 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 800742c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d044      	beq.n	80074c0 <UART_SetConfig+0xbd0>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b01      	cmp	r3, #1
 800743c:	d03e      	beq.n	80074bc <UART_SetConfig+0xbcc>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b02      	cmp	r3, #2
 8007444:	d038      	beq.n	80074b8 <UART_SetConfig+0xbc8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	2b03      	cmp	r3, #3
 800744c:	d032      	beq.n	80074b4 <UART_SetConfig+0xbc4>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b04      	cmp	r3, #4
 8007454:	d02c      	beq.n	80074b0 <UART_SetConfig+0xbc0>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b05      	cmp	r3, #5
 800745c:	d026      	beq.n	80074ac <UART_SetConfig+0xbbc>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	2b06      	cmp	r3, #6
 8007464:	d020      	beq.n	80074a8 <UART_SetConfig+0xbb8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	2b07      	cmp	r3, #7
 800746c:	d01a      	beq.n	80074a4 <UART_SetConfig+0xbb4>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	2b08      	cmp	r3, #8
 8007474:	d014      	beq.n	80074a0 <UART_SetConfig+0xbb0>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	2b09      	cmp	r3, #9
 800747c:	d00e      	beq.n	800749c <UART_SetConfig+0xbac>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	2b0a      	cmp	r3, #10
 8007484:	d008      	beq.n	8007498 <UART_SetConfig+0xba8>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	2b0b      	cmp	r3, #11
 800748c:	d102      	bne.n	8007494 <UART_SetConfig+0xba4>
 800748e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007492:	e016      	b.n	80074c2 <UART_SetConfig+0xbd2>
 8007494:	2301      	movs	r3, #1
 8007496:	e014      	b.n	80074c2 <UART_SetConfig+0xbd2>
 8007498:	2380      	movs	r3, #128	; 0x80
 800749a:	e012      	b.n	80074c2 <UART_SetConfig+0xbd2>
 800749c:	2340      	movs	r3, #64	; 0x40
 800749e:	e010      	b.n	80074c2 <UART_SetConfig+0xbd2>
 80074a0:	2320      	movs	r3, #32
 80074a2:	e00e      	b.n	80074c2 <UART_SetConfig+0xbd2>
 80074a4:	2310      	movs	r3, #16
 80074a6:	e00c      	b.n	80074c2 <UART_SetConfig+0xbd2>
 80074a8:	230c      	movs	r3, #12
 80074aa:	e00a      	b.n	80074c2 <UART_SetConfig+0xbd2>
 80074ac:	230a      	movs	r3, #10
 80074ae:	e008      	b.n	80074c2 <UART_SetConfig+0xbd2>
 80074b0:	2308      	movs	r3, #8
 80074b2:	e006      	b.n	80074c2 <UART_SetConfig+0xbd2>
 80074b4:	2306      	movs	r3, #6
 80074b6:	e004      	b.n	80074c2 <UART_SetConfig+0xbd2>
 80074b8:	2304      	movs	r3, #4
 80074ba:	e002      	b.n	80074c2 <UART_SetConfig+0xbd2>
 80074bc:	2302      	movs	r3, #2
 80074be:	e000      	b.n	80074c2 <UART_SetConfig+0xbd2>
 80074c0:	2301      	movs	r3, #1
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c8:	005a      	lsls	r2, r3, #1
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	441a      	add	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074da:	b29b      	uxth	r3, r3
 80074dc:	61fb      	str	r3, [r7, #28]
        break;
 80074de:	e16f      	b.n	80077c0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074e0:	f7fd f878 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 80074e4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d044      	beq.n	8007578 <UART_SetConfig+0xc88>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d03e      	beq.n	8007574 <UART_SetConfig+0xc84>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d038      	beq.n	8007570 <UART_SetConfig+0xc80>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	2b03      	cmp	r3, #3
 8007504:	d032      	beq.n	800756c <UART_SetConfig+0xc7c>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	2b04      	cmp	r3, #4
 800750c:	d02c      	beq.n	8007568 <UART_SetConfig+0xc78>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b05      	cmp	r3, #5
 8007514:	d026      	beq.n	8007564 <UART_SetConfig+0xc74>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	2b06      	cmp	r3, #6
 800751c:	d020      	beq.n	8007560 <UART_SetConfig+0xc70>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b07      	cmp	r3, #7
 8007524:	d01a      	beq.n	800755c <UART_SetConfig+0xc6c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	2b08      	cmp	r3, #8
 800752c:	d014      	beq.n	8007558 <UART_SetConfig+0xc68>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	2b09      	cmp	r3, #9
 8007534:	d00e      	beq.n	8007554 <UART_SetConfig+0xc64>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2b0a      	cmp	r3, #10
 800753c:	d008      	beq.n	8007550 <UART_SetConfig+0xc60>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	2b0b      	cmp	r3, #11
 8007544:	d102      	bne.n	800754c <UART_SetConfig+0xc5c>
 8007546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800754a:	e016      	b.n	800757a <UART_SetConfig+0xc8a>
 800754c:	2301      	movs	r3, #1
 800754e:	e014      	b.n	800757a <UART_SetConfig+0xc8a>
 8007550:	2380      	movs	r3, #128	; 0x80
 8007552:	e012      	b.n	800757a <UART_SetConfig+0xc8a>
 8007554:	2340      	movs	r3, #64	; 0x40
 8007556:	e010      	b.n	800757a <UART_SetConfig+0xc8a>
 8007558:	2320      	movs	r3, #32
 800755a:	e00e      	b.n	800757a <UART_SetConfig+0xc8a>
 800755c:	2310      	movs	r3, #16
 800755e:	e00c      	b.n	800757a <UART_SetConfig+0xc8a>
 8007560:	230c      	movs	r3, #12
 8007562:	e00a      	b.n	800757a <UART_SetConfig+0xc8a>
 8007564:	230a      	movs	r3, #10
 8007566:	e008      	b.n	800757a <UART_SetConfig+0xc8a>
 8007568:	2308      	movs	r3, #8
 800756a:	e006      	b.n	800757a <UART_SetConfig+0xc8a>
 800756c:	2306      	movs	r3, #6
 800756e:	e004      	b.n	800757a <UART_SetConfig+0xc8a>
 8007570:	2304      	movs	r3, #4
 8007572:	e002      	b.n	800757a <UART_SetConfig+0xc8a>
 8007574:	2302      	movs	r3, #2
 8007576:	e000      	b.n	800757a <UART_SetConfig+0xc8a>
 8007578:	2301      	movs	r3, #1
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007580:	005a      	lsls	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	441a      	add	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007592:	b29b      	uxth	r3, r3
 8007594:	61fb      	str	r3, [r7, #28]
        break;
 8007596:	e113      	b.n	80077c0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	d043      	beq.n	8007628 <UART_SetConfig+0xd38>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d03d      	beq.n	8007624 <UART_SetConfig+0xd34>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d037      	beq.n	8007620 <UART_SetConfig+0xd30>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d031      	beq.n	800761c <UART_SetConfig+0xd2c>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d02b      	beq.n	8007618 <UART_SetConfig+0xd28>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	2b05      	cmp	r3, #5
 80075c6:	d025      	beq.n	8007614 <UART_SetConfig+0xd24>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	d01f      	beq.n	8007610 <UART_SetConfig+0xd20>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	2b07      	cmp	r3, #7
 80075d6:	d019      	beq.n	800760c <UART_SetConfig+0xd1c>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d013      	beq.n	8007608 <UART_SetConfig+0xd18>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	d00d      	beq.n	8007604 <UART_SetConfig+0xd14>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	2b0a      	cmp	r3, #10
 80075ee:	d007      	beq.n	8007600 <UART_SetConfig+0xd10>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2b0b      	cmp	r3, #11
 80075f6:	d101      	bne.n	80075fc <UART_SetConfig+0xd0c>
 80075f8:	4b8d      	ldr	r3, [pc, #564]	; (8007830 <UART_SetConfig+0xf40>)
 80075fa:	e016      	b.n	800762a <UART_SetConfig+0xd3a>
 80075fc:	4b8d      	ldr	r3, [pc, #564]	; (8007834 <UART_SetConfig+0xf44>)
 80075fe:	e014      	b.n	800762a <UART_SetConfig+0xd3a>
 8007600:	4b8d      	ldr	r3, [pc, #564]	; (8007838 <UART_SetConfig+0xf48>)
 8007602:	e012      	b.n	800762a <UART_SetConfig+0xd3a>
 8007604:	4b8d      	ldr	r3, [pc, #564]	; (800783c <UART_SetConfig+0xf4c>)
 8007606:	e010      	b.n	800762a <UART_SetConfig+0xd3a>
 8007608:	4b8d      	ldr	r3, [pc, #564]	; (8007840 <UART_SetConfig+0xf50>)
 800760a:	e00e      	b.n	800762a <UART_SetConfig+0xd3a>
 800760c:	4b8d      	ldr	r3, [pc, #564]	; (8007844 <UART_SetConfig+0xf54>)
 800760e:	e00c      	b.n	800762a <UART_SetConfig+0xd3a>
 8007610:	4b8d      	ldr	r3, [pc, #564]	; (8007848 <UART_SetConfig+0xf58>)
 8007612:	e00a      	b.n	800762a <UART_SetConfig+0xd3a>
 8007614:	4b8d      	ldr	r3, [pc, #564]	; (800784c <UART_SetConfig+0xf5c>)
 8007616:	e008      	b.n	800762a <UART_SetConfig+0xd3a>
 8007618:	4b8d      	ldr	r3, [pc, #564]	; (8007850 <UART_SetConfig+0xf60>)
 800761a:	e006      	b.n	800762a <UART_SetConfig+0xd3a>
 800761c:	4b8d      	ldr	r3, [pc, #564]	; (8007854 <UART_SetConfig+0xf64>)
 800761e:	e004      	b.n	800762a <UART_SetConfig+0xd3a>
 8007620:	4b8d      	ldr	r3, [pc, #564]	; (8007858 <UART_SetConfig+0xf68>)
 8007622:	e002      	b.n	800762a <UART_SetConfig+0xd3a>
 8007624:	4b8d      	ldr	r3, [pc, #564]	; (800785c <UART_SetConfig+0xf6c>)
 8007626:	e000      	b.n	800762a <UART_SetConfig+0xd3a>
 8007628:	4b82      	ldr	r3, [pc, #520]	; (8007834 <UART_SetConfig+0xf44>)
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6852      	ldr	r2, [r2, #4]
 800762e:	0852      	lsrs	r2, r2, #1
 8007630:	441a      	add	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	fbb2 f3f3 	udiv	r3, r2, r3
 800763a:	b29b      	uxth	r3, r3
 800763c:	61fb      	str	r3, [r7, #28]
        break;
 800763e:	e0bf      	b.n	80077c0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007640:	f7fc ff44 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8007644:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	2b00      	cmp	r3, #0
 800764c:	d044      	beq.n	80076d8 <UART_SetConfig+0xde8>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	2b01      	cmp	r3, #1
 8007654:	d03e      	beq.n	80076d4 <UART_SetConfig+0xde4>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	2b02      	cmp	r3, #2
 800765c:	d038      	beq.n	80076d0 <UART_SetConfig+0xde0>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	2b03      	cmp	r3, #3
 8007664:	d032      	beq.n	80076cc <UART_SetConfig+0xddc>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	2b04      	cmp	r3, #4
 800766c:	d02c      	beq.n	80076c8 <UART_SetConfig+0xdd8>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	2b05      	cmp	r3, #5
 8007674:	d026      	beq.n	80076c4 <UART_SetConfig+0xdd4>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	2b06      	cmp	r3, #6
 800767c:	d020      	beq.n	80076c0 <UART_SetConfig+0xdd0>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	2b07      	cmp	r3, #7
 8007684:	d01a      	beq.n	80076bc <UART_SetConfig+0xdcc>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	2b08      	cmp	r3, #8
 800768c:	d014      	beq.n	80076b8 <UART_SetConfig+0xdc8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	2b09      	cmp	r3, #9
 8007694:	d00e      	beq.n	80076b4 <UART_SetConfig+0xdc4>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	2b0a      	cmp	r3, #10
 800769c:	d008      	beq.n	80076b0 <UART_SetConfig+0xdc0>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	2b0b      	cmp	r3, #11
 80076a4:	d102      	bne.n	80076ac <UART_SetConfig+0xdbc>
 80076a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076aa:	e016      	b.n	80076da <UART_SetConfig+0xdea>
 80076ac:	2301      	movs	r3, #1
 80076ae:	e014      	b.n	80076da <UART_SetConfig+0xdea>
 80076b0:	2380      	movs	r3, #128	; 0x80
 80076b2:	e012      	b.n	80076da <UART_SetConfig+0xdea>
 80076b4:	2340      	movs	r3, #64	; 0x40
 80076b6:	e010      	b.n	80076da <UART_SetConfig+0xdea>
 80076b8:	2320      	movs	r3, #32
 80076ba:	e00e      	b.n	80076da <UART_SetConfig+0xdea>
 80076bc:	2310      	movs	r3, #16
 80076be:	e00c      	b.n	80076da <UART_SetConfig+0xdea>
 80076c0:	230c      	movs	r3, #12
 80076c2:	e00a      	b.n	80076da <UART_SetConfig+0xdea>
 80076c4:	230a      	movs	r3, #10
 80076c6:	e008      	b.n	80076da <UART_SetConfig+0xdea>
 80076c8:	2308      	movs	r3, #8
 80076ca:	e006      	b.n	80076da <UART_SetConfig+0xdea>
 80076cc:	2306      	movs	r3, #6
 80076ce:	e004      	b.n	80076da <UART_SetConfig+0xdea>
 80076d0:	2304      	movs	r3, #4
 80076d2:	e002      	b.n	80076da <UART_SetConfig+0xdea>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e000      	b.n	80076da <UART_SetConfig+0xdea>
 80076d8:	2301      	movs	r3, #1
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e0:	005a      	lsls	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	085b      	lsrs	r3, r3, #1
 80076e8:	441a      	add	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	61fb      	str	r3, [r7, #28]
        break;
 80076f6:	e063      	b.n	80077c0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d04f      	beq.n	80077a0 <UART_SetConfig+0xeb0>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	2b01      	cmp	r3, #1
 8007706:	d048      	beq.n	800779a <UART_SetConfig+0xeaa>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	2b02      	cmp	r3, #2
 800770e:	d041      	beq.n	8007794 <UART_SetConfig+0xea4>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	2b03      	cmp	r3, #3
 8007716:	d03a      	beq.n	800778e <UART_SetConfig+0xe9e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	2b04      	cmp	r3, #4
 800771e:	d033      	beq.n	8007788 <UART_SetConfig+0xe98>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	2b05      	cmp	r3, #5
 8007726:	d02c      	beq.n	8007782 <UART_SetConfig+0xe92>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	2b06      	cmp	r3, #6
 800772e:	d025      	beq.n	800777c <UART_SetConfig+0xe8c>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	2b07      	cmp	r3, #7
 8007736:	d01e      	beq.n	8007776 <UART_SetConfig+0xe86>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	2b08      	cmp	r3, #8
 800773e:	d017      	beq.n	8007770 <UART_SetConfig+0xe80>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	2b09      	cmp	r3, #9
 8007746:	d010      	beq.n	800776a <UART_SetConfig+0xe7a>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b0a      	cmp	r3, #10
 800774e:	d009      	beq.n	8007764 <UART_SetConfig+0xe74>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	2b0b      	cmp	r3, #11
 8007756:	d102      	bne.n	800775e <UART_SetConfig+0xe6e>
 8007758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800775c:	e022      	b.n	80077a4 <UART_SetConfig+0xeb4>
 800775e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007762:	e01f      	b.n	80077a4 <UART_SetConfig+0xeb4>
 8007764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007768:	e01c      	b.n	80077a4 <UART_SetConfig+0xeb4>
 800776a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800776e:	e019      	b.n	80077a4 <UART_SetConfig+0xeb4>
 8007770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007774:	e016      	b.n	80077a4 <UART_SetConfig+0xeb4>
 8007776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800777a:	e013      	b.n	80077a4 <UART_SetConfig+0xeb4>
 800777c:	f241 5354 	movw	r3, #5460	; 0x1554
 8007780:	e010      	b.n	80077a4 <UART_SetConfig+0xeb4>
 8007782:	f641 1398 	movw	r3, #6552	; 0x1998
 8007786:	e00d      	b.n	80077a4 <UART_SetConfig+0xeb4>
 8007788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800778c:	e00a      	b.n	80077a4 <UART_SetConfig+0xeb4>
 800778e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007792:	e007      	b.n	80077a4 <UART_SetConfig+0xeb4>
 8007794:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007798:	e004      	b.n	80077a4 <UART_SetConfig+0xeb4>
 800779a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779e:	e001      	b.n	80077a4 <UART_SetConfig+0xeb4>
 80077a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6852      	ldr	r2, [r2, #4]
 80077a8:	0852      	lsrs	r2, r2, #1
 80077aa:	441a      	add	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	61fb      	str	r3, [r7, #28]
        break;
 80077b8:	e002      	b.n	80077c0 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	76fb      	strb	r3, [r7, #27]
        break;
 80077be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d916      	bls.n	80077f4 <UART_SetConfig+0xf04>
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077cc:	d212      	bcs.n	80077f4 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f023 030f 	bic.w	r3, r3, #15
 80077d6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	89fb      	ldrh	r3, [r7, #14]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	89fa      	ldrh	r2, [r7, #14]
 80077f0:	60da      	str	r2, [r3, #12]
 80077f2:	e20c      	b.n	8007c0e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	76fb      	strb	r3, [r7, #27]
 80077f8:	e209      	b.n	8007c0e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 80077fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077fe:	2b08      	cmp	r3, #8
 8007800:	f200 81f4 	bhi.w	8007bec <UART_SetConfig+0x12fc>
 8007804:	a201      	add	r2, pc, #4	; (adr r2, 800780c <UART_SetConfig+0xf1c>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	08007861 	.word	0x08007861
 8007810:	08007917 	.word	0x08007917
 8007814:	080079cd 	.word	0x080079cd
 8007818:	08007bed 	.word	0x08007bed
 800781c:	08007a77 	.word	0x08007a77
 8007820:	08007bed 	.word	0x08007bed
 8007824:	08007bed 	.word	0x08007bed
 8007828:	08007bed 	.word	0x08007bed
 800782c:	08007b2d 	.word	0x08007b2d
 8007830:	0001e848 	.word	0x0001e848
 8007834:	01e84800 	.word	0x01e84800
 8007838:	0003d090 	.word	0x0003d090
 800783c:	0007a120 	.word	0x0007a120
 8007840:	000f4240 	.word	0x000f4240
 8007844:	001e8480 	.word	0x001e8480
 8007848:	0028b0aa 	.word	0x0028b0aa
 800784c:	0030d400 	.word	0x0030d400
 8007850:	003d0900 	.word	0x003d0900
 8007854:	00516154 	.word	0x00516154
 8007858:	007a1200 	.word	0x007a1200
 800785c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007860:	f7fc fea2 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8007864:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	2b00      	cmp	r3, #0
 800786c:	d044      	beq.n	80078f8 <UART_SetConfig+0x1008>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b01      	cmp	r3, #1
 8007874:	d03e      	beq.n	80078f4 <UART_SetConfig+0x1004>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	2b02      	cmp	r3, #2
 800787c:	d038      	beq.n	80078f0 <UART_SetConfig+0x1000>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	2b03      	cmp	r3, #3
 8007884:	d032      	beq.n	80078ec <UART_SetConfig+0xffc>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	2b04      	cmp	r3, #4
 800788c:	d02c      	beq.n	80078e8 <UART_SetConfig+0xff8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	2b05      	cmp	r3, #5
 8007894:	d026      	beq.n	80078e4 <UART_SetConfig+0xff4>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	2b06      	cmp	r3, #6
 800789c:	d020      	beq.n	80078e0 <UART_SetConfig+0xff0>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b07      	cmp	r3, #7
 80078a4:	d01a      	beq.n	80078dc <UART_SetConfig+0xfec>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d014      	beq.n	80078d8 <UART_SetConfig+0xfe8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	2b09      	cmp	r3, #9
 80078b4:	d00e      	beq.n	80078d4 <UART_SetConfig+0xfe4>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	2b0a      	cmp	r3, #10
 80078bc:	d008      	beq.n	80078d0 <UART_SetConfig+0xfe0>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	2b0b      	cmp	r3, #11
 80078c4:	d102      	bne.n	80078cc <UART_SetConfig+0xfdc>
 80078c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ca:	e016      	b.n	80078fa <UART_SetConfig+0x100a>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e014      	b.n	80078fa <UART_SetConfig+0x100a>
 80078d0:	2380      	movs	r3, #128	; 0x80
 80078d2:	e012      	b.n	80078fa <UART_SetConfig+0x100a>
 80078d4:	2340      	movs	r3, #64	; 0x40
 80078d6:	e010      	b.n	80078fa <UART_SetConfig+0x100a>
 80078d8:	2320      	movs	r3, #32
 80078da:	e00e      	b.n	80078fa <UART_SetConfig+0x100a>
 80078dc:	2310      	movs	r3, #16
 80078de:	e00c      	b.n	80078fa <UART_SetConfig+0x100a>
 80078e0:	230c      	movs	r3, #12
 80078e2:	e00a      	b.n	80078fa <UART_SetConfig+0x100a>
 80078e4:	230a      	movs	r3, #10
 80078e6:	e008      	b.n	80078fa <UART_SetConfig+0x100a>
 80078e8:	2308      	movs	r3, #8
 80078ea:	e006      	b.n	80078fa <UART_SetConfig+0x100a>
 80078ec:	2306      	movs	r3, #6
 80078ee:	e004      	b.n	80078fa <UART_SetConfig+0x100a>
 80078f0:	2304      	movs	r3, #4
 80078f2:	e002      	b.n	80078fa <UART_SetConfig+0x100a>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e000      	b.n	80078fa <UART_SetConfig+0x100a>
 80078f8:	2301      	movs	r3, #1
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	085b      	lsrs	r3, r3, #1
 8007906:	441a      	add	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007910:	b29b      	uxth	r3, r3
 8007912:	61fb      	str	r3, [r7, #28]
        break;
 8007914:	e16d      	b.n	8007bf2 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007916:	f7fc fe5d 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 800791a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	d044      	beq.n	80079ae <UART_SetConfig+0x10be>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	2b01      	cmp	r3, #1
 800792a:	d03e      	beq.n	80079aa <UART_SetConfig+0x10ba>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	2b02      	cmp	r3, #2
 8007932:	d038      	beq.n	80079a6 <UART_SetConfig+0x10b6>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	2b03      	cmp	r3, #3
 800793a:	d032      	beq.n	80079a2 <UART_SetConfig+0x10b2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	2b04      	cmp	r3, #4
 8007942:	d02c      	beq.n	800799e <UART_SetConfig+0x10ae>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	2b05      	cmp	r3, #5
 800794a:	d026      	beq.n	800799a <UART_SetConfig+0x10aa>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	2b06      	cmp	r3, #6
 8007952:	d020      	beq.n	8007996 <UART_SetConfig+0x10a6>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	2b07      	cmp	r3, #7
 800795a:	d01a      	beq.n	8007992 <UART_SetConfig+0x10a2>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	2b08      	cmp	r3, #8
 8007962:	d014      	beq.n	800798e <UART_SetConfig+0x109e>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	2b09      	cmp	r3, #9
 800796a:	d00e      	beq.n	800798a <UART_SetConfig+0x109a>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	2b0a      	cmp	r3, #10
 8007972:	d008      	beq.n	8007986 <UART_SetConfig+0x1096>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	2b0b      	cmp	r3, #11
 800797a:	d102      	bne.n	8007982 <UART_SetConfig+0x1092>
 800797c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007980:	e016      	b.n	80079b0 <UART_SetConfig+0x10c0>
 8007982:	2301      	movs	r3, #1
 8007984:	e014      	b.n	80079b0 <UART_SetConfig+0x10c0>
 8007986:	2380      	movs	r3, #128	; 0x80
 8007988:	e012      	b.n	80079b0 <UART_SetConfig+0x10c0>
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	e010      	b.n	80079b0 <UART_SetConfig+0x10c0>
 800798e:	2320      	movs	r3, #32
 8007990:	e00e      	b.n	80079b0 <UART_SetConfig+0x10c0>
 8007992:	2310      	movs	r3, #16
 8007994:	e00c      	b.n	80079b0 <UART_SetConfig+0x10c0>
 8007996:	230c      	movs	r3, #12
 8007998:	e00a      	b.n	80079b0 <UART_SetConfig+0x10c0>
 800799a:	230a      	movs	r3, #10
 800799c:	e008      	b.n	80079b0 <UART_SetConfig+0x10c0>
 800799e:	2308      	movs	r3, #8
 80079a0:	e006      	b.n	80079b0 <UART_SetConfig+0x10c0>
 80079a2:	2306      	movs	r3, #6
 80079a4:	e004      	b.n	80079b0 <UART_SetConfig+0x10c0>
 80079a6:	2304      	movs	r3, #4
 80079a8:	e002      	b.n	80079b0 <UART_SetConfig+0x10c0>
 80079aa:	2302      	movs	r3, #2
 80079ac:	e000      	b.n	80079b0 <UART_SetConfig+0x10c0>
 80079ae:	2301      	movs	r3, #1
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	085b      	lsrs	r3, r3, #1
 80079bc:	441a      	add	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	61fb      	str	r3, [r7, #28]
        break;
 80079ca:	e112      	b.n	8007bf2 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d044      	beq.n	8007a5e <UART_SetConfig+0x116e>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d03e      	beq.n	8007a5a <UART_SetConfig+0x116a>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d038      	beq.n	8007a56 <UART_SetConfig+0x1166>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d032      	beq.n	8007a52 <UART_SetConfig+0x1162>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d02c      	beq.n	8007a4e <UART_SetConfig+0x115e>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	2b05      	cmp	r3, #5
 80079fa:	d026      	beq.n	8007a4a <UART_SetConfig+0x115a>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	2b06      	cmp	r3, #6
 8007a02:	d020      	beq.n	8007a46 <UART_SetConfig+0x1156>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	2b07      	cmp	r3, #7
 8007a0a:	d01a      	beq.n	8007a42 <UART_SetConfig+0x1152>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d014      	beq.n	8007a3e <UART_SetConfig+0x114e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	2b09      	cmp	r3, #9
 8007a1a:	d00e      	beq.n	8007a3a <UART_SetConfig+0x114a>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	2b0a      	cmp	r3, #10
 8007a22:	d008      	beq.n	8007a36 <UART_SetConfig+0x1146>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a28:	2b0b      	cmp	r3, #11
 8007a2a:	d102      	bne.n	8007a32 <UART_SetConfig+0x1142>
 8007a2c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007a30:	e016      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a32:	4b81      	ldr	r3, [pc, #516]	; (8007c38 <UART_SetConfig+0x1348>)
 8007a34:	e014      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a36:	4b81      	ldr	r3, [pc, #516]	; (8007c3c <UART_SetConfig+0x134c>)
 8007a38:	e012      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a3a:	4b81      	ldr	r3, [pc, #516]	; (8007c40 <UART_SetConfig+0x1350>)
 8007a3c:	e010      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a3e:	4b81      	ldr	r3, [pc, #516]	; (8007c44 <UART_SetConfig+0x1354>)
 8007a40:	e00e      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a42:	4b81      	ldr	r3, [pc, #516]	; (8007c48 <UART_SetConfig+0x1358>)
 8007a44:	e00c      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a46:	4b81      	ldr	r3, [pc, #516]	; (8007c4c <UART_SetConfig+0x135c>)
 8007a48:	e00a      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a4a:	4b81      	ldr	r3, [pc, #516]	; (8007c50 <UART_SetConfig+0x1360>)
 8007a4c:	e008      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a4e:	4b81      	ldr	r3, [pc, #516]	; (8007c54 <UART_SetConfig+0x1364>)
 8007a50:	e006      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a52:	4b81      	ldr	r3, [pc, #516]	; (8007c58 <UART_SetConfig+0x1368>)
 8007a54:	e004      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a56:	4b81      	ldr	r3, [pc, #516]	; (8007c5c <UART_SetConfig+0x136c>)
 8007a58:	e002      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a5a:	4b81      	ldr	r3, [pc, #516]	; (8007c60 <UART_SetConfig+0x1370>)
 8007a5c:	e000      	b.n	8007a60 <UART_SetConfig+0x1170>
 8007a5e:	4b76      	ldr	r3, [pc, #472]	; (8007c38 <UART_SetConfig+0x1348>)
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6852      	ldr	r2, [r2, #4]
 8007a64:	0852      	lsrs	r2, r2, #1
 8007a66:	441a      	add	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	61fb      	str	r3, [r7, #28]
        break;
 8007a74:	e0bd      	b.n	8007bf2 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a76:	f7fc fd29 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8007a7a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d044      	beq.n	8007b0e <UART_SetConfig+0x121e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d03e      	beq.n	8007b0a <UART_SetConfig+0x121a>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d038      	beq.n	8007b06 <UART_SetConfig+0x1216>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d032      	beq.n	8007b02 <UART_SetConfig+0x1212>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d02c      	beq.n	8007afe <UART_SetConfig+0x120e>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b05      	cmp	r3, #5
 8007aaa:	d026      	beq.n	8007afa <UART_SetConfig+0x120a>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b06      	cmp	r3, #6
 8007ab2:	d020      	beq.n	8007af6 <UART_SetConfig+0x1206>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b07      	cmp	r3, #7
 8007aba:	d01a      	beq.n	8007af2 <UART_SetConfig+0x1202>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d014      	beq.n	8007aee <UART_SetConfig+0x11fe>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b09      	cmp	r3, #9
 8007aca:	d00e      	beq.n	8007aea <UART_SetConfig+0x11fa>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b0a      	cmp	r3, #10
 8007ad2:	d008      	beq.n	8007ae6 <UART_SetConfig+0x11f6>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b0b      	cmp	r3, #11
 8007ada:	d102      	bne.n	8007ae2 <UART_SetConfig+0x11f2>
 8007adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ae0:	e016      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e014      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007ae6:	2380      	movs	r3, #128	; 0x80
 8007ae8:	e012      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007aea:	2340      	movs	r3, #64	; 0x40
 8007aec:	e010      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007aee:	2320      	movs	r3, #32
 8007af0:	e00e      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007af2:	2310      	movs	r3, #16
 8007af4:	e00c      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007af6:	230c      	movs	r3, #12
 8007af8:	e00a      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007afa:	230a      	movs	r3, #10
 8007afc:	e008      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007afe:	2308      	movs	r3, #8
 8007b00:	e006      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007b02:	2306      	movs	r3, #6
 8007b04:	e004      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007b06:	2304      	movs	r3, #4
 8007b08:	e002      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e000      	b.n	8007b10 <UART_SetConfig+0x1220>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	441a      	add	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	61fb      	str	r3, [r7, #28]
        break;
 8007b2a:	e062      	b.n	8007bf2 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d04e      	beq.n	8007bd2 <UART_SetConfig+0x12e2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d047      	beq.n	8007bcc <UART_SetConfig+0x12dc>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d040      	beq.n	8007bc6 <UART_SetConfig+0x12d6>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d039      	beq.n	8007bc0 <UART_SetConfig+0x12d0>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d032      	beq.n	8007bba <UART_SetConfig+0x12ca>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	2b05      	cmp	r3, #5
 8007b5a:	d02b      	beq.n	8007bb4 <UART_SetConfig+0x12c4>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	2b06      	cmp	r3, #6
 8007b62:	d024      	beq.n	8007bae <UART_SetConfig+0x12be>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	2b07      	cmp	r3, #7
 8007b6a:	d01d      	beq.n	8007ba8 <UART_SetConfig+0x12b8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d016      	beq.n	8007ba2 <UART_SetConfig+0x12b2>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	2b09      	cmp	r3, #9
 8007b7a:	d00f      	beq.n	8007b9c <UART_SetConfig+0x12ac>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	2b0a      	cmp	r3, #10
 8007b82:	d008      	beq.n	8007b96 <UART_SetConfig+0x12a6>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	2b0b      	cmp	r3, #11
 8007b8a:	d101      	bne.n	8007b90 <UART_SetConfig+0x12a0>
 8007b8c:	2380      	movs	r3, #128	; 0x80
 8007b8e:	e022      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b94:	e01f      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b9a:	e01c      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ba0:	e019      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ba6:	e016      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bac:	e013      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007bae:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007bb2:	e010      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007bb4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007bb8:	e00d      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bbe:	e00a      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007bc0:	f241 5355 	movw	r3, #5461	; 0x1555
 8007bc4:	e007      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bca:	e004      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007bcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bd0:	e001      	b.n	8007bd6 <UART_SetConfig+0x12e6>
 8007bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6852      	ldr	r2, [r2, #4]
 8007bda:	0852      	lsrs	r2, r2, #1
 8007bdc:	441a      	add	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	61fb      	str	r3, [r7, #28]
        break;
 8007bea:	e002      	b.n	8007bf2 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	76fb      	strb	r3, [r7, #27]
        break;
 8007bf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	2b0f      	cmp	r3, #15
 8007bf6:	d908      	bls.n	8007c0a <UART_SetConfig+0x131a>
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfe:	d204      	bcs.n	8007c0a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	60da      	str	r2, [r3, #12]
 8007c08:	e001      	b.n	8007c0e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007c2a:	7efb      	ldrb	r3, [r7, #27]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3728      	adds	r7, #40	; 0x28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007c36:	bf00      	nop
 8007c38:	00f42400 	.word	0x00f42400
 8007c3c:	0001e848 	.word	0x0001e848
 8007c40:	0003d090 	.word	0x0003d090
 8007c44:	0007a120 	.word	0x0007a120
 8007c48:	000f4240 	.word	0x000f4240
 8007c4c:	00145855 	.word	0x00145855
 8007c50:	00186a00 	.word	0x00186a00
 8007c54:	001e8480 	.word	0x001e8480
 8007c58:	0028b0aa 	.word	0x0028b0aa
 8007c5c:	003d0900 	.word	0x003d0900
 8007c60:	007a1200 	.word	0x007a1200

08007c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	f003 0310 	and.w	r3, r3, #16
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00a      	beq.n	8007d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00a      	beq.n	8007d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	430a      	orrs	r2, r1
 8007d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d01a      	beq.n	8007d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d62:	d10a      	bne.n	8007d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	605a      	str	r2, [r3, #4]
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007db8:	f7f9 fcc8 	bl	800174c <HAL_GetTick>
 8007dbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0308 	and.w	r3, r3, #8
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d10e      	bne.n	8007dea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f82c 	bl	8007e38 <UART_WaitOnFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e022      	b.n	8007e30 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d10e      	bne.n	8007e16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f816 	bl	8007e38 <UART_WaitOnFlagUntilTimeout>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e00c      	b.n	8007e30 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	4613      	mov	r3, r2
 8007e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e48:	e02c      	b.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d028      	beq.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e52:	f7f9 fc7b 	bl	800174c <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d302      	bcc.n	8007e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d11d      	bne.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e76:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0201 	bic.w	r2, r2, #1
 8007e86:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e00f      	b.n	8007ec4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69da      	ldr	r2, [r3, #28]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	4013      	ands	r3, r2
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2301      	moveq	r3, #1
 8007eb6:	2300      	movne	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	79fb      	ldrb	r3, [r7, #7]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d0c3      	beq.n	8007e4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ee2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ef2:	f023 0301 	bic.w	r3, r3, #1
 8007ef6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2220      	movs	r2, #32
 8007efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7fe fcd1 	bl	80068d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f54:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7fe fcad 	bl	80068c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f6a:	bf00      	nop
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f80:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f88:	2b22      	cmp	r3, #34	; 0x22
 8007f8a:	d13b      	bne.n	8008004 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f94:	89bb      	ldrh	r3, [r7, #12]
 8007f96:	b2d9      	uxtb	r1, r3
 8007f98:	89fb      	ldrh	r3, [r7, #14]
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa0:	400a      	ands	r2, r1
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d122      	bne.n	8008014 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fdc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0201 	bic.w	r2, r2, #1
 8007fec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7f8 fdf0 	bl	8000be2 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008002:	e007      	b.n	8008014 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0208 	orr.w	r2, r2, #8
 8008012:	619a      	str	r2, [r3, #24]
}
 8008014:	bf00      	nop
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800802a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008032:	2b22      	cmp	r3, #34	; 0x22
 8008034:	d13b      	bne.n	80080ae <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008042:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008044:	89ba      	ldrh	r2, [r7, #12]
 8008046:	89fb      	ldrh	r3, [r7, #14]
 8008048:	4013      	ands	r3, r2
 800804a:	b29a      	uxth	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008054:	1c9a      	adds	r2, r3, #2
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008072:	b29b      	uxth	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d122      	bne.n	80080be <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008086:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0201 	bic.w	r2, r2, #1
 8008096:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7f8 fd9b 	bl	8000be2 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080ac:	e007      	b.n	80080be <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	699a      	ldr	r2, [r3, #24]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f042 0208 	orr.w	r2, r2, #8
 80080bc:	619a      	str	r2, [r3, #24]
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080d6:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080de:	2b22      	cmp	r3, #34	; 0x22
 80080e0:	d168      	bne.n	80081b4 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080e8:	81fb      	strh	r3, [r7, #14]
 80080ea:	e03f      	b.n	800816c <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080f4:	893b      	ldrh	r3, [r7, #8]
 80080f6:	b2d9      	uxtb	r1, r3
 80080f8:	89bb      	ldrh	r3, [r7, #12]
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008100:	400a      	ands	r2, r1
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d11b      	bne.n	8008166 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800813c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800814c:	f023 0301 	bic.w	r3, r3, #1
 8008150:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7f8 fd3e 	bl	8000be2 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008166:	89fb      	ldrh	r3, [r7, #14]
 8008168:	3b01      	subs	r3, #1
 800816a:	81fb      	strh	r3, [r7, #14]
 800816c:	89fb      	ldrh	r3, [r7, #14]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1bc      	bne.n	80080ec <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008178:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800817a:	897b      	ldrh	r3, [r7, #10]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d021      	beq.n	80081c4 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008186:	897a      	ldrh	r2, [r7, #10]
 8008188:	429a      	cmp	r2, r3
 800818a:	d21b      	bcs.n	80081c4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800819a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a0b      	ldr	r2, [pc, #44]	; (80081cc <UART_RxISR_8BIT_FIFOEN+0x104>)
 80081a0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0220 	orr.w	r2, r2, #32
 80081b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081b2:	e007      	b.n	80081c4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699a      	ldr	r2, [r3, #24]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0208 	orr.w	r2, r2, #8
 80081c2:	619a      	str	r2, [r3, #24]
}
 80081c4:	bf00      	nop
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	08007f73 	.word	0x08007f73

080081d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081de:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e6:	2b22      	cmp	r3, #34	; 0x22
 80081e8:	d168      	bne.n	80082bc <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081f0:	82fb      	strh	r3, [r7, #22]
 80081f2:	e03f      	b.n	8008274 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008200:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008202:	8a3a      	ldrh	r2, [r7, #16]
 8008204:	8abb      	ldrh	r3, [r7, #20]
 8008206:	4013      	ands	r3, r2
 8008208:	b29a      	uxth	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008212:	1c9a      	adds	r2, r3, #2
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800821e:	b29b      	uxth	r3, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d11b      	bne.n	800826e <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008244:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6812      	ldr	r2, [r2, #0]
 8008250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2220      	movs	r2, #32
 800825e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7f8 fcba 	bl	8000be2 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800826e:	8afb      	ldrh	r3, [r7, #22]
 8008270:	3b01      	subs	r3, #1
 8008272:	82fb      	strh	r3, [r7, #22]
 8008274:	8afb      	ldrh	r3, [r7, #22]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1bc      	bne.n	80081f4 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008280:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008282:	8a7b      	ldrh	r3, [r7, #18]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d021      	beq.n	80082cc <UART_RxISR_16BIT_FIFOEN+0xfc>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800828e:	8a7a      	ldrh	r2, [r7, #18]
 8008290:	429a      	cmp	r2, r3
 8008292:	d21b      	bcs.n	80082cc <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80082a2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a0b      	ldr	r2, [pc, #44]	; (80082d4 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80082a8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f042 0220 	orr.w	r2, r2, #32
 80082b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082ba:	e007      	b.n	80082cc <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699a      	ldr	r2, [r3, #24]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f042 0208 	orr.w	r2, r2, #8
 80082ca:	619a      	str	r2, [r3, #24]
}
 80082cc:	bf00      	nop
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	0800801d 	.word	0x0800801d

080082d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008322:	2b01      	cmp	r3, #1
 8008324:	d101      	bne.n	800832a <HAL_UARTEx_DisableFifoMode+0x16>
 8008326:	2302      	movs	r3, #2
 8008328:	e027      	b.n	800837a <HAL_UARTEx_DisableFifoMode+0x66>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2224      	movs	r2, #36	; 0x24
 8008336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0201 	bic.w	r2, r2, #1
 8008350:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008358:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2220      	movs	r2, #32
 800836c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008396:	2b01      	cmp	r3, #1
 8008398:	d101      	bne.n	800839e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800839a:	2302      	movs	r3, #2
 800839c:	e02d      	b.n	80083fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2224      	movs	r2, #36	; 0x24
 80083aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0201 	bic.w	r2, r2, #1
 80083c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f850 	bl	8008480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008412:	2b01      	cmp	r3, #1
 8008414:	d101      	bne.n	800841a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008416:	2302      	movs	r3, #2
 8008418:	e02d      	b.n	8008476 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2224      	movs	r2, #36	; 0x24
 8008426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0201 	bic.w	r2, r2, #1
 8008440:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f812 	bl	8008480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008480:	b480      	push	{r7}
 8008482:	b089      	sub	sp, #36	; 0x24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008488:	4a2f      	ldr	r2, [pc, #188]	; (8008548 <UARTEx_SetNbDataToProcess+0xc8>)
 800848a:	f107 0314 	add.w	r3, r7, #20
 800848e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008492:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008496:	4a2d      	ldr	r2, [pc, #180]	; (800854c <UARTEx_SetNbDataToProcess+0xcc>)
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084a0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d108      	bne.n	80084be <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084bc:	e03d      	b.n	800853a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084be:	2308      	movs	r3, #8
 80084c0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084c2:	2308      	movs	r3, #8
 80084c4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	0e5b      	lsrs	r3, r3, #25
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f003 0307 	and.w	r3, r3, #7
 80084d4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	0f5b      	lsrs	r3, r3, #29
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	f003 0307 	and.w	r3, r3, #7
 80084e4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80084e6:	7fbb      	ldrb	r3, [r7, #30]
 80084e8:	7f3a      	ldrb	r2, [r7, #28]
 80084ea:	f107 0120 	add.w	r1, r7, #32
 80084ee:	440a      	add	r2, r1
 80084f0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80084f4:	fb02 f303 	mul.w	r3, r2, r3
 80084f8:	7f3a      	ldrb	r2, [r7, #28]
 80084fa:	f107 0120 	add.w	r1, r7, #32
 80084fe:	440a      	add	r2, r1
 8008500:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008504:	fb93 f3f2 	sdiv	r3, r3, r2
 8008508:	b29a      	uxth	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008510:	7ffb      	ldrb	r3, [r7, #31]
 8008512:	7f7a      	ldrb	r2, [r7, #29]
 8008514:	f107 0120 	add.w	r1, r7, #32
 8008518:	440a      	add	r2, r1
 800851a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	7f7a      	ldrb	r2, [r7, #29]
 8008524:	f107 0120 	add.w	r1, r7, #32
 8008528:	440a      	add	r2, r1
 800852a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800852e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008532:	b29a      	uxth	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800853a:	bf00      	nop
 800853c:	3724      	adds	r7, #36	; 0x24
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	0800862c 	.word	0x0800862c
 800854c:	08008634 	.word	0x08008634

08008550 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	edd3 7a07 	vldr	s15, [r3, #28]
 8008566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	edd3 7a08 	vldr	s15, [r3, #32]
 8008570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008580:	eeb1 7a67 	vneg.f32	s14, s15
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	edd3 7a08 	vldr	s15, [r3, #32]
 800858a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800858e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a1a      	ldr	r2, [r3, #32]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	330c      	adds	r3, #12
 80085aa:	220c      	movs	r2, #12
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 f828 	bl	8008604 <memset>
  }

}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <__libc_init_array>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	4e0d      	ldr	r6, [pc, #52]	; (80085f4 <__libc_init_array+0x38>)
 80085c0:	4c0d      	ldr	r4, [pc, #52]	; (80085f8 <__libc_init_array+0x3c>)
 80085c2:	1ba4      	subs	r4, r4, r6
 80085c4:	10a4      	asrs	r4, r4, #2
 80085c6:	2500      	movs	r5, #0
 80085c8:	42a5      	cmp	r5, r4
 80085ca:	d109      	bne.n	80085e0 <__libc_init_array+0x24>
 80085cc:	4e0b      	ldr	r6, [pc, #44]	; (80085fc <__libc_init_array+0x40>)
 80085ce:	4c0c      	ldr	r4, [pc, #48]	; (8008600 <__libc_init_array+0x44>)
 80085d0:	f000 f820 	bl	8008614 <_init>
 80085d4:	1ba4      	subs	r4, r4, r6
 80085d6:	10a4      	asrs	r4, r4, #2
 80085d8:	2500      	movs	r5, #0
 80085da:	42a5      	cmp	r5, r4
 80085dc:	d105      	bne.n	80085ea <__libc_init_array+0x2e>
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085e4:	4798      	blx	r3
 80085e6:	3501      	adds	r5, #1
 80085e8:	e7ee      	b.n	80085c8 <__libc_init_array+0xc>
 80085ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085ee:	4798      	blx	r3
 80085f0:	3501      	adds	r5, #1
 80085f2:	e7f2      	b.n	80085da <__libc_init_array+0x1e>
 80085f4:	0800865c 	.word	0x0800865c
 80085f8:	0800865c 	.word	0x0800865c
 80085fc:	0800865c 	.word	0x0800865c
 8008600:	08008660 	.word	0x08008660

08008604 <memset>:
 8008604:	4402      	add	r2, r0
 8008606:	4603      	mov	r3, r0
 8008608:	4293      	cmp	r3, r2
 800860a:	d100      	bne.n	800860e <memset+0xa>
 800860c:	4770      	bx	lr
 800860e:	f803 1b01 	strb.w	r1, [r3], #1
 8008612:	e7f9      	b.n	8008608 <memset+0x4>

08008614 <_init>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	bf00      	nop
 8008618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861a:	bc08      	pop	{r3}
 800861c:	469e      	mov	lr, r3
 800861e:	4770      	bx	lr

08008620 <_fini>:
 8008620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008622:	bf00      	nop
 8008624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008626:	bc08      	pop	{r3}
 8008628:	469e      	mov	lr, r3
 800862a:	4770      	bx	lr
