
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006390  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006598  08006598  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080065a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000010  080065b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080065b0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115a5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a0  00000000  00000000  000315e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00033888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000348d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df10  00000000  00000000  000357f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc11  00000000  00000000  00053700  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ef6  00000000  00000000  00061311  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  00124284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006550 	.word	0x08006550

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08006550 	.word	0x08006550

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0xac>)
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_GPIO_Init+0xb0>)
 80005a4:	f001 f8c0 	bl	8001728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f001 f820 	bl	80015f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f001 f837 	bl	8001626 <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10110000 	.word	0x10110000
 80005c8:	48000800 	.word	0x48000800

080005cc <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005dc:	f040 8141 	bne.w	8000862 <HAL_GPIO_EXTI_Callback+0x296>
	{

		licznik++;
 80005e0:	4b82      	ldr	r3, [pc, #520]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a81      	ldr	r2, [pc, #516]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80005e8:	6013      	str	r3, [r2, #0]


							switch (licznik)
 80005ea:	4b80      	ldr	r3, [pc, #512]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b05      	cmp	r3, #5
 80005f0:	f200 812f 	bhi.w	8000852 <HAL_GPIO_EXTI_Callback+0x286>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <HAL_GPIO_EXTI_Callback+0x30>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	080007f5 	.word	0x080007f5
 8000600:	08000615 	.word	0x08000615
 8000604:	08000673 	.word	0x08000673
 8000608:	080006d1 	.word	0x080006d1
 800060c:	0800072f 	.word	0x0800072f
 8000610:	0800078d 	.word	0x0800078d
							{
							case 1:
								 TIM1->CCR1=20000;
 8000614:	4b76      	ldr	r3, [pc, #472]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000616:	f644 6220 	movw	r2, #20000	; 0x4e20
 800061a:	635a      	str	r2, [r3, #52]	; 0x34
								 TIM1->CCR2=0;
 800061c:	4b74      	ldr	r3, [pc, #464]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800061e:	2200      	movs	r2, #0
 8000620:	639a      	str	r2, [r3, #56]	; 0x38
								 TIM1->CCR3=0;
 8000622:	4b73      	ldr	r3, [pc, #460]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000624:	2200      	movs	r2, #0
 8000626:	63da      	str	r2, [r3, #60]	; 0x3c

								 SET_CC1_T1;
 8000628:	4b71      	ldr	r3, [pc, #452]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800062a:	6a1b      	ldr	r3, [r3, #32]
 800062c:	4a70      	ldr	r2, [pc, #448]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6213      	str	r3, [r2, #32]
								 SET_CC1N_T2;
 8000634:	4b6e      	ldr	r3, [pc, #440]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000636:	6a1b      	ldr	r3, [r3, #32]
 8000638:	4a6d      	ldr	r2, [pc, #436]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6213      	str	r3, [r2, #32]
								 SET_CC2_T3;
 8000640:	4b6b      	ldr	r3, [pc, #428]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000642:	6a1b      	ldr	r3, [r3, #32]
 8000644:	4a6a      	ldr	r2, [pc, #424]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6213      	str	r3, [r2, #32]
								 SET_CC2N_T4;
 800064c:	4b68      	ldr	r3, [pc, #416]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	4a67      	ldr	r2, [pc, #412]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000656:	6213      	str	r3, [r2, #32]
								 RESET_CC3_T5;
 8000658:	4b65      	ldr	r3, [pc, #404]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800065a:	6a1b      	ldr	r3, [r3, #32]
 800065c:	4a64      	ldr	r2, [pc, #400]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800065e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000662:	6213      	str	r3, [r2, #32]
								 RESET_CC3N_T6;
 8000664:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	4a61      	ldr	r2, [pc, #388]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800066a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800066e:	6213      	str	r3, [r2, #32]

						    break;
 8000670:	e0ef      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>

							case 2:
								 TIM1->CCR1=20000;
 8000672:	4b5f      	ldr	r3, [pc, #380]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000674:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
								 TIM1->CCR2=0;
 800067a:	4b5d      	ldr	r3, [pc, #372]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800067c:	2200      	movs	r2, #0
 800067e:	639a      	str	r2, [r3, #56]	; 0x38
								 TIM1->CCR3=0;
 8000680:	4b5b      	ldr	r3, [pc, #364]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000682:	2200      	movs	r2, #0
 8000684:	63da      	str	r2, [r3, #60]	; 0x3c

								 SET_CC1_T1;
 8000686:	4b5a      	ldr	r3, [pc, #360]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000688:	6a1b      	ldr	r3, [r3, #32]
 800068a:	4a59      	ldr	r2, [pc, #356]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6213      	str	r3, [r2, #32]
								 SET_CC1N_T2;
 8000692:	4b57      	ldr	r3, [pc, #348]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	4a56      	ldr	r2, [pc, #344]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6213      	str	r3, [r2, #32]
								 RESET_CC2_T3;
 800069e:	4b54      	ldr	r3, [pc, #336]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006a0:	6a1b      	ldr	r3, [r3, #32]
 80006a2:	4a53      	ldr	r2, [pc, #332]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006a4:	f023 0310 	bic.w	r3, r3, #16
 80006a8:	6213      	str	r3, [r2, #32]
								 RESET_CC2N_T4;
 80006aa:	4b51      	ldr	r3, [pc, #324]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006ac:	6a1b      	ldr	r3, [r3, #32]
 80006ae:	4a50      	ldr	r2, [pc, #320]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b4:	6213      	str	r3, [r2, #32]
								 SET_CC3_T5;
 80006b6:	4b4e      	ldr	r3, [pc, #312]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006b8:	6a1b      	ldr	r3, [r3, #32]
 80006ba:	4a4d      	ldr	r2, [pc, #308]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6213      	str	r3, [r2, #32]
								 SET_CC3N_T6;
 80006c2:	4b4b      	ldr	r3, [pc, #300]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006c4:	6a1b      	ldr	r3, [r3, #32]
 80006c6:	4a4a      	ldr	r2, [pc, #296]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006cc:	6213      	str	r3, [r2, #32]

						    break;
 80006ce:	e0c0      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>

							case 3:

								TIM1->CCR1=0;
 80006d0:	4b47      	ldr	r3, [pc, #284]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->CCR2=20000;
 80006d6:	4b46      	ldr	r3, [pc, #280]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006d8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80006dc:	639a      	str	r2, [r3, #56]	; 0x38
								TIM1->CCR3=0;
 80006de:	4b44      	ldr	r3, [pc, #272]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	63da      	str	r2, [r3, #60]	; 0x3c

								RESET_CC1_T1;
 80006e4:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006e6:	6a1b      	ldr	r3, [r3, #32]
 80006e8:	4a41      	ldr	r2, [pc, #260]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006ea:	f023 0301 	bic.w	r3, r3, #1
 80006ee:	6213      	str	r3, [r2, #32]
								RESET_CC1N_T2;
 80006f0:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	4a3e      	ldr	r2, [pc, #248]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006f6:	f023 0304 	bic.w	r3, r3, #4
 80006fa:	6213      	str	r3, [r2, #32]
								SET_CC2_T3;
 80006fc:	4b3c      	ldr	r3, [pc, #240]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a3b      	ldr	r2, [pc, #236]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6213      	str	r3, [r2, #32]
								SET_CC2N_T4;
 8000708:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800070e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000712:	6213      	str	r3, [r2, #32]
								SET_CC3_T5;
 8000714:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000716:	6a1b      	ldr	r3, [r3, #32]
 8000718:	4a35      	ldr	r2, [pc, #212]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800071a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800071e:	6213      	str	r3, [r2, #32]
								SET_CC3N_T6;
 8000720:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800072a:	6213      	str	r3, [r2, #32]


						    break;
 800072c:	e091      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>

						    case 4:

						    	TIM1->CCR1=0;
 800072e:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=20000;
 8000734:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000736:	f644 6220 	movw	r2, #20000	; 0x4e20
 800073a:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=0;
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	; 0x3c

						    	SET_CC1_T1;
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000744:	6a1b      	ldr	r3, [r3, #32]
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6213      	str	r3, [r2, #32]
						    	SET_CC1N_T2;
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6213      	str	r3, [r2, #32]
						    	SET_CC2_T3;
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800075c:	6a1b      	ldr	r3, [r3, #32]
 800075e:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	6213      	str	r3, [r2, #32]
						    	SET_CC2N_T4;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000768:	6a1b      	ldr	r3, [r3, #32]
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	6213      	str	r3, [r2, #32]
						    	RESET_CC3_T5;
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000774:	6a1b      	ldr	r3, [r3, #32]
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800077c:	6213      	str	r3, [r2, #32]
						    	RESET_CC3N_T6;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000788:	6213      	str	r3, [r2, #32]

							break;
 800078a:	e062      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>

						    case 5:
						    	TIM1->CCR1=0;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800078e:	2200      	movs	r2, #0
 8000790:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=0;;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000794:	2200      	movs	r2, #0
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=20000;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800079a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c

						    	SET_CC1_T1;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6213      	str	r3, [r2, #32]
						    	SET_CC1N_T2;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007ae:	6a1b      	ldr	r3, [r3, #32]
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6213      	str	r3, [r2, #32]
						    	RESET_CC2_T3;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007ba:	6a1b      	ldr	r3, [r3, #32]
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007be:	f023 0310 	bic.w	r3, r3, #16
 80007c2:	6213      	str	r3, [r2, #32]
						    	RESET_CC2N_T4;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007c6:	6a1b      	ldr	r3, [r3, #32]
 80007c8:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ce:	6213      	str	r3, [r2, #32]
						    	SET_CC3_T5;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	6213      	str	r3, [r2, #32]
						    	SET_CC3N_T6;
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007de:	6a1b      	ldr	r3, [r3, #32]
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e6:	6213      	str	r3, [r2, #32]

						    break;
 80007e8:	e033      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000
 80007f0:	40012c00 	.word	0x40012c00

						    case 0:
						    	TIM1->CCR1=0;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=0;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=20000;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000802:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000806:	63da      	str	r2, [r3, #60]	; 0x3c

						    	RESET_CC1_T1;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800080a:	6a1b      	ldr	r3, [r3, #32]
 800080c:	4a18      	ldr	r2, [pc, #96]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800080e:	f023 0301 	bic.w	r3, r3, #1
 8000812:	6213      	str	r3, [r2, #32]
						    	RESET_CC1N_T2;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000816:	6a1b      	ldr	r3, [r3, #32]
 8000818:	4a15      	ldr	r2, [pc, #84]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800081a:	f023 0304 	bic.w	r3, r3, #4
 800081e:	6213      	str	r3, [r2, #32]
						    	SET_CC2_T3;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000822:	6a1b      	ldr	r3, [r3, #32]
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6213      	str	r3, [r2, #32]
						    	SET_CC2N_T4;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800082e:	6a1b      	ldr	r3, [r3, #32]
 8000830:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000836:	6213      	str	r3, [r2, #32]
						    	SET_CC3_T5;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800083a:	6a1b      	ldr	r3, [r3, #32]
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800083e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000842:	6213      	str	r3, [r2, #32]
						    	SET_CC3N_T6;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	4a09      	ldr	r2, [pc, #36]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800084a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084e:	6213      	str	r3, [r2, #32]

						    break;
 8000850:	bf00      	nop
							}



							if(licznik>5)
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b05      	cmp	r3, #5
 8000858:	dd03      	ble.n	8000862 <HAL_GPIO_EXTI_Callback+0x296>
							licznik=-1;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800085c:	f04f 32ff 	mov.w	r2, #4294967295
 8000860:	601a      	str	r2, [r3, #0]




	}
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40012c00 	.word	0x40012c00
 8000874:	20000000 	.word	0x20000000

08000878 <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
	{


	}
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	//i++;
	if(htim->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		//  TIM1->CCR2=TIM2->CCR2;
		//  TIM1->CCR3=TIM2->CCR2;
		}
	}

}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fd55 	bl	800135a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f8a6 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f7ff fe30 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008b8:	f000 f9a0 	bl	8000bfc <MX_TIM1_Init>
  MX_TIM4_Init();
 80008bc:	f000 fb1e 	bl	8000efc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 fc8a 	bl	80011d8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008c4:	f000 fa80 	bl	8000dc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


    //////// konfiguracja Timer 1  ////////////
    TIM1->ARR=0xFFFE;
 80008c8:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <main+0x130>)
 80008ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC=0;
 80008d0:	4b41      	ldr	r3, [pc, #260]	; (80009d8 <main+0x130>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->CCR1=0;
 80008d6:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <main+0x130>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2=0;
 80008dc:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <main+0x130>)
 80008de:	2200      	movs	r2, #0
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3=0;
 80008e2:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <main+0x130>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c




    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	483c      	ldr	r0, [pc, #240]	; (80009dc <main+0x134>)
 80008ec:	f002 f94e 	bl	8002b8c <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	483a      	ldr	r0, [pc, #232]	; (80009dc <main+0x134>)
 80008f4:	f003 fdb6 	bl	8004464 <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008f8:	2104      	movs	r1, #4
 80008fa:	4838      	ldr	r0, [pc, #224]	; (80009dc <main+0x134>)
 80008fc:	f002 f946 	bl	8002b8c <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000900:	2104      	movs	r1, #4
 8000902:	4836      	ldr	r0, [pc, #216]	; (80009dc <main+0x134>)
 8000904:	f003 fdae 	bl	8004464 <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000908:	2108      	movs	r1, #8
 800090a:	4834      	ldr	r0, [pc, #208]	; (80009dc <main+0x134>)
 800090c:	f002 f93e 	bl	8002b8c <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000910:	2108      	movs	r1, #8
 8000912:	4832      	ldr	r0, [pc, #200]	; (80009dc <main+0x134>)
 8000914:	f003 fda6 	bl	8004464 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f001 f884 	bl	8001a2c <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <main+0x8a>
		  ch1=1;
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <main+0x138>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e002      	b.n	8000938 <main+0x90>
	  else
		  ch1=0;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <main+0x138>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093c:	4829      	ldr	r0, [pc, #164]	; (80009e4 <main+0x13c>)
 800093e:	f001 f875 	bl	8001a2c <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <main+0xa8>
		  ch1N=1;
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <main+0x140>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e002      	b.n	8000956 <main+0xae>
	  else
		  ch1N=0;
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <main+0x140>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8000956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f001 f865 	bl	8001a2c <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <main+0xc8>
		  ch2=1;
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <main+0x144>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e002      	b.n	8000976 <main+0xce>
	  else
		  ch2=0;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <main+0x144>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8000976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f001 f855 	bl	8001a2c <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d003      	beq.n	8000990 <main+0xe8>
		  ch2N=1;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <main+0x148>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	e002      	b.n	8000996 <main+0xee>
	  else
		  ch2N=0;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <main+0x148>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000996:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f001 f845 	bl	8001a2c <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <main+0x108>
	  	  ch3=1;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <main+0x14c>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e002      	b.n	80009b6 <main+0x10e>
	  else
	  	  ch3=0;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <main+0x14c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 80009b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ba:	480f      	ldr	r0, [pc, #60]	; (80009f8 <main+0x150>)
 80009bc:	f001 f836 	bl	8001a2c <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <main+0x126>
	  	  ch3N=1;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <main+0x154>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e7a4      	b.n	8000918 <main+0x70>
	  else
	  	  ch3N=0;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <main+0x154>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 80009d4:	e7a0      	b.n	8000918 <main+0x70>
 80009d6:	bf00      	nop
 80009d8:	40012c00 	.word	0x40012c00
 80009dc:	20000084 	.word	0x20000084
 80009e0:	20000036 	.word	0x20000036
 80009e4:	48000800 	.word	0x48000800
 80009e8:	2000002e 	.word	0x2000002e
 80009ec:	20000033 	.word	0x20000033
 80009f0:	20000032 	.word	0x20000032
 80009f4:	2000002f 	.word	0x2000002f
 80009f8:	48000400 	.word	0x48000400
 80009fc:	2000002c 	.word	0x2000002c

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0a4      	sub	sp, #144	; 0x90
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a0a:	2238      	movs	r2, #56	; 0x38
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 fd96 	bl	8006540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2244      	movs	r2, #68	; 0x44
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f005 fd88 	bl	8006540 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f001 f82b 	bl	8001a8c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a44:	2303      	movs	r3, #3
 8000a46:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a4c:	2350      	movs	r3, #80	; 0x50
 8000a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 f8b3 	bl	8001bd4 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a74:	f000 f826 	bl	8000ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a90:	2107      	movs	r1, #7
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fbb6 	bl	8002204 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a9e:	f000 f811 	bl	8000ac4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fdc5 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ab8:	f000 f804 	bl	8000ac4 <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3790      	adds	r7, #144	; 0x90
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae2:	6093      	str	r3, [r2, #8]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40007000 	.word	0x40007000

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_MspInit+0x44>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_MspInit+0x44>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6613      	str	r3, [r2, #96]	; 0x60
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_MspInit+0x44>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x44>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x44>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000b2a:	f7ff ffd3 	bl	8000ad4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 fc36 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000b9e:	f002 f928 	bl	8002df2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000084 	.word	0x20000084

08000bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <USART2_IRQHandler+0x10>)
 8000bb2:	f003 feab 	bl	800490c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000011c 	.word	0x2000011c

08000bc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000bc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bc8:	f000 ff48 	bl	8001a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <SystemInit+0x28>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <SystemInit+0x28>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SystemInit+0x28>)
 8000be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bea:	609a      	str	r2, [r3, #8]
#endif
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0a0      	sub	sp, #128	; 0x80
 8000c00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	615a      	str	r2, [r3, #20]
 8000c3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	2234      	movs	r2, #52	; 0x34
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 fc7a 	bl	8006540 <memset>

  htim1.Instance = TIM1;
 8000c4c:	4b5c      	ldr	r3, [pc, #368]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000c4e:	4a5d      	ldr	r2, [pc, #372]	; (8000dc4 <MX_TIM1_Init+0x1c8>)
 8000c50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c52:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000c5e:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c64:	4b56      	ldr	r3, [pc, #344]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c6a:	4b55      	ldr	r3, [pc, #340]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b53      	ldr	r3, [pc, #332]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c76:	4852      	ldr	r0, [pc, #328]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000c78:	f001 fed0 	bl	8002a1c <HAL_TIM_Base_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c82:	f7ff ff1f 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c90:	4619      	mov	r1, r3
 8000c92:	484b      	ldr	r0, [pc, #300]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000c94:	f002 fbd0 	bl	8003438 <HAL_TIM_ConfigClockSource>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c9e:	f7ff ff11 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ca2:	4847      	ldr	r0, [pc, #284]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000ca4:	f001 ff11 	bl	8002aca <HAL_TIM_PWM_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000cae:	f7ff ff09 	bl	8000ac4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000cb6:	2330      	movs	r3, #48	; 0x30
 8000cb8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000cba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	483f      	ldr	r0, [pc, #252]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000cc2:	f002 fc97 	bl	80035f4 <HAL_TIM_SlaveConfigSynchro>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ccc:	f7ff fefa 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000cd0:	2370      	movs	r3, #112	; 0x70
 8000cd2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4837      	ldr	r0, [pc, #220]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000ce4:	f003 fc3e 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000cee:	f7ff fee9 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2360      	movs	r3, #96	; 0x60
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	482a      	ldr	r0, [pc, #168]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000d18:	f002 fa7e 	bl	8003218 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d22:	f7ff fecf 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d2e:	2204      	movs	r2, #4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4823      	ldr	r0, [pc, #140]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000d34:	f002 fa70 	bl	8003218 <HAL_TIM_PWM_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000d3e:	f7ff fec1 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481c      	ldr	r0, [pc, #112]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000d50:	f002 fa62 	bl	8003218 <HAL_TIM_PWM_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000d5a:	f7ff feb3 	bl	8000ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d62:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_3;
 8000d6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8000d70:	2344      	movs	r3, #68	; 0x44
 8000d72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000d86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000d92:	2303      	movs	r3, #3
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000da4:	f003 fc60 	bl	8004668 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0x1b6>
  {
    Error_Handler();
 8000dae:	f7ff fe89 	bl	8000ac4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM1_Init+0x1c4>)
 8000db4:	f000 f99a 	bl	80010ec <HAL_TIM_MspPostInit>

}
 8000db8:	bf00      	nop
 8000dba:	3780      	adds	r7, #128	; 0x80
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000084 	.word	0x20000084
 8000dc4:	40012c00 	.word	0x40012c00

08000dc8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b090      	sub	sp, #64	; 0x40
 8000dcc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000e04:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e2a:	4833      	ldr	r0, [pc, #204]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e2c:	f001 fdf6 	bl	8002a1c <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e36:	f7ff fe45 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e44:	4619      	mov	r1, r3
 8000e46:	482c      	ldr	r0, [pc, #176]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e48:	f002 faf6 	bl	8003438 <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e52:	f7ff fe37 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e56:	4828      	ldr	r0, [pc, #160]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e58:	f001 ff6a 	bl	8002d30 <HAL_TIM_IC_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e62:	f7ff fe2f 	bl	8000ac4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e66:	2304      	movs	r3, #4
 8000e68:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e6a:	2350      	movs	r3, #80	; 0x50
 8000e6c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e7e:	f002 fbb9 	bl	80035f4 <HAL_TIM_SlaveConfigSynchro>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000e88:	f7ff fe1c 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000e9c:	f003 fb62 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000ea6:	f7ff fe0d 	bl	8000ac4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000ec2:	f002 f915 	bl	80030f0 <HAL_TIM_IC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000ecc:	f7ff fdfa 	bl	8000ac4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2204      	movs	r2, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <MX_TIM2_Init+0x130>)
 8000ee0:	f002 f906 	bl	80030f0 <HAL_TIM_IC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000eea:	f7ff fdeb 	bl	8000ac4 <Error_Handler>
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3740      	adds	r7, #64	; 0x40
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000d0 	.word	0x200000d0

08000efc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <MX_TIM4_Init+0xcc>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f4c:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000f4e:	f001 fd65 	bl	8002a1c <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000f58:	f7ff fdb4 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	4619      	mov	r1, r3
 8000f68:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000f6a:	f002 fa65 	bl	8003438 <HAL_TIM_ConfigClockSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f74:	f7ff fda6 	bl	8000ac4 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000f90:	f003 f9af 	bl	80042f2 <HAL_TIMEx_HallSensor_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000f9a:	f7ff fd93 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000f9e:	2350      	movs	r3, #80	; 0x50
 8000fa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <MX_TIM4_Init+0xc8>)
 8000fac:	f003 fada 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000fb6:	f7ff fd85 	bl	8000ac4 <Error_Handler>
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3730      	adds	r7, #48	; 0x30
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000038 	.word	0x20000038
 8000fc8:	40000800 	.word	0x40000800

08000fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a3c      	ldr	r2, [pc, #240]	; (80010dc <HAL_TIM_Base_MspInit+0x110>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d114      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fee:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff2:	4a3b      	ldr	r2, [pc, #236]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8000ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffa:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2102      	movs	r1, #2
 800100a:	201a      	movs	r0, #26
 800100c:	f000 faf1 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001010:	201a      	movs	r0, #26
 8001012:	f000 fb08 	bl	8001626 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001016:	e05d      	b.n	80010d4 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001020:	d12a      	bne.n	8001078 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a2e      	ldr	r2, [pc, #184]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a28      	ldr	r2, [pc, #160]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8001052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105c:	2302      	movs	r3, #2
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001060:	2302      	movs	r3, #2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001064:	2301      	movs	r3, #1
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f000 fb59 	bl	8001728 <HAL_GPIO_Init>
}
 8001076:	e02d      	b.n	80010d4 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM4)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_TIM_Base_MspInit+0x118>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d128      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6593      	str	r3, [r2, #88]	; 0x58
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_TIM_Base_MspInit+0x114>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_W_TIM4_Pin|HALL_U_TIM4_Pin|HALL_V_TIM4_Pin;
 80010b2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010bc:	2301      	movs	r3, #1
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c0:	2302      	movs	r3, #2
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <HAL_TIM_Base_MspInit+0x11c>)
 80010d0:	f000 fb2a 	bl	8001728 <HAL_GPIO_Init>
}
 80010d4:	bf00      	nop
 80010d6:	3730      	adds	r7, #48	; 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40012c00 	.word	0x40012c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40000800 	.word	0x40000800
 80010e8:	48000400 	.word	0x48000400

080010ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <HAL_TIM_MspPostInit+0xdc>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d157      	bne.n	80011be <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_TIM_MspPostInit+0xe0>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a2e      	ldr	r2, [pc, #184]	; (80011cc <HAL_TIM_MspPostInit+0xe0>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_TIM_MspPostInit+0xe0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <HAL_TIM_MspPostInit+0xe0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a28      	ldr	r2, [pc, #160]	; (80011cc <HAL_TIM_MspPostInit+0xe0>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_TIM_MspPostInit+0xe0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_TIM_MspPostInit+0xe0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <HAL_TIM_MspPostInit+0xe0>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_TIM_MspPostInit+0xe0>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001168:	2304      	movs	r3, #4
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4817      	ldr	r0, [pc, #92]	; (80011d0 <HAL_TIM_MspPostInit+0xe4>)
 8001174:	f000 fad8 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001182:	2302      	movs	r3, #2
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800118a:	2304      	movs	r3, #4
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <HAL_TIM_MspPostInit+0xe8>)
 8001196:	f000 fac7 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800119a:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a8:	2302      	movs	r3, #2
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011ac:	2306      	movs	r3, #6
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f000 fab5 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012c00 	.word	0x40012c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000400 	.word	0x48000400

080011d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_USART2_UART_Init+0x90>)
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <MX_USART2_UART_Init+0x94>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_USART2_UART_Init+0x90>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_USART2_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_USART2_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_USART2_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_USART2_UART_Init+0x90>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_USART2_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_USART2_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_USART2_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USART2_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_USART2_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001220:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_USART2_UART_Init+0x90>)
 8001222:	f003 fb22 	bl	800486a <HAL_UART_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800122c:	f7ff fc4a 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_USART2_UART_Init+0x90>)
 8001234:	f005 f87c 	bl	8006330 <HAL_UARTEx_SetTxFifoThreshold>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800123e:	f7ff fc41 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <MX_USART2_UART_Init+0x90>)
 8001246:	f005 f8b1 	bl	80063ac <HAL_UARTEx_SetRxFifoThreshold>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001250:	f7ff fc38 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_USART2_UART_Init+0x90>)
 8001256:	f005 f832 	bl	80062be <HAL_UARTEx_DisableFifoMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001260:	f7ff fc30 	bl	8000ac4 <Error_Handler>
  }

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000011c 	.word	0x2000011c
 800126c:	40004400 	.word	0x40004400

08001270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_UART_MspInit+0x8c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12f      	bne.n	80012f2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_UART_MspInit+0x90>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <HAL_UART_MspInit+0x90>)
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	6593      	str	r3, [r2, #88]	; 0x58
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_UART_MspInit+0x90>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_UART_MspInit+0x90>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <HAL_UART_MspInit+0x90>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_UART_MspInit+0x90>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012c2:	2318      	movs	r3, #24
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d2:	2307      	movs	r3, #7
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <HAL_UART_MspInit+0x94>)
 80012de:	f000 fa23 	bl	8001728 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2103      	movs	r1, #3
 80012e6:	2026      	movs	r0, #38	; 0x26
 80012e8:	f000 f983 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ec:	2026      	movs	r0, #38	; 0x26
 80012ee:	f000 f99a 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004400 	.word	0x40004400
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400

08001308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800130a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopForever+0x6>)
  ldr r1, =_edata
 800130e:	490e      	ldr	r1, [pc, #56]	; (8001348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LoopForever+0xe>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001324:	4c0b      	ldr	r4, [pc, #44]	; (8001354 <LoopForever+0x16>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001332:	f7ff fc4d 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f005 f8df 	bl	80064f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133a:	f7ff fab5 	bl	80008a8 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   r0, =_estack
 8001340:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800134c:	080065a0 	.word	0x080065a0
  ldr r2, =_sbss
 8001350:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001354:	200001ac 	.word	0x200001ac

08001358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_2_IRQHandler>

0800135a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f939 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f80e 	bl	800138c <HAL_InitTick>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e001      	b.n	8001380 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800137c:	f7ff fbba 	bl	8000af4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001380:	79fb      	ldrb	r3, [r7, #7]

}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_InitTick+0x68>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d022      	beq.n	80013e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_InitTick+0x6c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_InitTick+0x68>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f944 	bl	8001642 <HAL_SYSTICK_Config>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10f      	bne.n	80013e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b0f      	cmp	r3, #15
 80013c4:	d809      	bhi.n	80013da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c6:	2200      	movs	r2, #0
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	f04f 30ff 	mov.w	r0, #4294967295
 80013ce:	f000 f910 	bl	80015f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_InitTick+0x70>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e007      	b.n	80013ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e004      	b.n	80013ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e001      	b.n	80013ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000000c 	.word	0x2000000c
 80013f8:	20000004 	.word	0x20000004
 80013fc:	20000008 	.word	0x20000008

08001400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_IncTick+0x1c>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_IncTick+0x20>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4413      	add	r3, r2
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_IncTick+0x1c>)
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	200001a8 	.word	0x200001a8
 8001420:	2000000c 	.word	0x2000000c

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	200001a8 	.word	0x200001a8

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff29 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff40 	bl	8001484 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff33 	bl	80014a0 <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa4 	bl	8001598 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d00d      	beq.n	800168e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2204      	movs	r2, #4
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e047      	b.n	800171e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 020e 	bic.w	r2, r2, #14
 800169c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f003 021f 	and.w	r2, r3, #31
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00c      	beq.n	80016fe <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
    }
  }
  return status;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001736:	e15a      	b.n	80019ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 814c 	beq.w	80019e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d00b      	beq.n	8001770 <HAL_GPIO_Init+0x48>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001764:	2b11      	cmp	r3, #17
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b12      	cmp	r3, #18
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0201 	and.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0xea>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b12      	cmp	r3, #18
 8001810:	d123      	bne.n	800185a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	6939      	ldr	r1, [r7, #16]
 8001856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0203 	and.w	r2, r3, #3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80a6 	beq.w	80019e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189c:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <HAL_GPIO_Init+0x2e4>)
 800189e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a0:	4a5a      	ldr	r2, [pc, #360]	; (8001a0c <HAL_GPIO_Init+0x2e4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6613      	str	r3, [r2, #96]	; 0x60
 80018a8:	4b58      	ldr	r3, [pc, #352]	; (8001a0c <HAL_GPIO_Init+0x2e4>)
 80018aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b4:	4a56      	ldr	r2, [pc, #344]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018de:	d01f      	beq.n	8001920 <HAL_GPIO_Init+0x1f8>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a4c      	ldr	r2, [pc, #304]	; (8001a14 <HAL_GPIO_Init+0x2ec>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d019      	beq.n	800191c <HAL_GPIO_Init+0x1f4>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4b      	ldr	r2, [pc, #300]	; (8001a18 <HAL_GPIO_Init+0x2f0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d013      	beq.n	8001918 <HAL_GPIO_Init+0x1f0>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a4a      	ldr	r2, [pc, #296]	; (8001a1c <HAL_GPIO_Init+0x2f4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00d      	beq.n	8001914 <HAL_GPIO_Init+0x1ec>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a49      	ldr	r2, [pc, #292]	; (8001a20 <HAL_GPIO_Init+0x2f8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x1e8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a48      	ldr	r2, [pc, #288]	; (8001a24 <HAL_GPIO_Init+0x2fc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_GPIO_Init+0x1e4>
 8001908:	2305      	movs	r3, #5
 800190a:	e00a      	b.n	8001922 <HAL_GPIO_Init+0x1fa>
 800190c:	2306      	movs	r3, #6
 800190e:	e008      	b.n	8001922 <HAL_GPIO_Init+0x1fa>
 8001910:	2304      	movs	r3, #4
 8001912:	e006      	b.n	8001922 <HAL_GPIO_Init+0x1fa>
 8001914:	2303      	movs	r3, #3
 8001916:	e004      	b.n	8001922 <HAL_GPIO_Init+0x1fa>
 8001918:	2302      	movs	r3, #2
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x1fa>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_GPIO_Init+0x1fa>
 8001920:	2300      	movs	r3, #0
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	f002 0203 	and.w	r2, r2, #3
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	4093      	lsls	r3, r2
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001932:	4937      	ldr	r1, [pc, #220]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001940:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_GPIO_Init+0x300>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001964:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <HAL_GPIO_Init+0x300>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_GPIO_Init+0x300>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800198e:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <HAL_GPIO_Init+0x300>)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_GPIO_Init+0x300>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019b8:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f ae9d 	bne.w	8001738 <HAL_GPIO_Init+0x10>
  }
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000
 8001a14:	48000400 	.word	0x48000400
 8001a18:	48000800 	.word	0x48000800
 8001a1c:	48000c00 	.word	0x48000c00
 8001a20:	48001000 	.word	0x48001000
 8001a24:	48001400 	.word	0x48001400
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fda6 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d141      	bne.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa6:	d131      	bne.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa8:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aae:	4a46      	ldr	r2, [pc, #280]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab8:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ac0:	4a41      	ldr	r2, [pc, #260]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac8:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2232      	movs	r2, #50	; 0x32
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	4a3f      	ldr	r2, [pc, #252]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	0c9b      	lsrs	r3, r3, #18
 8001ada:	3301      	adds	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ade:	e002      	b.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae6:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af2:	d102      	bne.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f2      	bne.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001afa:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b06:	d158      	bne.n	8001bba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e057      	b.n	8001bbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b12:	4a2d      	ldr	r2, [pc, #180]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b1c:	e04d      	b.n	8001bba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b24:	d141      	bne.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b32:	d131      	bne.n	8001b98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b3a:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2232      	movs	r2, #50	; 0x32
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	0c9b      	lsrs	r3, r3, #18
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6a:	e002      	b.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	d102      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f2      	bne.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d112      	bne.n	8001bba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e011      	b.n	8001bbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ba8:	e007      	b.n	8001bba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	431bde83 	.word	0x431bde83

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e308      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d075      	beq.n	8001cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf2:	4ba3      	ldr	r3, [pc, #652]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfc:	4ba0      	ldr	r3, [pc, #640]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3e>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d002      	beq.n	8001c18 <HAL_RCC_OscConfig+0x44>
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d10b      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d05b      	beq.n	8001cdc <HAL_RCC_OscConfig+0x108>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d157      	bne.n	8001cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e2e3      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d106      	bne.n	8001c48 <HAL_RCC_OscConfig+0x74>
 8001c3a:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a90      	ldr	r2, [pc, #576]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e01d      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a87      	ldr	r2, [pc, #540]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a83      	ldr	r2, [pc, #524]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a80      	ldr	r2, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fbca 	bl	8001424 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff fbc6 	bl	8001424 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e2a8      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0xc0>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fbb6 	bl	8001424 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff fbb2 	bl	8001424 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e294      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cce:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0xe8>
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d075      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b0c      	cmp	r3, #12
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_OscConfig+0x136>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_OscConfig+0x13c>
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d11f      	bne.n	8001d50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d10:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_OscConfig+0x154>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e267      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b55      	ldr	r3, [pc, #340]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	4952      	ldr	r1, [pc, #328]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d3c:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <HAL_RCC_OscConfig+0x2b0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fb23 	bl	800138c <HAL_InitTick>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d043      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e253      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d023      	beq.n	8001da0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d58:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a48      	ldr	r2, [pc, #288]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff fb5e 	bl	8001424 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fb5a 	bl	8001424 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e23c      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7e:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	061b      	lsls	r3, r3, #24
 8001d98:	4939      	ldr	r1, [pc, #228]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
 8001d9e:	e01a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da0:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a36      	ldr	r2, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001da6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff fb3a 	bl	8001424 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff fb36 	bl	8001424 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e218      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1e0>
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df0:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fb13 	bl	8001424 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff fb0f 	bl	8001424 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1f1      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ef      	beq.n	8001e02 <HAL_RCC_OscConfig+0x22e>
 8001e22:	e01b      	b.n	8001e5c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2a:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff faf6 	bl	8001424 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff faf2 	bl	8001424 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e1d4      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ef      	bne.n	8001e3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80ab 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2b4>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e005      	b.n	8001e8a <HAL_RCC_OscConfig+0x2b6>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	20000008 	.word	0x20000008
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00d      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4baf      	ldr	r3, [pc, #700]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4aae      	ldr	r2, [pc, #696]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4bac      	ldr	r3, [pc, #688]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eaa:	4ba9      	ldr	r3, [pc, #676]	; (8002150 <HAL_RCC_OscConfig+0x57c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d118      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb6:	4ba6      	ldr	r3, [pc, #664]	; (8002150 <HAL_RCC_OscConfig+0x57c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4aa5      	ldr	r2, [pc, #660]	; (8002150 <HAL_RCC_OscConfig+0x57c>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff faaf 	bl	8001424 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eca:	f7ff faab 	bl	8001424 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e18d      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001edc:	4b9c      	ldr	r3, [pc, #624]	; (8002150 <HAL_RCC_OscConfig+0x57c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d108      	bne.n	8001f02 <HAL_RCC_OscConfig+0x32e>
 8001ef0:	4b96      	ldr	r3, [pc, #600]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	4a95      	ldr	r2, [pc, #596]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f00:	e024      	b.n	8001f4c <HAL_RCC_OscConfig+0x378>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d110      	bne.n	8001f2c <HAL_RCC_OscConfig+0x358>
 8001f0a:	4b90      	ldr	r3, [pc, #576]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f10:	4a8e      	ldr	r2, [pc, #568]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f1a:	4b8c      	ldr	r3, [pc, #560]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	4a8a      	ldr	r2, [pc, #552]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f2a:	e00f      	b.n	8001f4c <HAL_RCC_OscConfig+0x378>
 8001f2c:	4b87      	ldr	r3, [pc, #540]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	4a86      	ldr	r2, [pc, #536]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3c:	4b83      	ldr	r3, [pc, #524]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	4a82      	ldr	r2, [pc, #520]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d016      	beq.n	8001f82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff fa66 	bl	8001424 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fa62 	bl	8001424 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e142      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ed      	beq.n	8001f5c <HAL_RCC_OscConfig+0x388>
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff fa4f 	bl	8001424 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff fa4b 	bl	8001424 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e12b      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ed      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fae:	7ffb      	ldrb	r3, [r7, #31]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b65      	ldr	r3, [pc, #404]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	4a64      	ldr	r2, [pc, #400]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d03c      	beq.n	8002046 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01c      	beq.n	800200e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fd4:	4b5d      	ldr	r3, [pc, #372]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fda:	4a5c      	ldr	r2, [pc, #368]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fa1e 	bl	8001424 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fec:	f7ff fa1a 	bl	8001424 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0fc      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ffe:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ef      	beq.n	8001fec <HAL_RCC_OscConfig+0x418>
 800200c:	e01b      	b.n	8002046 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800200e:	4b4f      	ldr	r3, [pc, #316]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8002010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002014:	4a4d      	ldr	r2, [pc, #308]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff fa01 	bl	8001424 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002026:	f7ff f9fd 	bl	8001424 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e0df      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002038:	4b44      	ldr	r3, [pc, #272]	; (800214c <HAL_RCC_OscConfig+0x578>)
 800203a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ef      	bne.n	8002026 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80d3 	beq.w	80021f6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002050:	4b3e      	ldr	r3, [pc, #248]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b0c      	cmp	r3, #12
 800205a:	f000 808d 	beq.w	8002178 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d15a      	bne.n	800211c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a38      	ldr	r2, [pc, #224]	; (800214c <HAL_RCC_OscConfig+0x578>)
 800206c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7ff f9d7 	bl	8001424 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff f9d3 	bl	8001424 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0b5      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_RCC_OscConfig+0x578>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_RCC_OscConfig+0x578>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_RCC_OscConfig+0x580>)
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6a11      	ldr	r1, [r2, #32]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020a8:	3a01      	subs	r2, #1
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	4311      	orrs	r1, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80020b2:	0212      	lsls	r2, r2, #8
 80020b4:	4311      	orrs	r1, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ba:	0852      	lsrs	r2, r2, #1
 80020bc:	3a01      	subs	r2, #1
 80020be:	0552      	lsls	r2, r2, #21
 80020c0:	4311      	orrs	r1, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020c6:	0852      	lsrs	r2, r2, #1
 80020c8:	3a01      	subs	r2, #1
 80020ca:	0652      	lsls	r2, r2, #25
 80020cc:	4311      	orrs	r1, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020d2:	06d2      	lsls	r2, r2, #27
 80020d4:	430a      	orrs	r2, r1
 80020d6:	491d      	ldr	r1, [pc, #116]	; (800214c <HAL_RCC_OscConfig+0x578>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x578>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_RCC_OscConfig+0x578>)
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_RCC_OscConfig+0x578>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a17      	ldr	r2, [pc, #92]	; (800214c <HAL_RCC_OscConfig+0x578>)
 80020ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff f996 	bl	8001424 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fc:	f7ff f992 	bl	8001424 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e074      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x528>
 800211a:	e06c      	b.n	80021f6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_OscConfig+0x578>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8002122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002126:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_RCC_OscConfig+0x578>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_RCC_OscConfig+0x578>)
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_OscConfig+0x578>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_RCC_OscConfig+0x578>)
 800213a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff f96e 	bl	8001424 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214a:	e00e      	b.n	800216a <HAL_RCC_OscConfig+0x596>
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
 8002154:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f964 	bl	8001424 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e046      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_RCC_OscConfig+0x62c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x584>
 8002176:	e03e      	b.n	80021f6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e039      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <HAL_RCC_OscConfig+0x62c>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	429a      	cmp	r2, r3
 8002196:	d12c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	3b01      	subs	r3, #1
 80021a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d123      	bne.n	80021f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d11b      	bne.n	80021f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d113      	bne.n	80021f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	3b01      	subs	r3, #1
 80021d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e11e      	b.n	800245a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800221c:	4b91      	ldr	r3, [pc, #580]	; (8002464 <HAL_RCC_ClockConfig+0x260>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d910      	bls.n	800224c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <HAL_RCC_ClockConfig+0x260>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 020f 	bic.w	r2, r3, #15
 8002232:	498c      	ldr	r1, [pc, #560]	; (8002464 <HAL_RCC_ClockConfig+0x260>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b8a      	ldr	r3, [pc, #552]	; (8002464 <HAL_RCC_ClockConfig+0x260>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e106      	b.n	800245a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d073      	beq.n	8002340 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d129      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002260:	4b81      	ldr	r3, [pc, #516]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0f4      	b.n	800245a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002270:	f000 f99e 	bl	80025b0 <RCC_GetSysClockFreqFromPLLSource>
 8002274:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4a7c      	ldr	r2, [pc, #496]	; (800246c <HAL_RCC_ClockConfig+0x268>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d93f      	bls.n	80022fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800227e:	4b7a      	ldr	r3, [pc, #488]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002292:	2b00      	cmp	r3, #0
 8002294:	d033      	beq.n	80022fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d12f      	bne.n	80022fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800229e:	4b72      	ldr	r3, [pc, #456]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a6:	4a70      	ldr	r2, [pc, #448]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 80022a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e024      	b.n	80022fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022bc:	4b6a      	ldr	r3, [pc, #424]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0c6      	b.n	800245a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022cc:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0be      	b.n	800245a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022dc:	f000 f8ce 	bl	800247c <HAL_RCC_GetSysClockFreq>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4a61      	ldr	r2, [pc, #388]	; (800246c <HAL_RCC_ClockConfig+0x268>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d909      	bls.n	80022fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ea:	4b5f      	ldr	r3, [pc, #380]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f2:	4a5d      	ldr	r2, [pc, #372]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4957      	ldr	r1, [pc, #348]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 800230c:	4313      	orrs	r3, r2
 800230e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002310:	f7ff f888 	bl	8001424 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7ff f884 	bl	8001424 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e095      	b.n	800245a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d023      	beq.n	8002394 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a42      	ldr	r2, [pc, #264]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 800235e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002362:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002370:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002378:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 800237a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800237e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4936      	ldr	r1, [pc, #216]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
 8002392:	e008      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b80      	cmp	r3, #128	; 0x80
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	4a32      	ldr	r2, [pc, #200]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 80023a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_RCC_ClockConfig+0x260>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d21d      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b4:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_RCC_ClockConfig+0x260>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 020f 	bic.w	r2, r3, #15
 80023bc:	4929      	ldr	r1, [pc, #164]	; (8002464 <HAL_RCC_ClockConfig+0x260>)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023c4:	f7ff f82e 	bl	8001424 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7ff f82a 	bl	8001424 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e03b      	b.n	800245a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCC_ClockConfig+0x260>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1ed      	bne.n	80023cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4917      	ldr	r1, [pc, #92]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	490f      	ldr	r1, [pc, #60]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800242e:	f000 f825 	bl	800247c <HAL_RCC_GetSysClockFreq>
 8002432:	4601      	mov	r1, r0
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_RCC_ClockConfig+0x264>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <HAL_RCC_ClockConfig+0x26c>)
 8002440:	5cd3      	ldrb	r3, [r2, r3]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	fa21 f303 	lsr.w	r3, r1, r3
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_RCC_ClockConfig+0x270>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_RCC_ClockConfig+0x274>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe ff9a 	bl	800138c <HAL_InitTick>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40022000 	.word	0x40022000
 8002468:	40021000 	.word	0x40021000
 800246c:	04c4b400 	.word	0x04c4b400
 8002470:	08006578 	.word	0x08006578
 8002474:	20000004 	.word	0x20000004
 8002478:	20000008 	.word	0x20000008

0800247c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d102      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	e047      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d102      	bne.n	80024a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	e03e      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d136      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3301      	adds	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d10c      	bne.n	80024ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d0:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	4a16      	ldr	r2, [pc, #88]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024da:	68d2      	ldr	r2, [r2, #12]
 80024dc:	0a12      	lsrs	r2, r2, #8
 80024de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	617b      	str	r3, [r7, #20]
      break;
 80024e8:	e00c      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ea:	4a13      	ldr	r2, [pc, #76]	; (8002538 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f4:	68d2      	ldr	r2, [r2, #12]
 80024f6:	0a12      	lsrs	r2, r2, #8
 80024f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
      break;
 8002502:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0e5b      	lsrs	r3, r3, #25
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	3301      	adds	r3, #1
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	e001      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002524:	693b      	ldr	r3, [r7, #16]
}
 8002526:	4618      	mov	r0, r3
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	00f42400 	.word	0x00f42400
 800253c:	007a1200 	.word	0x007a1200

08002540 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_RCC_GetHCLKFreq+0x14>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000004 	.word	0x20000004

08002558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800255c:	f7ff fff0 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 8002560:	4601      	mov	r1, r0
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x28>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	08006588 	.word	0x08006588

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002588:	f7ff ffda 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 800258c:	4601      	mov	r1, r0
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0adb      	lsrs	r3, r3, #11
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08006588 	.word	0x08006588

080025b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3301      	adds	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d10c      	bne.n	80025ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025de:	68d2      	ldr	r2, [r2, #12]
 80025e0:	0a12      	lsrs	r2, r2, #8
 80025e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	617b      	str	r3, [r7, #20]
    break;
 80025ec:	e00c      	b.n	8002608 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025f8:	68d2      	ldr	r2, [r2, #12]
 80025fa:	0a12      	lsrs	r2, r2, #8
 80025fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    break;
 8002606:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0e5b      	lsrs	r3, r3, #25
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	3301      	adds	r3, #1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002622:	687b      	ldr	r3, [r7, #4]
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40021000 	.word	0x40021000
 8002634:	007a1200 	.word	0x007a1200
 8002638:	00f42400 	.word	0x00f42400

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002644:	2300      	movs	r3, #0
 8002646:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002648:	2300      	movs	r3, #0
 800264a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8098 	beq.w	800278a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b43      	ldr	r3, [pc, #268]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	4a3f      	ldr	r2, [pc, #252]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6593      	str	r3, [r2, #88]	; 0x58
 8002676:	4b3d      	ldr	r3, [pc, #244]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002686:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a39      	ldr	r2, [pc, #228]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002692:	f7fe fec7 	bl	8001424 <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002698:	e009      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe fec3 	bl	8001424 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d902      	bls.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	74fb      	strb	r3, [r7, #19]
        break;
 80026ac:	e005      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ae:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ef      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d159      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01e      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d019      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a1f      	ldr	r2, [pc, #124]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	4a1b      	ldr	r2, [pc, #108]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002708:	4a18      	ldr	r2, [pc, #96]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fe83 	bl	8001424 <HAL_GetTick>
 800271e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002720:	e00b      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fe7f 	bl	8001424 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d902      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	74fb      	strb	r3, [r7, #19]
            break;
 8002738:	e006      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ec      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10b      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4903      	ldr	r1, [pc, #12]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002764:	e008      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	74bb      	strb	r3, [r7, #18]
 800276a:	e005      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800276c:	40021000 	.word	0x40021000
 8002770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002778:	7c7b      	ldrb	r3, [r7, #17]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4ba6      	ldr	r3, [pc, #664]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	4aa5      	ldr	r2, [pc, #660]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002788:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002796:	4ba0      	ldr	r3, [pc, #640]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279c:	f023 0203 	bic.w	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	499c      	ldr	r1, [pc, #624]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027b8:	4b97      	ldr	r3, [pc, #604]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f023 020c 	bic.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4994      	ldr	r1, [pc, #592]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027da:	4b8f      	ldr	r3, [pc, #572]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	498b      	ldr	r1, [pc, #556]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027fc:	4b86      	ldr	r3, [pc, #536]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4983      	ldr	r1, [pc, #524]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800281e:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	497a      	ldr	r1, [pc, #488]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002840:	4b75      	ldr	r3, [pc, #468]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4972      	ldr	r1, [pc, #456]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4969      	ldr	r1, [pc, #420]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002884:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4961      	ldr	r1, [pc, #388]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028a6:	4b5c      	ldr	r3, [pc, #368]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	4958      	ldr	r1, [pc, #352]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	4950      	ldr	r1, [pc, #320]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028e6:	d105      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e8:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002900:	4b45      	ldr	r3, [pc, #276]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	4942      	ldr	r1, [pc, #264]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291e:	d105      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a3c      	ldr	r2, [pc, #240]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800292a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002938:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4934      	ldr	r1, [pc, #208]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002956:	d105      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002958:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a2e      	ldr	r2, [pc, #184]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002962:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d015      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	4926      	ldr	r1, [pc, #152]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298e:	d105      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800299a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d015      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	4918      	ldr	r1, [pc, #96]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d015      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	490a      	ldr	r1, [pc, #40]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029fe:	d105      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e049      	b.n	8002ac2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fac2 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 fe34 	bl	80036c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e049      	b.n	8002b70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f841 	bl	8002b78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4610      	mov	r0, r2
 8002b0a:	f000 fddd 	bl	80036c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_TIM_PWM_Start+0x24>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e03c      	b.n	8002c2a <HAL_TIM_PWM_Start+0x9e>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d109      	bne.n	8002bca <HAL_TIM_PWM_Start+0x3e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	e02f      	b.n	8002c2a <HAL_TIM_PWM_Start+0x9e>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d109      	bne.n	8002be4 <HAL_TIM_PWM_Start+0x58>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e022      	b.n	8002c2a <HAL_TIM_PWM_Start+0x9e>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d109      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x72>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	bf14      	ite	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	2300      	moveq	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	e015      	b.n	8002c2a <HAL_TIM_PWM_Start+0x9e>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d109      	bne.n	8002c18 <HAL_TIM_PWM_Start+0x8c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e008      	b.n	8002c2a <HAL_TIM_PWM_Start+0x9e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06e      	b.n	8002d10 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0xb6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c40:	e023      	b.n	8002c8a <HAL_TIM_PWM_Start+0xfe>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_PWM_Start+0xc6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	e01b      	b.n	8002c8a <HAL_TIM_PWM_Start+0xfe>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Start+0xd6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c60:	e013      	b.n	8002c8a <HAL_TIM_PWM_Start+0xfe>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start+0xe6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c70:	e00b      	b.n	8002c8a <HAL_TIM_PWM_Start+0xfe>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0xf6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c80:	e003      	b.n	8002c8a <HAL_TIM_PWM_Start+0xfe>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	6839      	ldr	r1, [r7, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fb08 	bl	80042a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <HAL_TIM_PWM_Start+0x18c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_TIM_PWM_Start+0x13e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <HAL_TIM_PWM_Start+0x190>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_TIM_PWM_Start+0x13e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_TIM_PWM_Start+0x194>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_TIM_PWM_Start+0x13e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_TIM_PWM_Start+0x198>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_TIM_PWM_Start+0x13e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_TIM_PWM_Start+0x19c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_PWM_Start+0x142>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_TIM_PWM_Start+0x144>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_TIM_PWM_Start+0x1a0>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d00b      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x182>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d007      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40013400 	.word	0x40013400
 8002d20:	40014000 	.word	0x40014000
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40014800 	.word	0x40014800
 8002d2c:	00010007 	.word	0x00010007

08002d30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e049      	b.n	8002dd6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f841 	bl	8002dde <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f000 fcaa 	bl	80036c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d122      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d11b      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0202 	mvn.w	r2, #2
 8002e1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7fd fd29 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002e3a:	e005      	b.n	8002e48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fc25 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fc2c 	bl	80036a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d122      	bne.n	8002ea2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d11b      	bne.n	8002ea2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0204 	mvn.w	r2, #4
 8002e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7fd fcff 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002e8e:	e005      	b.n	8002e9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fbfb 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fc02 	bl	80036a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d122      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d11b      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f06f 0208 	mvn.w	r2, #8
 8002ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fd fcd5 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002ee2:	e005      	b.n	8002ef0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fbd1 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fbd8 	bl	80036a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d122      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d11b      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f06f 0210 	mvn.w	r2, #16
 8002f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2208      	movs	r2, #8
 8002f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fd fcab 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002f36:	e005      	b.n	8002f44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fba7 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fbae 	bl	80036a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10e      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f06f 0201 	mvn.w	r2, #1
 8002f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fb81 	bl	8003678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d10e      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	d107      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f001 fc03 	bl	80047a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f001 fbf6 	bl	80047bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	2b40      	cmp	r3, #64	; 0x40
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fb5c 	bl	80036b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b20      	cmp	r3, #32
 8003008:	d10e      	bne.n	8003028 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d107      	bne.n	8003028 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0220 	mvn.w	r2, #32
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fc28 	bl	8000878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003036:	d10f      	bne.n	8003058 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003046:	d107      	bne.n	8003058 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f001 fbbc 	bl	80047d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003066:	d10f      	bne.n	8003088 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f001 fbae 	bl	80047e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003096:	d10f      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a6:	d107      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f001 fba0 	bl	80047f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030c6:	d10f      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f001 fb92 	bl	800480c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003106:	2302      	movs	r3, #2
 8003108:	e082      	b.n	8003210 <HAL_TIM_IC_ConfigChannel+0x120>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f000 ff04 	bl	8003f34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 020c 	bic.w	r2, r2, #12
 800313a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	619a      	str	r2, [r3, #24]
 800314e:	e05a      	b.n	8003206 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b04      	cmp	r3, #4
 8003154:	d11c      	bne.n	8003190 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f000 ff7c 	bl	8004062 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003178:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6999      	ldr	r1, [r3, #24]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	619a      	str	r2, [r3, #24]
 800318e:	e03a      	b.n	8003206 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11b      	bne.n	80031ce <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f000 ffc9 	bl	800413c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 020c 	bic.w	r2, r2, #12
 80031b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	61da      	str	r2, [r3, #28]
 80031cc:	e01b      	b.n	8003206 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f000 ffe9 	bl	80041b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69d9      	ldr	r1, [r3, #28]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	021a      	lsls	r2, r3, #8
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800322e:	2302      	movs	r3, #2
 8003230:	e0fd      	b.n	800342e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b14      	cmp	r3, #20
 800323e:	f200 80f0 	bhi.w	8003422 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800329d 	.word	0x0800329d
 800324c:	08003423 	.word	0x08003423
 8003250:	08003423 	.word	0x08003423
 8003254:	08003423 	.word	0x08003423
 8003258:	080032dd 	.word	0x080032dd
 800325c:	08003423 	.word	0x08003423
 8003260:	08003423 	.word	0x08003423
 8003264:	08003423 	.word	0x08003423
 8003268:	0800331f 	.word	0x0800331f
 800326c:	08003423 	.word	0x08003423
 8003270:	08003423 	.word	0x08003423
 8003274:	08003423 	.word	0x08003423
 8003278:	0800335f 	.word	0x0800335f
 800327c:	08003423 	.word	0x08003423
 8003280:	08003423 	.word	0x08003423
 8003284:	08003423 	.word	0x08003423
 8003288:	080033a1 	.word	0x080033a1
 800328c:	08003423 	.word	0x08003423
 8003290:	08003423 	.word	0x08003423
 8003294:	08003423 	.word	0x08003423
 8003298:	080033e1 	.word	0x080033e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 faa0 	bl	80037e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6999      	ldr	r1, [r3, #24]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	619a      	str	r2, [r3, #24]
      break;
 80032da:	e0a3      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fb10 	bl	8003908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6999      	ldr	r1, [r3, #24]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
      break;
 800331c:	e082      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fb79 	bl	8003a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0208 	orr.w	r2, r2, #8
 8003338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0204 	bic.w	r2, r2, #4
 8003348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69d9      	ldr	r1, [r3, #28]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	61da      	str	r2, [r3, #28]
      break;
 800335c:	e062      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fbe1 	bl	8003b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69d9      	ldr	r1, [r3, #28]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	61da      	str	r2, [r3, #28]
      break;
 800339e:	e041      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fc4a 	bl	8003c40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0208 	orr.w	r2, r2, #8
 80033ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033de:	e021      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fc8e 	bl	8003d08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003420:	e000      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop

08003438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_TIM_ConfigClockSource+0x18>
 800344c:	2302      	movs	r3, #2
 800344e:	e0c3      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x1a0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800346e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003472:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800347a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b70      	cmp	r3, #112	; 0x70
 800348a:	d038      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0xc6>
 800348c:	2b70      	cmp	r3, #112	; 0x70
 800348e:	d815      	bhi.n	80034bc <HAL_TIM_ConfigClockSource+0x84>
 8003490:	2b30      	cmp	r3, #48	; 0x30
 8003492:	f000 808e 	beq.w	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
 8003496:	2b30      	cmp	r3, #48	; 0x30
 8003498:	d809      	bhi.n	80034ae <HAL_TIM_ConfigClockSource+0x76>
 800349a:	2b10      	cmp	r3, #16
 800349c:	f000 8089 	beq.w	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	f000 8086 	beq.w	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8083 	beq.w	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034ac:	e08b      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034ae:	2b50      	cmp	r3, #80	; 0x50
 80034b0:	d04f      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x11a>
 80034b2:	2b60      	cmp	r3, #96	; 0x60
 80034b4:	d05d      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x13a>
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d06b      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80034ba:	e084      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034bc:	4a48      	ldr	r2, [pc, #288]	; (80035e0 <HAL_TIM_ConfigClockSource+0x1a8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d077      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
 80034c2:	4a47      	ldr	r2, [pc, #284]	; (80035e0 <HAL_TIM_ConfigClockSource+0x1a8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d809      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0xa4>
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034cc:	d02e      	beq.n	800352c <HAL_TIM_ConfigClockSource+0xf4>
 80034ce:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80034d2:	d06e      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d074      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80034da:	e074      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034dc:	4a41      	ldr	r2, [pc, #260]	; (80035e4 <HAL_TIM_ConfigClockSource+0x1ac>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d067      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
 80034e2:	4a40      	ldr	r2, [pc, #256]	; (80035e4 <HAL_TIM_ConfigClockSource+0x1ac>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d803      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0xb8>
 80034e8:	4a3f      	ldr	r2, [pc, #252]	; (80035e8 <HAL_TIM_ConfigClockSource+0x1b0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d061      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80034ee:	e06a      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034f0:	4a3e      	ldr	r2, [pc, #248]	; (80035ec <HAL_TIM_ConfigClockSource+0x1b4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d05d      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
 80034f6:	4a3e      	ldr	r2, [pc, #248]	; (80035f0 <HAL_TIM_ConfigClockSource+0x1b8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d05a      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80034fc:	e063      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f000 feab 	bl	8004268 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003520:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	609a      	str	r2, [r3, #8]
      break;
 800352a:	e04c      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6899      	ldr	r1, [r3, #8]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f000 fe94 	bl	8004268 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800354e:	609a      	str	r2, [r3, #8]
      break;
 8003550:	e039      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	461a      	mov	r2, r3
 8003560:	f000 fd50 	bl	8004004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2150      	movs	r1, #80	; 0x50
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fe5f 	bl	800422e <TIM_ITRx_SetConfig>
      break;
 8003570:	e029      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	461a      	mov	r2, r3
 8003580:	f000 fdac 	bl	80040dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2160      	movs	r1, #96	; 0x60
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fe4f 	bl	800422e <TIM_ITRx_SetConfig>
      break;
 8003590:	e019      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	461a      	mov	r2, r3
 80035a0:	f000 fd30 	bl	8004004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2140      	movs	r1, #64	; 0x40
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fe3f 	bl	800422e <TIM_ITRx_SetConfig>
      break;
 80035b0:	e009      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f000 fe36 	bl	800422e <TIM_ITRx_SetConfig>
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80035c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00100020 	.word	0x00100020
 80035e4:	00100040 	.word	0x00100040
 80035e8:	00100030 	.word	0x00100030
 80035ec:	00100060 	.word	0x00100060
 80035f0:	00100070 	.word	0x00100070

080035f4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003608:	2302      	movs	r3, #2
 800360a:	e031      	b.n	8003670 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fbd8 	bl	8003dd4 <TIM_SlaveTimer_SetConfig>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e018      	b.n	8003670 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800365c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <TIM_Base_SetConfig+0x104>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00f      	beq.n	8003700 <TIM_Base_SetConfig+0x38>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e6:	d00b      	beq.n	8003700 <TIM_Base_SetConfig+0x38>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a39      	ldr	r2, [pc, #228]	; (80037d0 <TIM_Base_SetConfig+0x108>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d007      	beq.n	8003700 <TIM_Base_SetConfig+0x38>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <TIM_Base_SetConfig+0x10c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_Base_SetConfig+0x38>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a37      	ldr	r2, [pc, #220]	; (80037d8 <TIM_Base_SetConfig+0x110>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d108      	bne.n	8003712 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <TIM_Base_SetConfig+0x104>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01b      	beq.n	8003752 <TIM_Base_SetConfig+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d017      	beq.n	8003752 <TIM_Base_SetConfig+0x8a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2a      	ldr	r2, [pc, #168]	; (80037d0 <TIM_Base_SetConfig+0x108>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <TIM_Base_SetConfig+0x8a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <TIM_Base_SetConfig+0x10c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00f      	beq.n	8003752 <TIM_Base_SetConfig+0x8a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <TIM_Base_SetConfig+0x110>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00b      	beq.n	8003752 <TIM_Base_SetConfig+0x8a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a27      	ldr	r2, [pc, #156]	; (80037dc <TIM_Base_SetConfig+0x114>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <TIM_Base_SetConfig+0x8a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <TIM_Base_SetConfig+0x118>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d003      	beq.n	8003752 <TIM_Base_SetConfig+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <TIM_Base_SetConfig+0x11c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d108      	bne.n	8003764 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a10      	ldr	r2, [pc, #64]	; (80037cc <TIM_Base_SetConfig+0x104>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00f      	beq.n	80037b0 <TIM_Base_SetConfig+0xe8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a11      	ldr	r2, [pc, #68]	; (80037d8 <TIM_Base_SetConfig+0x110>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00b      	beq.n	80037b0 <TIM_Base_SetConfig+0xe8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a10      	ldr	r2, [pc, #64]	; (80037dc <TIM_Base_SetConfig+0x114>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <TIM_Base_SetConfig+0xe8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <TIM_Base_SetConfig+0x118>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_Base_SetConfig+0xe8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <TIM_Base_SetConfig+0x11c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d103      	bne.n	80037b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	615a      	str	r2, [r3, #20]
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40013400 	.word	0x40013400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800

080037e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f023 0201 	bic.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f023 0302 	bic.w	r3, r3, #2
 8003834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <TIM_OC1_SetConfig+0x10c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00f      	beq.n	8003868 <TIM_OC1_SetConfig+0x80>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <TIM_OC1_SetConfig+0x110>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00b      	beq.n	8003868 <TIM_OC1_SetConfig+0x80>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <TIM_OC1_SetConfig+0x114>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d007      	beq.n	8003868 <TIM_OC1_SetConfig+0x80>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a29      	ldr	r2, [pc, #164]	; (8003900 <TIM_OC1_SetConfig+0x118>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_OC1_SetConfig+0x80>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a28      	ldr	r2, [pc, #160]	; (8003904 <TIM_OC1_SetConfig+0x11c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d10c      	bne.n	8003882 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f023 0308 	bic.w	r3, r3, #8
 800386e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <TIM_OC1_SetConfig+0x10c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00f      	beq.n	80038aa <TIM_OC1_SetConfig+0xc2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <TIM_OC1_SetConfig+0x110>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00b      	beq.n	80038aa <TIM_OC1_SetConfig+0xc2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <TIM_OC1_SetConfig+0x114>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <TIM_OC1_SetConfig+0xc2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <TIM_OC1_SetConfig+0x118>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_OC1_SetConfig+0xc2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a17      	ldr	r2, [pc, #92]	; (8003904 <TIM_OC1_SetConfig+0x11c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d111      	bne.n	80038ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	621a      	str	r2, [r3, #32]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40013400 	.word	0x40013400
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800

08003908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f023 0210 	bic.w	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0320 	bic.w	r3, r3, #32
 8003956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <TIM_OC2_SetConfig+0x100>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC2_SetConfig+0x6c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <TIM_OC2_SetConfig+0x104>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10d      	bne.n	8003990 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <TIM_OC2_SetConfig+0x100>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00f      	beq.n	80039b8 <TIM_OC2_SetConfig+0xb0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <TIM_OC2_SetConfig+0x104>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00b      	beq.n	80039b8 <TIM_OC2_SetConfig+0xb0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <TIM_OC2_SetConfig+0x108>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <TIM_OC2_SetConfig+0xb0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a1a      	ldr	r2, [pc, #104]	; (8003a14 <TIM_OC2_SetConfig+0x10c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_OC2_SetConfig+0xb0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <TIM_OC2_SetConfig+0x110>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d113      	bne.n	80039e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40013400 	.word	0x40013400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800

08003a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a27      	ldr	r2, [pc, #156]	; (8003b18 <TIM_OC3_SetConfig+0xfc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d003      	beq.n	8003a86 <TIM_OC3_SetConfig+0x6a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a26      	ldr	r2, [pc, #152]	; (8003b1c <TIM_OC3_SetConfig+0x100>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10d      	bne.n	8003aa2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	; (8003b18 <TIM_OC3_SetConfig+0xfc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00f      	beq.n	8003aca <TIM_OC3_SetConfig+0xae>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <TIM_OC3_SetConfig+0x100>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_OC3_SetConfig+0xae>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <TIM_OC3_SetConfig+0x104>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_OC3_SetConfig+0xae>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a19      	ldr	r2, [pc, #100]	; (8003b24 <TIM_OC3_SetConfig+0x108>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_OC3_SetConfig+0xae>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <TIM_OC3_SetConfig+0x10c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d113      	bne.n	8003af2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40013400 	.word	0x40013400
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800

08003b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	031b      	lsls	r3, r3, #12
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <TIM_OC4_SetConfig+0x100>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_OC4_SetConfig+0x6c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <TIM_OC4_SetConfig+0x104>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d10d      	bne.n	8003bb4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <TIM_OC4_SetConfig+0x100>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00f      	beq.n	8003bdc <TIM_OC4_SetConfig+0xb0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <TIM_OC4_SetConfig+0x104>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <TIM_OC4_SetConfig+0xb0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <TIM_OC4_SetConfig+0x108>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_OC4_SetConfig+0xb0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <TIM_OC4_SetConfig+0x10c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC4_SetConfig+0xb0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <TIM_OC4_SetConfig+0x110>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d113      	bne.n	8003c04 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	019b      	lsls	r3, r3, #6
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40013400 	.word	0x40013400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40014400 	.word	0x40014400
 8003c3c:	40014800 	.word	0x40014800

08003c40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	041b      	lsls	r3, r3, #16
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <TIM_OC5_SetConfig+0xb4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00f      	beq.n	8003cba <TIM_OC5_SetConfig+0x7a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <TIM_OC5_SetConfig+0xb8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_OC5_SetConfig+0x7a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <TIM_OC5_SetConfig+0xbc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_OC5_SetConfig+0x7a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <TIM_OC5_SetConfig+0xc0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_OC5_SetConfig+0x7a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <TIM_OC5_SetConfig+0xc4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d109      	bne.n	8003cce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	621a      	str	r2, [r3, #32]
}
 8003ce8:	bf00      	nop
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40013400 	.word	0x40013400
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800

08003d08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	051b      	lsls	r3, r3, #20
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <TIM_OC6_SetConfig+0xb8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00f      	beq.n	8003d84 <TIM_OC6_SetConfig+0x7c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <TIM_OC6_SetConfig+0xbc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00b      	beq.n	8003d84 <TIM_OC6_SetConfig+0x7c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <TIM_OC6_SetConfig+0xc0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d007      	beq.n	8003d84 <TIM_OC6_SetConfig+0x7c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <TIM_OC6_SetConfig+0xc4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_OC6_SetConfig+0x7c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <TIM_OC6_SetConfig+0xc8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d109      	bne.n	8003d98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	029b      	lsls	r3, r3, #10
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40013400 	.word	0x40013400
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40014400 	.word	0x40014400
 8003dd0:	40014800 	.word	0x40014800

08003dd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e02:	f023 0307 	bic.w	r3, r3, #7
 8003e06:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b60      	cmp	r3, #96	; 0x60
 8003e20:	d06d      	beq.n	8003efe <TIM_SlaveTimer_SetConfig+0x12a>
 8003e22:	2b60      	cmp	r3, #96	; 0x60
 8003e24:	d80f      	bhi.n	8003e46 <TIM_SlaveTimer_SetConfig+0x72>
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d073      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d804      	bhi.n	8003e38 <TIM_SlaveTimer_SetConfig+0x64>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d06f      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d06d      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8003e36:	e06d      	b.n	8003f14 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d028      	beq.n	8003e8e <TIM_SlaveTimer_SetConfig+0xba>
 8003e3c:	2b50      	cmp	r3, #80	; 0x50
 8003e3e:	d054      	beq.n	8003eea <TIM_SlaveTimer_SetConfig+0x116>
 8003e40:	2b30      	cmp	r3, #48	; 0x30
 8003e42:	d066      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003e44:	e066      	b.n	8003f14 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e46:	4a36      	ldr	r2, [pc, #216]	; (8003f20 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d062      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e4c:	4a34      	ldr	r2, [pc, #208]	; (8003f20 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d808      	bhi.n	8003e64 <TIM_SlaveTimer_SetConfig+0x90>
 8003e52:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e56:	d05c      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e58:	4a32      	ldr	r2, [pc, #200]	; (8003f24 <TIM_SlaveTimer_SetConfig+0x150>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d059      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e5e:	2b70      	cmp	r3, #112	; 0x70
 8003e60:	d00a      	beq.n	8003e78 <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8003e62:	e057      	b.n	8003f14 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e64:	4a30      	ldr	r2, [pc, #192]	; (8003f28 <TIM_SlaveTimer_SetConfig+0x154>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d053      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e6a:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <TIM_SlaveTimer_SetConfig+0x158>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d050      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e70:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <TIM_SlaveTimer_SetConfig+0x15c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d04d      	beq.n	8003f12 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003e76:	e04d      	b.n	8003f14 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68d9      	ldr	r1, [r3, #12]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f000 f9ee 	bl	8004268 <TIM_ETR_SetConfig>
      break;
 8003e8c:	e042      	b.n	8003f14 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d004      	beq.n	8003ea0 <TIM_SlaveTimer_SetConfig+0xcc>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003e9e:	d101      	bne.n	8003ea4 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e038      	b.n	8003f16 <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eca:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	621a      	str	r2, [r3, #32]
      break;
 8003ee8:	e014      	b.n	8003f14 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 f884 	bl	8004004 <TIM_TI1_ConfigInputStage>
      break;
 8003efc:	e00a      	b.n	8003f14 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6899      	ldr	r1, [r3, #8]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 f8e6 	bl	80040dc <TIM_TI2_ConfigInputStage>
      break;
 8003f10:	e000      	b.n	8003f14 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8003f12:	bf00      	nop
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	00100030 	.word	0x00100030
 8003f24:	00100020 	.word	0x00100020
 8003f28:	00100060 	.word	0x00100060
 8003f2c:	00100070 	.word	0x00100070
 8003f30:	00100040 	.word	0x00100040

08003f34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f023 0201 	bic.w	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <TIM_TI1_SetConfig+0xbc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <TIM_TI1_SetConfig+0x56>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f68:	d00f      	beq.n	8003f8a <TIM_TI1_SetConfig+0x56>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <TIM_TI1_SetConfig+0xc0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_TI1_SetConfig+0x56>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <TIM_TI1_SetConfig+0xc4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <TIM_TI1_SetConfig+0x56>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <TIM_TI1_SetConfig+0xc8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_TI1_SetConfig+0x56>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a1e      	ldr	r2, [pc, #120]	; (8004000 <TIM_TI1_SetConfig+0xcc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d101      	bne.n	8003f8e <TIM_TI1_SetConfig+0x5a>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <TIM_TI1_SetConfig+0x5c>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e003      	b.n	8003fae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f023 030a 	bic.w	r3, r3, #10
 8003fc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f003 030a 	and.w	r3, r3, #10
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40013400 	.word	0x40013400
 8004000:	40014000 	.word	0x40014000

08004004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f023 0201 	bic.w	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f023 030a 	bic.w	r3, r3, #10
 8004040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	621a      	str	r2, [r3, #32]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004062:	b480      	push	{r7}
 8004064:	b087      	sub	sp, #28
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f023 0210 	bic.w	r2, r3, #16
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	031b      	lsls	r3, r3, #12
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	621a      	str	r2, [r3, #32]
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f023 0210 	bic.w	r2, r3, #16
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004106:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	031b      	lsls	r3, r3, #12
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004118:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	621a      	str	r2, [r3, #32]
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 0303 	bic.w	r3, r3, #3
 8004168:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004178:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	b2db      	uxtb	r3, r3
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800418c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	031b      	lsls	r3, r3, #12
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004206:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	031b      	lsls	r3, r3, #12
 800420c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	f043 0307 	orr.w	r3, r3, #7
 8004254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	021a      	lsls	r2, r3, #8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	431a      	orrs	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2201      	movs	r2, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	401a      	ands	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08a      	sub	sp, #40	; 0x28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e0a0      	b.n	8004448 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f898 	bl	8004450 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f7ff f9c8 	bl	80036c8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2203      	movs	r2, #3
 8004346:	f7ff fdf5 	bl	8003f34 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699a      	ldr	r2, [r3, #24]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 020c 	bic.w	r2, r2, #12
 8004358:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6999      	ldr	r1, [r3, #24]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800437a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0204 	orr.w	r2, r2, #4
 80043c2:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80043cc:	2370      	movs	r3, #112	; 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043d0:	2300      	movs	r3, #0
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f107 020c 	add.w	r2, r7, #12
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fa8b 	bl	8003908 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004404:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004414:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3728      	adds	r7, #40	; 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_TIMEx_PWMN_Start+0x24>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e022      	b.n	80044ce <HAL_TIMEx_PWMN_Start+0x6a>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d109      	bne.n	80044a2 <HAL_TIMEx_PWMN_Start+0x3e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	bf14      	ite	ne
 800449a:	2301      	movne	r3, #1
 800449c:	2300      	moveq	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e015      	b.n	80044ce <HAL_TIMEx_PWMN_Start+0x6a>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d109      	bne.n	80044bc <HAL_TIMEx_PWMN_Start+0x58>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e008      	b.n	80044ce <HAL_TIMEx_PWMN_Start+0x6a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e040      	b.n	8004558 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <HAL_TIMEx_PWMN_Start+0x82>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e4:	e013      	b.n	800450e <HAL_TIMEx_PWMN_Start+0xaa>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d104      	bne.n	80044f6 <HAL_TIMEx_PWMN_Start+0x92>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044f4:	e00b      	b.n	800450e <HAL_TIMEx_PWMN_Start+0xaa>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d104      	bne.n	8004506 <HAL_TIMEx_PWMN_Start+0xa2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004504:	e003      	b.n	800450e <HAL_TIMEx_PWMN_Start+0xaa>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2204      	movs	r2, #4
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f982 	bl	8004820 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800452a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_TIMEx_PWMN_Start+0xfc>)
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b06      	cmp	r3, #6
 800453c:	d00b      	beq.n	8004556 <HAL_TIMEx_PWMN_Start+0xf2>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004544:	d007      	beq.n	8004556 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	00010007 	.word	0x00010007

08004564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004578:	2302      	movs	r3, #2
 800457a:	e065      	b.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d108      	bne.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80045c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d018      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d013      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00e      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a17      	ldr	r2, [pc, #92]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a12      	ldr	r2, [pc, #72]	; (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a13      	ldr	r2, [pc, #76]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d10c      	bne.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	4313      	orrs	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40013400 	.word	0x40013400
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40014000 	.word	0x40014000

08004668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004680:	2302      	movs	r3, #2
 8004682:	e087      	b.n	8004794 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a25      	ldr	r2, [pc, #148]	; (80047a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d106      	bne.n	8004720 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1e      	ldr	r2, [pc, #120]	; (80047a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d126      	bne.n	8004782 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	051b      	lsls	r3, r3, #20
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d106      	bne.n	8004782 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40013400 	.word	0x40013400

080047a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2204      	movs	r2, #4
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1a      	ldr	r2, [r3, #32]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	43db      	mvns	r3, r3
 8004842:	401a      	ands	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1a      	ldr	r2, [r3, #32]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e042      	b.n	8004902 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fc fcee 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2224      	movs	r2, #36	; 0x24
 8004898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f9a7 	bl	8004c00 <UART_SetConfig>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e022      	b.n	8004902 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 fb55 	bl	8005f74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f001 fbdc 	bl	80060b8 <UART_CheckIdleState>
 8004900:	4603      	mov	r3, r0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d118      	bne.n	800496c <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d009      	beq.n	800496c <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 812e 	beq.w	8004bbe <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
      }
      return;
 800496a:	e128      	b.n	8004bbe <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80d1 	beq.w	8004b16 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4b96      	ldr	r3, [pc, #600]	; (8004bd0 <HAL_UART_IRQHandler+0x2c4>)
 8004978:	4013      	ands	r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80c6 	beq.w	8004b16 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d010      	beq.n	80049b6 <HAL_UART_IRQHandler+0xaa>
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2201      	movs	r2, #1
 80049a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	f043 0201 	orr.w	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <HAL_UART_IRQHandler+0xd6>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2202      	movs	r2, #2
 80049d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	f043 0204 	orr.w	r2, r3, #4
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d010      	beq.n	8004a0e <HAL_UART_IRQHandler+0x102>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2204      	movs	r2, #4
 80049fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f043 0202 	orr.w	r2, r3, #2
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4b6a      	ldr	r3, [pc, #424]	; (8004bd0 <HAL_UART_IRQHandler+0x2c4>)
 8004a26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2208      	movs	r2, #8
 8004a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f043 0208 	orr.w	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80b9 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d011      	beq.n	8004a7e <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a84:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d004      	beq.n	8004a9e <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d031      	beq.n	8004b02 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f001 fb9c 	bl	80061dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d123      	bne.n	8004afa <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d013      	beq.n	8004af2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ace:	4a41      	ldr	r2, [pc, #260]	; (8004bd4 <HAL_UART_IRQHandler+0x2c8>)
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fc fdbf 	bl	800165a <HAL_DMA_Abort_IT>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d017      	beq.n	8004b12 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004aec:	4610      	mov	r0, r2
 8004aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	e00f      	b.n	8004b12 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f87a 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af8:	e00b      	b.n	8004b12 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f876 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	e007      	b.n	8004b12 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f872 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004b10:	e057      	b.n	8004bc2 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b12:	bf00      	nop
    return;
 8004b14:	e055      	b.n	8004bc2 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00d      	beq.n	8004b3c <HAL_UART_IRQHandler+0x230>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d008      	beq.n	8004b3c <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f001 fba4 	bl	8006282 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b3a:	e045      	b.n	8004bc8 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d012      	beq.n	8004b6c <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d104      	bne.n	8004b5a <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d008      	beq.n	8004b6c <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d031      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
    }
    return;
 8004b6a:	e02c      	b.n	8004bc6 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_UART_IRQHandler+0x27c>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f001 fb64 	bl	800624e <UART_EndTransmit_IT>
    return;
 8004b86:	e01f      	b.n	8004bc8 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x298>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f001 fb84 	bl	80062aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ba2:	e011      	b.n	8004bc8 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00c      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x2bc>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	da09      	bge.n	8004bc8 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f001 fb6e 	bl	8006296 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bba:	bf00      	nop
 8004bbc:	e004      	b.n	8004bc8 <HAL_UART_IRQHandler+0x2bc>
      return;
 8004bbe:	bf00      	nop
 8004bc0:	e002      	b.n	8004bc8 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004bc2:	bf00      	nop
 8004bc4:	e000      	b.n	8004bc8 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004bc6:	bf00      	nop
  }
}
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	10000001 	.word	0x10000001
 8004bd4:	08006223 	.word	0x08006223

08004bd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c04:	b08a      	sub	sp, #40	; 0x28
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c34:	4313      	orrs	r3, r2
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4ba4      	ldr	r3, [pc, #656]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a99      	ldr	r2, [pc, #612]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	f023 010f 	bic.w	r1, r3, #15
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a8a      	ldr	r2, [pc, #552]	; (8004ed8 <UART_SetConfig+0x2d8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d126      	bne.n	8004d02 <UART_SetConfig+0x102>
 8004cb4:	4b89      	ldr	r3, [pc, #548]	; (8004edc <UART_SetConfig+0x2dc>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d81a      	bhi.n	8004cf8 <UART_SetConfig+0xf8>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0xc8>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004ce9 	.word	0x08004ce9
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e0d6      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e0d2      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e0ce      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e0ca      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	bf00      	nop
 8004d00:	e0c5      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a76      	ldr	r2, [pc, #472]	; (8004ee0 <UART_SetConfig+0x2e0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d138      	bne.n	8004d7e <UART_SetConfig+0x17e>
 8004d0c:	4b73      	ldr	r3, [pc, #460]	; (8004edc <UART_SetConfig+0x2dc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d82c      	bhi.n	8004d74 <UART_SetConfig+0x174>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0x120>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d55 	.word	0x08004d55
 8004d24:	08004d75 	.word	0x08004d75
 8004d28:	08004d75 	.word	0x08004d75
 8004d2c:	08004d75 	.word	0x08004d75
 8004d30:	08004d65 	.word	0x08004d65
 8004d34:	08004d75 	.word	0x08004d75
 8004d38:	08004d75 	.word	0x08004d75
 8004d3c:	08004d75 	.word	0x08004d75
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004d75 	.word	0x08004d75
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5a:	e098      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e094      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e090      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e08c      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	bf00      	nop
 8004d7c:	e087      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a58      	ldr	r2, [pc, #352]	; (8004ee4 <UART_SetConfig+0x2e4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d125      	bne.n	8004dd4 <UART_SetConfig+0x1d4>
 8004d88:	4b54      	ldr	r3, [pc, #336]	; (8004edc <UART_SetConfig+0x2dc>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d011      	beq.n	8004dba <UART_SetConfig+0x1ba>
 8004d96:	2b10      	cmp	r3, #16
 8004d98:	d802      	bhi.n	8004da0 <UART_SetConfig+0x1a0>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <UART_SetConfig+0x1aa>
 8004d9e:	e014      	b.n	8004dca <UART_SetConfig+0x1ca>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d006      	beq.n	8004db2 <UART_SetConfig+0x1b2>
 8004da4:	2b30      	cmp	r3, #48	; 0x30
 8004da6:	d00c      	beq.n	8004dc2 <UART_SetConfig+0x1c2>
 8004da8:	e00f      	b.n	8004dca <UART_SetConfig+0x1ca>
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db0:	e06d      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004db2:	2302      	movs	r3, #2
 8004db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db8:	e069      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004dba:	2304      	movs	r3, #4
 8004dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc0:	e065      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc8:	e061      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004dca:	2310      	movs	r3, #16
 8004dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd0:	bf00      	nop
 8004dd2:	e05c      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a43      	ldr	r2, [pc, #268]	; (8004ee8 <UART_SetConfig+0x2e8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d125      	bne.n	8004e2a <UART_SetConfig+0x22a>
 8004dde:	4b3f      	ldr	r3, [pc, #252]	; (8004edc <UART_SetConfig+0x2dc>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d011      	beq.n	8004e10 <UART_SetConfig+0x210>
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d802      	bhi.n	8004df6 <UART_SetConfig+0x1f6>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <UART_SetConfig+0x200>
 8004df4:	e014      	b.n	8004e20 <UART_SetConfig+0x220>
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d006      	beq.n	8004e08 <UART_SetConfig+0x208>
 8004dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004dfc:	d00c      	beq.n	8004e18 <UART_SetConfig+0x218>
 8004dfe:	e00f      	b.n	8004e20 <UART_SetConfig+0x220>
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e042      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e03e      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e10:	2304      	movs	r3, #4
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e03a      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e18:	2308      	movs	r3, #8
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1e:	e036      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e20:	2310      	movs	r3, #16
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e26:	bf00      	nop
 8004e28:	e031      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a29      	ldr	r2, [pc, #164]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d129      	bne.n	8004e88 <UART_SetConfig+0x288>
 8004e34:	4b29      	ldr	r3, [pc, #164]	; (8004edc <UART_SetConfig+0x2dc>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e42:	d014      	beq.n	8004e6e <UART_SetConfig+0x26e>
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e48:	d802      	bhi.n	8004e50 <UART_SetConfig+0x250>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <UART_SetConfig+0x25e>
 8004e4e:	e016      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e54:	d007      	beq.n	8004e66 <UART_SetConfig+0x266>
 8004e56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e5a:	d00c      	beq.n	8004e76 <UART_SetConfig+0x276>
 8004e5c:	e00f      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e64:	e013      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6c:	e00f      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e6e:	2304      	movs	r3, #4
 8004e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e74:	e00b      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e76:	2308      	movs	r3, #8
 8004e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7c:	e007      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e7e:	2310      	movs	r3, #16
 8004e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e84:	bf00      	nop
 8004e86:	e002      	b.n	8004e8e <UART_SetConfig+0x28e>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	f040 842e 	bne.w	80056f6 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	f200 8169 	bhi.w	8005176 <UART_SetConfig+0x576>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <UART_SetConfig+0x2ac>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004eed 	.word	0x08004eed
 8004eb0:	08005177 	.word	0x08005177
 8004eb4:	08004f8f 	.word	0x08004f8f
 8004eb8:	08005177 	.word	0x08005177
 8004ebc:	08005027 	.word	0x08005027
 8004ec0:	08005177 	.word	0x08005177
 8004ec4:	08005177 	.word	0x08005177
 8004ec8:	08005177 	.word	0x08005177
 8004ecc:	080050c9 	.word	0x080050c9
 8004ed0:	cfff69f3 	.word	0xcfff69f3
 8004ed4:	40008000 	.word	0x40008000
 8004ed8:	40013800 	.word	0x40013800
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40004400 	.word	0x40004400
 8004ee4:	40004800 	.word	0x40004800
 8004ee8:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004eec:	f7fd fb34 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d044      	beq.n	8004f84 <UART_SetConfig+0x384>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d03e      	beq.n	8004f80 <UART_SetConfig+0x380>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d038      	beq.n	8004f7c <UART_SetConfig+0x37c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d032      	beq.n	8004f78 <UART_SetConfig+0x378>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d02c      	beq.n	8004f74 <UART_SetConfig+0x374>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2b05      	cmp	r3, #5
 8004f20:	d026      	beq.n	8004f70 <UART_SetConfig+0x370>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	2b06      	cmp	r3, #6
 8004f28:	d020      	beq.n	8004f6c <UART_SetConfig+0x36c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2b07      	cmp	r3, #7
 8004f30:	d01a      	beq.n	8004f68 <UART_SetConfig+0x368>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d014      	beq.n	8004f64 <UART_SetConfig+0x364>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	d00e      	beq.n	8004f60 <UART_SetConfig+0x360>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b0a      	cmp	r3, #10
 8004f48:	d008      	beq.n	8004f5c <UART_SetConfig+0x35c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b0b      	cmp	r3, #11
 8004f50:	d102      	bne.n	8004f58 <UART_SetConfig+0x358>
 8004f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f56:	e016      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e014      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	e012      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f60:	2340      	movs	r3, #64	; 0x40
 8004f62:	e010      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f64:	2320      	movs	r3, #32
 8004f66:	e00e      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	e00c      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	e00a      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f70:	230a      	movs	r3, #10
 8004f72:	e008      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f74:	2308      	movs	r3, #8
 8004f76:	e006      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f78:	2306      	movs	r3, #6
 8004f7a:	e004      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	e002      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e000      	b.n	8004f86 <UART_SetConfig+0x386>
 8004f84:	2301      	movs	r3, #1
 8004f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8a:	617b      	str	r3, [r7, #20]
        break;
 8004f8c:	e0f6      	b.n	800517c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d044      	beq.n	8005020 <UART_SetConfig+0x420>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d03e      	beq.n	800501c <UART_SetConfig+0x41c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d038      	beq.n	8005018 <UART_SetConfig+0x418>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d032      	beq.n	8005014 <UART_SetConfig+0x414>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d02c      	beq.n	8005010 <UART_SetConfig+0x410>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d026      	beq.n	800500c <UART_SetConfig+0x40c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b06      	cmp	r3, #6
 8004fc4:	d020      	beq.n	8005008 <UART_SetConfig+0x408>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2b07      	cmp	r3, #7
 8004fcc:	d01a      	beq.n	8005004 <UART_SetConfig+0x404>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d014      	beq.n	8005000 <UART_SetConfig+0x400>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	2b09      	cmp	r3, #9
 8004fdc:	d00e      	beq.n	8004ffc <UART_SetConfig+0x3fc>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b0a      	cmp	r3, #10
 8004fe4:	d008      	beq.n	8004ff8 <UART_SetConfig+0x3f8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b0b      	cmp	r3, #11
 8004fec:	d102      	bne.n	8004ff4 <UART_SetConfig+0x3f4>
 8004fee:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ff2:	e016      	b.n	8005022 <UART_SetConfig+0x422>
 8004ff4:	4ba1      	ldr	r3, [pc, #644]	; (800527c <UART_SetConfig+0x67c>)
 8004ff6:	e014      	b.n	8005022 <UART_SetConfig+0x422>
 8004ff8:	4ba1      	ldr	r3, [pc, #644]	; (8005280 <UART_SetConfig+0x680>)
 8004ffa:	e012      	b.n	8005022 <UART_SetConfig+0x422>
 8004ffc:	4ba1      	ldr	r3, [pc, #644]	; (8005284 <UART_SetConfig+0x684>)
 8004ffe:	e010      	b.n	8005022 <UART_SetConfig+0x422>
 8005000:	4ba1      	ldr	r3, [pc, #644]	; (8005288 <UART_SetConfig+0x688>)
 8005002:	e00e      	b.n	8005022 <UART_SetConfig+0x422>
 8005004:	4ba1      	ldr	r3, [pc, #644]	; (800528c <UART_SetConfig+0x68c>)
 8005006:	e00c      	b.n	8005022 <UART_SetConfig+0x422>
 8005008:	4ba1      	ldr	r3, [pc, #644]	; (8005290 <UART_SetConfig+0x690>)
 800500a:	e00a      	b.n	8005022 <UART_SetConfig+0x422>
 800500c:	4ba1      	ldr	r3, [pc, #644]	; (8005294 <UART_SetConfig+0x694>)
 800500e:	e008      	b.n	8005022 <UART_SetConfig+0x422>
 8005010:	4ba1      	ldr	r3, [pc, #644]	; (8005298 <UART_SetConfig+0x698>)
 8005012:	e006      	b.n	8005022 <UART_SetConfig+0x422>
 8005014:	4ba1      	ldr	r3, [pc, #644]	; (800529c <UART_SetConfig+0x69c>)
 8005016:	e004      	b.n	8005022 <UART_SetConfig+0x422>
 8005018:	4ba1      	ldr	r3, [pc, #644]	; (80052a0 <UART_SetConfig+0x6a0>)
 800501a:	e002      	b.n	8005022 <UART_SetConfig+0x422>
 800501c:	4ba1      	ldr	r3, [pc, #644]	; (80052a4 <UART_SetConfig+0x6a4>)
 800501e:	e000      	b.n	8005022 <UART_SetConfig+0x422>
 8005020:	4b96      	ldr	r3, [pc, #600]	; (800527c <UART_SetConfig+0x67c>)
 8005022:	617b      	str	r3, [r7, #20]
        break;
 8005024:	e0aa      	b.n	800517c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005026:	f7fd fa29 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800502a:	4602      	mov	r2, r0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d044      	beq.n	80050be <UART_SetConfig+0x4be>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b01      	cmp	r3, #1
 800503a:	d03e      	beq.n	80050ba <UART_SetConfig+0x4ba>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b02      	cmp	r3, #2
 8005042:	d038      	beq.n	80050b6 <UART_SetConfig+0x4b6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b03      	cmp	r3, #3
 800504a:	d032      	beq.n	80050b2 <UART_SetConfig+0x4b2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b04      	cmp	r3, #4
 8005052:	d02c      	beq.n	80050ae <UART_SetConfig+0x4ae>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b05      	cmp	r3, #5
 800505a:	d026      	beq.n	80050aa <UART_SetConfig+0x4aa>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	2b06      	cmp	r3, #6
 8005062:	d020      	beq.n	80050a6 <UART_SetConfig+0x4a6>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b07      	cmp	r3, #7
 800506a:	d01a      	beq.n	80050a2 <UART_SetConfig+0x4a2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b08      	cmp	r3, #8
 8005072:	d014      	beq.n	800509e <UART_SetConfig+0x49e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2b09      	cmp	r3, #9
 800507a:	d00e      	beq.n	800509a <UART_SetConfig+0x49a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	2b0a      	cmp	r3, #10
 8005082:	d008      	beq.n	8005096 <UART_SetConfig+0x496>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b0b      	cmp	r3, #11
 800508a:	d102      	bne.n	8005092 <UART_SetConfig+0x492>
 800508c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005090:	e016      	b.n	80050c0 <UART_SetConfig+0x4c0>
 8005092:	2301      	movs	r3, #1
 8005094:	e014      	b.n	80050c0 <UART_SetConfig+0x4c0>
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	e012      	b.n	80050c0 <UART_SetConfig+0x4c0>
 800509a:	2340      	movs	r3, #64	; 0x40
 800509c:	e010      	b.n	80050c0 <UART_SetConfig+0x4c0>
 800509e:	2320      	movs	r3, #32
 80050a0:	e00e      	b.n	80050c0 <UART_SetConfig+0x4c0>
 80050a2:	2310      	movs	r3, #16
 80050a4:	e00c      	b.n	80050c0 <UART_SetConfig+0x4c0>
 80050a6:	230c      	movs	r3, #12
 80050a8:	e00a      	b.n	80050c0 <UART_SetConfig+0x4c0>
 80050aa:	230a      	movs	r3, #10
 80050ac:	e008      	b.n	80050c0 <UART_SetConfig+0x4c0>
 80050ae:	2308      	movs	r3, #8
 80050b0:	e006      	b.n	80050c0 <UART_SetConfig+0x4c0>
 80050b2:	2306      	movs	r3, #6
 80050b4:	e004      	b.n	80050c0 <UART_SetConfig+0x4c0>
 80050b6:	2304      	movs	r3, #4
 80050b8:	e002      	b.n	80050c0 <UART_SetConfig+0x4c0>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e000      	b.n	80050c0 <UART_SetConfig+0x4c0>
 80050be:	2301      	movs	r3, #1
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	617b      	str	r3, [r7, #20]
        break;
 80050c6:	e059      	b.n	800517c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d04e      	beq.n	800516e <UART_SetConfig+0x56e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d047      	beq.n	8005168 <UART_SetConfig+0x568>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d040      	beq.n	8005162 <UART_SetConfig+0x562>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d039      	beq.n	800515c <UART_SetConfig+0x55c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d032      	beq.n	8005156 <UART_SetConfig+0x556>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d02b      	beq.n	8005150 <UART_SetConfig+0x550>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b06      	cmp	r3, #6
 80050fe:	d024      	beq.n	800514a <UART_SetConfig+0x54a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b07      	cmp	r3, #7
 8005106:	d01d      	beq.n	8005144 <UART_SetConfig+0x544>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b08      	cmp	r3, #8
 800510e:	d016      	beq.n	800513e <UART_SetConfig+0x53e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	2b09      	cmp	r3, #9
 8005116:	d00f      	beq.n	8005138 <UART_SetConfig+0x538>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2b0a      	cmp	r3, #10
 800511e:	d008      	beq.n	8005132 <UART_SetConfig+0x532>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b0b      	cmp	r3, #11
 8005126:	d101      	bne.n	800512c <UART_SetConfig+0x52c>
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	e022      	b.n	8005172 <UART_SetConfig+0x572>
 800512c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005130:	e01f      	b.n	8005172 <UART_SetConfig+0x572>
 8005132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005136:	e01c      	b.n	8005172 <UART_SetConfig+0x572>
 8005138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800513c:	e019      	b.n	8005172 <UART_SetConfig+0x572>
 800513e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005142:	e016      	b.n	8005172 <UART_SetConfig+0x572>
 8005144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005148:	e013      	b.n	8005172 <UART_SetConfig+0x572>
 800514a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800514e:	e010      	b.n	8005172 <UART_SetConfig+0x572>
 8005150:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005154:	e00d      	b.n	8005172 <UART_SetConfig+0x572>
 8005156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800515a:	e00a      	b.n	8005172 <UART_SetConfig+0x572>
 800515c:	f241 5355 	movw	r3, #5461	; 0x1555
 8005160:	e007      	b.n	8005172 <UART_SetConfig+0x572>
 8005162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005166:	e004      	b.n	8005172 <UART_SetConfig+0x572>
 8005168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800516c:	e001      	b.n	8005172 <UART_SetConfig+0x572>
 800516e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005172:	617b      	str	r3, [r7, #20]
        break;
 8005174:	e002      	b.n	800517c <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	76fb      	strb	r3, [r7, #27]
        break;
 800517a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 86cd 	beq.w	8005f1e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4413      	add	r3, r2
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	429a      	cmp	r2, r3
 8005192:	d305      	bcc.n	80051a0 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	429a      	cmp	r2, r3
 800519e:	d903      	bls.n	80051a8 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	76fb      	strb	r3, [r7, #27]
 80051a4:	f000 bebb 	b.w	8005f1e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80051a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	f200 828d 	bhi.w	80056cc <UART_SetConfig+0xacc>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <UART_SetConfig+0x5b8>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051dd 	.word	0x080051dd
 80051bc:	080056cd 	.word	0x080056cd
 80051c0:	08005347 	.word	0x08005347
 80051c4:	080056cd 	.word	0x080056cd
 80051c8:	0800543d 	.word	0x0800543d
 80051cc:	080056cd 	.word	0x080056cd
 80051d0:	080056cd 	.word	0x080056cd
 80051d4:	080056cd 	.word	0x080056cd
 80051d8:	0800557b 	.word	0x0800557b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80051dc:	f7fd f9bc 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 80051e0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f04f 0100 	mov.w	r1, #0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d07d      	beq.n	80052ee <UART_SetConfig+0x6ee>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d074      	beq.n	80052e4 <UART_SetConfig+0x6e4>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d06b      	beq.n	80052da <UART_SetConfig+0x6da>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	2b03      	cmp	r3, #3
 8005208:	d062      	beq.n	80052d0 <UART_SetConfig+0x6d0>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b04      	cmp	r3, #4
 8005210:	d059      	beq.n	80052c6 <UART_SetConfig+0x6c6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b05      	cmp	r3, #5
 8005218:	d050      	beq.n	80052bc <UART_SetConfig+0x6bc>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2b06      	cmp	r3, #6
 8005220:	d047      	beq.n	80052b2 <UART_SetConfig+0x6b2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	2b07      	cmp	r3, #7
 8005228:	d03e      	beq.n	80052a8 <UART_SetConfig+0x6a8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2b08      	cmp	r3, #8
 8005230:	d01f      	beq.n	8005272 <UART_SetConfig+0x672>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	2b09      	cmp	r3, #9
 8005238:	d016      	beq.n	8005268 <UART_SetConfig+0x668>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b0a      	cmp	r3, #10
 8005240:	d00d      	beq.n	800525e <UART_SetConfig+0x65e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b0b      	cmp	r3, #11
 8005248:	d104      	bne.n	8005254 <UART_SetConfig+0x654>
 800524a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800524e:	f04f 0400 	mov.w	r4, #0
 8005252:	e050      	b.n	80052f6 <UART_SetConfig+0x6f6>
 8005254:	f04f 0301 	mov.w	r3, #1
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	e04b      	b.n	80052f6 <UART_SetConfig+0x6f6>
 800525e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005262:	f04f 0400 	mov.w	r4, #0
 8005266:	e046      	b.n	80052f6 <UART_SetConfig+0x6f6>
 8005268:	f04f 0340 	mov.w	r3, #64	; 0x40
 800526c:	f04f 0400 	mov.w	r4, #0
 8005270:	e041      	b.n	80052f6 <UART_SetConfig+0x6f6>
 8005272:	f04f 0320 	mov.w	r3, #32
 8005276:	f04f 0400 	mov.w	r4, #0
 800527a:	e03c      	b.n	80052f6 <UART_SetConfig+0x6f6>
 800527c:	00f42400 	.word	0x00f42400
 8005280:	0001e848 	.word	0x0001e848
 8005284:	0003d090 	.word	0x0003d090
 8005288:	0007a120 	.word	0x0007a120
 800528c:	000f4240 	.word	0x000f4240
 8005290:	00145855 	.word	0x00145855
 8005294:	00186a00 	.word	0x00186a00
 8005298:	001e8480 	.word	0x001e8480
 800529c:	0028b0aa 	.word	0x0028b0aa
 80052a0:	003d0900 	.word	0x003d0900
 80052a4:	007a1200 	.word	0x007a1200
 80052a8:	f04f 0310 	mov.w	r3, #16
 80052ac:	f04f 0400 	mov.w	r4, #0
 80052b0:	e021      	b.n	80052f6 <UART_SetConfig+0x6f6>
 80052b2:	f04f 030c 	mov.w	r3, #12
 80052b6:	f04f 0400 	mov.w	r4, #0
 80052ba:	e01c      	b.n	80052f6 <UART_SetConfig+0x6f6>
 80052bc:	f04f 030a 	mov.w	r3, #10
 80052c0:	f04f 0400 	mov.w	r4, #0
 80052c4:	e017      	b.n	80052f6 <UART_SetConfig+0x6f6>
 80052c6:	f04f 0308 	mov.w	r3, #8
 80052ca:	f04f 0400 	mov.w	r4, #0
 80052ce:	e012      	b.n	80052f6 <UART_SetConfig+0x6f6>
 80052d0:	f04f 0306 	mov.w	r3, #6
 80052d4:	f04f 0400 	mov.w	r4, #0
 80052d8:	e00d      	b.n	80052f6 <UART_SetConfig+0x6f6>
 80052da:	f04f 0304 	mov.w	r3, #4
 80052de:	f04f 0400 	mov.w	r4, #0
 80052e2:	e008      	b.n	80052f6 <UART_SetConfig+0x6f6>
 80052e4:	f04f 0302 	mov.w	r3, #2
 80052e8:	f04f 0400 	mov.w	r4, #0
 80052ec:	e003      	b.n	80052f6 <UART_SetConfig+0x6f6>
 80052ee:	f04f 0301 	mov.w	r3, #1
 80052f2:	f04f 0400 	mov.w	r4, #0
 80052f6:	461a      	mov	r2, r3
 80052f8:	4623      	mov	r3, r4
 80052fa:	f7fa ff8d 	bl	8000218 <__aeabi_uldivmod>
 80052fe:	4603      	mov	r3, r0
 8005300:	460c      	mov	r4, r1
 8005302:	4619      	mov	r1, r3
 8005304:	4622      	mov	r2, r4
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	f04f 0400 	mov.w	r4, #0
 800530e:	0214      	lsls	r4, r2, #8
 8005310:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005314:	020b      	lsls	r3, r1, #8
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6852      	ldr	r2, [r2, #4]
 800531a:	0852      	lsrs	r2, r2, #1
 800531c:	4611      	mov	r1, r2
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	eb13 0b01 	adds.w	fp, r3, r1
 8005326:	eb44 0c02 	adc.w	ip, r4, r2
 800532a:	4658      	mov	r0, fp
 800532c:	4661      	mov	r1, ip
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f04f 0400 	mov.w	r4, #0
 8005336:	461a      	mov	r2, r3
 8005338:	4623      	mov	r3, r4
 800533a:	f7fa ff6d 	bl	8000218 <__aeabi_uldivmod>
 800533e:	4603      	mov	r3, r0
 8005340:	460c      	mov	r4, r1
 8005342:	61fb      	str	r3, [r7, #28]
            break;
 8005344:	e1c5      	b.n	80056d2 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d05b      	beq.n	8005406 <UART_SetConfig+0x806>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	2b01      	cmp	r3, #1
 8005354:	d053      	beq.n	80053fe <UART_SetConfig+0x7fe>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	2b02      	cmp	r3, #2
 800535c:	d04b      	beq.n	80053f6 <UART_SetConfig+0x7f6>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	2b03      	cmp	r3, #3
 8005364:	d043      	beq.n	80053ee <UART_SetConfig+0x7ee>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	2b04      	cmp	r3, #4
 800536c:	d03b      	beq.n	80053e6 <UART_SetConfig+0x7e6>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	2b05      	cmp	r3, #5
 8005374:	d033      	beq.n	80053de <UART_SetConfig+0x7de>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	2b06      	cmp	r3, #6
 800537c:	d02b      	beq.n	80053d6 <UART_SetConfig+0x7d6>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	2b07      	cmp	r3, #7
 8005384:	d023      	beq.n	80053ce <UART_SetConfig+0x7ce>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2b08      	cmp	r3, #8
 800538c:	d01b      	beq.n	80053c6 <UART_SetConfig+0x7c6>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b09      	cmp	r3, #9
 8005394:	d013      	beq.n	80053be <UART_SetConfig+0x7be>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b0a      	cmp	r3, #10
 800539c:	d00b      	beq.n	80053b6 <UART_SetConfig+0x7b6>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b0b      	cmp	r3, #11
 80053a4:	d103      	bne.n	80053ae <UART_SetConfig+0x7ae>
 80053a6:	4bae      	ldr	r3, [pc, #696]	; (8005660 <UART_SetConfig+0xa60>)
 80053a8:	f04f 0400 	mov.w	r4, #0
 80053ac:	e02e      	b.n	800540c <UART_SetConfig+0x80c>
 80053ae:	4bad      	ldr	r3, [pc, #692]	; (8005664 <UART_SetConfig+0xa64>)
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	e02a      	b.n	800540c <UART_SetConfig+0x80c>
 80053b6:	4bac      	ldr	r3, [pc, #688]	; (8005668 <UART_SetConfig+0xa68>)
 80053b8:	f04f 0400 	mov.w	r4, #0
 80053bc:	e026      	b.n	800540c <UART_SetConfig+0x80c>
 80053be:	4bab      	ldr	r3, [pc, #684]	; (800566c <UART_SetConfig+0xa6c>)
 80053c0:	f04f 0400 	mov.w	r4, #0
 80053c4:	e022      	b.n	800540c <UART_SetConfig+0x80c>
 80053c6:	4baa      	ldr	r3, [pc, #680]	; (8005670 <UART_SetConfig+0xa70>)
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	e01e      	b.n	800540c <UART_SetConfig+0x80c>
 80053ce:	4ba9      	ldr	r3, [pc, #676]	; (8005674 <UART_SetConfig+0xa74>)
 80053d0:	f04f 0400 	mov.w	r4, #0
 80053d4:	e01a      	b.n	800540c <UART_SetConfig+0x80c>
 80053d6:	a49e      	add	r4, pc, #632	; (adr r4, 8005650 <UART_SetConfig+0xa50>)
 80053d8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80053dc:	e016      	b.n	800540c <UART_SetConfig+0x80c>
 80053de:	4ba6      	ldr	r3, [pc, #664]	; (8005678 <UART_SetConfig+0xa78>)
 80053e0:	f04f 0400 	mov.w	r4, #0
 80053e4:	e012      	b.n	800540c <UART_SetConfig+0x80c>
 80053e6:	4ba5      	ldr	r3, [pc, #660]	; (800567c <UART_SetConfig+0xa7c>)
 80053e8:	f04f 0400 	mov.w	r4, #0
 80053ec:	e00e      	b.n	800540c <UART_SetConfig+0x80c>
 80053ee:	a49a      	add	r4, pc, #616	; (adr r4, 8005658 <UART_SetConfig+0xa58>)
 80053f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80053f4:	e00a      	b.n	800540c <UART_SetConfig+0x80c>
 80053f6:	4ba2      	ldr	r3, [pc, #648]	; (8005680 <UART_SetConfig+0xa80>)
 80053f8:	f04f 0400 	mov.w	r4, #0
 80053fc:	e006      	b.n	800540c <UART_SetConfig+0x80c>
 80053fe:	4ba1      	ldr	r3, [pc, #644]	; (8005684 <UART_SetConfig+0xa84>)
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	e002      	b.n	800540c <UART_SetConfig+0x80c>
 8005406:	4b97      	ldr	r3, [pc, #604]	; (8005664 <UART_SetConfig+0xa64>)
 8005408:	f04f 0400 	mov.w	r4, #0
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6852      	ldr	r2, [r2, #4]
 8005410:	0852      	lsrs	r2, r2, #1
 8005412:	4611      	mov	r1, r2
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	eb13 0b01 	adds.w	fp, r3, r1
 800541c:	eb44 0c02 	adc.w	ip, r4, r2
 8005420:	4658      	mov	r0, fp
 8005422:	4661      	mov	r1, ip
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f04f 0400 	mov.w	r4, #0
 800542c:	461a      	mov	r2, r3
 800542e:	4623      	mov	r3, r4
 8005430:	f7fa fef2 	bl	8000218 <__aeabi_uldivmod>
 8005434:	4603      	mov	r3, r0
 8005436:	460c      	mov	r4, r1
 8005438:	61fb      	str	r3, [r7, #28]
            break;
 800543a:	e14a      	b.n	80056d2 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800543c:	f7fd f81e 	bl	800247c <HAL_RCC_GetSysClockFreq>
 8005440:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4618      	mov	r0, r3
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d067      	beq.n	8005522 <UART_SetConfig+0x922>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b01      	cmp	r3, #1
 8005458:	d05e      	beq.n	8005518 <UART_SetConfig+0x918>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b02      	cmp	r3, #2
 8005460:	d055      	beq.n	800550e <UART_SetConfig+0x90e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b03      	cmp	r3, #3
 8005468:	d04c      	beq.n	8005504 <UART_SetConfig+0x904>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b04      	cmp	r3, #4
 8005470:	d043      	beq.n	80054fa <UART_SetConfig+0x8fa>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b05      	cmp	r3, #5
 8005478:	d03a      	beq.n	80054f0 <UART_SetConfig+0x8f0>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b06      	cmp	r3, #6
 8005480:	d031      	beq.n	80054e6 <UART_SetConfig+0x8e6>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b07      	cmp	r3, #7
 8005488:	d028      	beq.n	80054dc <UART_SetConfig+0x8dc>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b08      	cmp	r3, #8
 8005490:	d01f      	beq.n	80054d2 <UART_SetConfig+0x8d2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b09      	cmp	r3, #9
 8005498:	d016      	beq.n	80054c8 <UART_SetConfig+0x8c8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b0a      	cmp	r3, #10
 80054a0:	d00d      	beq.n	80054be <UART_SetConfig+0x8be>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b0b      	cmp	r3, #11
 80054a8:	d104      	bne.n	80054b4 <UART_SetConfig+0x8b4>
 80054aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054ae:	f04f 0400 	mov.w	r4, #0
 80054b2:	e03a      	b.n	800552a <UART_SetConfig+0x92a>
 80054b4:	f04f 0301 	mov.w	r3, #1
 80054b8:	f04f 0400 	mov.w	r4, #0
 80054bc:	e035      	b.n	800552a <UART_SetConfig+0x92a>
 80054be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054c2:	f04f 0400 	mov.w	r4, #0
 80054c6:	e030      	b.n	800552a <UART_SetConfig+0x92a>
 80054c8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80054cc:	f04f 0400 	mov.w	r4, #0
 80054d0:	e02b      	b.n	800552a <UART_SetConfig+0x92a>
 80054d2:	f04f 0320 	mov.w	r3, #32
 80054d6:	f04f 0400 	mov.w	r4, #0
 80054da:	e026      	b.n	800552a <UART_SetConfig+0x92a>
 80054dc:	f04f 0310 	mov.w	r3, #16
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	e021      	b.n	800552a <UART_SetConfig+0x92a>
 80054e6:	f04f 030c 	mov.w	r3, #12
 80054ea:	f04f 0400 	mov.w	r4, #0
 80054ee:	e01c      	b.n	800552a <UART_SetConfig+0x92a>
 80054f0:	f04f 030a 	mov.w	r3, #10
 80054f4:	f04f 0400 	mov.w	r4, #0
 80054f8:	e017      	b.n	800552a <UART_SetConfig+0x92a>
 80054fa:	f04f 0308 	mov.w	r3, #8
 80054fe:	f04f 0400 	mov.w	r4, #0
 8005502:	e012      	b.n	800552a <UART_SetConfig+0x92a>
 8005504:	f04f 0306 	mov.w	r3, #6
 8005508:	f04f 0400 	mov.w	r4, #0
 800550c:	e00d      	b.n	800552a <UART_SetConfig+0x92a>
 800550e:	f04f 0304 	mov.w	r3, #4
 8005512:	f04f 0400 	mov.w	r4, #0
 8005516:	e008      	b.n	800552a <UART_SetConfig+0x92a>
 8005518:	f04f 0302 	mov.w	r3, #2
 800551c:	f04f 0400 	mov.w	r4, #0
 8005520:	e003      	b.n	800552a <UART_SetConfig+0x92a>
 8005522:	f04f 0301 	mov.w	r3, #1
 8005526:	f04f 0400 	mov.w	r4, #0
 800552a:	461a      	mov	r2, r3
 800552c:	4623      	mov	r3, r4
 800552e:	f7fa fe73 	bl	8000218 <__aeabi_uldivmod>
 8005532:	4603      	mov	r3, r0
 8005534:	460c      	mov	r4, r1
 8005536:	4619      	mov	r1, r3
 8005538:	4622      	mov	r2, r4
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	f04f 0400 	mov.w	r4, #0
 8005542:	0214      	lsls	r4, r2, #8
 8005544:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005548:	020b      	lsls	r3, r1, #8
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6852      	ldr	r2, [r2, #4]
 800554e:	0852      	lsrs	r2, r2, #1
 8005550:	4611      	mov	r1, r2
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	eb13 0b01 	adds.w	fp, r3, r1
 800555a:	eb44 0c02 	adc.w	ip, r4, r2
 800555e:	4658      	mov	r0, fp
 8005560:	4661      	mov	r1, ip
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f04f 0400 	mov.w	r4, #0
 800556a:	461a      	mov	r2, r3
 800556c:	4623      	mov	r3, r4
 800556e:	f7fa fe53 	bl	8000218 <__aeabi_uldivmod>
 8005572:	4603      	mov	r3, r0
 8005574:	460c      	mov	r4, r1
 8005576:	61fb      	str	r3, [r7, #28]
            break;
 8005578:	e0ab      	b.n	80056d2 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8088 	beq.w	8005694 <UART_SetConfig+0xa94>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b01      	cmp	r3, #1
 800558a:	d05b      	beq.n	8005644 <UART_SetConfig+0xa44>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b02      	cmp	r3, #2
 8005592:	d052      	beq.n	800563a <UART_SetConfig+0xa3a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	2b03      	cmp	r3, #3
 800559a:	d04a      	beq.n	8005632 <UART_SetConfig+0xa32>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d041      	beq.n	8005628 <UART_SetConfig+0xa28>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	d039      	beq.n	8005620 <UART_SetConfig+0xa20>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b06      	cmp	r3, #6
 80055b2:	d031      	beq.n	8005618 <UART_SetConfig+0xa18>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b07      	cmp	r3, #7
 80055ba:	d028      	beq.n	800560e <UART_SetConfig+0xa0e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d01f      	beq.n	8005604 <UART_SetConfig+0xa04>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b09      	cmp	r3, #9
 80055ca:	d016      	beq.n	80055fa <UART_SetConfig+0x9fa>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2b0a      	cmp	r3, #10
 80055d2:	d00d      	beq.n	80055f0 <UART_SetConfig+0x9f0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	2b0b      	cmp	r3, #11
 80055da:	d104      	bne.n	80055e6 <UART_SetConfig+0x9e6>
 80055dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e0:	f04f 0400 	mov.w	r4, #0
 80055e4:	e05a      	b.n	800569c <UART_SetConfig+0xa9c>
 80055e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80055ea:	f04f 0400 	mov.w	r4, #0
 80055ee:	e055      	b.n	800569c <UART_SetConfig+0xa9c>
 80055f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055f4:	f04f 0400 	mov.w	r4, #0
 80055f8:	e050      	b.n	800569c <UART_SetConfig+0xa9c>
 80055fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055fe:	f04f 0400 	mov.w	r4, #0
 8005602:	e04b      	b.n	800569c <UART_SetConfig+0xa9c>
 8005604:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005608:	f04f 0400 	mov.w	r4, #0
 800560c:	e046      	b.n	800569c <UART_SetConfig+0xa9c>
 800560e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005612:	f04f 0400 	mov.w	r4, #0
 8005616:	e041      	b.n	800569c <UART_SetConfig+0xa9c>
 8005618:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <UART_SetConfig+0xa88>)
 800561a:	f04f 0400 	mov.w	r4, #0
 800561e:	e03d      	b.n	800569c <UART_SetConfig+0xa9c>
 8005620:	4b1a      	ldr	r3, [pc, #104]	; (800568c <UART_SetConfig+0xa8c>)
 8005622:	f04f 0400 	mov.w	r4, #0
 8005626:	e039      	b.n	800569c <UART_SetConfig+0xa9c>
 8005628:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800562c:	f04f 0400 	mov.w	r4, #0
 8005630:	e034      	b.n	800569c <UART_SetConfig+0xa9c>
 8005632:	4b17      	ldr	r3, [pc, #92]	; (8005690 <UART_SetConfig+0xa90>)
 8005634:	f04f 0400 	mov.w	r4, #0
 8005638:	e030      	b.n	800569c <UART_SetConfig+0xa9c>
 800563a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800563e:	f04f 0400 	mov.w	r4, #0
 8005642:	e02b      	b.n	800569c <UART_SetConfig+0xa9c>
 8005644:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005648:	f04f 0400 	mov.w	r4, #0
 800564c:	e026      	b.n	800569c <UART_SetConfig+0xa9c>
 800564e:	bf00      	nop
 8005650:	14585500 	.word	0x14585500
 8005654:	00000000 	.word	0x00000000
 8005658:	28b0aa00 	.word	0x28b0aa00
 800565c:	00000000 	.word	0x00000000
 8005660:	00f42400 	.word	0x00f42400
 8005664:	f4240000 	.word	0xf4240000
 8005668:	01e84800 	.word	0x01e84800
 800566c:	03d09000 	.word	0x03d09000
 8005670:	07a12000 	.word	0x07a12000
 8005674:	0f424000 	.word	0x0f424000
 8005678:	186a0000 	.word	0x186a0000
 800567c:	1e848000 	.word	0x1e848000
 8005680:	3d090000 	.word	0x3d090000
 8005684:	7a120000 	.word	0x7a120000
 8005688:	000aaa00 	.word	0x000aaa00
 800568c:	000ccc00 	.word	0x000ccc00
 8005690:	00155500 	.word	0x00155500
 8005694:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005698:	f04f 0400 	mov.w	r4, #0
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6852      	ldr	r2, [r2, #4]
 80056a0:	0852      	lsrs	r2, r2, #1
 80056a2:	4611      	mov	r1, r2
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	eb13 0b01 	adds.w	fp, r3, r1
 80056ac:	eb44 0c02 	adc.w	ip, r4, r2
 80056b0:	4658      	mov	r0, fp
 80056b2:	4661      	mov	r1, ip
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f04f 0400 	mov.w	r4, #0
 80056bc:	461a      	mov	r2, r3
 80056be:	4623      	mov	r3, r4
 80056c0:	f7fa fdaa 	bl	8000218 <__aeabi_uldivmod>
 80056c4:	4603      	mov	r3, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	61fb      	str	r3, [r7, #28]
            break;
 80056ca:	e002      	b.n	80056d2 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	76fb      	strb	r3, [r7, #27]
            break;
 80056d0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056d8:	d309      	bcc.n	80056ee <UART_SetConfig+0xaee>
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e0:	d205      	bcs.n	80056ee <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	f000 bc18 	b.w	8005f1e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	76fb      	strb	r3, [r7, #27]
 80056f2:	f000 bc14 	b.w	8005f1e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fe:	f040 8204 	bne.w	8005b0a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8005702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005706:	2b08      	cmp	r3, #8
 8005708:	f200 81df 	bhi.w	8005aca <UART_SetConfig+0xeca>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0xb14>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005739 	.word	0x08005739
 8005718:	080057f1 	.word	0x080057f1
 800571c:	080058a9 	.word	0x080058a9
 8005720:	08005acb 	.word	0x08005acb
 8005724:	08005951 	.word	0x08005951
 8005728:	08005acb 	.word	0x08005acb
 800572c:	08005acb 	.word	0x08005acb
 8005730:	08005acb 	.word	0x08005acb
 8005734:	08005a09 	.word	0x08005a09
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fc ff0e 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 800573c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d044      	beq.n	80057d0 <UART_SetConfig+0xbd0>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	2b01      	cmp	r3, #1
 800574c:	d03e      	beq.n	80057cc <UART_SetConfig+0xbcc>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b02      	cmp	r3, #2
 8005754:	d038      	beq.n	80057c8 <UART_SetConfig+0xbc8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b03      	cmp	r3, #3
 800575c:	d032      	beq.n	80057c4 <UART_SetConfig+0xbc4>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b04      	cmp	r3, #4
 8005764:	d02c      	beq.n	80057c0 <UART_SetConfig+0xbc0>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b05      	cmp	r3, #5
 800576c:	d026      	beq.n	80057bc <UART_SetConfig+0xbbc>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b06      	cmp	r3, #6
 8005774:	d020      	beq.n	80057b8 <UART_SetConfig+0xbb8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b07      	cmp	r3, #7
 800577c:	d01a      	beq.n	80057b4 <UART_SetConfig+0xbb4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b08      	cmp	r3, #8
 8005784:	d014      	beq.n	80057b0 <UART_SetConfig+0xbb0>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b09      	cmp	r3, #9
 800578c:	d00e      	beq.n	80057ac <UART_SetConfig+0xbac>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	2b0a      	cmp	r3, #10
 8005794:	d008      	beq.n	80057a8 <UART_SetConfig+0xba8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b0b      	cmp	r3, #11
 800579c:	d102      	bne.n	80057a4 <UART_SetConfig+0xba4>
 800579e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057a2:	e016      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e014      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	e012      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057ac:	2340      	movs	r3, #64	; 0x40
 80057ae:	e010      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057b0:	2320      	movs	r3, #32
 80057b2:	e00e      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057b4:	2310      	movs	r3, #16
 80057b6:	e00c      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057b8:	230c      	movs	r3, #12
 80057ba:	e00a      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057bc:	230a      	movs	r3, #10
 80057be:	e008      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057c0:	2308      	movs	r3, #8
 80057c2:	e006      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057c4:	2306      	movs	r3, #6
 80057c6:	e004      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057c8:	2304      	movs	r3, #4
 80057ca:	e002      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e000      	b.n	80057d2 <UART_SetConfig+0xbd2>
 80057d0:	2301      	movs	r3, #1
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d8:	005a      	lsls	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	441a      	add	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	61fb      	str	r3, [r7, #28]
        break;
 80057ee:	e16f      	b.n	8005ad0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f0:	f7fc fec8 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 80057f4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d044      	beq.n	8005888 <UART_SetConfig+0xc88>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b01      	cmp	r3, #1
 8005804:	d03e      	beq.n	8005884 <UART_SetConfig+0xc84>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b02      	cmp	r3, #2
 800580c:	d038      	beq.n	8005880 <UART_SetConfig+0xc80>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b03      	cmp	r3, #3
 8005814:	d032      	beq.n	800587c <UART_SetConfig+0xc7c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b04      	cmp	r3, #4
 800581c:	d02c      	beq.n	8005878 <UART_SetConfig+0xc78>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b05      	cmp	r3, #5
 8005824:	d026      	beq.n	8005874 <UART_SetConfig+0xc74>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b06      	cmp	r3, #6
 800582c:	d020      	beq.n	8005870 <UART_SetConfig+0xc70>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b07      	cmp	r3, #7
 8005834:	d01a      	beq.n	800586c <UART_SetConfig+0xc6c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b08      	cmp	r3, #8
 800583c:	d014      	beq.n	8005868 <UART_SetConfig+0xc68>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b09      	cmp	r3, #9
 8005844:	d00e      	beq.n	8005864 <UART_SetConfig+0xc64>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b0a      	cmp	r3, #10
 800584c:	d008      	beq.n	8005860 <UART_SetConfig+0xc60>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b0b      	cmp	r3, #11
 8005854:	d102      	bne.n	800585c <UART_SetConfig+0xc5c>
 8005856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800585a:	e016      	b.n	800588a <UART_SetConfig+0xc8a>
 800585c:	2301      	movs	r3, #1
 800585e:	e014      	b.n	800588a <UART_SetConfig+0xc8a>
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	e012      	b.n	800588a <UART_SetConfig+0xc8a>
 8005864:	2340      	movs	r3, #64	; 0x40
 8005866:	e010      	b.n	800588a <UART_SetConfig+0xc8a>
 8005868:	2320      	movs	r3, #32
 800586a:	e00e      	b.n	800588a <UART_SetConfig+0xc8a>
 800586c:	2310      	movs	r3, #16
 800586e:	e00c      	b.n	800588a <UART_SetConfig+0xc8a>
 8005870:	230c      	movs	r3, #12
 8005872:	e00a      	b.n	800588a <UART_SetConfig+0xc8a>
 8005874:	230a      	movs	r3, #10
 8005876:	e008      	b.n	800588a <UART_SetConfig+0xc8a>
 8005878:	2308      	movs	r3, #8
 800587a:	e006      	b.n	800588a <UART_SetConfig+0xc8a>
 800587c:	2306      	movs	r3, #6
 800587e:	e004      	b.n	800588a <UART_SetConfig+0xc8a>
 8005880:	2304      	movs	r3, #4
 8005882:	e002      	b.n	800588a <UART_SetConfig+0xc8a>
 8005884:	2302      	movs	r3, #2
 8005886:	e000      	b.n	800588a <UART_SetConfig+0xc8a>
 8005888:	2301      	movs	r3, #1
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005890:	005a      	lsls	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	441a      	add	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	61fb      	str	r3, [r7, #28]
        break;
 80058a6:	e113      	b.n	8005ad0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d043      	beq.n	8005938 <UART_SetConfig+0xd38>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d03d      	beq.n	8005934 <UART_SetConfig+0xd34>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d037      	beq.n	8005930 <UART_SetConfig+0xd30>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d031      	beq.n	800592c <UART_SetConfig+0xd2c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d02b      	beq.n	8005928 <UART_SetConfig+0xd28>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d025      	beq.n	8005924 <UART_SetConfig+0xd24>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2b06      	cmp	r3, #6
 80058de:	d01f      	beq.n	8005920 <UART_SetConfig+0xd20>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b07      	cmp	r3, #7
 80058e6:	d019      	beq.n	800591c <UART_SetConfig+0xd1c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d013      	beq.n	8005918 <UART_SetConfig+0xd18>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b09      	cmp	r3, #9
 80058f6:	d00d      	beq.n	8005914 <UART_SetConfig+0xd14>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b0a      	cmp	r3, #10
 80058fe:	d007      	beq.n	8005910 <UART_SetConfig+0xd10>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b0b      	cmp	r3, #11
 8005906:	d101      	bne.n	800590c <UART_SetConfig+0xd0c>
 8005908:	4b8d      	ldr	r3, [pc, #564]	; (8005b40 <UART_SetConfig+0xf40>)
 800590a:	e016      	b.n	800593a <UART_SetConfig+0xd3a>
 800590c:	4b8d      	ldr	r3, [pc, #564]	; (8005b44 <UART_SetConfig+0xf44>)
 800590e:	e014      	b.n	800593a <UART_SetConfig+0xd3a>
 8005910:	4b8d      	ldr	r3, [pc, #564]	; (8005b48 <UART_SetConfig+0xf48>)
 8005912:	e012      	b.n	800593a <UART_SetConfig+0xd3a>
 8005914:	4b8d      	ldr	r3, [pc, #564]	; (8005b4c <UART_SetConfig+0xf4c>)
 8005916:	e010      	b.n	800593a <UART_SetConfig+0xd3a>
 8005918:	4b8d      	ldr	r3, [pc, #564]	; (8005b50 <UART_SetConfig+0xf50>)
 800591a:	e00e      	b.n	800593a <UART_SetConfig+0xd3a>
 800591c:	4b8d      	ldr	r3, [pc, #564]	; (8005b54 <UART_SetConfig+0xf54>)
 800591e:	e00c      	b.n	800593a <UART_SetConfig+0xd3a>
 8005920:	4b8d      	ldr	r3, [pc, #564]	; (8005b58 <UART_SetConfig+0xf58>)
 8005922:	e00a      	b.n	800593a <UART_SetConfig+0xd3a>
 8005924:	4b8d      	ldr	r3, [pc, #564]	; (8005b5c <UART_SetConfig+0xf5c>)
 8005926:	e008      	b.n	800593a <UART_SetConfig+0xd3a>
 8005928:	4b8d      	ldr	r3, [pc, #564]	; (8005b60 <UART_SetConfig+0xf60>)
 800592a:	e006      	b.n	800593a <UART_SetConfig+0xd3a>
 800592c:	4b8d      	ldr	r3, [pc, #564]	; (8005b64 <UART_SetConfig+0xf64>)
 800592e:	e004      	b.n	800593a <UART_SetConfig+0xd3a>
 8005930:	4b8d      	ldr	r3, [pc, #564]	; (8005b68 <UART_SetConfig+0xf68>)
 8005932:	e002      	b.n	800593a <UART_SetConfig+0xd3a>
 8005934:	4b8d      	ldr	r3, [pc, #564]	; (8005b6c <UART_SetConfig+0xf6c>)
 8005936:	e000      	b.n	800593a <UART_SetConfig+0xd3a>
 8005938:	4b82      	ldr	r3, [pc, #520]	; (8005b44 <UART_SetConfig+0xf44>)
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6852      	ldr	r2, [r2, #4]
 800593e:	0852      	lsrs	r2, r2, #1
 8005940:	441a      	add	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	b29b      	uxth	r3, r3
 800594c:	61fb      	str	r3, [r7, #28]
        break;
 800594e:	e0bf      	b.n	8005ad0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005950:	f7fc fd94 	bl	800247c <HAL_RCC_GetSysClockFreq>
 8005954:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d044      	beq.n	80059e8 <UART_SetConfig+0xde8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b01      	cmp	r3, #1
 8005964:	d03e      	beq.n	80059e4 <UART_SetConfig+0xde4>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b02      	cmp	r3, #2
 800596c:	d038      	beq.n	80059e0 <UART_SetConfig+0xde0>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b03      	cmp	r3, #3
 8005974:	d032      	beq.n	80059dc <UART_SetConfig+0xddc>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b04      	cmp	r3, #4
 800597c:	d02c      	beq.n	80059d8 <UART_SetConfig+0xdd8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b05      	cmp	r3, #5
 8005984:	d026      	beq.n	80059d4 <UART_SetConfig+0xdd4>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b06      	cmp	r3, #6
 800598c:	d020      	beq.n	80059d0 <UART_SetConfig+0xdd0>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b07      	cmp	r3, #7
 8005994:	d01a      	beq.n	80059cc <UART_SetConfig+0xdcc>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b08      	cmp	r3, #8
 800599c:	d014      	beq.n	80059c8 <UART_SetConfig+0xdc8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b09      	cmp	r3, #9
 80059a4:	d00e      	beq.n	80059c4 <UART_SetConfig+0xdc4>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b0a      	cmp	r3, #10
 80059ac:	d008      	beq.n	80059c0 <UART_SetConfig+0xdc0>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b0b      	cmp	r3, #11
 80059b4:	d102      	bne.n	80059bc <UART_SetConfig+0xdbc>
 80059b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ba:	e016      	b.n	80059ea <UART_SetConfig+0xdea>
 80059bc:	2301      	movs	r3, #1
 80059be:	e014      	b.n	80059ea <UART_SetConfig+0xdea>
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	e012      	b.n	80059ea <UART_SetConfig+0xdea>
 80059c4:	2340      	movs	r3, #64	; 0x40
 80059c6:	e010      	b.n	80059ea <UART_SetConfig+0xdea>
 80059c8:	2320      	movs	r3, #32
 80059ca:	e00e      	b.n	80059ea <UART_SetConfig+0xdea>
 80059cc:	2310      	movs	r3, #16
 80059ce:	e00c      	b.n	80059ea <UART_SetConfig+0xdea>
 80059d0:	230c      	movs	r3, #12
 80059d2:	e00a      	b.n	80059ea <UART_SetConfig+0xdea>
 80059d4:	230a      	movs	r3, #10
 80059d6:	e008      	b.n	80059ea <UART_SetConfig+0xdea>
 80059d8:	2308      	movs	r3, #8
 80059da:	e006      	b.n	80059ea <UART_SetConfig+0xdea>
 80059dc:	2306      	movs	r3, #6
 80059de:	e004      	b.n	80059ea <UART_SetConfig+0xdea>
 80059e0:	2304      	movs	r3, #4
 80059e2:	e002      	b.n	80059ea <UART_SetConfig+0xdea>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e000      	b.n	80059ea <UART_SetConfig+0xdea>
 80059e8:	2301      	movs	r3, #1
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	005a      	lsls	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	441a      	add	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	61fb      	str	r3, [r7, #28]
        break;
 8005a06:	e063      	b.n	8005ad0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d04f      	beq.n	8005ab0 <UART_SetConfig+0xeb0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d048      	beq.n	8005aaa <UART_SetConfig+0xeaa>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d041      	beq.n	8005aa4 <UART_SetConfig+0xea4>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d03a      	beq.n	8005a9e <UART_SetConfig+0xe9e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d033      	beq.n	8005a98 <UART_SetConfig+0xe98>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b05      	cmp	r3, #5
 8005a36:	d02c      	beq.n	8005a92 <UART_SetConfig+0xe92>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b06      	cmp	r3, #6
 8005a3e:	d025      	beq.n	8005a8c <UART_SetConfig+0xe8c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b07      	cmp	r3, #7
 8005a46:	d01e      	beq.n	8005a86 <UART_SetConfig+0xe86>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d017      	beq.n	8005a80 <UART_SetConfig+0xe80>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b09      	cmp	r3, #9
 8005a56:	d010      	beq.n	8005a7a <UART_SetConfig+0xe7a>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b0a      	cmp	r3, #10
 8005a5e:	d009      	beq.n	8005a74 <UART_SetConfig+0xe74>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b0b      	cmp	r3, #11
 8005a66:	d102      	bne.n	8005a6e <UART_SetConfig+0xe6e>
 8005a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a6c:	e022      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a72:	e01f      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a78:	e01c      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a7e:	e019      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a84:	e016      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a8a:	e013      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a8c:	f241 5354 	movw	r3, #5460	; 0x1554
 8005a90:	e010      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a92:	f641 1398 	movw	r3, #6552	; 0x1998
 8005a96:	e00d      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a9c:	e00a      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a9e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005aa2:	e007      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005aa8:	e004      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aae:	e001      	b.n	8005ab4 <UART_SetConfig+0xeb4>
 8005ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6852      	ldr	r2, [r2, #4]
 8005ab8:	0852      	lsrs	r2, r2, #1
 8005aba:	441a      	add	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	61fb      	str	r3, [r7, #28]
        break;
 8005ac8:	e002      	b.n	8005ad0 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	76fb      	strb	r3, [r7, #27]
        break;
 8005ace:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b0f      	cmp	r3, #15
 8005ad4:	d916      	bls.n	8005b04 <UART_SetConfig+0xf04>
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d212      	bcs.n	8005b04 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f023 030f 	bic.w	r3, r3, #15
 8005ae6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	89fb      	ldrh	r3, [r7, #14]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	89fa      	ldrh	r2, [r7, #14]
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	e20c      	b.n	8005f1e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	76fb      	strb	r3, [r7, #27]
 8005b08:	e209      	b.n	8005f1e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8005b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	f200 81f4 	bhi.w	8005efc <UART_SetConfig+0x12fc>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <UART_SetConfig+0xf1c>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005c27 	.word	0x08005c27
 8005b24:	08005cdd 	.word	0x08005cdd
 8005b28:	08005efd 	.word	0x08005efd
 8005b2c:	08005d87 	.word	0x08005d87
 8005b30:	08005efd 	.word	0x08005efd
 8005b34:	08005efd 	.word	0x08005efd
 8005b38:	08005efd 	.word	0x08005efd
 8005b3c:	08005e3d 	.word	0x08005e3d
 8005b40:	0001e848 	.word	0x0001e848
 8005b44:	01e84800 	.word	0x01e84800
 8005b48:	0003d090 	.word	0x0003d090
 8005b4c:	0007a120 	.word	0x0007a120
 8005b50:	000f4240 	.word	0x000f4240
 8005b54:	001e8480 	.word	0x001e8480
 8005b58:	0028b0aa 	.word	0x0028b0aa
 8005b5c:	0030d400 	.word	0x0030d400
 8005b60:	003d0900 	.word	0x003d0900
 8005b64:	00516154 	.word	0x00516154
 8005b68:	007a1200 	.word	0x007a1200
 8005b6c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fc fcf2 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 8005b74:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d044      	beq.n	8005c08 <UART_SetConfig+0x1008>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d03e      	beq.n	8005c04 <UART_SetConfig+0x1004>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d038      	beq.n	8005c00 <UART_SetConfig+0x1000>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d032      	beq.n	8005bfc <UART_SetConfig+0xffc>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d02c      	beq.n	8005bf8 <UART_SetConfig+0xff8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d026      	beq.n	8005bf4 <UART_SetConfig+0xff4>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d020      	beq.n	8005bf0 <UART_SetConfig+0xff0>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b07      	cmp	r3, #7
 8005bb4:	d01a      	beq.n	8005bec <UART_SetConfig+0xfec>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d014      	beq.n	8005be8 <UART_SetConfig+0xfe8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b09      	cmp	r3, #9
 8005bc4:	d00e      	beq.n	8005be4 <UART_SetConfig+0xfe4>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2b0a      	cmp	r3, #10
 8005bcc:	d008      	beq.n	8005be0 <UART_SetConfig+0xfe0>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b0b      	cmp	r3, #11
 8005bd4:	d102      	bne.n	8005bdc <UART_SetConfig+0xfdc>
 8005bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bda:	e016      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e014      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	e012      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005be4:	2340      	movs	r3, #64	; 0x40
 8005be6:	e010      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005be8:	2320      	movs	r3, #32
 8005bea:	e00e      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005bec:	2310      	movs	r3, #16
 8005bee:	e00c      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005bf0:	230c      	movs	r3, #12
 8005bf2:	e00a      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005bf4:	230a      	movs	r3, #10
 8005bf6:	e008      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	e006      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005bfc:	2306      	movs	r3, #6
 8005bfe:	e004      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005c00:	2304      	movs	r3, #4
 8005c02:	e002      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e000      	b.n	8005c0a <UART_SetConfig+0x100a>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	441a      	add	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	61fb      	str	r3, [r7, #28]
        break;
 8005c24:	e16d      	b.n	8005f02 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c26:	f7fc fcad 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8005c2a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d044      	beq.n	8005cbe <UART_SetConfig+0x10be>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d03e      	beq.n	8005cba <UART_SetConfig+0x10ba>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d038      	beq.n	8005cb6 <UART_SetConfig+0x10b6>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d032      	beq.n	8005cb2 <UART_SetConfig+0x10b2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d02c      	beq.n	8005cae <UART_SetConfig+0x10ae>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b05      	cmp	r3, #5
 8005c5a:	d026      	beq.n	8005caa <UART_SetConfig+0x10aa>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2b06      	cmp	r3, #6
 8005c62:	d020      	beq.n	8005ca6 <UART_SetConfig+0x10a6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	d01a      	beq.n	8005ca2 <UART_SetConfig+0x10a2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d014      	beq.n	8005c9e <UART_SetConfig+0x109e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2b09      	cmp	r3, #9
 8005c7a:	d00e      	beq.n	8005c9a <UART_SetConfig+0x109a>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b0a      	cmp	r3, #10
 8005c82:	d008      	beq.n	8005c96 <UART_SetConfig+0x1096>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b0b      	cmp	r3, #11
 8005c8a:	d102      	bne.n	8005c92 <UART_SetConfig+0x1092>
 8005c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c90:	e016      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e014      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005c96:	2380      	movs	r3, #128	; 0x80
 8005c98:	e012      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	e010      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	e00e      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005ca2:	2310      	movs	r3, #16
 8005ca4:	e00c      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	e00a      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005caa:	230a      	movs	r3, #10
 8005cac:	e008      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005cae:	2308      	movs	r3, #8
 8005cb0:	e006      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005cb2:	2306      	movs	r3, #6
 8005cb4:	e004      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005cb6:	2304      	movs	r3, #4
 8005cb8:	e002      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e000      	b.n	8005cc0 <UART_SetConfig+0x10c0>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	441a      	add	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	61fb      	str	r3, [r7, #28]
        break;
 8005cda:	e112      	b.n	8005f02 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d044      	beq.n	8005d6e <UART_SetConfig+0x116e>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d03e      	beq.n	8005d6a <UART_SetConfig+0x116a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d038      	beq.n	8005d66 <UART_SetConfig+0x1166>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d032      	beq.n	8005d62 <UART_SetConfig+0x1162>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d02c      	beq.n	8005d5e <UART_SetConfig+0x115e>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	d026      	beq.n	8005d5a <UART_SetConfig+0x115a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b06      	cmp	r3, #6
 8005d12:	d020      	beq.n	8005d56 <UART_SetConfig+0x1156>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b07      	cmp	r3, #7
 8005d1a:	d01a      	beq.n	8005d52 <UART_SetConfig+0x1152>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d014      	beq.n	8005d4e <UART_SetConfig+0x114e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b09      	cmp	r3, #9
 8005d2a:	d00e      	beq.n	8005d4a <UART_SetConfig+0x114a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b0a      	cmp	r3, #10
 8005d32:	d008      	beq.n	8005d46 <UART_SetConfig+0x1146>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b0b      	cmp	r3, #11
 8005d3a:	d102      	bne.n	8005d42 <UART_SetConfig+0x1142>
 8005d3c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005d40:	e016      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d42:	4b81      	ldr	r3, [pc, #516]	; (8005f48 <UART_SetConfig+0x1348>)
 8005d44:	e014      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d46:	4b81      	ldr	r3, [pc, #516]	; (8005f4c <UART_SetConfig+0x134c>)
 8005d48:	e012      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d4a:	4b81      	ldr	r3, [pc, #516]	; (8005f50 <UART_SetConfig+0x1350>)
 8005d4c:	e010      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d4e:	4b81      	ldr	r3, [pc, #516]	; (8005f54 <UART_SetConfig+0x1354>)
 8005d50:	e00e      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d52:	4b81      	ldr	r3, [pc, #516]	; (8005f58 <UART_SetConfig+0x1358>)
 8005d54:	e00c      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d56:	4b81      	ldr	r3, [pc, #516]	; (8005f5c <UART_SetConfig+0x135c>)
 8005d58:	e00a      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d5a:	4b81      	ldr	r3, [pc, #516]	; (8005f60 <UART_SetConfig+0x1360>)
 8005d5c:	e008      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d5e:	4b81      	ldr	r3, [pc, #516]	; (8005f64 <UART_SetConfig+0x1364>)
 8005d60:	e006      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d62:	4b81      	ldr	r3, [pc, #516]	; (8005f68 <UART_SetConfig+0x1368>)
 8005d64:	e004      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d66:	4b81      	ldr	r3, [pc, #516]	; (8005f6c <UART_SetConfig+0x136c>)
 8005d68:	e002      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d6a:	4b81      	ldr	r3, [pc, #516]	; (8005f70 <UART_SetConfig+0x1370>)
 8005d6c:	e000      	b.n	8005d70 <UART_SetConfig+0x1170>
 8005d6e:	4b76      	ldr	r3, [pc, #472]	; (8005f48 <UART_SetConfig+0x1348>)
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6852      	ldr	r2, [r2, #4]
 8005d74:	0852      	lsrs	r2, r2, #1
 8005d76:	441a      	add	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	61fb      	str	r3, [r7, #28]
        break;
 8005d84:	e0bd      	b.n	8005f02 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d86:	f7fc fb79 	bl	800247c <HAL_RCC_GetSysClockFreq>
 8005d8a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d044      	beq.n	8005e1e <UART_SetConfig+0x121e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d03e      	beq.n	8005e1a <UART_SetConfig+0x121a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d038      	beq.n	8005e16 <UART_SetConfig+0x1216>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d032      	beq.n	8005e12 <UART_SetConfig+0x1212>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d02c      	beq.n	8005e0e <UART_SetConfig+0x120e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b05      	cmp	r3, #5
 8005dba:	d026      	beq.n	8005e0a <UART_SetConfig+0x120a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b06      	cmp	r3, #6
 8005dc2:	d020      	beq.n	8005e06 <UART_SetConfig+0x1206>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b07      	cmp	r3, #7
 8005dca:	d01a      	beq.n	8005e02 <UART_SetConfig+0x1202>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d014      	beq.n	8005dfe <UART_SetConfig+0x11fe>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b09      	cmp	r3, #9
 8005dda:	d00e      	beq.n	8005dfa <UART_SetConfig+0x11fa>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b0a      	cmp	r3, #10
 8005de2:	d008      	beq.n	8005df6 <UART_SetConfig+0x11f6>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b0b      	cmp	r3, #11
 8005dea:	d102      	bne.n	8005df2 <UART_SetConfig+0x11f2>
 8005dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005df0:	e016      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e014      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005df6:	2380      	movs	r3, #128	; 0x80
 8005df8:	e012      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005dfa:	2340      	movs	r3, #64	; 0x40
 8005dfc:	e010      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005dfe:	2320      	movs	r3, #32
 8005e00:	e00e      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005e02:	2310      	movs	r3, #16
 8005e04:	e00c      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005e06:	230c      	movs	r3, #12
 8005e08:	e00a      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005e0a:	230a      	movs	r3, #10
 8005e0c:	e008      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005e0e:	2308      	movs	r3, #8
 8005e10:	e006      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005e12:	2306      	movs	r3, #6
 8005e14:	e004      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005e16:	2304      	movs	r3, #4
 8005e18:	e002      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e000      	b.n	8005e20 <UART_SetConfig+0x1220>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	441a      	add	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	61fb      	str	r3, [r7, #28]
        break;
 8005e3a:	e062      	b.n	8005f02 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d04e      	beq.n	8005ee2 <UART_SetConfig+0x12e2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d047      	beq.n	8005edc <UART_SetConfig+0x12dc>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d040      	beq.n	8005ed6 <UART_SetConfig+0x12d6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d039      	beq.n	8005ed0 <UART_SetConfig+0x12d0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d032      	beq.n	8005eca <UART_SetConfig+0x12ca>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b05      	cmp	r3, #5
 8005e6a:	d02b      	beq.n	8005ec4 <UART_SetConfig+0x12c4>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b06      	cmp	r3, #6
 8005e72:	d024      	beq.n	8005ebe <UART_SetConfig+0x12be>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b07      	cmp	r3, #7
 8005e7a:	d01d      	beq.n	8005eb8 <UART_SetConfig+0x12b8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d016      	beq.n	8005eb2 <UART_SetConfig+0x12b2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b09      	cmp	r3, #9
 8005e8a:	d00f      	beq.n	8005eac <UART_SetConfig+0x12ac>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b0a      	cmp	r3, #10
 8005e92:	d008      	beq.n	8005ea6 <UART_SetConfig+0x12a6>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b0b      	cmp	r3, #11
 8005e9a:	d101      	bne.n	8005ea0 <UART_SetConfig+0x12a0>
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	e022      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea4:	e01f      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eaa:	e01c      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb0:	e019      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eb6:	e016      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ebc:	e013      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005ebe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005ec2:	e010      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005ec4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005ec8:	e00d      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ece:	e00a      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005ed0:	f241 5355 	movw	r3, #5461	; 0x1555
 8005ed4:	e007      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eda:	e004      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005edc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ee0:	e001      	b.n	8005ee6 <UART_SetConfig+0x12e6>
 8005ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6852      	ldr	r2, [r2, #4]
 8005eea:	0852      	lsrs	r2, r2, #1
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	61fb      	str	r3, [r7, #28]
        break;
 8005efa:	e002      	b.n	8005f02 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	76fb      	strb	r3, [r7, #27]
        break;
 8005f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	2b0f      	cmp	r3, #15
 8005f06:	d908      	bls.n	8005f1a <UART_SetConfig+0x131a>
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0e:	d204      	bcs.n	8005f1a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	60da      	str	r2, [r3, #12]
 8005f18:	e001      	b.n	8005f1e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005f3a:	7efb      	ldrb	r3, [r7, #27]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3728      	adds	r7, #40	; 0x28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005f46:	bf00      	nop
 8005f48:	00f42400 	.word	0x00f42400
 8005f4c:	0001e848 	.word	0x0001e848
 8005f50:	0003d090 	.word	0x0003d090
 8005f54:	0007a120 	.word	0x0007a120
 8005f58:	000f4240 	.word	0x000f4240
 8005f5c:	00145855 	.word	0x00145855
 8005f60:	00186a00 	.word	0x00186a00
 8005f64:	001e8480 	.word	0x001e8480
 8005f68:	0028b0aa 	.word	0x0028b0aa
 8005f6c:	003d0900 	.word	0x003d0900
 8005f70:	007a1200 	.word	0x007a1200

08005f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01a      	beq.n	800608a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006072:	d10a      	bne.n	800608a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af02      	add	r7, sp, #8
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80060c8:	f7fb f9ac 	bl	8001424 <HAL_GetTick>
 80060cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d10e      	bne.n	80060fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f82c 	bl	8006148 <UART_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e022      	b.n	8006140 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b04      	cmp	r3, #4
 8006106:	d10e      	bne.n	8006126 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f816 	bl	8006148 <UART_WaitOnFlagUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e00c      	b.n	8006140 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006158:	e02c      	b.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d028      	beq.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006162:	f7fb f95f 	bl	8001424 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <UART_WaitOnFlagUntilTimeout+0x30>
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11d      	bne.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006186:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e00f      	b.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69da      	ldr	r2, [r3, #28]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4013      	ands	r3, r2
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d0c3      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006202:	f023 0301 	bic.w	r3, r3, #1
 8006206:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7fe fcd3 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006264:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7fe fcaf 	bl	8004bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e027      	b.n	8006324 <HAL_UARTEx_DisableFifoMode+0x66>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2224      	movs	r2, #36	; 0x24
 80062e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0201 	bic.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006302:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006344:	2302      	movs	r3, #2
 8006346:	e02d      	b.n	80063a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2224      	movs	r2, #36	; 0x24
 8006354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0201 	bic.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f84f 	bl	8006428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e02d      	b.n	8006420 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	; 0x24
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0201 	bic.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f811 	bl	8006428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b089      	sub	sp, #36	; 0x24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006430:	4a2f      	ldr	r2, [pc, #188]	; (80064f0 <UARTEx_SetNbDataToProcess+0xc8>)
 8006432:	f107 0314 	add.w	r3, r7, #20
 8006436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800643a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800643e:	4a2d      	ldr	r2, [pc, #180]	; (80064f4 <UARTEx_SetNbDataToProcess+0xcc>)
 8006440:	f107 030c 	add.w	r3, r7, #12
 8006444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006448:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006450:	2b00      	cmp	r3, #0
 8006452:	d108      	bne.n	8006466 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006464:	e03d      	b.n	80064e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006466:	2308      	movs	r3, #8
 8006468:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800646a:	2308      	movs	r3, #8
 800646c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	0e5b      	lsrs	r3, r3, #25
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	0f5b      	lsrs	r3, r3, #29
 8006486:	b2db      	uxtb	r3, r3
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800648e:	7fbb      	ldrb	r3, [r7, #30]
 8006490:	7f3a      	ldrb	r2, [r7, #28]
 8006492:	f107 0120 	add.w	r1, r7, #32
 8006496:	440a      	add	r2, r1
 8006498:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800649c:	fb02 f303 	mul.w	r3, r2, r3
 80064a0:	7f3a      	ldrb	r2, [r7, #28]
 80064a2:	f107 0120 	add.w	r1, r7, #32
 80064a6:	440a      	add	r2, r1
 80064a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80064ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80064b8:	7ffb      	ldrb	r3, [r7, #31]
 80064ba:	7f7a      	ldrb	r2, [r7, #29]
 80064bc:	f107 0120 	add.w	r1, r7, #32
 80064c0:	440a      	add	r2, r1
 80064c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
 80064ca:	7f7a      	ldrb	r2, [r7, #29]
 80064cc:	f107 0120 	add.w	r1, r7, #32
 80064d0:	440a      	add	r2, r1
 80064d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80064d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80064da:	b29a      	uxth	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80064e2:	bf00      	nop
 80064e4:	3724      	adds	r7, #36	; 0x24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	08006568 	.word	0x08006568
 80064f4:	08006570 	.word	0x08006570

080064f8 <__libc_init_array>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	4e0d      	ldr	r6, [pc, #52]	; (8006530 <__libc_init_array+0x38>)
 80064fc:	4c0d      	ldr	r4, [pc, #52]	; (8006534 <__libc_init_array+0x3c>)
 80064fe:	1ba4      	subs	r4, r4, r6
 8006500:	10a4      	asrs	r4, r4, #2
 8006502:	2500      	movs	r5, #0
 8006504:	42a5      	cmp	r5, r4
 8006506:	d109      	bne.n	800651c <__libc_init_array+0x24>
 8006508:	4e0b      	ldr	r6, [pc, #44]	; (8006538 <__libc_init_array+0x40>)
 800650a:	4c0c      	ldr	r4, [pc, #48]	; (800653c <__libc_init_array+0x44>)
 800650c:	f000 f820 	bl	8006550 <_init>
 8006510:	1ba4      	subs	r4, r4, r6
 8006512:	10a4      	asrs	r4, r4, #2
 8006514:	2500      	movs	r5, #0
 8006516:	42a5      	cmp	r5, r4
 8006518:	d105      	bne.n	8006526 <__libc_init_array+0x2e>
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006520:	4798      	blx	r3
 8006522:	3501      	adds	r5, #1
 8006524:	e7ee      	b.n	8006504 <__libc_init_array+0xc>
 8006526:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800652a:	4798      	blx	r3
 800652c:	3501      	adds	r5, #1
 800652e:	e7f2      	b.n	8006516 <__libc_init_array+0x1e>
 8006530:	08006598 	.word	0x08006598
 8006534:	08006598 	.word	0x08006598
 8006538:	08006598 	.word	0x08006598
 800653c:	0800659c 	.word	0x0800659c

08006540 <memset>:
 8006540:	4402      	add	r2, r0
 8006542:	4603      	mov	r3, r0
 8006544:	4293      	cmp	r3, r2
 8006546:	d100      	bne.n	800654a <memset+0xa>
 8006548:	4770      	bx	lr
 800654a:	f803 1b01 	strb.w	r1, [r3], #1
 800654e:	e7f9      	b.n	8006544 <memset+0x4>

08006550 <_init>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr

0800655c <_fini>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr
