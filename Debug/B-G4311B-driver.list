
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006268  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006468  08006468  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006470  08006470  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08006484  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08006484  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011492  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a0  00000000  00000000  000314ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000347b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df10  00000000  00000000  000356d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dbf3  00000000  00000000  000535e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ee7  00000000  00000000  000611db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001240c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  00124140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006428 	.word	0x08006428

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006428 	.word	0x08006428

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0xac>)
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_GPIO_Init+0xb0>)
 80005a4:	f001 f824 	bl	80015f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f000 ff84 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 ff9b 	bl	80014ee <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10110000 	.word	0x10110000
 80005c8:	48000800 	.word	0x48000800

080005cc <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005dc:	f040 80fe 	bne.w	80007dc <HAL_GPIO_EXTI_Callback+0x210>
	{



							switch (licznik)
 80005e0:	4b81      	ldr	r3, [pc, #516]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	f200 80ed 	bhi.w	80007c4 <HAL_GPIO_EXTI_Callback+0x1f8>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <HAL_GPIO_EXTI_Callback+0x24>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	0800077b 	.word	0x0800077b
 80005f4:	08000609 	.word	0x08000609
 80005f8:	08000653 	.word	0x08000653
 80005fc:	0800069d 	.word	0x0800069d
 8000600:	080006e7 	.word	0x080006e7
 8000604:	08000731 	.word	0x08000731
							{
							case 1:
												SET_CC1_T1;
 8000608:	4b78      	ldr	r3, [pc, #480]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800060a:	6a1b      	ldr	r3, [r3, #32]
 800060c:	4a77      	ldr	r2, [pc, #476]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6213      	str	r3, [r2, #32]
												RESET_CC1N_T2;
 8000614:	4b75      	ldr	r3, [pc, #468]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000616:	6a1b      	ldr	r3, [r3, #32]
 8000618:	4a74      	ldr	r2, [pc, #464]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800061a:	f023 0304 	bic.w	r3, r3, #4
 800061e:	6213      	str	r3, [r2, #32]
												RESET_CC2_T3;
 8000620:	4b72      	ldr	r3, [pc, #456]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000622:	6a1b      	ldr	r3, [r3, #32]
 8000624:	4a71      	ldr	r2, [pc, #452]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000626:	f023 0310 	bic.w	r3, r3, #16
 800062a:	6213      	str	r3, [r2, #32]
												SET_CC2N_T4;
 800062c:	4b6f      	ldr	r3, [pc, #444]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800062e:	6a1b      	ldr	r3, [r3, #32]
 8000630:	4a6e      	ldr	r2, [pc, #440]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000636:	6213      	str	r3, [r2, #32]
												RESET_CC3_T5;
 8000638:	4b6c      	ldr	r3, [pc, #432]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800063a:	6a1b      	ldr	r3, [r3, #32]
 800063c:	4a6b      	ldr	r2, [pc, #428]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800063e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000642:	6213      	str	r3, [r2, #32]
												RESET_CC3N_T6;
 8000644:	4b69      	ldr	r3, [pc, #420]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000646:	6a1b      	ldr	r3, [r3, #32]
 8000648:	4a68      	ldr	r2, [pc, #416]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800064a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800064e:	6213      	str	r3, [r2, #32]
						    break;
 8000650:	e0b8      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x1f8>

							case 2:
												SET_CC1_T1;
 8000652:	4b66      	ldr	r3, [pc, #408]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000654:	6a1b      	ldr	r3, [r3, #32]
 8000656:	4a65      	ldr	r2, [pc, #404]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6213      	str	r3, [r2, #32]
												RESET_CC1N_T2;
 800065e:	4b63      	ldr	r3, [pc, #396]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	4a62      	ldr	r2, [pc, #392]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000664:	f023 0304 	bic.w	r3, r3, #4
 8000668:	6213      	str	r3, [r2, #32]
												RESET_CC2_T3;
 800066a:	4b60      	ldr	r3, [pc, #384]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800066c:	6a1b      	ldr	r3, [r3, #32]
 800066e:	4a5f      	ldr	r2, [pc, #380]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000670:	f023 0310 	bic.w	r3, r3, #16
 8000674:	6213      	str	r3, [r2, #32]
												RESET_CC2N_T4;
 8000676:	4b5d      	ldr	r3, [pc, #372]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000678:	6a1b      	ldr	r3, [r3, #32]
 800067a:	4a5c      	ldr	r2, [pc, #368]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800067c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000680:	6213      	str	r3, [r2, #32]
												RESET_CC3_T5;
 8000682:	4b5a      	ldr	r3, [pc, #360]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000684:	6a1b      	ldr	r3, [r3, #32]
 8000686:	4a59      	ldr	r2, [pc, #356]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800068c:	6213      	str	r3, [r2, #32]
												SET_CC3N_T6;
 800068e:	4b57      	ldr	r3, [pc, #348]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000690:	6a1b      	ldr	r3, [r3, #32]
 8000692:	4a56      	ldr	r2, [pc, #344]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000694:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000698:	6213      	str	r3, [r2, #32]
						    break;
 800069a:	e093      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x1f8>

							case 3:
												RESET_CC1_T1;
 800069c:	4b53      	ldr	r3, [pc, #332]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	4a52      	ldr	r2, [pc, #328]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006a2:	f023 0301 	bic.w	r3, r3, #1
 80006a6:	6213      	str	r3, [r2, #32]
												RESET_CC1N_T2;
 80006a8:	4b50      	ldr	r3, [pc, #320]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	4a4f      	ldr	r2, [pc, #316]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006ae:	f023 0304 	bic.w	r3, r3, #4
 80006b2:	6213      	str	r3, [r2, #32]
												SET_CC2_T3;
 80006b4:	4b4d      	ldr	r3, [pc, #308]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	4a4c      	ldr	r2, [pc, #304]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6213      	str	r3, [r2, #32]
												RESET_CC2N_T4;
 80006c0:	4b4a      	ldr	r3, [pc, #296]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	4a49      	ldr	r2, [pc, #292]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006ca:	6213      	str	r3, [r2, #32]
												RESET_CC3_T5;
 80006cc:	4b47      	ldr	r3, [pc, #284]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	4a46      	ldr	r2, [pc, #280]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006d6:	6213      	str	r3, [r2, #32]
												SET_CC3N_T6;
 80006d8:	4b44      	ldr	r3, [pc, #272]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006da:	6a1b      	ldr	r3, [r3, #32]
 80006dc:	4a43      	ldr	r2, [pc, #268]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006e2:	6213      	str	r3, [r2, #32]
						    break;
 80006e4:	e06e      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x1f8>

						    case 4:
						    					RESET_CC1_T1;
 80006e6:	4b41      	ldr	r3, [pc, #260]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006e8:	6a1b      	ldr	r3, [r3, #32]
 80006ea:	4a40      	ldr	r2, [pc, #256]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006ec:	f023 0301 	bic.w	r3, r3, #1
 80006f0:	6213      	str	r3, [r2, #32]
						    					SET_CC1N_T2;
 80006f2:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6213      	str	r3, [r2, #32]
						    					SET_CC2_T3;
 80006fe:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	4a3a      	ldr	r2, [pc, #232]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6213      	str	r3, [r2, #32]
						    					RESET_CC2N_T4;
 800070a:	4b38      	ldr	r3, [pc, #224]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	4a37      	ldr	r2, [pc, #220]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000714:	6213      	str	r3, [r2, #32]
						    					RESET_CC3_T5;
 8000716:	4b35      	ldr	r3, [pc, #212]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	4a34      	ldr	r2, [pc, #208]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800071c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000720:	6213      	str	r3, [r2, #32]
						    					RESET_CC3N_T6;
 8000722:	4b32      	ldr	r3, [pc, #200]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000724:	6a1b      	ldr	r3, [r3, #32]
 8000726:	4a31      	ldr	r2, [pc, #196]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000728:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800072c:	6213      	str	r3, [r2, #32]
							break;
 800072e:	e049      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x1f8>

						    case 5:
						    					RESET_CC1_T1;
 8000730:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	4a2d      	ldr	r2, [pc, #180]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000736:	f023 0301 	bic.w	r3, r3, #1
 800073a:	6213      	str	r3, [r2, #32]
						    					SET_CC1N_T2;
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6213      	str	r3, [r2, #32]
						    					RESET_CC2_T3;
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	4a27      	ldr	r2, [pc, #156]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800074e:	f023 0310 	bic.w	r3, r3, #16
 8000752:	6213      	str	r3, [r2, #32]
						    					RESET_CC2N_T4;
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000756:	6a1b      	ldr	r3, [r3, #32]
 8000758:	4a24      	ldr	r2, [pc, #144]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800075a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800075e:	6213      	str	r3, [r2, #32]
						    					SET_CC3_T5;
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000762:	6a1b      	ldr	r3, [r3, #32]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076a:	6213      	str	r3, [r2, #32]
						    					RESET_CC3N_T6;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800076e:	6a1b      	ldr	r3, [r3, #32]
 8000770:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000776:	6213      	str	r3, [r2, #32]
						    break;
 8000778:	e024      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x1f8>

						    case 0:
						    					RESET_CC1_T1;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	6213      	str	r3, [r2, #32]
						    					RESET_CC1N_T2;
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 800078c:	f023 0304 	bic.w	r3, r3, #4
 8000790:	6213      	str	r3, [r2, #32]
						    					RESET_CC2_T3;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 8000798:	f023 0310 	bic.w	r3, r3, #16
 800079c:	6213      	str	r3, [r2, #32]
						    					SET_CC2N_T4;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80007a0:	6a1b      	ldr	r3, [r3, #32]
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	6213      	str	r3, [r2, #32]
						    					SET_CC3_T5;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80007b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b4:	6213      	str	r3, [r2, #32]
						    					RESET_CC3N_T6;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80007b8:	6a1b      	ldr	r3, [r3, #32]
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80007bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007c0:	6213      	str	r3, [r2, #32]
						    break;
 80007c2:	bf00      	nop
							}

							licznik++;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80007cc:	6013      	str	r3, [r2, #0]

							if(licznik>5)
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b05      	cmp	r3, #5
 80007d4:	dd02      	ble.n	80007dc <HAL_GPIO_EXTI_Callback+0x210>
							licznik=0;
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]




	}
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	20000028 	.word	0x20000028
 80007ec:	40012c00 	.word	0x40012c00

080007f0 <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
	{


	}
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	//i++;
	if(htim->Instance==TIM2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		//  TIM1->CCR2=TIM2->CCR2;
		//  TIM1->CCR3=TIM2->CCR2;
		}
	}

}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fcfd 	bl	8001222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f850 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f7ff fe74 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000830:	f000 f94a 	bl	8000ac8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000834:	f000 fac6 	bl	8000dc4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000838:	f000 fc32 	bl	80010a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800083c:	f000 fa28 	bl	8000c90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //////// konfiguracja Timer 2  ////////////
    TIM2->ARR=0xFFFF;
 8000840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->PSC=500;
 800084a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800084e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000852:	629a      	str	r2, [r3, #40]	; 0x28

    HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000854:	2100      	movs	r1, #0
 8000856:	4819      	ldr	r0, [pc, #100]	; (80008bc <main+0x9c>)
 8000858:	f002 fa18 	bl	8002c8c <HAL_TIM_IC_Start>
   	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 800085c:	2104      	movs	r1, #4
 800085e:	4817      	ldr	r0, [pc, #92]	; (80008bc <main+0x9c>)
 8000860:	f002 fa14 	bl	8002c8c <HAL_TIM_IC_Start>


  //////// konfiguracja Timer 4  ////////////
    TIM4->ARR=0xFFFF;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <main+0xa0>)
 8000866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->PSC=500;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <main+0xa0>)
 800086e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->CCR2=2;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <main+0xa0>)
 8000876:	2202      	movs	r2, #2
 8000878:	639a      	str	r2, [r3, #56]	; 0x38

   // HAL_TIMEx_HallSensor_Start(&htim4);

    //////// konfiguracja Timer 1  ////////////
    TIM1->ARR=0xFFFF;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <main+0xa4>)
 800087c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC=100;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <main+0xa4>)
 8000884:	2264      	movs	r2, #100	; 0x64
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->CCR1=64000;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <main+0xa4>)
 800088a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2=64000;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <main+0xa4>)
 8000892:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000896:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3=64000;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <main+0xa4>)
 800089a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800089e:	63da      	str	r2, [r3, #60]	; 0x3c
  //  HAL_TIMEx_ConfigCommutEvent_IT(&htim1,TIM_TS_ITR3, TIM_COMMUTATION_TRGI);


    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008a0:	2100      	movs	r1, #0
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <main+0xa8>)
 80008a4:	f002 f8be 	bl	8002a24 <HAL_TIM_PWM_Start>
   	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008a8:	2104      	movs	r1, #4
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <main+0xa8>)
 80008ac:	f002 f8ba 	bl	8002a24 <HAL_TIM_PWM_Start>
   	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80008b0:	2108      	movs	r1, #8
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <main+0xa8>)
 80008b4:	f002 f8b6 	bl	8002a24 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <main+0x98>
 80008ba:	bf00      	nop
 80008bc:	200000c4 	.word	0x200000c4
 80008c0:	40000800 	.word	0x40000800
 80008c4:	40012c00 	.word	0x40012c00
 80008c8:	20000078 	.word	0x20000078

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0a4      	sub	sp, #144	; 0x90
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008d6:	2238      	movs	r2, #56	; 0x38
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 fd9c 	bl	8006418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2244      	movs	r2, #68	; 0x44
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fd8e 	bl	8006418 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f001 f811 	bl	8001924 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000902:	2301      	movs	r3, #1
 8000904:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000910:	2303      	movs	r3, #3
 8000912:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000918:	2350      	movs	r3, #80	; 0x50
 800091a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091e:	2302      	movs	r3, #2
 8000920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800092a:	2302      	movs	r3, #2
 800092c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000934:	4618      	mov	r0, r3
 8000936:	f001 f899 	bl	8001a6c <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000940:	f000 f826 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2303      	movs	r3, #3
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000958:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800095c:	2107      	movs	r1, #7
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fb9c 	bl	800209c <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800096a:	f000 f811 	bl	8000990 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800096e:	2302      	movs	r3, #2
 8000970:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000976:	463b      	mov	r3, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fdab 	bl	80024d4 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000984:	f000 f804 	bl	8000990 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3790      	adds	r7, #144	; 0x90
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6093      	str	r3, [r2, #8]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40007000 	.word	0x40007000

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80009f6:	f7ff ffd3 	bl	80009a0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 fc34 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000a6a:	f002 f9d1 	bl	8002e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000078 	.word	0x20000078

08000a78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <USART2_IRQHandler+0x10>)
 8000a7e:	f003 feaf 	bl	80047e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000110 	.word	0x20000110

08000a8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a94:	f000 ff2e 	bl	80018f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <SystemInit+0x28>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <SystemInit+0x28>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SystemInit+0x28>)
 8000ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0a0      	sub	sp, #128	; 0x80
 8000acc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000adc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2234      	movs	r2, #52	; 0x34
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f005 fc80 	bl	8006418 <memset>

  htim1.Instance = TIM1;
 8000b18:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b1a:	4a5c      	ldr	r2, [pc, #368]	; (8000c8c <MX_TIM1_Init+0x1c4>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b1e:	4b5a      	ldr	r3, [pc, #360]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000b2a:	4b57      	ldr	r3, [pc, #348]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b36:	4b54      	ldr	r3, [pc, #336]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b52      	ldr	r3, [pc, #328]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b42:	4851      	ldr	r0, [pc, #324]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b44:	f001 feb6 	bl	80028b4 <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b4e:	f7ff ff1f 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	484a      	ldr	r0, [pc, #296]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b60:	f002 fc7a 	bl	8003458 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b6a:	f7ff ff11 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b6e:	4846      	ldr	r0, [pc, #280]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b70:	f001 fef7 	bl	8002962 <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000b7a:	f7ff ff09 	bl	8000990 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000b82:	2330      	movs	r3, #48	; 0x30
 8000b84:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	483e      	ldr	r0, [pc, #248]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000b8e:	f002 fd41 	bl	8003614 <HAL_TIM_SlaveConfigSynchro>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000b98:	f7ff fefa 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000b9c:	2370      	movs	r3, #112	; 0x70
 8000b9e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ba8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bac:	4619      	mov	r1, r3
 8000bae:	4836      	ldr	r0, [pc, #216]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000bb0:	f003 fc68 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000bba:	f7ff fee9 	bl	8000990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	2360      	movs	r3, #96	; 0x60
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bde:	2200      	movs	r2, #0
 8000be0:	4619      	mov	r1, r3
 8000be2:	4829      	ldr	r0, [pc, #164]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000be4:	f002 fb28 	bl	8003238 <HAL_TIM_PWM_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000bee:	f7ff fecf 	bl	8000990 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4822      	ldr	r0, [pc, #136]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000c00:	f002 fb1a 	bl	8003238 <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000c0a:	f7ff fec1 	bl	8000990 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c16:	2208      	movs	r2, #8
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481b      	ldr	r0, [pc, #108]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000c1c:	f002 fb0c 	bl	8003238 <HAL_TIM_PWM_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000c26:	f7ff feb3 	bl	8000990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c2e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8000c3a:	2344      	movs	r3, #68	; 0x44
 8000c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000c6c:	f003 fc8c 	bl	8004588 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8000c76:	f7ff fe8b 	bl	8000990 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000c7a:	4803      	ldr	r0, [pc, #12]	; (8000c88 <MX_TIM1_Init+0x1c0>)
 8000c7c:	f000 f99a 	bl	8000fb4 <HAL_TIM_MspPostInit>

}
 8000c80:	bf00      	nop
 8000c82:	3780      	adds	r7, #128	; 0x80
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000078 	.word	0x20000078
 8000c8c:	40012c00 	.word	0x40012c00

08000c90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b090      	sub	sp, #64	; 0x40
 8000c94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000ccc:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000cce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf2:	4833      	ldr	r0, [pc, #204]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000cf4:	f001 fdde 	bl	80028b4 <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cfe:	f7ff fe47 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	482c      	ldr	r0, [pc, #176]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000d10:	f002 fba2 	bl	8003458 <HAL_TIM_ConfigClockSource>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d1a:	f7ff fe39 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d1e:	4828      	ldr	r0, [pc, #160]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000d20:	f001 ff52 	bl	8002bc8 <HAL_TIM_IC_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d2a:	f7ff fe31 	bl	8000990 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d32:	2350      	movs	r3, #80	; 0x50
 8000d34:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	481e      	ldr	r0, [pc, #120]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000d46:	f002 fc65 	bl	8003614 <HAL_TIM_SlaveConfigSynchro>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000d50:	f7ff fe1e 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4619      	mov	r1, r3
 8000d62:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000d64:	f003 fb8e 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000d6e:	f7ff fe0f 	bl	8000990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d76:	2301      	movs	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000d8a:	f002 f9c0 	bl	800310e <HAL_TIM_IC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000d94:	f7ff fdfc 	bl	8000990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	2204      	movs	r2, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <MX_TIM2_Init+0x130>)
 8000da8:	f002 f9b1 	bl	800310e <HAL_TIM_IC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000db2:	f7ff fded 	bl	8000990 <Error_Handler>
  }

}
 8000db6:	bf00      	nop
 8000db8:	3740      	adds	r7, #64	; 0x40
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000c4 	.word	0x200000c4

08000dc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0320 	add.w	r3, r7, #32
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000df2:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <MX_TIM4_Init+0xcc>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e14:	481d      	ldr	r0, [pc, #116]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000e16:	f001 fd4d 	bl	80028b4 <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000e20:	f7ff fdb6 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4816      	ldr	r0, [pc, #88]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000e32:	f002 fb11 	bl	8003458 <HAL_TIM_ConfigClockSource>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f7ff fda8 	bl	8000990 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000e58:	f003 fa5b 	bl	8004312 <HAL_TIMEx_HallSensor_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000e62:	f7ff fd95 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000e66:	2350      	movs	r3, #80	; 0x50
 8000e68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_TIM4_Init+0xc8>)
 8000e74:	f003 fb06 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000e7e:	f7ff fd87 	bl	8000990 <Error_Handler>
  }

}
 8000e82:	bf00      	nop
 8000e84:	3730      	adds	r7, #48	; 0x30
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000002c 	.word	0x2000002c
 8000e90:	40000800 	.word	0x40000800

08000e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a3c      	ldr	r2, [pc, #240]	; (8000fa4 <HAL_TIM_Base_MspInit+0x110>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d114      	bne.n	8000ee0 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	4a3b      	ldr	r2, [pc, #236]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec2:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	201a      	movs	r0, #26
 8000ed4:	f000 faf1 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ed8:	201a      	movs	r0, #26
 8000eda:	f000 fb08 	bl	80014ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ede:	e05d      	b.n	8000f9c <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee8:	d12a      	bne.n	8000f40 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a2e      	ldr	r2, [pc, #184]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8000f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f24:	2302      	movs	r3, #2
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f000 fb59 	bl	80015f0 <HAL_GPIO_Init>
}
 8000f3e:	e02d      	b.n	8000f9c <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM4)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_TIM_Base_MspInit+0x118>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d128      	bne.n	8000f9c <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_TIM_Base_MspInit+0x114>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_W_TIM4_Pin|HALL_U_TIM4_Pin|HALL_V_TIM4_Pin;
 8000f7a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <HAL_TIM_Base_MspInit+0x11c>)
 8000f98:	f000 fb2a 	bl	80015f0 <HAL_GPIO_Init>
}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	; 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40000800 	.word	0x40000800
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <HAL_TIM_MspPostInit+0xdc>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d157      	bne.n	8001086 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <HAL_TIM_MspPostInit+0xe0>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <HAL_TIM_MspPostInit+0xe0>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <HAL_TIM_MspPostInit+0xe0>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <HAL_TIM_MspPostInit+0xe0>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a28      	ldr	r2, [pc, #160]	; (8001094 <HAL_TIM_MspPostInit+0xe0>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <HAL_TIM_MspPostInit+0xe0>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_TIM_MspPostInit+0xe0>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <HAL_TIM_MspPostInit+0xe0>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HAL_TIM_MspPostInit+0xe0>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800101e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001028:	2302      	movs	r3, #2
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001030:	2304      	movs	r3, #4
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4817      	ldr	r0, [pc, #92]	; (8001098 <HAL_TIM_MspPostInit+0xe4>)
 800103c:	f000 fad8 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001052:	2304      	movs	r3, #4
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	480f      	ldr	r0, [pc, #60]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 800105e:	f000 fac7 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001062:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001074:	2306      	movs	r3, #6
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f000 fab5 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40012c00 	.word	0x40012c00
 8001094:	40021000 	.word	0x40021000
 8001098:	48000800 	.word	0x48000800
 800109c:	48000400 	.word	0x48000400

080010a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010a6:	4a23      	ldr	r2, [pc, #140]	; (8001134 <MX_USART2_UART_Init+0x94>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e8:	4811      	ldr	r0, [pc, #68]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010ea:	f003 fb29 	bl	8004740 <HAL_UART_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010f4:	f7ff fc4c 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_USART2_UART_Init+0x90>)
 80010fc:	f005 f884 	bl	8006208 <HAL_UARTEx_SetTxFifoThreshold>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001106:	f7ff fc43 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <MX_USART2_UART_Init+0x90>)
 800110e:	f005 f8b9 	bl	8006284 <HAL_UARTEx_SetRxFifoThreshold>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001118:	f7ff fc3a 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_USART2_UART_Init+0x90>)
 800111e:	f005 f83a 	bl	8006196 <HAL_UARTEx_DisableFifoMode>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001128:	f7ff fc32 	bl	8000990 <Error_Handler>
  }

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000110 	.word	0x20000110
 8001134:	40004400 	.word	0x40004400

08001138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_UART_MspInit+0x8c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d12f      	bne.n	80011ba <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_UART_MspInit+0x90>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <HAL_UART_MspInit+0x90>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6593      	str	r3, [r2, #88]	; 0x58
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_UART_MspInit+0x90>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_UART_MspInit+0x90>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_UART_MspInit+0x90>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_UART_MspInit+0x90>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800118a:	2318      	movs	r3, #24
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119a:	2307      	movs	r3, #7
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <HAL_UART_MspInit+0x94>)
 80011a6:	f000 fa23 	bl	80015f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2103      	movs	r1, #3
 80011ae:	2026      	movs	r0, #38	; 0x26
 80011b0:	f000 f983 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b4:	2026      	movs	r0, #38	; 0x26
 80011b6:	f000 f99a 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40004400 	.word	0x40004400
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48000400 	.word	0x48000400

080011d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011ec:	4c0b      	ldr	r4, [pc, #44]	; (800121c <LoopForever+0x16>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011fa:	f7ff fc4f 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f005 f8e7 	bl	80063d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001202:	f7ff fb0d 	bl	8000820 <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   r0, =_estack
 8001208:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001214:	08006478 	.word	0x08006478
  ldr r2, =_sbss
 8001218:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800121c:	200001a0 	.word	0x200001a0

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>

08001222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f939 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f80e 	bl	8001254 <HAL_InitTick>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	e001      	b.n	8001248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001244:	f7ff fbbc 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001248:	79fb      	ldrb	r3, [r7, #7]

}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_InitTick+0x68>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d022      	beq.n	80012ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_InitTick+0x6c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_InitTick+0x68>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001274:	fbb1 f3f3 	udiv	r3, r1, r3
 8001278:	fbb2 f3f3 	udiv	r3, r2, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f944 	bl	800150a <HAL_SYSTICK_Config>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10f      	bne.n	80012a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d809      	bhi.n	80012a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128e:	2200      	movs	r2, #0
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f04f 30ff 	mov.w	r0, #4294967295
 8001296:	f000 f910 	bl	80014ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_InitTick+0x70>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e007      	b.n	80012b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e004      	b.n	80012b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x1c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_IncTick+0x20>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_IncTick+0x1c>)
 80012d8:	6013      	str	r3, [r2, #0]
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	2000019c 	.word	0x2000019c
 80012e8:	20000008 	.word	0x20000008

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000019c 	.word	0x2000019c

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff29 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff40 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff90 	bl	80013f8 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5f 	bl	80013a4 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff33 	bl	8001368 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa4 	bl	8001460 <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d00d      	beq.n	8001556 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2204      	movs	r2, #4
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e047      	b.n	80015e6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 020e 	bic.w	r2, r2, #14
 8001564:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001584:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f003 021f 	and.w	r2, r3, #31
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00c      	beq.n	80015c6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
    }
  }
  return status;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015fe:	e15a      	b.n	80018b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 814c 	beq.w	80018b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d00b      	beq.n	8001638 <HAL_GPIO_Init+0x48>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800162c:	2b11      	cmp	r3, #17
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b12      	cmp	r3, #18
 8001636:	d130      	bne.n	800169a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800166e:	2201      	movs	r2, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f003 0201 	and.w	r2, r3, #1
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0xea>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d123      	bne.n	8001722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0203 	and.w	r2, r3, #3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80a6 	beq.w	80018b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001764:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_GPIO_Init+0x2e4>)
 8001766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001768:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <HAL_GPIO_Init+0x2e4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6613      	str	r3, [r2, #96]	; 0x60
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <HAL_GPIO_Init+0x2e4>)
 8001772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177c:	4a56      	ldr	r2, [pc, #344]	; (80018d8 <HAL_GPIO_Init+0x2e8>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a6:	d01f      	beq.n	80017e8 <HAL_GPIO_Init+0x1f8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a4c      	ldr	r2, [pc, #304]	; (80018dc <HAL_GPIO_Init+0x2ec>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d019      	beq.n	80017e4 <HAL_GPIO_Init+0x1f4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a4b      	ldr	r2, [pc, #300]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d013      	beq.n	80017e0 <HAL_GPIO_Init+0x1f0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a4a      	ldr	r2, [pc, #296]	; (80018e4 <HAL_GPIO_Init+0x2f4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d00d      	beq.n	80017dc <HAL_GPIO_Init+0x1ec>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d007      	beq.n	80017d8 <HAL_GPIO_Init+0x1e8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_GPIO_Init+0x2fc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_GPIO_Init+0x1e4>
 80017d0:	2305      	movs	r3, #5
 80017d2:	e00a      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017d4:	2306      	movs	r3, #6
 80017d6:	e008      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017d8:	2304      	movs	r3, #4
 80017da:	e006      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017dc:	2303      	movs	r3, #3
 80017de:	e004      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e002      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017e8:	2300      	movs	r3, #0
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	f002 0203 	and.w	r2, r2, #3
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	4093      	lsls	r3, r2
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017fa:	4937      	ldr	r1, [pc, #220]	; (80018d8 <HAL_GPIO_Init+0x2e8>)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_GPIO_Init+0x300>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800182c:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <HAL_GPIO_Init+0x300>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001856:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_GPIO_Init+0x300>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018aa:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <HAL_GPIO_Init+0x300>)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f47f ae9d 	bne.w	8001600 <HAL_GPIO_Init+0x10>
  }
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000
 80018dc:	48000400 	.word	0x48000400
 80018e0:	48000800 	.word	0x48000800
 80018e4:	48000c00 	.word	0x48000c00
 80018e8:	48001000 	.word	0x48001000
 80018ec:	48001400 	.word	0x48001400
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe5a 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d141      	bne.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001932:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800193a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193e:	d131      	bne.n	80019a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001940:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001946:	4a46      	ldr	r2, [pc, #280]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800194c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001950:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001958:	4a41      	ldr	r2, [pc, #260]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2232      	movs	r2, #50	; 0x32
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	4a3f      	ldr	r2, [pc, #252]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	0c9b      	lsrs	r3, r3, #18
 8001972:	3301      	adds	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001976:	e002      	b.n	800197e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3b01      	subs	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198a:	d102      	bne.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f2      	bne.n	8001978 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001992:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199e:	d158      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e057      	b.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019a4:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019aa:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019b4:	e04d      	b.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019bc:	d141      	bne.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ca:	d131      	bne.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019e4:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2232      	movs	r2, #50	; 0x32
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	3301      	adds	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a02:	e002      	b.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a16:	d102      	bne.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f2      	bne.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2a:	d112      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e011      	b.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a40:	e007      	b.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40007000 	.word	0x40007000
 8001a64:	20000000 	.word	0x20000000
 8001a68:	431bde83 	.word	0x431bde83

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e308      	b.n	8002090 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d075      	beq.n	8001b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8a:	4ba3      	ldr	r3, [pc, #652]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a94:	4ba0      	ldr	r3, [pc, #640]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b0c      	cmp	r3, #12
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3e>
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d002      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x44>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d10b      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	4b99      	ldr	r3, [pc, #612]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d05b      	beq.n	8001b74 <HAL_RCC_OscConfig+0x108>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d157      	bne.n	8001b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e2e3      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d106      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x74>
 8001ad2:	4b91      	ldr	r3, [pc, #580]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a90      	ldr	r2, [pc, #576]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e01d      	b.n	8001b1c <HAL_RCC_OscConfig+0xb0>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x98>
 8001aea:	4b8b      	ldr	r3, [pc, #556]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a8a      	ldr	r2, [pc, #552]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a87      	ldr	r2, [pc, #540]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0xb0>
 8001b04:	4b84      	ldr	r3, [pc, #528]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a83      	ldr	r2, [pc, #524]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b81      	ldr	r3, [pc, #516]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a80      	ldr	r2, [pc, #512]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fbe2 	bl	80012ec <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fbde 	bl	80012ec <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e2a8      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	4b76      	ldr	r3, [pc, #472]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0xc0>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fbce 	bl	80012ec <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fbca 	bl	80012ec <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e294      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b66:	4b6c      	ldr	r3, [pc, #432]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0xe8>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d075      	beq.n	8001c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8c:	4b62      	ldr	r3, [pc, #392]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x136>
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x13c>
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d11f      	bne.n	8001be8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba8:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x154>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e267      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b55      	ldr	r3, [pc, #340]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	4952      	ldr	r1, [pc, #328]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bd4:	4b51      	ldr	r3, [pc, #324]	; (8001d1c <HAL_RCC_OscConfig+0x2b0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fb3b 	bl	8001254 <HAL_InitTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d043      	beq.n	8001c6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e253      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d023      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fb76 	bl	80012ec <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fb72 	bl	80012ec <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e23c      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c16:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	061b      	lsls	r3, r3, #24
 8001c30:	4939      	ldr	r1, [pc, #228]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
 8001c36:	e01a      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c38:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a36      	ldr	r2, [pc, #216]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001c3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fb52 	bl	80012ec <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fb4e 	bl	80012ec <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e218      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1e0>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03c      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c88:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7ff fb2b 	bl	80012ec <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fb27 	bl	80012ec <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1f1      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0ef      	beq.n	8001c9a <HAL_RCC_OscConfig+0x22e>
 8001cba:	e01b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fb0e 	bl	80012ec <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fb0a 	bl	80012ec <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1d4      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ef      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80ab 	beq.w	8001e58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_RCC_OscConfig+0x2b4>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e005      	b.n	8001d22 <HAL_RCC_OscConfig+0x2b6>
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	2300      	movs	r3, #0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4baf      	ldr	r3, [pc, #700]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	4aae      	ldr	r2, [pc, #696]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
 8001d32:	4bac      	ldr	r3, [pc, #688]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d42:	4ba9      	ldr	r3, [pc, #676]	; (8001fe8 <HAL_RCC_OscConfig+0x57c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d4e:	4ba6      	ldr	r3, [pc, #664]	; (8001fe8 <HAL_RCC_OscConfig+0x57c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4aa5      	ldr	r2, [pc, #660]	; (8001fe8 <HAL_RCC_OscConfig+0x57c>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fac7 	bl	80012ec <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7ff fac3 	bl	80012ec <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e18d      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d74:	4b9c      	ldr	r3, [pc, #624]	; (8001fe8 <HAL_RCC_OscConfig+0x57c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d108      	bne.n	8001d9a <HAL_RCC_OscConfig+0x32e>
 8001d88:	4b96      	ldr	r3, [pc, #600]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	4a95      	ldr	r2, [pc, #596]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d98:	e024      	b.n	8001de4 <HAL_RCC_OscConfig+0x378>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d110      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x358>
 8001da2:	4b90      	ldr	r3, [pc, #576]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	4a8e      	ldr	r2, [pc, #568]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db2:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	4a8a      	ldr	r2, [pc, #552]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_OscConfig+0x378>
 8001dc4:	4b87      	ldr	r3, [pc, #540]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dca:	4a86      	ldr	r2, [pc, #536]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd4:	4b83      	ldr	r3, [pc, #524]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	4a82      	ldr	r2, [pc, #520]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d016      	beq.n	8001e1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff fa7e 	bl	80012ec <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff fa7a 	bl	80012ec <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e142      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0a:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ed      	beq.n	8001df4 <HAL_RCC_OscConfig+0x388>
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fa67 	bl	80012ec <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff fa63 	bl	80012ec <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e12b      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e38:	4b6a      	ldr	r3, [pc, #424]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ed      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e46:	7ffb      	ldrb	r3, [r7, #31]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4c:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	4a64      	ldr	r2, [pc, #400]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d03c      	beq.n	8001ede <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e6c:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e72:	4a5c      	ldr	r2, [pc, #368]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fa36 	bl	80012ec <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e84:	f7ff fa32 	bl	80012ec <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e0fc      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e96:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ef      	beq.n	8001e84 <HAL_RCC_OscConfig+0x418>
 8001ea4:	e01b      	b.n	8001ede <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ea6:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eac:	4a4d      	ldr	r2, [pc, #308]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fa19 	bl	80012ec <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ebe:	f7ff fa15 	bl	80012ec <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0df      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ed0:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ef      	bne.n	8001ebe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 80d3 	beq.w	800208e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	f000 808d 	beq.w	8002010 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d15a      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efe:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff f9ef 	bl	80012ec <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f12:	f7ff f9eb 	bl	80012ec <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0b5      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_RCC_OscConfig+0x580>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6a11      	ldr	r1, [r2, #32]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f40:	3a01      	subs	r2, #1
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	4311      	orrs	r1, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f4a:	0212      	lsls	r2, r2, #8
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f52:	0852      	lsrs	r2, r2, #1
 8001f54:	3a01      	subs	r2, #1
 8001f56:	0552      	lsls	r2, r2, #21
 8001f58:	4311      	orrs	r1, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f5e:	0852      	lsrs	r2, r2, #1
 8001f60:	3a01      	subs	r2, #1
 8001f62:	0652      	lsls	r2, r2, #25
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f6a:	06d2      	lsls	r2, r2, #27
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	491d      	ldr	r1, [pc, #116]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7ff f9ae 	bl	80012ec <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff f9aa 	bl	80012ec <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e074      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x528>
 8001fb2:	e06c      	b.n	800208e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001fd2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f986 	bl	80012ec <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe2:	e00e      	b.n	8002002 <HAL_RCC_OscConfig+0x596>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f97c 	bl	80012ec <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e046      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002002:	4b25      	ldr	r3, [pc, #148]	; (8002098 <HAL_RCC_OscConfig+0x62c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x584>
 800200e:	e03e      	b.n	800208e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e039      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_RCC_OscConfig+0x62c>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	429a      	cmp	r2, r3
 800202e:	d12c      	bne.n	800208a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	3b01      	subs	r3, #1
 800203c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d123      	bne.n	800208a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d11b      	bne.n	800208a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d113      	bne.n	800208a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	085b      	lsrs	r3, r3, #1
 800206e:	3b01      	subs	r3, #1
 8002070:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d109      	bne.n	800208a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e11e      	b.n	80022f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b91      	ldr	r3, [pc, #580]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b8e      	ldr	r3, [pc, #568]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 020f 	bic.w	r2, r3, #15
 80020ca:	498c      	ldr	r1, [pc, #560]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b8a      	ldr	r3, [pc, #552]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e106      	b.n	80022f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d073      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d129      	bne.n	800214c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f8:	4b81      	ldr	r3, [pc, #516]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0f4      	b.n	80022f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002108:	f000 f99e 	bl	8002448 <RCC_GetSysClockFreqFromPLLSource>
 800210c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4a7c      	ldr	r2, [pc, #496]	; (8002304 <HAL_RCC_ClockConfig+0x268>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d93f      	bls.n	8002196 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002116:	4b7a      	ldr	r3, [pc, #488]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800212a:	2b00      	cmp	r3, #0
 800212c:	d033      	beq.n	8002196 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002132:	2b00      	cmp	r3, #0
 8002134:	d12f      	bne.n	8002196 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800213e:	4a70      	ldr	r2, [pc, #448]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002144:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e024      	b.n	8002196 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d107      	bne.n	8002164 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0c6      	b.n	80022f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002164:	4b66      	ldr	r3, [pc, #408]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0be      	b.n	80022f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002174:	f000 f8ce 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8002178:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4a61      	ldr	r2, [pc, #388]	; (8002304 <HAL_RCC_ClockConfig+0x268>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d909      	bls.n	8002196 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002182:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800218a:	4a5d      	ldr	r2, [pc, #372]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 800218c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002190:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4957      	ldr	r1, [pc, #348]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a8:	f7ff f8a0 	bl	80012ec <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7ff f89c 	bl	80012ec <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e095      	b.n	80022f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d023      	beq.n	800222c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f0:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a42      	ldr	r2, [pc, #264]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 80021f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002208:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002210:	4a3b      	ldr	r2, [pc, #236]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002216:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4936      	ldr	r1, [pc, #216]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
 800222a:	e008      	b.n	800223e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b80      	cmp	r3, #128	; 0x80
 8002230:	d105      	bne.n	800223e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002232:	4b33      	ldr	r3, [pc, #204]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4a32      	ldr	r2, [pc, #200]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800223c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d21d      	bcs.n	8002288 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 020f 	bic.w	r2, r3, #15
 8002254:	4929      	ldr	r1, [pc, #164]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800225c:	f7ff f846 	bl	80012ec <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7ff f842 	bl	80012ec <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e03b      	b.n	80022f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_RCC_ClockConfig+0x260>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d1ed      	bne.n	8002264 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4917      	ldr	r1, [pc, #92]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	490f      	ldr	r1, [pc, #60]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c6:	f000 f825 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022ca:	4601      	mov	r1, r0
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_RCC_ClockConfig+0x264>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <HAL_RCC_ClockConfig+0x26c>)
 80022d8:	5cd3      	ldrb	r3, [r2, r3]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	fa21 f303 	lsr.w	r3, r1, r3
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_RCC_ClockConfig+0x270>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x274>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe ffb2 	bl	8001254 <HAL_InitTick>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40022000 	.word	0x40022000
 8002300:	40021000 	.word	0x40021000
 8002304:	04c4b400 	.word	0x04c4b400
 8002308:	08006450 	.word	0x08006450
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800231a:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d102      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	e047      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	d102      	bne.n	800233e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002338:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e03e      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800233e:	4b23      	ldr	r3, [pc, #140]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d136      	bne.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3301      	adds	r3, #1
 8002360:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002368:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002372:	68d2      	ldr	r2, [r2, #12]
 8002374:	0a12      	lsrs	r2, r2, #8
 8002376:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
      break;
 8002380:	e00c      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002382:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	4a10      	ldr	r2, [pc, #64]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800238c:	68d2      	ldr	r2, [r2, #12]
 800238e:	0a12      	lsrs	r2, r2, #8
 8002390:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
      break;
 800239a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0e5b      	lsrs	r3, r3, #25
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	3301      	adds	r3, #1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	e001      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023bc:	693b      	ldr	r3, [r7, #16]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	00f42400 	.word	0x00f42400
 80023d4:	007a1200 	.word	0x007a1200

080023d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_RCC_GetHCLKFreq+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000000 	.word	0x20000000

080023f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023f4:	f7ff fff0 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 80023f8:	4601      	mov	r1, r0
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	08006460 	.word	0x08006460

0800241c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002420:	f7ff ffda 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 8002424:	4601      	mov	r1, r0
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	0adb      	lsrs	r3, r3, #11
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	08006460 	.word	0x08006460

08002448 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3301      	adds	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d10c      	bne.n	8002486 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800246c:	4a17      	ldr	r2, [pc, #92]	; (80024cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002476:	68d2      	ldr	r2, [r2, #12]
 8002478:	0a12      	lsrs	r2, r2, #8
 800247a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	617b      	str	r3, [r7, #20]
    break;
 8002484:	e00c      	b.n	80024a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	4a0e      	ldr	r2, [pc, #56]	; (80024c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	0a12      	lsrs	r2, r2, #8
 8002494:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]
    break;
 800249e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0e5b      	lsrs	r3, r3, #25
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024ba:	687b      	ldr	r3, [r7, #4]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40021000 	.word	0x40021000
 80024cc:	007a1200 	.word	0x007a1200
 80024d0:	00f42400 	.word	0x00f42400

080024d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024dc:	2300      	movs	r3, #0
 80024de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e0:	2300      	movs	r3, #0
 80024e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8098 	beq.w	8002622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f6:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	4b40      	ldr	r3, [pc, #256]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	4a3f      	ldr	r2, [pc, #252]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6593      	str	r3, [r2, #88]	; 0x58
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251a:	2301      	movs	r3, #1
 800251c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800251e:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a39      	ldr	r2, [pc, #228]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002528:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800252a:	f7fe fedf 	bl	80012ec <HAL_GetTick>
 800252e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002530:	e009      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002532:	f7fe fedb 	bl	80012ec <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d902      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	74fb      	strb	r3, [r7, #19]
        break;
 8002544:	e005      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0ef      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d159      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002562:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d01e      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	d019      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d016      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe fe9b 	bl	80012ec <HAL_GetTick>
 80025b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b8:	e00b      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fe97 	bl	80012ec <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d902      	bls.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	74fb      	strb	r3, [r7, #19]
            break;
 80025d0:	e006      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ec      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025fc:	e008      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	74bb      	strb	r3, [r7, #18]
 8002602:	e005      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002604:	40021000 	.word	0x40021000
 8002608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002610:	7c7b      	ldrb	r3, [r7, #17]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d105      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002616:	4ba6      	ldr	r3, [pc, #664]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	4aa5      	ldr	r2, [pc, #660]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002620:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800262e:	4ba0      	ldr	r3, [pc, #640]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f023 0203 	bic.w	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	499c      	ldr	r1, [pc, #624]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002650:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f023 020c 	bic.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4994      	ldr	r1, [pc, #592]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002672:	4b8f      	ldr	r3, [pc, #572]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	498b      	ldr	r1, [pc, #556]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002694:	4b86      	ldr	r3, [pc, #536]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	4983      	ldr	r1, [pc, #524]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026b6:	4b7e      	ldr	r3, [pc, #504]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	497a      	ldr	r1, [pc, #488]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d8:	4b75      	ldr	r3, [pc, #468]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	4972      	ldr	r1, [pc, #456]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026fa:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4969      	ldr	r1, [pc, #420]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800271c:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4961      	ldr	r1, [pc, #388]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800273e:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	4958      	ldr	r1, [pc, #352]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002760:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	4950      	ldr	r1, [pc, #320]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800277e:	d105      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002780:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002798:	4b45      	ldr	r3, [pc, #276]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	4942      	ldr	r1, [pc, #264]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b6:	d105      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b8:	4b3d      	ldr	r3, [pc, #244]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a3c      	ldr	r2, [pc, #240]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027d0:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4934      	ldr	r1, [pc, #208]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ee:	d105      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f0:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a2e      	ldr	r2, [pc, #184]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d015      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	4926      	ldr	r1, [pc, #152]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002826:	d105      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a20      	ldr	r2, [pc, #128]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002832:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d015      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	4918      	ldr	r1, [pc, #96]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800285e:	d105      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002860:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800286a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002878:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	490a      	ldr	r1, [pc, #40]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002896:	d105      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e049      	b.n	800295a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe fada 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 fef8 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e049      	b.n	8002a08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f841 	bl	8002a10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2202      	movs	r2, #2
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f000 fea1 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_TIM_PWM_Start+0x24>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e03c      	b.n	8002ac2 <HAL_TIM_PWM_Start+0x9e>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d109      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x3e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	e02f      	b.n	8002ac2 <HAL_TIM_PWM_Start+0x9e>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d109      	bne.n	8002a7c <HAL_TIM_PWM_Start+0x58>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	bf14      	ite	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	2300      	moveq	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e022      	b.n	8002ac2 <HAL_TIM_PWM_Start+0x9e>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d109      	bne.n	8002a96 <HAL_TIM_PWM_Start+0x72>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	e015      	b.n	8002ac2 <HAL_TIM_PWM_Start+0x9e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d109      	bne.n	8002ab0 <HAL_TIM_PWM_Start+0x8c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e008      	b.n	8002ac2 <HAL_TIM_PWM_Start+0x9e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06e      	b.n	8002ba8 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_PWM_Start+0xb6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad8:	e023      	b.n	8002b22 <HAL_TIM_PWM_Start+0xfe>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_PWM_Start+0xc6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae8:	e01b      	b.n	8002b22 <HAL_TIM_PWM_Start+0xfe>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_PWM_Start+0xd6>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af8:	e013      	b.n	8002b22 <HAL_TIM_PWM_Start+0xfe>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b0c      	cmp	r3, #12
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_PWM_Start+0xe6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b08:	e00b      	b.n	8002b22 <HAL_TIM_PWM_Start+0xfe>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0xf6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b18:	e003      	b.n	8002b22 <HAL_TIM_PWM_Start+0xfe>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 fbcc 	bl	80042c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_TIM_PWM_Start+0x18c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_TIM_PWM_Start+0x13e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <HAL_TIM_PWM_Start+0x190>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_TIM_PWM_Start+0x13e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_TIM_PWM_Start+0x194>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_TIM_PWM_Start+0x13e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HAL_TIM_PWM_Start+0x198>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIM_PWM_Start+0x13e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_TIM_PWM_Start+0x19c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x142>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_TIM_PWM_Start+0x144>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_TIM_PWM_Start+0x1a0>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d00b      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x182>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d007      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40013400 	.word	0x40013400
 8002bb8:	40014000 	.word	0x40014000
 8002bbc:	40014400 	.word	0x40014400
 8002bc0:	40014800 	.word	0x40014800
 8002bc4:	00010007 	.word	0x00010007

08002bc8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e049      	b.n	8002c6e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f841 	bl	8002c76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f000 fd6e 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_TIM_IC_Start+0x1a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e023      	b.n	8002cee <HAL_TIM_IC_Start+0x62>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d104      	bne.n	8002cb6 <HAL_TIM_IC_Start+0x2a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e01b      	b.n	8002cee <HAL_TIM_IC_Start+0x62>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d104      	bne.n	8002cc6 <HAL_TIM_IC_Start+0x3a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e013      	b.n	8002cee <HAL_TIM_IC_Start+0x62>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_IC_Start+0x4a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e00b      	b.n	8002cee <HAL_TIM_IC_Start+0x62>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_IC_Start+0x5a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e003      	b.n	8002cee <HAL_TIM_IC_Start+0x62>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_TIM_IC_Start+0x74>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e013      	b.n	8002d28 <HAL_TIM_IC_Start+0x9c>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d104      	bne.n	8002d10 <HAL_TIM_IC_Start+0x84>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e00b      	b.n	8002d28 <HAL_TIM_IC_Start+0x9c>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d104      	bne.n	8002d20 <HAL_TIM_IC_Start+0x94>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e003      	b.n	8002d28 <HAL_TIM_IC_Start+0x9c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d102      	bne.n	8002d36 <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d30:	7bbb      	ldrb	r3, [r7, #14]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e064      	b.n	8002e04 <HAL_TIM_IC_Start+0x178>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_IC_Start+0xbe>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d48:	e023      	b.n	8002d92 <HAL_TIM_IC_Start+0x106>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_IC_Start+0xce>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	e01b      	b.n	8002d92 <HAL_TIM_IC_Start+0x106>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_IC_Start+0xde>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	e013      	b.n	8002d92 <HAL_TIM_IC_Start+0x106>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_IC_Start+0xee>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d78:	e00b      	b.n	8002d92 <HAL_TIM_IC_Start+0x106>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d104      	bne.n	8002d8a <HAL_TIM_IC_Start+0xfe>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d88:	e003      	b.n	8002d92 <HAL_TIM_IC_Start+0x106>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_IC_Start+0x116>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da0:	e013      	b.n	8002dca <HAL_TIM_IC_Start+0x13e>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_IC_Start+0x126>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db0:	e00b      	b.n	8002dca <HAL_TIM_IC_Start+0x13e>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_IC_Start+0x136>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dc0:	e003      	b.n	8002dca <HAL_TIM_IC_Start+0x13e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 fa78 	bl	80042c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_TIM_IC_Start+0x180>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d00b      	beq.n	8002e02 <HAL_TIM_IC_Start+0x176>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d007      	beq.n	8002e02 <HAL_TIM_IC_Start+0x176>
  {
    __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	00010007 	.word	0x00010007

08002e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d122      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d11b      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0202 	mvn.w	r2, #2
 8002e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fd fcd6 	bl	8000804 <HAL_TIM_IC_CaptureCallback>
 8002e58:	e005      	b.n	8002e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fc26 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fc2d 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d122      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d11b      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0204 	mvn.w	r2, #4
 8002e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2202      	movs	r2, #2
 8002e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fd fcac 	bl	8000804 <HAL_TIM_IC_CaptureCallback>
 8002eac:	e005      	b.n	8002eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fbfc 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fc03 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d122      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d11b      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0208 	mvn.w	r2, #8
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2204      	movs	r2, #4
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd fc82 	bl	8000804 <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fbd2 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fbd9 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d122      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b10      	cmp	r3, #16
 8002f2e:	d11b      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0210 	mvn.w	r2, #16
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd fc58 	bl	8000804 <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fba8 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fbaf 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10e      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d107      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0201 	mvn.w	r2, #1
 8002f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fb82 	bl	8003698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d107      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f001 fb84 	bl	80046c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fce:	d10e      	bne.n	8002fee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d107      	bne.n	8002fee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f001 fb77 	bl	80046dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d10e      	bne.n	800301a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d107      	bne.n	800301a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fb5d 	bl	80036d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b20      	cmp	r3, #32
 8003026:	d10e      	bne.n	8003046 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b20      	cmp	r3, #32
 8003034:	d107      	bne.n	8003046 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f06f 0220 	mvn.w	r2, #32
 800303e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd fbd5 	bl	80007f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003054:	d10f      	bne.n	8003076 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003064:	d107      	bne.n	8003076 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800306e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f001 fb3d 	bl	80046f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003084:	d10f      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003094:	d107      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800309e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f001 fb2f 	bl	8004704 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b4:	d10f      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c4:	d107      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80030ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f001 fb21 	bl	8004718 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e4:	d10f      	bne.n	8003106 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030f4:	d107      	bne.n	8003106 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80030fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f001 fb13 	bl	800472c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003124:	2302      	movs	r3, #2
 8003126:	e082      	b.n	800322e <HAL_TIM_IC_ConfigChannel+0x120>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d11b      	bne.n	800316e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6819      	ldr	r1, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f000 ff05 	bl	8003f54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 020c 	bic.w	r2, r2, #12
 8003158:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6999      	ldr	r1, [r3, #24]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	619a      	str	r2, [r3, #24]
 800316c:	e05a      	b.n	8003224 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d11c      	bne.n	80031ae <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f000 ff7d 	bl	8004082 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003196:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6999      	ldr	r1, [r3, #24]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	021a      	lsls	r2, r3, #8
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	619a      	str	r2, [r3, #24]
 80031ac:	e03a      	b.n	8003224 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f000 ffca 	bl	800415c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 020c 	bic.w	r2, r2, #12
 80031d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69d9      	ldr	r1, [r3, #28]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	61da      	str	r2, [r3, #28]
 80031ea:	e01b      	b.n	8003224 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f000 ffea 	bl	80041d4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800320e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69d9      	ldr	r1, [r3, #28]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800324e:	2302      	movs	r3, #2
 8003250:	e0fd      	b.n	800344e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b14      	cmp	r3, #20
 800325e:	f200 80f0 	bhi.w	8003442 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	080032bd 	.word	0x080032bd
 800326c:	08003443 	.word	0x08003443
 8003270:	08003443 	.word	0x08003443
 8003274:	08003443 	.word	0x08003443
 8003278:	080032fd 	.word	0x080032fd
 800327c:	08003443 	.word	0x08003443
 8003280:	08003443 	.word	0x08003443
 8003284:	08003443 	.word	0x08003443
 8003288:	0800333f 	.word	0x0800333f
 800328c:	08003443 	.word	0x08003443
 8003290:	08003443 	.word	0x08003443
 8003294:	08003443 	.word	0x08003443
 8003298:	0800337f 	.word	0x0800337f
 800329c:	08003443 	.word	0x08003443
 80032a0:	08003443 	.word	0x08003443
 80032a4:	08003443 	.word	0x08003443
 80032a8:	080033c1 	.word	0x080033c1
 80032ac:	08003443 	.word	0x08003443
 80032b0:	08003443 	.word	0x08003443
 80032b4:	08003443 	.word	0x08003443
 80032b8:	08003401 	.word	0x08003401
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 faa0 	bl	8003808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0208 	orr.w	r2, r2, #8
 80032d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0204 	bic.w	r2, r2, #4
 80032e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6999      	ldr	r1, [r3, #24]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	619a      	str	r2, [r3, #24]
      break;
 80032fa:	e0a3      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fb10 	bl	8003928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6999      	ldr	r1, [r3, #24]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	021a      	lsls	r2, r3, #8
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	619a      	str	r2, [r3, #24]
      break;
 800333c:	e082      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fb79 	bl	8003a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0208 	orr.w	r2, r2, #8
 8003358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0204 	bic.w	r2, r2, #4
 8003368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	61da      	str	r2, [r3, #28]
      break;
 800337c:	e062      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fbe1 	bl	8003b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69d9      	ldr	r1, [r3, #28]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	021a      	lsls	r2, r3, #8
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	61da      	str	r2, [r3, #28]
      break;
 80033be:	e041      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fc4a 	bl	8003c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0208 	orr.w	r2, r2, #8
 80033da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0204 	bic.w	r2, r2, #4
 80033ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033fe:	e021      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fc8e 	bl	8003d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	021a      	lsls	r2, r3, #8
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003440:	e000      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003442:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop

08003458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_TIM_ConfigClockSource+0x18>
 800346c:	2302      	movs	r3, #2
 800346e:	e0c3      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x1a0>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800348e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800349a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b70      	cmp	r3, #112	; 0x70
 80034aa:	d038      	beq.n	800351e <HAL_TIM_ConfigClockSource+0xc6>
 80034ac:	2b70      	cmp	r3, #112	; 0x70
 80034ae:	d815      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x84>
 80034b0:	2b30      	cmp	r3, #48	; 0x30
 80034b2:	f000 808e 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
 80034b6:	2b30      	cmp	r3, #48	; 0x30
 80034b8:	d809      	bhi.n	80034ce <HAL_TIM_ConfigClockSource+0x76>
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	f000 8089 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	f000 8086 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8083 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034cc:	e08b      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034ce:	2b50      	cmp	r3, #80	; 0x50
 80034d0:	d04f      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x11a>
 80034d2:	2b60      	cmp	r3, #96	; 0x60
 80034d4:	d05d      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x13a>
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d06b      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80034da:	e084      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034dc:	4a48      	ldr	r2, [pc, #288]	; (8003600 <HAL_TIM_ConfigClockSource+0x1a8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d077      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
 80034e2:	4a47      	ldr	r2, [pc, #284]	; (8003600 <HAL_TIM_ConfigClockSource+0x1a8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d809      	bhi.n	80034fc <HAL_TIM_ConfigClockSource+0xa4>
 80034e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ec:	d02e      	beq.n	800354c <HAL_TIM_ConfigClockSource+0xf4>
 80034ee:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80034f2:	d06e      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d074      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80034fa:	e074      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034fc:	4a41      	ldr	r2, [pc, #260]	; (8003604 <HAL_TIM_ConfigClockSource+0x1ac>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d067      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
 8003502:	4a40      	ldr	r2, [pc, #256]	; (8003604 <HAL_TIM_ConfigClockSource+0x1ac>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d803      	bhi.n	8003510 <HAL_TIM_ConfigClockSource+0xb8>
 8003508:	4a3f      	ldr	r2, [pc, #252]	; (8003608 <HAL_TIM_ConfigClockSource+0x1b0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d061      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800350e:	e06a      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003510:	4a3e      	ldr	r2, [pc, #248]	; (800360c <HAL_TIM_ConfigClockSource+0x1b4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d05d      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
 8003516:	4a3e      	ldr	r2, [pc, #248]	; (8003610 <HAL_TIM_ConfigClockSource+0x1b8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d05a      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800351c:	e063      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6899      	ldr	r1, [r3, #8]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f000 feab 	bl	8004288 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003540:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	609a      	str	r2, [r3, #8]
      break;
 800354a:	e04c      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6899      	ldr	r1, [r3, #8]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f000 fe94 	bl	8004288 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800356e:	609a      	str	r2, [r3, #8]
      break;
 8003570:	e039      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	461a      	mov	r2, r3
 8003580:	f000 fd50 	bl	8004024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2150      	movs	r1, #80	; 0x50
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fe5f 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003590:	e029      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	461a      	mov	r2, r3
 80035a0:	f000 fdac 	bl	80040fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2160      	movs	r1, #96	; 0x60
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fe4f 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 80035b0:	e019      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	461a      	mov	r2, r3
 80035c0:	f000 fd30 	bl	8004024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2140      	movs	r1, #64	; 0x40
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fe3f 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 80035d0:	e009      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4619      	mov	r1, r3
 80035dc:	4610      	mov	r0, r2
 80035de:	f000 fe36 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 80035e2:	e000      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80035e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	00100020 	.word	0x00100020
 8003604:	00100040 	.word	0x00100040
 8003608:	00100030 	.word	0x00100030
 800360c:	00100060 	.word	0x00100060
 8003610:	00100070 	.word	0x00100070

08003614 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e031      	b.n	8003690 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fbd8 	bl	8003df4 <TIM_SlaveTimer_SetConfig>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e018      	b.n	8003690 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800367c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a3c      	ldr	r2, [pc, #240]	; (80037ec <TIM_Base_SetConfig+0x104>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00f      	beq.n	8003720 <TIM_Base_SetConfig+0x38>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d00b      	beq.n	8003720 <TIM_Base_SetConfig+0x38>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a39      	ldr	r2, [pc, #228]	; (80037f0 <TIM_Base_SetConfig+0x108>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <TIM_Base_SetConfig+0x38>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a38      	ldr	r2, [pc, #224]	; (80037f4 <TIM_Base_SetConfig+0x10c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_Base_SetConfig+0x38>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a37      	ldr	r2, [pc, #220]	; (80037f8 <TIM_Base_SetConfig+0x110>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <TIM_Base_SetConfig+0x104>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01b      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d017      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2a      	ldr	r2, [pc, #168]	; (80037f0 <TIM_Base_SetConfig+0x108>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a29      	ldr	r2, [pc, #164]	; (80037f4 <TIM_Base_SetConfig+0x10c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00f      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <TIM_Base_SetConfig+0x110>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00b      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a27      	ldr	r2, [pc, #156]	; (80037fc <TIM_Base_SetConfig+0x114>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d007      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a26      	ldr	r2, [pc, #152]	; (8003800 <TIM_Base_SetConfig+0x118>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d003      	beq.n	8003772 <TIM_Base_SetConfig+0x8a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a25      	ldr	r2, [pc, #148]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d108      	bne.n	8003784 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <TIM_Base_SetConfig+0x104>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00f      	beq.n	80037d0 <TIM_Base_SetConfig+0xe8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <TIM_Base_SetConfig+0x110>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <TIM_Base_SetConfig+0xe8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <TIM_Base_SetConfig+0x114>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <TIM_Base_SetConfig+0xe8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <TIM_Base_SetConfig+0x118>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_Base_SetConfig+0xe8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0e      	ldr	r2, [pc, #56]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d103      	bne.n	80037d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	615a      	str	r2, [r3, #20]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40013400 	.word	0x40013400
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800

08003808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f023 0201 	bic.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f023 0302 	bic.w	r3, r3, #2
 8003854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <TIM_OC1_SetConfig+0x10c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00f      	beq.n	8003888 <TIM_OC1_SetConfig+0x80>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a2b      	ldr	r2, [pc, #172]	; (8003918 <TIM_OC1_SetConfig+0x110>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00b      	beq.n	8003888 <TIM_OC1_SetConfig+0x80>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a2a      	ldr	r2, [pc, #168]	; (800391c <TIM_OC1_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_OC1_SetConfig+0x80>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a29      	ldr	r2, [pc, #164]	; (8003920 <TIM_OC1_SetConfig+0x118>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_OC1_SetConfig+0x80>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <TIM_OC1_SetConfig+0x11c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10c      	bne.n	80038a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0308 	bic.w	r3, r3, #8
 800388e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <TIM_OC1_SetConfig+0x10c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00f      	beq.n	80038ca <TIM_OC1_SetConfig+0xc2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <TIM_OC1_SetConfig+0x110>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_OC1_SetConfig+0xc2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <TIM_OC1_SetConfig+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_OC1_SetConfig+0xc2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <TIM_OC1_SetConfig+0x118>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_OC1_SetConfig+0xc2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a17      	ldr	r2, [pc, #92]	; (8003924 <TIM_OC1_SetConfig+0x11c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d111      	bne.n	80038ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	621a      	str	r2, [r3, #32]
}
 8003908:	bf00      	nop
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40013400 	.word	0x40013400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800

08003928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0210 	bic.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0320 	bic.w	r3, r3, #32
 8003976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a28      	ldr	r2, [pc, #160]	; (8003a28 <TIM_OC2_SetConfig+0x100>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_OC2_SetConfig+0x6c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a27      	ldr	r2, [pc, #156]	; (8003a2c <TIM_OC2_SetConfig+0x104>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d10d      	bne.n	80039b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC2_SetConfig+0x100>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00f      	beq.n	80039d8 <TIM_OC2_SetConfig+0xb0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <TIM_OC2_SetConfig+0x104>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00b      	beq.n	80039d8 <TIM_OC2_SetConfig+0xb0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <TIM_OC2_SetConfig+0x108>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <TIM_OC2_SetConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <TIM_OC2_SetConfig+0x10c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_OC2_SetConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <TIM_OC2_SetConfig+0x110>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d113      	bne.n	8003a00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40013400 	.word	0x40013400
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800

08003a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0303 	bic.w	r3, r3, #3
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a27      	ldr	r2, [pc, #156]	; (8003b38 <TIM_OC3_SetConfig+0xfc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_OC3_SetConfig+0x6a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a26      	ldr	r2, [pc, #152]	; (8003b3c <TIM_OC3_SetConfig+0x100>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d10d      	bne.n	8003ac2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <TIM_OC3_SetConfig+0xfc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_OC3_SetConfig+0xae>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <TIM_OC3_SetConfig+0x100>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_OC3_SetConfig+0xae>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <TIM_OC3_SetConfig+0x104>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_OC3_SetConfig+0xae>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <TIM_OC3_SetConfig+0x108>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_OC3_SetConfig+0xae>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <TIM_OC3_SetConfig+0x10c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d113      	bne.n	8003b12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40014400 	.word	0x40014400
 8003b48:	40014800 	.word	0x40014800

08003b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	031b      	lsls	r3, r3, #12
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <TIM_OC4_SetConfig+0x100>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_OC4_SetConfig+0x6c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <TIM_OC4_SetConfig+0x104>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d10d      	bne.n	8003bd4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <TIM_OC4_SetConfig+0x100>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00f      	beq.n	8003bfc <TIM_OC4_SetConfig+0xb0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <TIM_OC4_SetConfig+0x104>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <TIM_OC4_SetConfig+0xb0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <TIM_OC4_SetConfig+0x108>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_OC4_SetConfig+0xb0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <TIM_OC4_SetConfig+0x10c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_OC4_SetConfig+0xb0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <TIM_OC4_SetConfig+0x110>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d113      	bne.n	8003c24 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40013400 	.word	0x40013400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800

08003c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <TIM_OC5_SetConfig+0xb4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00f      	beq.n	8003cda <TIM_OC5_SetConfig+0x7a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <TIM_OC5_SetConfig+0xb8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <TIM_OC5_SetConfig+0x7a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <TIM_OC5_SetConfig+0xbc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <TIM_OC5_SetConfig+0x7a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <TIM_OC5_SetConfig+0xc0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_OC5_SetConfig+0x7a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <TIM_OC5_SetConfig+0xc4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d109      	bne.n	8003cee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	621a      	str	r2, [r3, #32]
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40013400 	.word	0x40013400
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	40014400 	.word	0x40014400
 8003d24:	40014800 	.word	0x40014800

08003d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	051b      	lsls	r3, r3, #20
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <TIM_OC6_SetConfig+0xb8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00f      	beq.n	8003da4 <TIM_OC6_SetConfig+0x7c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <TIM_OC6_SetConfig+0xbc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00b      	beq.n	8003da4 <TIM_OC6_SetConfig+0x7c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <TIM_OC6_SetConfig+0xc0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <TIM_OC6_SetConfig+0x7c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a15      	ldr	r2, [pc, #84]	; (8003dec <TIM_OC6_SetConfig+0xc4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_OC6_SetConfig+0x7c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <TIM_OC6_SetConfig+0xc8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d109      	bne.n	8003db8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	029b      	lsls	r3, r3, #10
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40013400 	.word	0x40013400
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40014400 	.word	0x40014400
 8003df0:	40014800 	.word	0x40014800

08003df4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e10:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e22:	f023 0307 	bic.w	r3, r3, #7
 8003e26:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b60      	cmp	r3, #96	; 0x60
 8003e40:	d06d      	beq.n	8003f1e <TIM_SlaveTimer_SetConfig+0x12a>
 8003e42:	2b60      	cmp	r3, #96	; 0x60
 8003e44:	d80f      	bhi.n	8003e66 <TIM_SlaveTimer_SetConfig+0x72>
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d073      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d804      	bhi.n	8003e58 <TIM_SlaveTimer_SetConfig+0x64>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d06f      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d06d      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8003e56:	e06d      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d028      	beq.n	8003eae <TIM_SlaveTimer_SetConfig+0xba>
 8003e5c:	2b50      	cmp	r3, #80	; 0x50
 8003e5e:	d054      	beq.n	8003f0a <TIM_SlaveTimer_SetConfig+0x116>
 8003e60:	2b30      	cmp	r3, #48	; 0x30
 8003e62:	d066      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003e64:	e066      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e66:	4a36      	ldr	r2, [pc, #216]	; (8003f40 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d062      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e6c:	4a34      	ldr	r2, [pc, #208]	; (8003f40 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d808      	bhi.n	8003e84 <TIM_SlaveTimer_SetConfig+0x90>
 8003e72:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e76:	d05c      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e78:	4a32      	ldr	r2, [pc, #200]	; (8003f44 <TIM_SlaveTimer_SetConfig+0x150>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d059      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e7e:	2b70      	cmp	r3, #112	; 0x70
 8003e80:	d00a      	beq.n	8003e98 <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8003e82:	e057      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e84:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <TIM_SlaveTimer_SetConfig+0x154>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d053      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e8a:	4a30      	ldr	r2, [pc, #192]	; (8003f4c <TIM_SlaveTimer_SetConfig+0x158>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d050      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e90:	4a2f      	ldr	r2, [pc, #188]	; (8003f50 <TIM_SlaveTimer_SetConfig+0x15c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d04d      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003e96:	e04d      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68d9      	ldr	r1, [r3, #12]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f000 f9ee 	bl	8004288 <TIM_ETR_SetConfig>
      break;
 8003eac:	e042      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d004      	beq.n	8003ec0 <TIM_SlaveTimer_SetConfig+0xcc>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003ebe:	d101      	bne.n	8003ec4 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e038      	b.n	8003f36 <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a1a      	ldr	r2, [r3, #32]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eea:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	621a      	str	r2, [r3, #32]
      break;
 8003f08:	e014      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 f884 	bl	8004024 <TIM_TI1_ConfigInputStage>
      break;
 8003f1c:	e00a      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6899      	ldr	r1, [r3, #8]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 f8e6 	bl	80040fc <TIM_TI2_ConfigInputStage>
      break;
 8003f30:	e000      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8003f32:	bf00      	nop
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	00100030 	.word	0x00100030
 8003f44:	00100020 	.word	0x00100020
 8003f48:	00100060 	.word	0x00100060
 8003f4c:	00100070 	.word	0x00100070
 8003f50:	00100040 	.word	0x00100040

08003f54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a24      	ldr	r2, [pc, #144]	; (8004010 <TIM_TI1_SetConfig+0xbc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <TIM_TI1_SetConfig+0x56>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d00f      	beq.n	8003faa <TIM_TI1_SetConfig+0x56>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4a21      	ldr	r2, [pc, #132]	; (8004014 <TIM_TI1_SetConfig+0xc0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_TI1_SetConfig+0x56>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <TIM_TI1_SetConfig+0xc4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_TI1_SetConfig+0x56>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	; (800401c <TIM_TI1_SetConfig+0xc8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_TI1_SetConfig+0x56>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <TIM_TI1_SetConfig+0xcc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <TIM_TI1_SetConfig+0x5a>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <TIM_TI1_SetConfig+0x5c>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	e003      	b.n	8003fce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f023 030a 	bic.w	r3, r3, #10
 8003fe8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f003 030a 	and.w	r3, r3, #10
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	40013400 	.word	0x40013400
 8004020:	40014000 	.word	0x40014000

08004024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0201 	bic.w	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 030a 	bic.w	r3, r3, #10
 8004060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004082:	b480      	push	{r7}
 8004084:	b087      	sub	sp, #28
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f023 0210 	bic.w	r2, r3, #16
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	031b      	lsls	r3, r3, #12
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	bf00      	nop
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f023 0210 	bic.w	r2, r3, #16
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	031b      	lsls	r3, r3, #12
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 0303 	bic.w	r3, r3, #3
 8004188:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004198:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80041ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004200:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004212:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	031b      	lsls	r3, r3, #12
 8004218:	b29b      	uxth	r3, r3
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004226:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	031b      	lsls	r3, r3, #12
 800422c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	f043 0307 	orr.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2201      	movs	r2, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b08a      	sub	sp, #40	; 0x28
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0a0      	b.n	8004468 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f898 	bl	8004470 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3304      	adds	r3, #4
 8004350:	4619      	mov	r1, r3
 8004352:	4610      	mov	r0, r2
 8004354:	f7ff f9c8 	bl	80036e8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2203      	movs	r2, #3
 8004366:	f7ff fdf5 	bl	8003f54 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 020c 	bic.w	r2, r2, #12
 8004378:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6999      	ldr	r1, [r3, #24]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800439a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043be:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	f023 0307 	bic.w	r3, r3, #7
 80043d2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0204 	orr.w	r2, r2, #4
 80043e2:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043e8:	2300      	movs	r3, #0
 80043ea:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80043ec:	2370      	movs	r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f107 020c 	add.w	r2, r7, #12
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fa8b 	bl	8003928 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004434:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004498:	2302      	movs	r3, #2
 800449a:	e065      	b.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2b      	ldr	r2, [pc, #172]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d108      	bne.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80044e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d018      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004512:	d013      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a18      	ldr	r2, [pc, #96]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00e      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a17      	ldr	r2, [pc, #92]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a12      	ldr	r2, [pc, #72]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d10c      	bne.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40014000 	.word	0x40014000

08004588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e087      	b.n	80046b4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d106      	bne.n	8004640 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d126      	bne.n	80046a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	051b      	lsls	r3, r3, #20
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d106      	bne.n	80046a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40013400 	.word	0x40013400

080046c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e042      	b.n	80047d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d106      	bne.n	800476a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7fc fce7 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2224      	movs	r2, #36	; 0x24
 800476e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f9a8 	bl	8004ad8 <UART_SetConfig>
 8004788:	4603      	mov	r3, r0
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e022      	b.n	80047d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 fb56 	bl	8005e4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f001 fbdd 	bl	8005f90 <UART_CheckIdleState>
 80047d6:	4603      	mov	r3, r0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d118      	bne.n	8004840 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d013      	beq.n	8004840 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 812e 	beq.w	8004a92 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	4798      	blx	r3
      }
      return;
 800483e:	e128      	b.n	8004a92 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80d1 	beq.w	80049ea <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4b96      	ldr	r3, [pc, #600]	; (8004aa4 <HAL_UART_IRQHandler+0x2c4>)
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d105      	bne.n	800485e <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80c6 	beq.w	80049ea <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d010      	beq.n	800488a <HAL_UART_IRQHandler+0xaa>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2201      	movs	r2, #1
 8004878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f043 0201 	orr.w	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d010      	beq.n	80048b6 <HAL_UART_IRQHandler+0xd6>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2202      	movs	r2, #2
 80048a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f043 0204 	orr.w	r2, r3, #4
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_UART_IRQHandler+0x102>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2204      	movs	r2, #4
 80048d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f043 0202 	orr.w	r2, r3, #2
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d015      	beq.n	8004918 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4b6a      	ldr	r3, [pc, #424]	; (8004aa4 <HAL_UART_IRQHandler+0x2c4>)
 80048fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2208      	movs	r2, #8
 8004906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f043 0208 	orr.w	r2, r3, #8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80b9 	beq.w	8004a96 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d011      	beq.n	8004952 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d004      	beq.n	8004972 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800496e:	2b00      	cmp	r3, #0
 8004970:	d031      	beq.n	80049d6 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f001 fb9e 	bl	80060b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d123      	bne.n	80049ce <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004994:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800499a:	2b00      	cmp	r3, #0
 800499c:	d013      	beq.n	80049c6 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049a2:	4a41      	ldr	r2, [pc, #260]	; (8004aa8 <HAL_UART_IRQHandler+0x2c8>)
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fc fdb9 	bl	8001522 <HAL_DMA_Abort_IT>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d017      	beq.n	80049e6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80049c0:	4610      	mov	r0, r2
 80049c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	e00f      	b.n	80049e6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f87a 	bl	8004ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	e00b      	b.n	80049e6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f876 	bl	8004ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	e007      	b.n	80049e6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f872 	bl	8004ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80049e4:	e057      	b.n	8004a96 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e6:	bf00      	nop
    return;
 80049e8:	e055      	b.n	8004a96 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00d      	beq.n	8004a10 <HAL_UART_IRQHandler+0x230>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f001 fba6 	bl	800615a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a0e:	e045      	b.n	8004a9c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d012      	beq.n	8004a40 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d031      	beq.n	8004a9a <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
    }
    return;
 8004a3e:	e02c      	b.n	8004a9a <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_UART_IRQHandler+0x27c>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f001 fb66 	bl	8006126 <UART_EndTransmit_IT>
    return;
 8004a5a:	e01f      	b.n	8004a9c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_UART_IRQHandler+0x298>
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f001 fb86 	bl	8006182 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a76:	e011      	b.n	8004a9c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_UART_IRQHandler+0x2bc>
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	da09      	bge.n	8004a9c <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f001 fb70 	bl	800616e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a8e:	bf00      	nop
 8004a90:	e004      	b.n	8004a9c <HAL_UART_IRQHandler+0x2bc>
      return;
 8004a92:	bf00      	nop
 8004a94:	e002      	b.n	8004a9c <HAL_UART_IRQHandler+0x2bc>
    return;
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <HAL_UART_IRQHandler+0x2bc>
    return;
 8004a9a:	bf00      	nop
  }
}
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	10000001 	.word	0x10000001
 8004aa8:	080060fb 	.word	0x080060fb

08004aac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	0000      	movs	r0, r0
	...

08004ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004adc:	b08a      	sub	sp, #40	; 0x28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4ba4      	ldr	r3, [pc, #656]	; (8004da8 <UART_SetConfig+0x2d0>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a99      	ldr	r2, [pc, #612]	; (8004dac <UART_SetConfig+0x2d4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b50:	4313      	orrs	r3, r2
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	f023 010f 	bic.w	r1, r3, #15
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a8a      	ldr	r2, [pc, #552]	; (8004db0 <UART_SetConfig+0x2d8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d126      	bne.n	8004bda <UART_SetConfig+0x102>
 8004b8c:	4b89      	ldr	r3, [pc, #548]	; (8004db4 <UART_SetConfig+0x2dc>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d81a      	bhi.n	8004bd0 <UART_SetConfig+0xf8>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0xc8>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bc1 	.word	0x08004bc1
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb6:	e0d6      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbe:	e0d2      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc6:	e0ce      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bce:	e0ca      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd6:	bf00      	nop
 8004bd8:	e0c5      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a76      	ldr	r2, [pc, #472]	; (8004db8 <UART_SetConfig+0x2e0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d138      	bne.n	8004c56 <UART_SetConfig+0x17e>
 8004be4:	4b73      	ldr	r3, [pc, #460]	; (8004db4 <UART_SetConfig+0x2dc>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b0c      	cmp	r3, #12
 8004bf0:	d82c      	bhi.n	8004c4c <UART_SetConfig+0x174>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0x120>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004c4d 	.word	0x08004c4d
 8004c00:	08004c4d 	.word	0x08004c4d
 8004c04:	08004c4d 	.word	0x08004c4d
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c4d 	.word	0x08004c4d
 8004c10:	08004c4d 	.word	0x08004c4d
 8004c14:	08004c4d 	.word	0x08004c4d
 8004c18:	08004c35 	.word	0x08004c35
 8004c1c:	08004c4d 	.word	0x08004c4d
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c45 	.word	0x08004c45
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e098      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004c34:	2302      	movs	r3, #2
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e094      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e090      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004c44:	2308      	movs	r3, #8
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e08c      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	bf00      	nop
 8004c54:	e087      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a58      	ldr	r2, [pc, #352]	; (8004dbc <UART_SetConfig+0x2e4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d125      	bne.n	8004cac <UART_SetConfig+0x1d4>
 8004c60:	4b54      	ldr	r3, [pc, #336]	; (8004db4 <UART_SetConfig+0x2dc>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d011      	beq.n	8004c92 <UART_SetConfig+0x1ba>
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d802      	bhi.n	8004c78 <UART_SetConfig+0x1a0>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <UART_SetConfig+0x1aa>
 8004c76:	e014      	b.n	8004ca2 <UART_SetConfig+0x1ca>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d006      	beq.n	8004c8a <UART_SetConfig+0x1b2>
 8004c7c:	2b30      	cmp	r3, #48	; 0x30
 8004c7e:	d00c      	beq.n	8004c9a <UART_SetConfig+0x1c2>
 8004c80:	e00f      	b.n	8004ca2 <UART_SetConfig+0x1ca>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c88:	e06d      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c90:	e069      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004c92:	2304      	movs	r3, #4
 8004c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c98:	e065      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca0:	e061      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca8:	bf00      	nop
 8004caa:	e05c      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a43      	ldr	r2, [pc, #268]	; (8004dc0 <UART_SetConfig+0x2e8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d125      	bne.n	8004d02 <UART_SetConfig+0x22a>
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <UART_SetConfig+0x2dc>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d011      	beq.n	8004ce8 <UART_SetConfig+0x210>
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d802      	bhi.n	8004cce <UART_SetConfig+0x1f6>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <UART_SetConfig+0x200>
 8004ccc:	e014      	b.n	8004cf8 <UART_SetConfig+0x220>
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d006      	beq.n	8004ce0 <UART_SetConfig+0x208>
 8004cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cd4:	d00c      	beq.n	8004cf0 <UART_SetConfig+0x218>
 8004cd6:	e00f      	b.n	8004cf8 <UART_SetConfig+0x220>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e042      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e03e      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e03a      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e036      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	bf00      	nop
 8004d00:	e031      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a29      	ldr	r2, [pc, #164]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d129      	bne.n	8004d60 <UART_SetConfig+0x288>
 8004d0c:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <UART_SetConfig+0x2dc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1a:	d014      	beq.n	8004d46 <UART_SetConfig+0x26e>
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d802      	bhi.n	8004d28 <UART_SetConfig+0x250>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <UART_SetConfig+0x25e>
 8004d26:	e016      	b.n	8004d56 <UART_SetConfig+0x27e>
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2c:	d007      	beq.n	8004d3e <UART_SetConfig+0x266>
 8004d2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d32:	d00c      	beq.n	8004d4e <UART_SetConfig+0x276>
 8004d34:	e00f      	b.n	8004d56 <UART_SetConfig+0x27e>
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3c:	e013      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d44:	e00f      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004d46:	2304      	movs	r3, #4
 8004d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4c:	e00b      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004d4e:	2308      	movs	r3, #8
 8004d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d54:	e007      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004d56:	2310      	movs	r3, #16
 8004d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5c:	bf00      	nop
 8004d5e:	e002      	b.n	8004d66 <UART_SetConfig+0x28e>
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a10      	ldr	r2, [pc, #64]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	f040 842e 	bne.w	80055ce <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	f200 8169 	bhi.w	800504e <UART_SetConfig+0x576>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x2ac>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004dc5 	.word	0x08004dc5
 8004d88:	0800504f 	.word	0x0800504f
 8004d8c:	08004e67 	.word	0x08004e67
 8004d90:	0800504f 	.word	0x0800504f
 8004d94:	08004eff 	.word	0x08004eff
 8004d98:	0800504f 	.word	0x0800504f
 8004d9c:	0800504f 	.word	0x0800504f
 8004da0:	0800504f 	.word	0x0800504f
 8004da4:	08004fa1 	.word	0x08004fa1
 8004da8:	cfff69f3 	.word	0xcfff69f3
 8004dac:	40008000 	.word	0x40008000
 8004db0:	40013800 	.word	0x40013800
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40004400 	.word	0x40004400
 8004dbc:	40004800 	.word	0x40004800
 8004dc0:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004dc4:	f7fd fb14 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d044      	beq.n	8004e5c <UART_SetConfig+0x384>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d03e      	beq.n	8004e58 <UART_SetConfig+0x380>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d038      	beq.n	8004e54 <UART_SetConfig+0x37c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d032      	beq.n	8004e50 <UART_SetConfig+0x378>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d02c      	beq.n	8004e4c <UART_SetConfig+0x374>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b05      	cmp	r3, #5
 8004df8:	d026      	beq.n	8004e48 <UART_SetConfig+0x370>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d020      	beq.n	8004e44 <UART_SetConfig+0x36c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	2b07      	cmp	r3, #7
 8004e08:	d01a      	beq.n	8004e40 <UART_SetConfig+0x368>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d014      	beq.n	8004e3c <UART_SetConfig+0x364>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b09      	cmp	r3, #9
 8004e18:	d00e      	beq.n	8004e38 <UART_SetConfig+0x360>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b0a      	cmp	r3, #10
 8004e20:	d008      	beq.n	8004e34 <UART_SetConfig+0x35c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	2b0b      	cmp	r3, #11
 8004e28:	d102      	bne.n	8004e30 <UART_SetConfig+0x358>
 8004e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e2e:	e016      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e014      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	e012      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e38:	2340      	movs	r3, #64	; 0x40
 8004e3a:	e010      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e3c:	2320      	movs	r3, #32
 8004e3e:	e00e      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e40:	2310      	movs	r3, #16
 8004e42:	e00c      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e44:	230c      	movs	r3, #12
 8004e46:	e00a      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e48:	230a      	movs	r3, #10
 8004e4a:	e008      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	e006      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e50:	2306      	movs	r3, #6
 8004e52:	e004      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e54:	2304      	movs	r3, #4
 8004e56:	e002      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e000      	b.n	8004e5e <UART_SetConfig+0x386>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	617b      	str	r3, [r7, #20]
        break;
 8004e64:	e0f6      	b.n	8005054 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d044      	beq.n	8004ef8 <UART_SetConfig+0x420>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d03e      	beq.n	8004ef4 <UART_SetConfig+0x41c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d038      	beq.n	8004ef0 <UART_SetConfig+0x418>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d032      	beq.n	8004eec <UART_SetConfig+0x414>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d02c      	beq.n	8004ee8 <UART_SetConfig+0x410>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d026      	beq.n	8004ee4 <UART_SetConfig+0x40c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d020      	beq.n	8004ee0 <UART_SetConfig+0x408>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2b07      	cmp	r3, #7
 8004ea4:	d01a      	beq.n	8004edc <UART_SetConfig+0x404>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d014      	beq.n	8004ed8 <UART_SetConfig+0x400>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	2b09      	cmp	r3, #9
 8004eb4:	d00e      	beq.n	8004ed4 <UART_SetConfig+0x3fc>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	2b0a      	cmp	r3, #10
 8004ebc:	d008      	beq.n	8004ed0 <UART_SetConfig+0x3f8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b0b      	cmp	r3, #11
 8004ec4:	d102      	bne.n	8004ecc <UART_SetConfig+0x3f4>
 8004ec6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004eca:	e016      	b.n	8004efa <UART_SetConfig+0x422>
 8004ecc:	4ba1      	ldr	r3, [pc, #644]	; (8005154 <UART_SetConfig+0x67c>)
 8004ece:	e014      	b.n	8004efa <UART_SetConfig+0x422>
 8004ed0:	4ba1      	ldr	r3, [pc, #644]	; (8005158 <UART_SetConfig+0x680>)
 8004ed2:	e012      	b.n	8004efa <UART_SetConfig+0x422>
 8004ed4:	4ba1      	ldr	r3, [pc, #644]	; (800515c <UART_SetConfig+0x684>)
 8004ed6:	e010      	b.n	8004efa <UART_SetConfig+0x422>
 8004ed8:	4ba1      	ldr	r3, [pc, #644]	; (8005160 <UART_SetConfig+0x688>)
 8004eda:	e00e      	b.n	8004efa <UART_SetConfig+0x422>
 8004edc:	4ba1      	ldr	r3, [pc, #644]	; (8005164 <UART_SetConfig+0x68c>)
 8004ede:	e00c      	b.n	8004efa <UART_SetConfig+0x422>
 8004ee0:	4ba1      	ldr	r3, [pc, #644]	; (8005168 <UART_SetConfig+0x690>)
 8004ee2:	e00a      	b.n	8004efa <UART_SetConfig+0x422>
 8004ee4:	4ba1      	ldr	r3, [pc, #644]	; (800516c <UART_SetConfig+0x694>)
 8004ee6:	e008      	b.n	8004efa <UART_SetConfig+0x422>
 8004ee8:	4ba1      	ldr	r3, [pc, #644]	; (8005170 <UART_SetConfig+0x698>)
 8004eea:	e006      	b.n	8004efa <UART_SetConfig+0x422>
 8004eec:	4ba1      	ldr	r3, [pc, #644]	; (8005174 <UART_SetConfig+0x69c>)
 8004eee:	e004      	b.n	8004efa <UART_SetConfig+0x422>
 8004ef0:	4ba1      	ldr	r3, [pc, #644]	; (8005178 <UART_SetConfig+0x6a0>)
 8004ef2:	e002      	b.n	8004efa <UART_SetConfig+0x422>
 8004ef4:	4ba1      	ldr	r3, [pc, #644]	; (800517c <UART_SetConfig+0x6a4>)
 8004ef6:	e000      	b.n	8004efa <UART_SetConfig+0x422>
 8004ef8:	4b96      	ldr	r3, [pc, #600]	; (8005154 <UART_SetConfig+0x67c>)
 8004efa:	617b      	str	r3, [r7, #20]
        break;
 8004efc:	e0aa      	b.n	8005054 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004efe:	f7fd fa09 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8004f02:	4602      	mov	r2, r0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d044      	beq.n	8004f96 <UART_SetConfig+0x4be>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d03e      	beq.n	8004f92 <UART_SetConfig+0x4ba>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d038      	beq.n	8004f8e <UART_SetConfig+0x4b6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d032      	beq.n	8004f8a <UART_SetConfig+0x4b2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d02c      	beq.n	8004f86 <UART_SetConfig+0x4ae>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	d026      	beq.n	8004f82 <UART_SetConfig+0x4aa>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d020      	beq.n	8004f7e <UART_SetConfig+0x4a6>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2b07      	cmp	r3, #7
 8004f42:	d01a      	beq.n	8004f7a <UART_SetConfig+0x4a2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d014      	beq.n	8004f76 <UART_SetConfig+0x49e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	d00e      	beq.n	8004f72 <UART_SetConfig+0x49a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b0a      	cmp	r3, #10
 8004f5a:	d008      	beq.n	8004f6e <UART_SetConfig+0x496>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2b0b      	cmp	r3, #11
 8004f62:	d102      	bne.n	8004f6a <UART_SetConfig+0x492>
 8004f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f68:	e016      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e014      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	e012      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f72:	2340      	movs	r3, #64	; 0x40
 8004f74:	e010      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f76:	2320      	movs	r3, #32
 8004f78:	e00e      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f7a:	2310      	movs	r3, #16
 8004f7c:	e00c      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f7e:	230c      	movs	r3, #12
 8004f80:	e00a      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f82:	230a      	movs	r3, #10
 8004f84:	e008      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f86:	2308      	movs	r3, #8
 8004f88:	e006      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f8a:	2306      	movs	r3, #6
 8004f8c:	e004      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f8e:	2304      	movs	r3, #4
 8004f90:	e002      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e000      	b.n	8004f98 <UART_SetConfig+0x4c0>
 8004f96:	2301      	movs	r3, #1
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]
        break;
 8004f9e:	e059      	b.n	8005054 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d04e      	beq.n	8005046 <UART_SetConfig+0x56e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d047      	beq.n	8005040 <UART_SetConfig+0x568>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d040      	beq.n	800503a <UART_SetConfig+0x562>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d039      	beq.n	8005034 <UART_SetConfig+0x55c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d032      	beq.n	800502e <UART_SetConfig+0x556>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2b05      	cmp	r3, #5
 8004fce:	d02b      	beq.n	8005028 <UART_SetConfig+0x550>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b06      	cmp	r3, #6
 8004fd6:	d024      	beq.n	8005022 <UART_SetConfig+0x54a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2b07      	cmp	r3, #7
 8004fde:	d01d      	beq.n	800501c <UART_SetConfig+0x544>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d016      	beq.n	8005016 <UART_SetConfig+0x53e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	2b09      	cmp	r3, #9
 8004fee:	d00f      	beq.n	8005010 <UART_SetConfig+0x538>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	2b0a      	cmp	r3, #10
 8004ff6:	d008      	beq.n	800500a <UART_SetConfig+0x532>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	2b0b      	cmp	r3, #11
 8004ffe:	d101      	bne.n	8005004 <UART_SetConfig+0x52c>
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	e022      	b.n	800504a <UART_SetConfig+0x572>
 8005004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005008:	e01f      	b.n	800504a <UART_SetConfig+0x572>
 800500a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800500e:	e01c      	b.n	800504a <UART_SetConfig+0x572>
 8005010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005014:	e019      	b.n	800504a <UART_SetConfig+0x572>
 8005016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501a:	e016      	b.n	800504a <UART_SetConfig+0x572>
 800501c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005020:	e013      	b.n	800504a <UART_SetConfig+0x572>
 8005022:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005026:	e010      	b.n	800504a <UART_SetConfig+0x572>
 8005028:	f640 43cc 	movw	r3, #3276	; 0xccc
 800502c:	e00d      	b.n	800504a <UART_SetConfig+0x572>
 800502e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005032:	e00a      	b.n	800504a <UART_SetConfig+0x572>
 8005034:	f241 5355 	movw	r3, #5461	; 0x1555
 8005038:	e007      	b.n	800504a <UART_SetConfig+0x572>
 800503a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800503e:	e004      	b.n	800504a <UART_SetConfig+0x572>
 8005040:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005044:	e001      	b.n	800504a <UART_SetConfig+0x572>
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	617b      	str	r3, [r7, #20]
        break;
 800504c:	e002      	b.n	8005054 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	76fb      	strb	r3, [r7, #27]
        break;
 8005052:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 86cd 	beq.w	8005df6 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4413      	add	r3, r2
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	429a      	cmp	r2, r3
 800506a:	d305      	bcc.n	8005078 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	429a      	cmp	r2, r3
 8005076:	d903      	bls.n	8005080 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	76fb      	strb	r3, [r7, #27]
 800507c:	f000 bebb 	b.w	8005df6 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8005080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005084:	2b08      	cmp	r3, #8
 8005086:	f200 828d 	bhi.w	80055a4 <UART_SetConfig+0xacc>
 800508a:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0x5b8>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080055a5 	.word	0x080055a5
 8005098:	0800521f 	.word	0x0800521f
 800509c:	080055a5 	.word	0x080055a5
 80050a0:	08005315 	.word	0x08005315
 80050a4:	080055a5 	.word	0x080055a5
 80050a8:	080055a5 	.word	0x080055a5
 80050ac:	080055a5 	.word	0x080055a5
 80050b0:	08005453 	.word	0x08005453
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80050b4:	f7fd f99c 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 80050b8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4618      	mov	r0, r3
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d07d      	beq.n	80051c6 <UART_SetConfig+0x6ee>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d074      	beq.n	80051bc <UART_SetConfig+0x6e4>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d06b      	beq.n	80051b2 <UART_SetConfig+0x6da>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d062      	beq.n	80051a8 <UART_SetConfig+0x6d0>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d059      	beq.n	800519e <UART_SetConfig+0x6c6>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d050      	beq.n	8005194 <UART_SetConfig+0x6bc>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d047      	beq.n	800518a <UART_SetConfig+0x6b2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	2b07      	cmp	r3, #7
 8005100:	d03e      	beq.n	8005180 <UART_SetConfig+0x6a8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2b08      	cmp	r3, #8
 8005108:	d01f      	beq.n	800514a <UART_SetConfig+0x672>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	2b09      	cmp	r3, #9
 8005110:	d016      	beq.n	8005140 <UART_SetConfig+0x668>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	2b0a      	cmp	r3, #10
 8005118:	d00d      	beq.n	8005136 <UART_SetConfig+0x65e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b0b      	cmp	r3, #11
 8005120:	d104      	bne.n	800512c <UART_SetConfig+0x654>
 8005122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005126:	f04f 0400 	mov.w	r4, #0
 800512a:	e050      	b.n	80051ce <UART_SetConfig+0x6f6>
 800512c:	f04f 0301 	mov.w	r3, #1
 8005130:	f04f 0400 	mov.w	r4, #0
 8005134:	e04b      	b.n	80051ce <UART_SetConfig+0x6f6>
 8005136:	f04f 0380 	mov.w	r3, #128	; 0x80
 800513a:	f04f 0400 	mov.w	r4, #0
 800513e:	e046      	b.n	80051ce <UART_SetConfig+0x6f6>
 8005140:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	e041      	b.n	80051ce <UART_SetConfig+0x6f6>
 800514a:	f04f 0320 	mov.w	r3, #32
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	e03c      	b.n	80051ce <UART_SetConfig+0x6f6>
 8005154:	00f42400 	.word	0x00f42400
 8005158:	0001e848 	.word	0x0001e848
 800515c:	0003d090 	.word	0x0003d090
 8005160:	0007a120 	.word	0x0007a120
 8005164:	000f4240 	.word	0x000f4240
 8005168:	00145855 	.word	0x00145855
 800516c:	00186a00 	.word	0x00186a00
 8005170:	001e8480 	.word	0x001e8480
 8005174:	0028b0aa 	.word	0x0028b0aa
 8005178:	003d0900 	.word	0x003d0900
 800517c:	007a1200 	.word	0x007a1200
 8005180:	f04f 0310 	mov.w	r3, #16
 8005184:	f04f 0400 	mov.w	r4, #0
 8005188:	e021      	b.n	80051ce <UART_SetConfig+0x6f6>
 800518a:	f04f 030c 	mov.w	r3, #12
 800518e:	f04f 0400 	mov.w	r4, #0
 8005192:	e01c      	b.n	80051ce <UART_SetConfig+0x6f6>
 8005194:	f04f 030a 	mov.w	r3, #10
 8005198:	f04f 0400 	mov.w	r4, #0
 800519c:	e017      	b.n	80051ce <UART_SetConfig+0x6f6>
 800519e:	f04f 0308 	mov.w	r3, #8
 80051a2:	f04f 0400 	mov.w	r4, #0
 80051a6:	e012      	b.n	80051ce <UART_SetConfig+0x6f6>
 80051a8:	f04f 0306 	mov.w	r3, #6
 80051ac:	f04f 0400 	mov.w	r4, #0
 80051b0:	e00d      	b.n	80051ce <UART_SetConfig+0x6f6>
 80051b2:	f04f 0304 	mov.w	r3, #4
 80051b6:	f04f 0400 	mov.w	r4, #0
 80051ba:	e008      	b.n	80051ce <UART_SetConfig+0x6f6>
 80051bc:	f04f 0302 	mov.w	r3, #2
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	e003      	b.n	80051ce <UART_SetConfig+0x6f6>
 80051c6:	f04f 0301 	mov.w	r3, #1
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	461a      	mov	r2, r3
 80051d0:	4623      	mov	r3, r4
 80051d2:	f7fb f821 	bl	8000218 <__aeabi_uldivmod>
 80051d6:	4603      	mov	r3, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	4619      	mov	r1, r3
 80051dc:	4622      	mov	r2, r4
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	f04f 0400 	mov.w	r4, #0
 80051e6:	0214      	lsls	r4, r2, #8
 80051e8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80051ec:	020b      	lsls	r3, r1, #8
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6852      	ldr	r2, [r2, #4]
 80051f2:	0852      	lsrs	r2, r2, #1
 80051f4:	4611      	mov	r1, r2
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	eb13 0b01 	adds.w	fp, r3, r1
 80051fe:	eb44 0c02 	adc.w	ip, r4, r2
 8005202:	4658      	mov	r0, fp
 8005204:	4661      	mov	r1, ip
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f04f 0400 	mov.w	r4, #0
 800520e:	461a      	mov	r2, r3
 8005210:	4623      	mov	r3, r4
 8005212:	f7fb f801 	bl	8000218 <__aeabi_uldivmod>
 8005216:	4603      	mov	r3, r0
 8005218:	460c      	mov	r4, r1
 800521a:	61fb      	str	r3, [r7, #28]
            break;
 800521c:	e1c5      	b.n	80055aa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d05b      	beq.n	80052de <UART_SetConfig+0x806>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b01      	cmp	r3, #1
 800522c:	d053      	beq.n	80052d6 <UART_SetConfig+0x7fe>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	2b02      	cmp	r3, #2
 8005234:	d04b      	beq.n	80052ce <UART_SetConfig+0x7f6>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b03      	cmp	r3, #3
 800523c:	d043      	beq.n	80052c6 <UART_SetConfig+0x7ee>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b04      	cmp	r3, #4
 8005244:	d03b      	beq.n	80052be <UART_SetConfig+0x7e6>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b05      	cmp	r3, #5
 800524c:	d033      	beq.n	80052b6 <UART_SetConfig+0x7de>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b06      	cmp	r3, #6
 8005254:	d02b      	beq.n	80052ae <UART_SetConfig+0x7d6>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b07      	cmp	r3, #7
 800525c:	d023      	beq.n	80052a6 <UART_SetConfig+0x7ce>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b08      	cmp	r3, #8
 8005264:	d01b      	beq.n	800529e <UART_SetConfig+0x7c6>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b09      	cmp	r3, #9
 800526c:	d013      	beq.n	8005296 <UART_SetConfig+0x7be>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b0a      	cmp	r3, #10
 8005274:	d00b      	beq.n	800528e <UART_SetConfig+0x7b6>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b0b      	cmp	r3, #11
 800527c:	d103      	bne.n	8005286 <UART_SetConfig+0x7ae>
 800527e:	4bae      	ldr	r3, [pc, #696]	; (8005538 <UART_SetConfig+0xa60>)
 8005280:	f04f 0400 	mov.w	r4, #0
 8005284:	e02e      	b.n	80052e4 <UART_SetConfig+0x80c>
 8005286:	4bad      	ldr	r3, [pc, #692]	; (800553c <UART_SetConfig+0xa64>)
 8005288:	f04f 0400 	mov.w	r4, #0
 800528c:	e02a      	b.n	80052e4 <UART_SetConfig+0x80c>
 800528e:	4bac      	ldr	r3, [pc, #688]	; (8005540 <UART_SetConfig+0xa68>)
 8005290:	f04f 0400 	mov.w	r4, #0
 8005294:	e026      	b.n	80052e4 <UART_SetConfig+0x80c>
 8005296:	4bab      	ldr	r3, [pc, #684]	; (8005544 <UART_SetConfig+0xa6c>)
 8005298:	f04f 0400 	mov.w	r4, #0
 800529c:	e022      	b.n	80052e4 <UART_SetConfig+0x80c>
 800529e:	4baa      	ldr	r3, [pc, #680]	; (8005548 <UART_SetConfig+0xa70>)
 80052a0:	f04f 0400 	mov.w	r4, #0
 80052a4:	e01e      	b.n	80052e4 <UART_SetConfig+0x80c>
 80052a6:	4ba9      	ldr	r3, [pc, #676]	; (800554c <UART_SetConfig+0xa74>)
 80052a8:	f04f 0400 	mov.w	r4, #0
 80052ac:	e01a      	b.n	80052e4 <UART_SetConfig+0x80c>
 80052ae:	a49e      	add	r4, pc, #632	; (adr r4, 8005528 <UART_SetConfig+0xa50>)
 80052b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052b4:	e016      	b.n	80052e4 <UART_SetConfig+0x80c>
 80052b6:	4ba6      	ldr	r3, [pc, #664]	; (8005550 <UART_SetConfig+0xa78>)
 80052b8:	f04f 0400 	mov.w	r4, #0
 80052bc:	e012      	b.n	80052e4 <UART_SetConfig+0x80c>
 80052be:	4ba5      	ldr	r3, [pc, #660]	; (8005554 <UART_SetConfig+0xa7c>)
 80052c0:	f04f 0400 	mov.w	r4, #0
 80052c4:	e00e      	b.n	80052e4 <UART_SetConfig+0x80c>
 80052c6:	a49a      	add	r4, pc, #616	; (adr r4, 8005530 <UART_SetConfig+0xa58>)
 80052c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052cc:	e00a      	b.n	80052e4 <UART_SetConfig+0x80c>
 80052ce:	4ba2      	ldr	r3, [pc, #648]	; (8005558 <UART_SetConfig+0xa80>)
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	e006      	b.n	80052e4 <UART_SetConfig+0x80c>
 80052d6:	4ba1      	ldr	r3, [pc, #644]	; (800555c <UART_SetConfig+0xa84>)
 80052d8:	f04f 0400 	mov.w	r4, #0
 80052dc:	e002      	b.n	80052e4 <UART_SetConfig+0x80c>
 80052de:	4b97      	ldr	r3, [pc, #604]	; (800553c <UART_SetConfig+0xa64>)
 80052e0:	f04f 0400 	mov.w	r4, #0
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6852      	ldr	r2, [r2, #4]
 80052e8:	0852      	lsrs	r2, r2, #1
 80052ea:	4611      	mov	r1, r2
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	eb13 0b01 	adds.w	fp, r3, r1
 80052f4:	eb44 0c02 	adc.w	ip, r4, r2
 80052f8:	4658      	mov	r0, fp
 80052fa:	4661      	mov	r1, ip
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f04f 0400 	mov.w	r4, #0
 8005304:	461a      	mov	r2, r3
 8005306:	4623      	mov	r3, r4
 8005308:	f7fa ff86 	bl	8000218 <__aeabi_uldivmod>
 800530c:	4603      	mov	r3, r0
 800530e:	460c      	mov	r4, r1
 8005310:	61fb      	str	r3, [r7, #28]
            break;
 8005312:	e14a      	b.n	80055aa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005314:	f7fc fffe 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8005318:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4618      	mov	r0, r3
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d067      	beq.n	80053fa <UART_SetConfig+0x922>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	2b01      	cmp	r3, #1
 8005330:	d05e      	beq.n	80053f0 <UART_SetConfig+0x918>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b02      	cmp	r3, #2
 8005338:	d055      	beq.n	80053e6 <UART_SetConfig+0x90e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2b03      	cmp	r3, #3
 8005340:	d04c      	beq.n	80053dc <UART_SetConfig+0x904>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b04      	cmp	r3, #4
 8005348:	d043      	beq.n	80053d2 <UART_SetConfig+0x8fa>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	2b05      	cmp	r3, #5
 8005350:	d03a      	beq.n	80053c8 <UART_SetConfig+0x8f0>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b06      	cmp	r3, #6
 8005358:	d031      	beq.n	80053be <UART_SetConfig+0x8e6>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b07      	cmp	r3, #7
 8005360:	d028      	beq.n	80053b4 <UART_SetConfig+0x8dc>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b08      	cmp	r3, #8
 8005368:	d01f      	beq.n	80053aa <UART_SetConfig+0x8d2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b09      	cmp	r3, #9
 8005370:	d016      	beq.n	80053a0 <UART_SetConfig+0x8c8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b0a      	cmp	r3, #10
 8005378:	d00d      	beq.n	8005396 <UART_SetConfig+0x8be>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b0b      	cmp	r3, #11
 8005380:	d104      	bne.n	800538c <UART_SetConfig+0x8b4>
 8005382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005386:	f04f 0400 	mov.w	r4, #0
 800538a:	e03a      	b.n	8005402 <UART_SetConfig+0x92a>
 800538c:	f04f 0301 	mov.w	r3, #1
 8005390:	f04f 0400 	mov.w	r4, #0
 8005394:	e035      	b.n	8005402 <UART_SetConfig+0x92a>
 8005396:	f04f 0380 	mov.w	r3, #128	; 0x80
 800539a:	f04f 0400 	mov.w	r4, #0
 800539e:	e030      	b.n	8005402 <UART_SetConfig+0x92a>
 80053a0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80053a4:	f04f 0400 	mov.w	r4, #0
 80053a8:	e02b      	b.n	8005402 <UART_SetConfig+0x92a>
 80053aa:	f04f 0320 	mov.w	r3, #32
 80053ae:	f04f 0400 	mov.w	r4, #0
 80053b2:	e026      	b.n	8005402 <UART_SetConfig+0x92a>
 80053b4:	f04f 0310 	mov.w	r3, #16
 80053b8:	f04f 0400 	mov.w	r4, #0
 80053bc:	e021      	b.n	8005402 <UART_SetConfig+0x92a>
 80053be:	f04f 030c 	mov.w	r3, #12
 80053c2:	f04f 0400 	mov.w	r4, #0
 80053c6:	e01c      	b.n	8005402 <UART_SetConfig+0x92a>
 80053c8:	f04f 030a 	mov.w	r3, #10
 80053cc:	f04f 0400 	mov.w	r4, #0
 80053d0:	e017      	b.n	8005402 <UART_SetConfig+0x92a>
 80053d2:	f04f 0308 	mov.w	r3, #8
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	e012      	b.n	8005402 <UART_SetConfig+0x92a>
 80053dc:	f04f 0306 	mov.w	r3, #6
 80053e0:	f04f 0400 	mov.w	r4, #0
 80053e4:	e00d      	b.n	8005402 <UART_SetConfig+0x92a>
 80053e6:	f04f 0304 	mov.w	r3, #4
 80053ea:	f04f 0400 	mov.w	r4, #0
 80053ee:	e008      	b.n	8005402 <UART_SetConfig+0x92a>
 80053f0:	f04f 0302 	mov.w	r3, #2
 80053f4:	f04f 0400 	mov.w	r4, #0
 80053f8:	e003      	b.n	8005402 <UART_SetConfig+0x92a>
 80053fa:	f04f 0301 	mov.w	r3, #1
 80053fe:	f04f 0400 	mov.w	r4, #0
 8005402:	461a      	mov	r2, r3
 8005404:	4623      	mov	r3, r4
 8005406:	f7fa ff07 	bl	8000218 <__aeabi_uldivmod>
 800540a:	4603      	mov	r3, r0
 800540c:	460c      	mov	r4, r1
 800540e:	4619      	mov	r1, r3
 8005410:	4622      	mov	r2, r4
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	f04f 0400 	mov.w	r4, #0
 800541a:	0214      	lsls	r4, r2, #8
 800541c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005420:	020b      	lsls	r3, r1, #8
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6852      	ldr	r2, [r2, #4]
 8005426:	0852      	lsrs	r2, r2, #1
 8005428:	4611      	mov	r1, r2
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	eb13 0b01 	adds.w	fp, r3, r1
 8005432:	eb44 0c02 	adc.w	ip, r4, r2
 8005436:	4658      	mov	r0, fp
 8005438:	4661      	mov	r1, ip
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f04f 0400 	mov.w	r4, #0
 8005442:	461a      	mov	r2, r3
 8005444:	4623      	mov	r3, r4
 8005446:	f7fa fee7 	bl	8000218 <__aeabi_uldivmod>
 800544a:	4603      	mov	r3, r0
 800544c:	460c      	mov	r4, r1
 800544e:	61fb      	str	r3, [r7, #28]
            break;
 8005450:	e0ab      	b.n	80055aa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8088 	beq.w	800556c <UART_SetConfig+0xa94>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	2b01      	cmp	r3, #1
 8005462:	d05b      	beq.n	800551c <UART_SetConfig+0xa44>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	2b02      	cmp	r3, #2
 800546a:	d052      	beq.n	8005512 <UART_SetConfig+0xa3a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b03      	cmp	r3, #3
 8005472:	d04a      	beq.n	800550a <UART_SetConfig+0xa32>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	2b04      	cmp	r3, #4
 800547a:	d041      	beq.n	8005500 <UART_SetConfig+0xa28>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b05      	cmp	r3, #5
 8005482:	d039      	beq.n	80054f8 <UART_SetConfig+0xa20>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b06      	cmp	r3, #6
 800548a:	d031      	beq.n	80054f0 <UART_SetConfig+0xa18>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b07      	cmp	r3, #7
 8005492:	d028      	beq.n	80054e6 <UART_SetConfig+0xa0e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b08      	cmp	r3, #8
 800549a:	d01f      	beq.n	80054dc <UART_SetConfig+0xa04>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b09      	cmp	r3, #9
 80054a2:	d016      	beq.n	80054d2 <UART_SetConfig+0x9fa>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b0a      	cmp	r3, #10
 80054aa:	d00d      	beq.n	80054c8 <UART_SetConfig+0x9f0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b0b      	cmp	r3, #11
 80054b2:	d104      	bne.n	80054be <UART_SetConfig+0x9e6>
 80054b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054b8:	f04f 0400 	mov.w	r4, #0
 80054bc:	e05a      	b.n	8005574 <UART_SetConfig+0xa9c>
 80054be:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054c2:	f04f 0400 	mov.w	r4, #0
 80054c6:	e055      	b.n	8005574 <UART_SetConfig+0xa9c>
 80054c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054cc:	f04f 0400 	mov.w	r4, #0
 80054d0:	e050      	b.n	8005574 <UART_SetConfig+0xa9c>
 80054d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054d6:	f04f 0400 	mov.w	r4, #0
 80054da:	e04b      	b.n	8005574 <UART_SetConfig+0xa9c>
 80054dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	e046      	b.n	8005574 <UART_SetConfig+0xa9c>
 80054e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80054ea:	f04f 0400 	mov.w	r4, #0
 80054ee:	e041      	b.n	8005574 <UART_SetConfig+0xa9c>
 80054f0:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <UART_SetConfig+0xa88>)
 80054f2:	f04f 0400 	mov.w	r4, #0
 80054f6:	e03d      	b.n	8005574 <UART_SetConfig+0xa9c>
 80054f8:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <UART_SetConfig+0xa8c>)
 80054fa:	f04f 0400 	mov.w	r4, #0
 80054fe:	e039      	b.n	8005574 <UART_SetConfig+0xa9c>
 8005500:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005504:	f04f 0400 	mov.w	r4, #0
 8005508:	e034      	b.n	8005574 <UART_SetConfig+0xa9c>
 800550a:	4b17      	ldr	r3, [pc, #92]	; (8005568 <UART_SetConfig+0xa90>)
 800550c:	f04f 0400 	mov.w	r4, #0
 8005510:	e030      	b.n	8005574 <UART_SetConfig+0xa9c>
 8005512:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	e02b      	b.n	8005574 <UART_SetConfig+0xa9c>
 800551c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e026      	b.n	8005574 <UART_SetConfig+0xa9c>
 8005526:	bf00      	nop
 8005528:	14585500 	.word	0x14585500
 800552c:	00000000 	.word	0x00000000
 8005530:	28b0aa00 	.word	0x28b0aa00
 8005534:	00000000 	.word	0x00000000
 8005538:	00f42400 	.word	0x00f42400
 800553c:	f4240000 	.word	0xf4240000
 8005540:	01e84800 	.word	0x01e84800
 8005544:	03d09000 	.word	0x03d09000
 8005548:	07a12000 	.word	0x07a12000
 800554c:	0f424000 	.word	0x0f424000
 8005550:	186a0000 	.word	0x186a0000
 8005554:	1e848000 	.word	0x1e848000
 8005558:	3d090000 	.word	0x3d090000
 800555c:	7a120000 	.word	0x7a120000
 8005560:	000aaa00 	.word	0x000aaa00
 8005564:	000ccc00 	.word	0x000ccc00
 8005568:	00155500 	.word	0x00155500
 800556c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005570:	f04f 0400 	mov.w	r4, #0
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6852      	ldr	r2, [r2, #4]
 8005578:	0852      	lsrs	r2, r2, #1
 800557a:	4611      	mov	r1, r2
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	eb13 0b01 	adds.w	fp, r3, r1
 8005584:	eb44 0c02 	adc.w	ip, r4, r2
 8005588:	4658      	mov	r0, fp
 800558a:	4661      	mov	r1, ip
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f04f 0400 	mov.w	r4, #0
 8005594:	461a      	mov	r2, r3
 8005596:	4623      	mov	r3, r4
 8005598:	f7fa fe3e 	bl	8000218 <__aeabi_uldivmod>
 800559c:	4603      	mov	r3, r0
 800559e:	460c      	mov	r4, r1
 80055a0:	61fb      	str	r3, [r7, #28]
            break;
 80055a2:	e002      	b.n	80055aa <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	76fb      	strb	r3, [r7, #27]
            break;
 80055a8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b0:	d309      	bcc.n	80055c6 <UART_SetConfig+0xaee>
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b8:	d205      	bcs.n	80055c6 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	f000 bc18 	b.w	8005df6 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	76fb      	strb	r3, [r7, #27]
 80055ca:	f000 bc14 	b.w	8005df6 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d6:	f040 8204 	bne.w	80059e2 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 80055da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055de:	2b08      	cmp	r3, #8
 80055e0:	f200 81df 	bhi.w	80059a2 <UART_SetConfig+0xeca>
 80055e4:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0xb14>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005611 	.word	0x08005611
 80055f0:	080056c9 	.word	0x080056c9
 80055f4:	08005781 	.word	0x08005781
 80055f8:	080059a3 	.word	0x080059a3
 80055fc:	08005829 	.word	0x08005829
 8005600:	080059a3 	.word	0x080059a3
 8005604:	080059a3 	.word	0x080059a3
 8005608:	080059a3 	.word	0x080059a3
 800560c:	080058e1 	.word	0x080058e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7fc feee 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8005614:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d044      	beq.n	80056a8 <UART_SetConfig+0xbd0>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b01      	cmp	r3, #1
 8005624:	d03e      	beq.n	80056a4 <UART_SetConfig+0xbcc>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2b02      	cmp	r3, #2
 800562c:	d038      	beq.n	80056a0 <UART_SetConfig+0xbc8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	2b03      	cmp	r3, #3
 8005634:	d032      	beq.n	800569c <UART_SetConfig+0xbc4>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b04      	cmp	r3, #4
 800563c:	d02c      	beq.n	8005698 <UART_SetConfig+0xbc0>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	2b05      	cmp	r3, #5
 8005644:	d026      	beq.n	8005694 <UART_SetConfig+0xbbc>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b06      	cmp	r3, #6
 800564c:	d020      	beq.n	8005690 <UART_SetConfig+0xbb8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b07      	cmp	r3, #7
 8005654:	d01a      	beq.n	800568c <UART_SetConfig+0xbb4>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	2b08      	cmp	r3, #8
 800565c:	d014      	beq.n	8005688 <UART_SetConfig+0xbb0>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b09      	cmp	r3, #9
 8005664:	d00e      	beq.n	8005684 <UART_SetConfig+0xbac>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	2b0a      	cmp	r3, #10
 800566c:	d008      	beq.n	8005680 <UART_SetConfig+0xba8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b0b      	cmp	r3, #11
 8005674:	d102      	bne.n	800567c <UART_SetConfig+0xba4>
 8005676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800567a:	e016      	b.n	80056aa <UART_SetConfig+0xbd2>
 800567c:	2301      	movs	r3, #1
 800567e:	e014      	b.n	80056aa <UART_SetConfig+0xbd2>
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	e012      	b.n	80056aa <UART_SetConfig+0xbd2>
 8005684:	2340      	movs	r3, #64	; 0x40
 8005686:	e010      	b.n	80056aa <UART_SetConfig+0xbd2>
 8005688:	2320      	movs	r3, #32
 800568a:	e00e      	b.n	80056aa <UART_SetConfig+0xbd2>
 800568c:	2310      	movs	r3, #16
 800568e:	e00c      	b.n	80056aa <UART_SetConfig+0xbd2>
 8005690:	230c      	movs	r3, #12
 8005692:	e00a      	b.n	80056aa <UART_SetConfig+0xbd2>
 8005694:	230a      	movs	r3, #10
 8005696:	e008      	b.n	80056aa <UART_SetConfig+0xbd2>
 8005698:	2308      	movs	r3, #8
 800569a:	e006      	b.n	80056aa <UART_SetConfig+0xbd2>
 800569c:	2306      	movs	r3, #6
 800569e:	e004      	b.n	80056aa <UART_SetConfig+0xbd2>
 80056a0:	2304      	movs	r3, #4
 80056a2:	e002      	b.n	80056aa <UART_SetConfig+0xbd2>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e000      	b.n	80056aa <UART_SetConfig+0xbd2>
 80056a8:	2301      	movs	r3, #1
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	005a      	lsls	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	441a      	add	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	61fb      	str	r3, [r7, #28]
        break;
 80056c6:	e16f      	b.n	80059a8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c8:	f7fc fea8 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 80056cc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d044      	beq.n	8005760 <UART_SetConfig+0xc88>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d03e      	beq.n	800575c <UART_SetConfig+0xc84>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d038      	beq.n	8005758 <UART_SetConfig+0xc80>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d032      	beq.n	8005754 <UART_SetConfig+0xc7c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d02c      	beq.n	8005750 <UART_SetConfig+0xc78>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d026      	beq.n	800574c <UART_SetConfig+0xc74>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	2b06      	cmp	r3, #6
 8005704:	d020      	beq.n	8005748 <UART_SetConfig+0xc70>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b07      	cmp	r3, #7
 800570c:	d01a      	beq.n	8005744 <UART_SetConfig+0xc6c>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b08      	cmp	r3, #8
 8005714:	d014      	beq.n	8005740 <UART_SetConfig+0xc68>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b09      	cmp	r3, #9
 800571c:	d00e      	beq.n	800573c <UART_SetConfig+0xc64>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b0a      	cmp	r3, #10
 8005724:	d008      	beq.n	8005738 <UART_SetConfig+0xc60>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2b0b      	cmp	r3, #11
 800572c:	d102      	bne.n	8005734 <UART_SetConfig+0xc5c>
 800572e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005732:	e016      	b.n	8005762 <UART_SetConfig+0xc8a>
 8005734:	2301      	movs	r3, #1
 8005736:	e014      	b.n	8005762 <UART_SetConfig+0xc8a>
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	e012      	b.n	8005762 <UART_SetConfig+0xc8a>
 800573c:	2340      	movs	r3, #64	; 0x40
 800573e:	e010      	b.n	8005762 <UART_SetConfig+0xc8a>
 8005740:	2320      	movs	r3, #32
 8005742:	e00e      	b.n	8005762 <UART_SetConfig+0xc8a>
 8005744:	2310      	movs	r3, #16
 8005746:	e00c      	b.n	8005762 <UART_SetConfig+0xc8a>
 8005748:	230c      	movs	r3, #12
 800574a:	e00a      	b.n	8005762 <UART_SetConfig+0xc8a>
 800574c:	230a      	movs	r3, #10
 800574e:	e008      	b.n	8005762 <UART_SetConfig+0xc8a>
 8005750:	2308      	movs	r3, #8
 8005752:	e006      	b.n	8005762 <UART_SetConfig+0xc8a>
 8005754:	2306      	movs	r3, #6
 8005756:	e004      	b.n	8005762 <UART_SetConfig+0xc8a>
 8005758:	2304      	movs	r3, #4
 800575a:	e002      	b.n	8005762 <UART_SetConfig+0xc8a>
 800575c:	2302      	movs	r3, #2
 800575e:	e000      	b.n	8005762 <UART_SetConfig+0xc8a>
 8005760:	2301      	movs	r3, #1
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	005a      	lsls	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	441a      	add	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	b29b      	uxth	r3, r3
 800577c:	61fb      	str	r3, [r7, #28]
        break;
 800577e:	e113      	b.n	80059a8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	2b00      	cmp	r3, #0
 8005786:	d043      	beq.n	8005810 <UART_SetConfig+0xd38>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2b01      	cmp	r3, #1
 800578e:	d03d      	beq.n	800580c <UART_SetConfig+0xd34>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	2b02      	cmp	r3, #2
 8005796:	d037      	beq.n	8005808 <UART_SetConfig+0xd30>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	2b03      	cmp	r3, #3
 800579e:	d031      	beq.n	8005804 <UART_SetConfig+0xd2c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d02b      	beq.n	8005800 <UART_SetConfig+0xd28>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b05      	cmp	r3, #5
 80057ae:	d025      	beq.n	80057fc <UART_SetConfig+0xd24>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2b06      	cmp	r3, #6
 80057b6:	d01f      	beq.n	80057f8 <UART_SetConfig+0xd20>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	2b07      	cmp	r3, #7
 80057be:	d019      	beq.n	80057f4 <UART_SetConfig+0xd1c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d013      	beq.n	80057f0 <UART_SetConfig+0xd18>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	2b09      	cmp	r3, #9
 80057ce:	d00d      	beq.n	80057ec <UART_SetConfig+0xd14>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b0a      	cmp	r3, #10
 80057d6:	d007      	beq.n	80057e8 <UART_SetConfig+0xd10>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	2b0b      	cmp	r3, #11
 80057de:	d101      	bne.n	80057e4 <UART_SetConfig+0xd0c>
 80057e0:	4b8d      	ldr	r3, [pc, #564]	; (8005a18 <UART_SetConfig+0xf40>)
 80057e2:	e016      	b.n	8005812 <UART_SetConfig+0xd3a>
 80057e4:	4b8d      	ldr	r3, [pc, #564]	; (8005a1c <UART_SetConfig+0xf44>)
 80057e6:	e014      	b.n	8005812 <UART_SetConfig+0xd3a>
 80057e8:	4b8d      	ldr	r3, [pc, #564]	; (8005a20 <UART_SetConfig+0xf48>)
 80057ea:	e012      	b.n	8005812 <UART_SetConfig+0xd3a>
 80057ec:	4b8d      	ldr	r3, [pc, #564]	; (8005a24 <UART_SetConfig+0xf4c>)
 80057ee:	e010      	b.n	8005812 <UART_SetConfig+0xd3a>
 80057f0:	4b8d      	ldr	r3, [pc, #564]	; (8005a28 <UART_SetConfig+0xf50>)
 80057f2:	e00e      	b.n	8005812 <UART_SetConfig+0xd3a>
 80057f4:	4b8d      	ldr	r3, [pc, #564]	; (8005a2c <UART_SetConfig+0xf54>)
 80057f6:	e00c      	b.n	8005812 <UART_SetConfig+0xd3a>
 80057f8:	4b8d      	ldr	r3, [pc, #564]	; (8005a30 <UART_SetConfig+0xf58>)
 80057fa:	e00a      	b.n	8005812 <UART_SetConfig+0xd3a>
 80057fc:	4b8d      	ldr	r3, [pc, #564]	; (8005a34 <UART_SetConfig+0xf5c>)
 80057fe:	e008      	b.n	8005812 <UART_SetConfig+0xd3a>
 8005800:	4b8d      	ldr	r3, [pc, #564]	; (8005a38 <UART_SetConfig+0xf60>)
 8005802:	e006      	b.n	8005812 <UART_SetConfig+0xd3a>
 8005804:	4b8d      	ldr	r3, [pc, #564]	; (8005a3c <UART_SetConfig+0xf64>)
 8005806:	e004      	b.n	8005812 <UART_SetConfig+0xd3a>
 8005808:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <UART_SetConfig+0xf68>)
 800580a:	e002      	b.n	8005812 <UART_SetConfig+0xd3a>
 800580c:	4b8d      	ldr	r3, [pc, #564]	; (8005a44 <UART_SetConfig+0xf6c>)
 800580e:	e000      	b.n	8005812 <UART_SetConfig+0xd3a>
 8005810:	4b82      	ldr	r3, [pc, #520]	; (8005a1c <UART_SetConfig+0xf44>)
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6852      	ldr	r2, [r2, #4]
 8005816:	0852      	lsrs	r2, r2, #1
 8005818:	441a      	add	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005822:	b29b      	uxth	r3, r3
 8005824:	61fb      	str	r3, [r7, #28]
        break;
 8005826:	e0bf      	b.n	80059a8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005828:	f7fc fd74 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 800582c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b00      	cmp	r3, #0
 8005834:	d044      	beq.n	80058c0 <UART_SetConfig+0xde8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b01      	cmp	r3, #1
 800583c:	d03e      	beq.n	80058bc <UART_SetConfig+0xde4>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b02      	cmp	r3, #2
 8005844:	d038      	beq.n	80058b8 <UART_SetConfig+0xde0>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b03      	cmp	r3, #3
 800584c:	d032      	beq.n	80058b4 <UART_SetConfig+0xddc>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b04      	cmp	r3, #4
 8005854:	d02c      	beq.n	80058b0 <UART_SetConfig+0xdd8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b05      	cmp	r3, #5
 800585c:	d026      	beq.n	80058ac <UART_SetConfig+0xdd4>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b06      	cmp	r3, #6
 8005864:	d020      	beq.n	80058a8 <UART_SetConfig+0xdd0>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b07      	cmp	r3, #7
 800586c:	d01a      	beq.n	80058a4 <UART_SetConfig+0xdcc>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b08      	cmp	r3, #8
 8005874:	d014      	beq.n	80058a0 <UART_SetConfig+0xdc8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b09      	cmp	r3, #9
 800587c:	d00e      	beq.n	800589c <UART_SetConfig+0xdc4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b0a      	cmp	r3, #10
 8005884:	d008      	beq.n	8005898 <UART_SetConfig+0xdc0>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b0b      	cmp	r3, #11
 800588c:	d102      	bne.n	8005894 <UART_SetConfig+0xdbc>
 800588e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005892:	e016      	b.n	80058c2 <UART_SetConfig+0xdea>
 8005894:	2301      	movs	r3, #1
 8005896:	e014      	b.n	80058c2 <UART_SetConfig+0xdea>
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	e012      	b.n	80058c2 <UART_SetConfig+0xdea>
 800589c:	2340      	movs	r3, #64	; 0x40
 800589e:	e010      	b.n	80058c2 <UART_SetConfig+0xdea>
 80058a0:	2320      	movs	r3, #32
 80058a2:	e00e      	b.n	80058c2 <UART_SetConfig+0xdea>
 80058a4:	2310      	movs	r3, #16
 80058a6:	e00c      	b.n	80058c2 <UART_SetConfig+0xdea>
 80058a8:	230c      	movs	r3, #12
 80058aa:	e00a      	b.n	80058c2 <UART_SetConfig+0xdea>
 80058ac:	230a      	movs	r3, #10
 80058ae:	e008      	b.n	80058c2 <UART_SetConfig+0xdea>
 80058b0:	2308      	movs	r3, #8
 80058b2:	e006      	b.n	80058c2 <UART_SetConfig+0xdea>
 80058b4:	2306      	movs	r3, #6
 80058b6:	e004      	b.n	80058c2 <UART_SetConfig+0xdea>
 80058b8:	2304      	movs	r3, #4
 80058ba:	e002      	b.n	80058c2 <UART_SetConfig+0xdea>
 80058bc:	2302      	movs	r3, #2
 80058be:	e000      	b.n	80058c2 <UART_SetConfig+0xdea>
 80058c0:	2301      	movs	r3, #1
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	005a      	lsls	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	441a      	add	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	b29b      	uxth	r3, r3
 80058dc:	61fb      	str	r3, [r7, #28]
        break;
 80058de:	e063      	b.n	80059a8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d04f      	beq.n	8005988 <UART_SetConfig+0xeb0>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d048      	beq.n	8005982 <UART_SetConfig+0xeaa>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d041      	beq.n	800597c <UART_SetConfig+0xea4>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d03a      	beq.n	8005976 <UART_SetConfig+0xe9e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b04      	cmp	r3, #4
 8005906:	d033      	beq.n	8005970 <UART_SetConfig+0xe98>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b05      	cmp	r3, #5
 800590e:	d02c      	beq.n	800596a <UART_SetConfig+0xe92>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b06      	cmp	r3, #6
 8005916:	d025      	beq.n	8005964 <UART_SetConfig+0xe8c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b07      	cmp	r3, #7
 800591e:	d01e      	beq.n	800595e <UART_SetConfig+0xe86>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	2b08      	cmp	r3, #8
 8005926:	d017      	beq.n	8005958 <UART_SetConfig+0xe80>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b09      	cmp	r3, #9
 800592e:	d010      	beq.n	8005952 <UART_SetConfig+0xe7a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b0a      	cmp	r3, #10
 8005936:	d009      	beq.n	800594c <UART_SetConfig+0xe74>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b0b      	cmp	r3, #11
 800593e:	d102      	bne.n	8005946 <UART_SetConfig+0xe6e>
 8005940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005944:	e022      	b.n	800598c <UART_SetConfig+0xeb4>
 8005946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800594a:	e01f      	b.n	800598c <UART_SetConfig+0xeb4>
 800594c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005950:	e01c      	b.n	800598c <UART_SetConfig+0xeb4>
 8005952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005956:	e019      	b.n	800598c <UART_SetConfig+0xeb4>
 8005958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800595c:	e016      	b.n	800598c <UART_SetConfig+0xeb4>
 800595e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005962:	e013      	b.n	800598c <UART_SetConfig+0xeb4>
 8005964:	f241 5354 	movw	r3, #5460	; 0x1554
 8005968:	e010      	b.n	800598c <UART_SetConfig+0xeb4>
 800596a:	f641 1398 	movw	r3, #6552	; 0x1998
 800596e:	e00d      	b.n	800598c <UART_SetConfig+0xeb4>
 8005970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005974:	e00a      	b.n	800598c <UART_SetConfig+0xeb4>
 8005976:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800597a:	e007      	b.n	800598c <UART_SetConfig+0xeb4>
 800597c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005980:	e004      	b.n	800598c <UART_SetConfig+0xeb4>
 8005982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005986:	e001      	b.n	800598c <UART_SetConfig+0xeb4>
 8005988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6852      	ldr	r2, [r2, #4]
 8005990:	0852      	lsrs	r2, r2, #1
 8005992:	441a      	add	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	b29b      	uxth	r3, r3
 800599e:	61fb      	str	r3, [r7, #28]
        break;
 80059a0:	e002      	b.n	80059a8 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	76fb      	strb	r3, [r7, #27]
        break;
 80059a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b0f      	cmp	r3, #15
 80059ac:	d916      	bls.n	80059dc <UART_SetConfig+0xf04>
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b4:	d212      	bcs.n	80059dc <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f023 030f 	bic.w	r3, r3, #15
 80059be:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	89fb      	ldrh	r3, [r7, #14]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	89fa      	ldrh	r2, [r7, #14]
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	e20c      	b.n	8005df6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	76fb      	strb	r3, [r7, #27]
 80059e0:	e209      	b.n	8005df6 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 80059e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	f200 81f4 	bhi.w	8005dd4 <UART_SetConfig+0x12fc>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0xf1c>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a49 	.word	0x08005a49
 80059f8:	08005aff 	.word	0x08005aff
 80059fc:	08005bb5 	.word	0x08005bb5
 8005a00:	08005dd5 	.word	0x08005dd5
 8005a04:	08005c5f 	.word	0x08005c5f
 8005a08:	08005dd5 	.word	0x08005dd5
 8005a0c:	08005dd5 	.word	0x08005dd5
 8005a10:	08005dd5 	.word	0x08005dd5
 8005a14:	08005d15 	.word	0x08005d15
 8005a18:	0001e848 	.word	0x0001e848
 8005a1c:	01e84800 	.word	0x01e84800
 8005a20:	0003d090 	.word	0x0003d090
 8005a24:	0007a120 	.word	0x0007a120
 8005a28:	000f4240 	.word	0x000f4240
 8005a2c:	001e8480 	.word	0x001e8480
 8005a30:	0028b0aa 	.word	0x0028b0aa
 8005a34:	0030d400 	.word	0x0030d400
 8005a38:	003d0900 	.word	0x003d0900
 8005a3c:	00516154 	.word	0x00516154
 8005a40:	007a1200 	.word	0x007a1200
 8005a44:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fc fcd2 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d044      	beq.n	8005ae0 <UART_SetConfig+0x1008>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d03e      	beq.n	8005adc <UART_SetConfig+0x1004>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d038      	beq.n	8005ad8 <UART_SetConfig+0x1000>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d032      	beq.n	8005ad4 <UART_SetConfig+0xffc>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d02c      	beq.n	8005ad0 <UART_SetConfig+0xff8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	d026      	beq.n	8005acc <UART_SetConfig+0xff4>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	d020      	beq.n	8005ac8 <UART_SetConfig+0xff0>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b07      	cmp	r3, #7
 8005a8c:	d01a      	beq.n	8005ac4 <UART_SetConfig+0xfec>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d014      	beq.n	8005ac0 <UART_SetConfig+0xfe8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d00e      	beq.n	8005abc <UART_SetConfig+0xfe4>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2b0a      	cmp	r3, #10
 8005aa4:	d008      	beq.n	8005ab8 <UART_SetConfig+0xfe0>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	2b0b      	cmp	r3, #11
 8005aac:	d102      	bne.n	8005ab4 <UART_SetConfig+0xfdc>
 8005aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ab2:	e016      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e014      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005ab8:	2380      	movs	r3, #128	; 0x80
 8005aba:	e012      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005abc:	2340      	movs	r3, #64	; 0x40
 8005abe:	e010      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	e00e      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	e00c      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005ac8:	230c      	movs	r3, #12
 8005aca:	e00a      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005acc:	230a      	movs	r3, #10
 8005ace:	e008      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	e006      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005ad4:	2306      	movs	r3, #6
 8005ad6:	e004      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	e002      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e000      	b.n	8005ae2 <UART_SetConfig+0x100a>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	441a      	add	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	61fb      	str	r3, [r7, #28]
        break;
 8005afc:	e16d      	b.n	8005dda <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005afe:	f7fc fc8d 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 8005b02:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d044      	beq.n	8005b96 <UART_SetConfig+0x10be>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d03e      	beq.n	8005b92 <UART_SetConfig+0x10ba>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d038      	beq.n	8005b8e <UART_SetConfig+0x10b6>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d032      	beq.n	8005b8a <UART_SetConfig+0x10b2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d02c      	beq.n	8005b86 <UART_SetConfig+0x10ae>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d026      	beq.n	8005b82 <UART_SetConfig+0x10aa>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b06      	cmp	r3, #6
 8005b3a:	d020      	beq.n	8005b7e <UART_SetConfig+0x10a6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	2b07      	cmp	r3, #7
 8005b42:	d01a      	beq.n	8005b7a <UART_SetConfig+0x10a2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d014      	beq.n	8005b76 <UART_SetConfig+0x109e>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b09      	cmp	r3, #9
 8005b52:	d00e      	beq.n	8005b72 <UART_SetConfig+0x109a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b0a      	cmp	r3, #10
 8005b5a:	d008      	beq.n	8005b6e <UART_SetConfig+0x1096>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b0b      	cmp	r3, #11
 8005b62:	d102      	bne.n	8005b6a <UART_SetConfig+0x1092>
 8005b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b68:	e016      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e014      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	e012      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b72:	2340      	movs	r3, #64	; 0x40
 8005b74:	e010      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b76:	2320      	movs	r3, #32
 8005b78:	e00e      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	e00c      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b7e:	230c      	movs	r3, #12
 8005b80:	e00a      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b82:	230a      	movs	r3, #10
 8005b84:	e008      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b86:	2308      	movs	r3, #8
 8005b88:	e006      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b8a:	2306      	movs	r3, #6
 8005b8c:	e004      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b8e:	2304      	movs	r3, #4
 8005b90:	e002      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e000      	b.n	8005b98 <UART_SetConfig+0x10c0>
 8005b96:	2301      	movs	r3, #1
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	441a      	add	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	61fb      	str	r3, [r7, #28]
        break;
 8005bb2:	e112      	b.n	8005dda <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d044      	beq.n	8005c46 <UART_SetConfig+0x116e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d03e      	beq.n	8005c42 <UART_SetConfig+0x116a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d038      	beq.n	8005c3e <UART_SetConfig+0x1166>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d032      	beq.n	8005c3a <UART_SetConfig+0x1162>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d02c      	beq.n	8005c36 <UART_SetConfig+0x115e>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b05      	cmp	r3, #5
 8005be2:	d026      	beq.n	8005c32 <UART_SetConfig+0x115a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b06      	cmp	r3, #6
 8005bea:	d020      	beq.n	8005c2e <UART_SetConfig+0x1156>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b07      	cmp	r3, #7
 8005bf2:	d01a      	beq.n	8005c2a <UART_SetConfig+0x1152>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d014      	beq.n	8005c26 <UART_SetConfig+0x114e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b09      	cmp	r3, #9
 8005c02:	d00e      	beq.n	8005c22 <UART_SetConfig+0x114a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b0a      	cmp	r3, #10
 8005c0a:	d008      	beq.n	8005c1e <UART_SetConfig+0x1146>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b0b      	cmp	r3, #11
 8005c12:	d102      	bne.n	8005c1a <UART_SetConfig+0x1142>
 8005c14:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005c18:	e016      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c1a:	4b81      	ldr	r3, [pc, #516]	; (8005e20 <UART_SetConfig+0x1348>)
 8005c1c:	e014      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c1e:	4b81      	ldr	r3, [pc, #516]	; (8005e24 <UART_SetConfig+0x134c>)
 8005c20:	e012      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c22:	4b81      	ldr	r3, [pc, #516]	; (8005e28 <UART_SetConfig+0x1350>)
 8005c24:	e010      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c26:	4b81      	ldr	r3, [pc, #516]	; (8005e2c <UART_SetConfig+0x1354>)
 8005c28:	e00e      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c2a:	4b81      	ldr	r3, [pc, #516]	; (8005e30 <UART_SetConfig+0x1358>)
 8005c2c:	e00c      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c2e:	4b81      	ldr	r3, [pc, #516]	; (8005e34 <UART_SetConfig+0x135c>)
 8005c30:	e00a      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c32:	4b81      	ldr	r3, [pc, #516]	; (8005e38 <UART_SetConfig+0x1360>)
 8005c34:	e008      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c36:	4b81      	ldr	r3, [pc, #516]	; (8005e3c <UART_SetConfig+0x1364>)
 8005c38:	e006      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c3a:	4b81      	ldr	r3, [pc, #516]	; (8005e40 <UART_SetConfig+0x1368>)
 8005c3c:	e004      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c3e:	4b81      	ldr	r3, [pc, #516]	; (8005e44 <UART_SetConfig+0x136c>)
 8005c40:	e002      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c42:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <UART_SetConfig+0x1370>)
 8005c44:	e000      	b.n	8005c48 <UART_SetConfig+0x1170>
 8005c46:	4b76      	ldr	r3, [pc, #472]	; (8005e20 <UART_SetConfig+0x1348>)
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6852      	ldr	r2, [r2, #4]
 8005c4c:	0852      	lsrs	r2, r2, #1
 8005c4e:	441a      	add	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	61fb      	str	r3, [r7, #28]
        break;
 8005c5c:	e0bd      	b.n	8005dda <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fc fb59 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8005c62:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d044      	beq.n	8005cf6 <UART_SetConfig+0x121e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d03e      	beq.n	8005cf2 <UART_SetConfig+0x121a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d038      	beq.n	8005cee <UART_SetConfig+0x1216>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d032      	beq.n	8005cea <UART_SetConfig+0x1212>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d02c      	beq.n	8005ce6 <UART_SetConfig+0x120e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d026      	beq.n	8005ce2 <UART_SetConfig+0x120a>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b06      	cmp	r3, #6
 8005c9a:	d020      	beq.n	8005cde <UART_SetConfig+0x1206>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b07      	cmp	r3, #7
 8005ca2:	d01a      	beq.n	8005cda <UART_SetConfig+0x1202>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d014      	beq.n	8005cd6 <UART_SetConfig+0x11fe>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d00e      	beq.n	8005cd2 <UART_SetConfig+0x11fa>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b0a      	cmp	r3, #10
 8005cba:	d008      	beq.n	8005cce <UART_SetConfig+0x11f6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b0b      	cmp	r3, #11
 8005cc2:	d102      	bne.n	8005cca <UART_SetConfig+0x11f2>
 8005cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cc8:	e016      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e014      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	e012      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cd2:	2340      	movs	r3, #64	; 0x40
 8005cd4:	e010      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	e00e      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cda:	2310      	movs	r3, #16
 8005cdc:	e00c      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	e00a      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005ce2:	230a      	movs	r3, #10
 8005ce4:	e008      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	e006      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cea:	2306      	movs	r3, #6
 8005cec:	e004      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cee:	2304      	movs	r3, #4
 8005cf0:	e002      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e000      	b.n	8005cf8 <UART_SetConfig+0x1220>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	61fb      	str	r3, [r7, #28]
        break;
 8005d12:	e062      	b.n	8005dda <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d04e      	beq.n	8005dba <UART_SetConfig+0x12e2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d047      	beq.n	8005db4 <UART_SetConfig+0x12dc>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d040      	beq.n	8005dae <UART_SetConfig+0x12d6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d039      	beq.n	8005da8 <UART_SetConfig+0x12d0>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d032      	beq.n	8005da2 <UART_SetConfig+0x12ca>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	d02b      	beq.n	8005d9c <UART_SetConfig+0x12c4>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b06      	cmp	r3, #6
 8005d4a:	d024      	beq.n	8005d96 <UART_SetConfig+0x12be>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b07      	cmp	r3, #7
 8005d52:	d01d      	beq.n	8005d90 <UART_SetConfig+0x12b8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d016      	beq.n	8005d8a <UART_SetConfig+0x12b2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	d00f      	beq.n	8005d84 <UART_SetConfig+0x12ac>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b0a      	cmp	r3, #10
 8005d6a:	d008      	beq.n	8005d7e <UART_SetConfig+0x12a6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	2b0b      	cmp	r3, #11
 8005d72:	d101      	bne.n	8005d78 <UART_SetConfig+0x12a0>
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	e022      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7c:	e01f      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d82:	e01c      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d88:	e019      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d8e:	e016      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d94:	e013      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005d96:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005d9a:	e010      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005d9c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005da0:	e00d      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005da6:	e00a      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005da8:	f241 5355 	movw	r3, #5461	; 0x1555
 8005dac:	e007      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005db2:	e004      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005db8:	e001      	b.n	8005dbe <UART_SetConfig+0x12e6>
 8005dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6852      	ldr	r2, [r2, #4]
 8005dc2:	0852      	lsrs	r2, r2, #1
 8005dc4:	441a      	add	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	61fb      	str	r3, [r7, #28]
        break;
 8005dd2:	e002      	b.n	8005dda <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	76fb      	strb	r3, [r7, #27]
        break;
 8005dd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d908      	bls.n	8005df2 <UART_SetConfig+0x131a>
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de6:	d204      	bcs.n	8005df2 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	60da      	str	r2, [r3, #12]
 8005df0:	e001      	b.n	8005df6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005e12:	7efb      	ldrb	r3, [r7, #27]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3728      	adds	r7, #40	; 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005e1e:	bf00      	nop
 8005e20:	00f42400 	.word	0x00f42400
 8005e24:	0001e848 	.word	0x0001e848
 8005e28:	0003d090 	.word	0x0003d090
 8005e2c:	0007a120 	.word	0x0007a120
 8005e30:	000f4240 	.word	0x000f4240
 8005e34:	00145855 	.word	0x00145855
 8005e38:	00186a00 	.word	0x00186a00
 8005e3c:	001e8480 	.word	0x001e8480
 8005e40:	0028b0aa 	.word	0x0028b0aa
 8005e44:	003d0900 	.word	0x003d0900
 8005e48:	007a1200 	.word	0x007a1200

08005e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01a      	beq.n	8005f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f4a:	d10a      	bne.n	8005f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
  }
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005fa0:	f7fb f9a4 	bl	80012ec <HAL_GetTick>
 8005fa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d10e      	bne.n	8005fd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f82c 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e022      	b.n	8006018 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d10e      	bne.n	8005ffe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f816 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e00c      	b.n	8006018 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006030:	e02c      	b.n	800608c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d028      	beq.n	800608c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603a:	f7fb f957 	bl	80012ec <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	429a      	cmp	r2, r3
 8006048:	d302      	bcc.n	8006050 <UART_WaitOnFlagUntilTimeout+0x30>
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d11d      	bne.n	800608c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800605e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e00f      	b.n	80060ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69da      	ldr	r2, [r3, #28]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	429a      	cmp	r2, r3
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d0c3      	beq.n	8006032 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6812      	ldr	r2, [r2, #0]
 80060d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7fe fcd1 	bl	8004ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fe fcad 	bl	8004aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006152:	bf00      	nop
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_UARTEx_DisableFifoMode+0x16>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e027      	b.n	80061fc <HAL_UARTEx_DisableFifoMode+0x66>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2224      	movs	r2, #36	; 0x24
 80061b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0201 	bic.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800621c:	2302      	movs	r3, #2
 800621e:	e02d      	b.n	800627c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2224      	movs	r2, #36	; 0x24
 800622c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0201 	bic.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f84f 	bl	8006300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006298:	2302      	movs	r3, #2
 800629a:	e02d      	b.n	80062f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	; 0x24
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f811 	bl	8006300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b089      	sub	sp, #36	; 0x24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006308:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <UARTEx_SetNbDataToProcess+0xc8>)
 800630a:	f107 0314 	add.w	r3, r7, #20
 800630e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006312:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006316:	4a2d      	ldr	r2, [pc, #180]	; (80063cc <UARTEx_SetNbDataToProcess+0xcc>)
 8006318:	f107 030c 	add.w	r3, r7, #12
 800631c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006320:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006328:	2b00      	cmp	r3, #0
 800632a:	d108      	bne.n	800633e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800633c:	e03d      	b.n	80063ba <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800633e:	2308      	movs	r3, #8
 8006340:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006342:	2308      	movs	r3, #8
 8006344:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	0e5b      	lsrs	r3, r3, #25
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	0f5b      	lsrs	r3, r3, #29
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006366:	7fbb      	ldrb	r3, [r7, #30]
 8006368:	7f3a      	ldrb	r2, [r7, #28]
 800636a:	f107 0120 	add.w	r1, r7, #32
 800636e:	440a      	add	r2, r1
 8006370:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	7f3a      	ldrb	r2, [r7, #28]
 800637a:	f107 0120 	add.w	r1, r7, #32
 800637e:	440a      	add	r2, r1
 8006380:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006384:	fb93 f3f2 	sdiv	r3, r3, r2
 8006388:	b29a      	uxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006390:	7ffb      	ldrb	r3, [r7, #31]
 8006392:	7f7a      	ldrb	r2, [r7, #29]
 8006394:	f107 0120 	add.w	r1, r7, #32
 8006398:	440a      	add	r2, r1
 800639a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800639e:	fb02 f303 	mul.w	r3, r2, r3
 80063a2:	7f7a      	ldrb	r2, [r7, #29]
 80063a4:	f107 0120 	add.w	r1, r7, #32
 80063a8:	440a      	add	r2, r1
 80063aa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80063ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063ba:	bf00      	nop
 80063bc:	3724      	adds	r7, #36	; 0x24
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	08006440 	.word	0x08006440
 80063cc:	08006448 	.word	0x08006448

080063d0 <__libc_init_array>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4e0d      	ldr	r6, [pc, #52]	; (8006408 <__libc_init_array+0x38>)
 80063d4:	4c0d      	ldr	r4, [pc, #52]	; (800640c <__libc_init_array+0x3c>)
 80063d6:	1ba4      	subs	r4, r4, r6
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	2500      	movs	r5, #0
 80063dc:	42a5      	cmp	r5, r4
 80063de:	d109      	bne.n	80063f4 <__libc_init_array+0x24>
 80063e0:	4e0b      	ldr	r6, [pc, #44]	; (8006410 <__libc_init_array+0x40>)
 80063e2:	4c0c      	ldr	r4, [pc, #48]	; (8006414 <__libc_init_array+0x44>)
 80063e4:	f000 f820 	bl	8006428 <_init>
 80063e8:	1ba4      	subs	r4, r4, r6
 80063ea:	10a4      	asrs	r4, r4, #2
 80063ec:	2500      	movs	r5, #0
 80063ee:	42a5      	cmp	r5, r4
 80063f0:	d105      	bne.n	80063fe <__libc_init_array+0x2e>
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063f8:	4798      	blx	r3
 80063fa:	3501      	adds	r5, #1
 80063fc:	e7ee      	b.n	80063dc <__libc_init_array+0xc>
 80063fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006402:	4798      	blx	r3
 8006404:	3501      	adds	r5, #1
 8006406:	e7f2      	b.n	80063ee <__libc_init_array+0x1e>
 8006408:	08006470 	.word	0x08006470
 800640c:	08006470 	.word	0x08006470
 8006410:	08006470 	.word	0x08006470
 8006414:	08006474 	.word	0x08006474

08006418 <memset>:
 8006418:	4402      	add	r2, r0
 800641a:	4603      	mov	r3, r0
 800641c:	4293      	cmp	r3, r2
 800641e:	d100      	bne.n	8006422 <memset+0xa>
 8006420:	4770      	bx	lr
 8006422:	f803 1b01 	strb.w	r1, [r3], #1
 8006426:	e7f9      	b.n	800641c <memset+0x4>

08006428 <_init>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	bf00      	nop
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr

08006434 <_fini>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	bf00      	nop
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr
