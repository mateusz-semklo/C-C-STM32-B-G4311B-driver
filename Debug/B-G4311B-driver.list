
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08008c60  08008c60  00018c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c88  08008c88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c90  08008c90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000000c  08008ca4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08008ca4  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187c6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cbd  00000000  00000000  00038802  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001570  00000000  00000000  0003b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f8  00000000  00000000  0003ca30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021806  00000000  00000000  0003de28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000127b6  00000000  00000000  0005f62e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dded0  00000000  00000000  00071de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014fcb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b08  00000000  00000000  0014fd30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c48 	.word	0x08008c48

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008c48 	.word	0x08008c48

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b092      	sub	sp, #72	; 0x48
 800051c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800051e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	223c      	movs	r2, #60	; 0x3c
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f008 fb81 	bl	8008c38 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800053c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800053e:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000540:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000544:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000546:	4b3b      	ldr	r3, [pc, #236]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054c:	4b39      	ldr	r3, [pc, #228]	; (8000634 <MX_ADC1_Init+0x11c>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000558:	4b36      	ldr	r3, [pc, #216]	; (8000634 <MX_ADC1_Init+0x11c>)
 800055a:	2201      	movs	r2, #1
 800055c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b35      	ldr	r3, [pc, #212]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000560:	2204      	movs	r2, #4
 8000562:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000566:	2200      	movs	r2, #0
 8000568:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056a:	4b32      	ldr	r3, [pc, #200]	; (8000634 <MX_ADC1_Init+0x11c>)
 800056c:	2200      	movs	r2, #0
 800056e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000570:	4b30      	ldr	r3, [pc, #192]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000572:	2201      	movs	r2, #1
 8000574:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000586:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000588:	2200      	movs	r2, #0
 800058a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <MX_ADC1_Init+0x11c>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4827      	ldr	r0, [pc, #156]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000596:	f001 fb41 	bl	8001c1c <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005a0:	f000 fc74 	bl	8000e8c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ac:	4619      	mov	r1, r3
 80005ae:	4821      	ldr	r0, [pc, #132]	; (8000634 <MX_ADC1_Init+0x11c>)
 80005b0:	f002 ff36 	bl	8003420 <HAL_ADCEx_MultiModeConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005ba:	f000 fc67 	bl	8000e8c <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <MX_ADC1_Init+0x120>)
 80005c0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80005ca:	237f      	movs	r3, #127	; 0x7f
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80005ce:	2304      	movs	r3, #4
 80005d0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80005ec:	2384      	movs	r3, #132	; 0x84
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <MX_ADC1_Init+0x11c>)
 8000600:	f002 fab6 	bl	8002b70 <HAL_ADCEx_InjectedConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800060a:	f000 fc3f 	bl	8000e8c <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_ADC1_Init+0x124>)
 8000610:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000612:	f240 130f 	movw	r3, #271	; 0x10f
 8000616:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_ADC1_Init+0x11c>)
 800061e:	f002 faa7 	bl	8002b70 <HAL_ADCEx_InjectedConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000628:	f000 fc30 	bl	8000e8c <Error_Handler>
  }

}
 800062c:	bf00      	nop
 800062e:	3748      	adds	r7, #72	; 0x48
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000098 	.word	0x20000098
 8000638:	0c900008 	.word	0x0c900008
 800063c:	32601000 	.word	0x32601000

08000640 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	223c      	movs	r2, #60	; 0x3c
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f008 faf3 	bl	8008c38 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000652:	4b38      	ldr	r3, [pc, #224]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000654:	4a38      	ldr	r2, [pc, #224]	; (8000738 <MX_ADC2_Init+0xf8>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000658:	4b36      	ldr	r3, [pc, #216]	; (8000734 <MX_ADC2_Init+0xf4>)
 800065a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800065e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000660:	4b34      	ldr	r3, [pc, #208]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000666:	4b33      	ldr	r3, [pc, #204]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800066c:	4b31      	ldr	r3, [pc, #196]	; (8000734 <MX_ADC2_Init+0xf4>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000674:	2201      	movs	r2, #1
 8000676:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <MX_ADC2_Init+0xf4>)
 800067a:	2204      	movs	r2, #4
 800067c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000680:	2200      	movs	r2, #0
 8000682:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000686:	2200      	movs	r2, #0
 8000688:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_ADC2_Init+0xf4>)
 800068c:	2201      	movs	r2, #1
 800068e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <MX_ADC2_Init+0xf4>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_ADC2_Init+0xf4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <MX_ADC2_Init+0xf4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ae:	4821      	ldr	r0, [pc, #132]	; (8000734 <MX_ADC2_Init+0xf4>)
 80006b0:	f001 fab4 	bl	8001c1c <HAL_ADC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80006ba:	f000 fbe7 	bl	8000e8c <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC2_Init+0xfc>)
 80006c0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006c2:	2309      	movs	r3, #9
 80006c4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006ca:	237f      	movs	r3, #127	; 0x7f
 80006cc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80006ec:	2384      	movs	r3, #132	; 0x84
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_ADC2_Init+0xf4>)
 8000700:	f002 fa36 	bl	8002b70 <HAL_ADCEx_InjectedConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800070a:	f000 fbbf 	bl	8000e8c <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_ADC2_Init+0x100>)
 8000710:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000712:	f240 130f 	movw	r3, #271	; 0x10f
 8000716:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_ADC2_Init+0xf4>)
 800071e:	f002 fa27 	bl	8002b70 <HAL_ADCEx_InjectedConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 8000728:	f000 fbb0 	bl	8000e8c <Error_Handler>
  }

}
 800072c:	bf00      	nop
 800072e:	3740      	adds	r7, #64	; 0x40
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000002c 	.word	0x2000002c
 8000738:	50000100 	.word	0x50000100
 800073c:	0c900008 	.word	0x0c900008
 8000740:	cb8c0000 	.word	0xcb8c0000

08000744 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000764:	d14e      	bne.n	8000804 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000766:	4b47      	ldr	r3, [pc, #284]	; (8000884 <HAL_ADC_MspInit+0x140>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	4a45      	ldr	r2, [pc, #276]	; (8000884 <HAL_ADC_MspInit+0x140>)
 800076e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000770:	4b44      	ldr	r3, [pc, #272]	; (8000884 <HAL_ADC_MspInit+0x140>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d10b      	bne.n	8000790 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000778:	4b43      	ldr	r3, [pc, #268]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077c:	4a42      	ldr	r2, [pc, #264]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800077e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000784:	4b40      	ldr	r3, [pc, #256]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b3d      	ldr	r3, [pc, #244]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000794:	4a3c      	ldr	r2, [pc, #240]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800079e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a8:	4b37      	ldr	r3, [pc, #220]	; (8000888 <HAL_ADC_MspInit+0x144>)
 80007aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ac:	4a36      	ldr	r2, [pc, #216]	; (8000888 <HAL_ADC_MspInit+0x144>)
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b4:	4b34      	ldr	r3, [pc, #208]	; (8000888 <HAL_ADC_MspInit+0x144>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80007c0:	2305      	movs	r3, #5
 80007c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c4:	2303      	movs	r3, #3
 80007c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f003 f839 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4827      	ldr	r0, [pc, #156]	; (800088c <HAL_ADC_MspInit+0x148>)
 80007ee:	f003 f82d 	bl	800384c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2102      	movs	r1, #2
 80007f6:	2012      	movs	r0, #18
 80007f8:	f002 ff8d 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007fc:	2012      	movs	r0, #18
 80007fe:	f002 ffa4 	bl	800374a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000802:	e03a      	b.n	800087a <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <HAL_ADC_MspInit+0x14c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d135      	bne.n	800087a <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <HAL_ADC_MspInit+0x140>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <HAL_ADC_MspInit+0x140>)
 8000816:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_ADC_MspInit+0x140>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10b      	bne.n	8000838 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	4a18      	ldr	r2, [pc, #96]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800082a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800083a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <HAL_ADC_MspInit+0x144>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_ADC_MspInit+0x144>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000850:	2340      	movs	r3, #64	; 0x40
 8000852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000854:	2303      	movs	r3, #3
 8000856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f002 fff1 	bl	800384c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2102      	movs	r1, #2
 800086e:	2012      	movs	r0, #18
 8000870:	f002 ff51 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000874:	2012      	movs	r0, #18
 8000876:	f002 ff68 	bl	800374a <HAL_NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3730      	adds	r7, #48	; 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000028 	.word	0x20000028
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400
 8000890:	50000100 	.word	0x50000100

08000894 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_GPIO_Init+0xa8>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a23      	ldr	r2, [pc, #140]	; (800093c <MX_GPIO_Init+0xa8>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_GPIO_Init+0xa8>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_GPIO_Init+0xa8>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a1d      	ldr	r2, [pc, #116]	; (800093c <MX_GPIO_Init+0xa8>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_GPIO_Init+0xa8>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_GPIO_Init+0xa8>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <MX_GPIO_Init+0xa8>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_GPIO_Init+0xa8>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_GPIO_Init+0xa8>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <MX_GPIO_Init+0xa8>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_GPIO_Init+0xa8>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800090a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_GPIO_Init+0xac>)
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_GPIO_Init+0xb0>)
 8000920:	f002 ff94 	bl	800384c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2107      	movs	r1, #7
 8000928:	2028      	movs	r0, #40	; 0x28
 800092a:	f002 fef4 	bl	8003716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	; 0x28
 8000930:	f002 ff0b 	bl	800374a <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	10110000 	.word	0x10110000
 8000944:	48000800 	.word	0x48000800

08000948 <HAL_ADCEx_InjectedConvCpltCallback>:

}


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]


	z++;
 8000950:	4b2c      	ldr	r3, [pc, #176]	; (8000a04 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 800095a:	801a      	strh	r2, [r3, #0]
	d1= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800095c:	2109      	movs	r1, #9
 800095e:	482a      	ldr	r0, [pc, #168]	; (8000a08 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000960:	f002 f8ac 	bl	8002abc <HAL_ADCEx_InjectedGetValue>
 8000964:	4602      	mov	r2, r0
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8000968:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 800096a:	bf00      	nop
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	f003 0320 	and.w	r3, r3, #32
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f5      	bne.n	800096c <HAL_ADCEx_InjectedConvCpltCallback+0x24>
	d2 =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8000980:	f240 110f 	movw	r1, #271	; 0x10f
 8000984:	4820      	ldr	r0, [pc, #128]	; (8000a08 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000986:	f002 f899 	bl	8002abc <HAL_ADCEx_InjectedGetValue>
 800098a:	4602      	mov	r2, r0
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 800098e:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8000990:	bf00      	nop
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	f003 0320 	and.w	r3, r3, #32
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1f5      	bne.n	8000992 <HAL_ADCEx_InjectedConvCpltCallback+0x4a>
	d3 =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80009a6:	2109      	movs	r1, #9
 80009a8:	481a      	ldr	r0, [pc, #104]	; (8000a14 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 80009aa:	f002 f887 	bl	8002abc <HAL_ADCEx_InjectedGetValue>
 80009ae:	4602      	mov	r2, r0
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 80009b2:	601a      	str	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 80009b4:	bf00      	nop
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1f5      	bne.n	80009b6 <HAL_ADCEx_InjectedConvCpltCallback+0x6e>
	d4 =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 80009ca:	f240 110f 	movw	r1, #271	; 0x10f
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 80009d0:	f002 f874 	bl	8002abc <HAL_ADCEx_InjectedGetValue>
 80009d4:	4602      	mov	r2, r0
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 80009d8:	601a      	str	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 80009da:	bf00      	nop
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	f003 0320 	and.w	r3, r3, #32
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f5      	bne.n	80009dc <HAL_ADCEx_InjectedConvCpltCallback+0x94>

	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 80009f2:	f001 ff7d 	bl	80028f0 <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 80009f8:	f001 ff7a 	bl	80028f0 <HAL_ADCEx_InjectedStart_IT>

}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000126 	.word	0x20000126
 8000a08:	20000098 	.word	0x20000098
 8000a0c:	20000110 	.word	0x20000110
 8000a10:	20000130 	.word	0x20000130
 8000a14:	2000002c 	.word	0x2000002c
 8000a18:	2000014c 	.word	0x2000014c
 8000a1c:	20000138 	.word	0x20000138

08000a20 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a30:	d129      	bne.n	8000a86 <HAL_GPIO_EXTI_Callback+0x66>
	{
		if(d==0)
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d11f      	bne.n	8000a7a <HAL_GPIO_EXTI_Callback+0x5a>
		{
			    HAL_TIM_Base_Start_IT(&htim1);
 8000a3a:	4816      	ldr	r0, [pc, #88]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a3c:	f004 f9d6 	bl	8004dec <HAL_TIM_Base_Start_IT>

				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a40:	2100      	movs	r1, #0
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a44:	f004 fa6a 	bl	8004f1c <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4812      	ldr	r0, [pc, #72]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a4c:	f005 fd74 	bl	8006538 <HAL_TIMEx_PWMN_Start>

			    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000a50:	2104      	movs	r1, #4
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a54:	f004 fa62 	bl	8004f1c <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000a58:	2104      	movs	r1, #4
 8000a5a:	480e      	ldr	r0, [pc, #56]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a5c:	f005 fd6c 	bl	8006538 <HAL_TIMEx_PWMN_Start>

			    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000a60:	2108      	movs	r1, #8
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a64:	f004 fa5a 	bl	8004f1c <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000a68:	2108      	movs	r1, #8
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a6c:	f005 fd64 	bl	8006538 <HAL_TIMEx_PWMN_Start>

			    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000a70:	210c      	movs	r1, #12
 8000a72:	4808      	ldr	r0, [pc, #32]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a74:	f004 fa52 	bl	8004f1c <HAL_TIM_PWM_Start>

		}


	}
}
 8000a78:	e005      	b.n	8000a86 <HAL_GPIO_EXTI_Callback+0x66>
			start_stop=0;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x78>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
			d=0;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000013e 	.word	0x2000013e
 8000a94:	20000254 	.word	0x20000254
 8000a98:	20000147 	.word	0x20000147

08000a9c <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_TIMEx_CommutCallback+0x2c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d105      	bne.n	8000aba <HAL_TIMEx_CommutCallback+0x1e>
	{


y++;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <HAL_TIMEx_CommutCallback+0x30>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_TIMEx_CommutCallback+0x30>)
 8000ab8:	801a      	strh	r2, [r3, #0]

	}
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40012c00 	.word	0x40012c00
 8000acc:	2000013c 	.word	0x2000013c

08000ad0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d105      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x1e>
		{
		x++;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000aec:	801a      	strh	r2, [r3, #0]



		}

}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40012c00 	.word	0x40012c00
 8000b00:	2000010e 	.word	0x2000010e

08000b04 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		//  TIM1->CCR2=TIM2->CCR2;
		//  TIM1->CCR3=TIM2->CCR2;
		}
	}

}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_UART_RxCpltCallback+0x2c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d107      	bne.n	8000b42 <HAL_UART_RxCpltCallback+0x22>
	{
		start_stop=0;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_UART_RxCpltCallback+0x30>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &recive, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4906      	ldr	r1, [pc, #24]	; (8000b54 <HAL_UART_RxCpltCallback+0x34>)
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <HAL_UART_RxCpltCallback+0x38>)
 8000b3e:	f005 ffd3 	bl	8006ae8 <HAL_UART_Receive_IT>

	}
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	20000147 	.word	0x20000147
 8000b54:	20000134 	.word	0x20000134
 8000b58:	200002ec 	.word	0x200002ec

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f000 fed3 	bl	800190a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f92c 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f7ff fe94 	bl	8000894 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b6c:	f000 fb4c 	bl	8001208 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000b70:	f000 fc7a 	bl	8001468 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000b74:	f000 fe08 	bl	8001788 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b78:	f000 fc24 	bl	80013c4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b7c:	f7ff fccc 	bl	8000518 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b80:	f7ff fd5e 	bl	8000640 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8000b84:	f000 f98a 	bl	8000e9c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000b88:	f000 f9b6 	bl	8000ef8 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000b8c:	f000 f9e2 	bl	8000f54 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */
  //////// konfiguracja Timer 2 - PWM input enkoder ////////////
   TIM2->ARR= TIM2_ARR;
 8000b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b94:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM2->PSC= TIM2_PSC;
 8000b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_TIM_Base_Start(&htim2);
 8000ba2:	4872      	ldr	r0, [pc, #456]	; (8000d6c <main+0x210>)
 8000ba4:	f004 f8f4 	bl	8004d90 <HAL_TIM_Base_Start>

    //////// konfiguracja Timer 4 - HALL sensor ////////////
    TIM4->ARR= TIM4_ARR;
 8000ba8:	4b71      	ldr	r3, [pc, #452]	; (8000d70 <main+0x214>)
 8000baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->PSC= TIM4_PSC;
 8000bb0:	4b6f      	ldr	r3, [pc, #444]	; (8000d70 <main+0x214>)
 8000bb2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->CCR1=TIM4_CCR1;
 8000bb8:	4b6d      	ldr	r3, [pc, #436]	; (8000d70 <main+0x214>)
 8000bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR2=TIM4_CCR2;
 8000bc0:	4b6b      	ldr	r3, [pc, #428]	; (8000d70 <main+0x214>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_TIMEx_HallSensor_Start(&htim4);
 8000bc6:	486b      	ldr	r0, [pc, #428]	; (8000d74 <main+0x218>)
 8000bc8:	f005 fc60 	bl	800648c <HAL_TIMEx_HallSensor_Start>


    //////// konfiguracja Timer 1  ////////////
    TIM1->ARR= TIM1_ARR;
 8000bcc:	4b6a      	ldr	r3, [pc, #424]	; (8000d78 <main+0x21c>)
 8000bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC= TIM1_PSC;
 8000bd4:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <main+0x21c>)
 8000bd6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->CCR1=TIM1_CCR1;
 8000bdc:	4b66      	ldr	r3, [pc, #408]	; (8000d78 <main+0x21c>)
 8000bde:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2=TIM1_CCR2;
 8000be4:	4b64      	ldr	r3, [pc, #400]	; (8000d78 <main+0x21c>)
 8000be6:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000bea:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3=TIM1_CCR3;
 8000bec:	4b62      	ldr	r3, [pc, #392]	; (8000d78 <main+0x21c>)
 8000bee:	f247 5230 	movw	r2, #30000	; 0x7530
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM1->CCR4=TIM1_CCR4;
 8000bf4:	4b60      	ldr	r3, [pc, #384]	; (8000d78 <main+0x21c>)
 8000bf6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_TIMEx_ConfigCommutEvent_IT(&htim1,TIM_TS_ITR3, TIM_COMMUTATION_TRGI);
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	2130      	movs	r1, #48	; 0x30
 8000c00:	485e      	ldr	r0, [pc, #376]	; (8000d7c <main+0x220>)
 8000c02:	f005 fd19 	bl	8006638 <HAL_TIMEx_ConfigCommutEvent_IT>

    /////UASRT 2 ///////////////
    HAL_UART_Receive_IT(&huart2, &recive, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	495d      	ldr	r1, [pc, #372]	; (8000d80 <main+0x224>)
 8000c0a:	485e      	ldr	r0, [pc, #376]	; (8000d84 <main+0x228>)
 8000c0c:	f005 ff6c 	bl	8006ae8 <HAL_UART_Receive_IT>


    ////ADC 1/////
   if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) );
 8000c10:	217f      	movs	r1, #127	; 0x7f
 8000c12:	485d      	ldr	r0, [pc, #372]	; (8000d88 <main+0x22c>)
 8000c14:	f001 fe0a 	bl	800282c <HAL_ADCEx_Calibration_Start>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d005      	beq.n	8000c2a <main+0xce>
 8000c1e:	217f      	movs	r1, #127	; 0x7f
 8000c20:	485a      	ldr	r0, [pc, #360]	; (8000d8c <main+0x230>)
 8000c22:	f001 fe03 	bl	800282c <HAL_ADCEx_Calibration_Start>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
   {
    HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000c2a:	4857      	ldr	r0, [pc, #348]	; (8000d88 <main+0x22c>)
 8000c2c:	f001 fe60 	bl	80028f0 <HAL_ADCEx_InjectedStart_IT>
    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000c30:	4856      	ldr	r0, [pc, #344]	; (8000d8c <main+0x230>)
 8000c32:	f001 fe5d 	bl	80028f0 <HAL_ADCEx_InjectedStart_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3e:	f002 ff87 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <main+0xf4>
	 	 		  tim1_ch1=1;
 8000c48:	4b51      	ldr	r3, [pc, #324]	; (8000d90 <main+0x234>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e002      	b.n	8000c56 <main+0xfa>
	 	 	  else
	 	 		  tim1_ch1=0;
 8000c50:	4b4f      	ldr	r3, [pc, #316]	; (8000d90 <main+0x234>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5a:	484e      	ldr	r0, [pc, #312]	; (8000d94 <main+0x238>)
 8000c5c:	f002 ff78 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <main+0x112>
	 	 		  tim1_ch1n=1;
 8000c66:	4b4c      	ldr	r3, [pc, #304]	; (8000d98 <main+0x23c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e002      	b.n	8000c74 <main+0x118>
	 	 	  else
	 	 		  tim1_ch1n=0;
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <main+0x23c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8000c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f002 ff68 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <main+0x132>
	 	 		  tim1_ch2=1;
 8000c86:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <main+0x240>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e002      	b.n	8000c94 <main+0x138>
	 	 	  else
	 	 		  tim1_ch2=0;
 8000c8e:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <main+0x240>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]

	  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8000c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f002 ff58 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <main+0x152>
	 	 		  tim1_ch2n=1;
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <main+0x244>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e002      	b.n	8000cb4 <main+0x158>
	 	 	  else
	 	 		  tim1_ch2n=0;
 8000cae:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <main+0x244>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbc:	f002 ff48 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <main+0x172>
	 	 		  tim1_ch3=1;
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <main+0x248>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	e002      	b.n	8000cd4 <main+0x178>
	 	 	  else
	 	 		  tim1_ch3=0;
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <main+0x248>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 8000cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cd8:	4833      	ldr	r0, [pc, #204]	; (8000da8 <main+0x24c>)
 8000cda:	f002 ff39 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <main+0x190>
	 	 		  tim1_ch3n=1;
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <main+0x250>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e002      	b.n	8000cf2 <main+0x196>
	 	 	  else
	 	 		  tim1_ch3n=0;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <main+0x250>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8000cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f002 ff29 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <main+0x1b0>
	 	 		  tim1_ch4=1;
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <main+0x254>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e002      	b.n	8000d12 <main+0x1b6>
	 	 	  else
	 	 		  tim1_ch4=0;
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <main+0x254>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]





	 	 	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	4824      	ldr	r0, [pc, #144]	; (8000da8 <main+0x24c>)
 8000d16:	f002 ff1b 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <main+0x1cc>
	 	 		hall_1=1;
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <main+0x258>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e002      	b.n	8000d2e <main+0x1d2>
	 	 	else
	 	 		hall_1=0;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <main+0x258>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]

	 	 	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	481d      	ldr	r0, [pc, #116]	; (8000da8 <main+0x24c>)
 8000d32:	f002 ff0d 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <main+0x1e8>
	 	 		hall_2=1;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <main+0x25c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e002      	b.n	8000d4a <main+0x1ee>
	 	    else
	 	    	hall_2=0;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <main+0x25c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]

	 	 	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4e:	4816      	ldr	r0, [pc, #88]	; (8000da8 <main+0x24c>)
 8000d50:	f002 fefe 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <main+0x206>
	 	 		hall_3=1;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <main+0x260>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e769      	b.n	8000c36 <main+0xda>
	 	    else
	 	    	hall_3=0;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <main+0x260>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
	  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000d68:	e765      	b.n	8000c36 <main+0xda>
 8000d6a:	bf00      	nop
 8000d6c:	200002a0 	.word	0x200002a0
 8000d70:	40000800 	.word	0x40000800
 8000d74:	20000208 	.word	0x20000208
 8000d78:	40012c00 	.word	0x40012c00
 8000d7c:	20000254 	.word	0x20000254
 8000d80:	20000134 	.word	0x20000134
 8000d84:	200002ec 	.word	0x200002ec
 8000d88:	20000098 	.word	0x20000098
 8000d8c:	2000002c 	.word	0x2000002c
 8000d90:	2000012c 	.word	0x2000012c
 8000d94:	48000800 	.word	0x48000800
 8000d98:	20000144 	.word	0x20000144
 8000d9c:	20000145 	.word	0x20000145
 8000da0:	20000135 	.word	0x20000135
 8000da4:	20000136 	.word	0x20000136
 8000da8:	48000400 	.word	0x48000400
 8000dac:	20000128 	.word	0x20000128
 8000db0:	20000148 	.word	0x20000148
 8000db4:	20000150 	.word	0x20000150
 8000db8:	20000124 	.word	0x20000124
 8000dbc:	2000010c 	.word	0x2000010c

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0a4      	sub	sp, #144	; 0x90
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dca:	2238      	movs	r2, #56	; 0x38
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f007 ff32 	bl	8008c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2244      	movs	r2, #68	; 0x44
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 ff24 	bl	8008c38 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f002 ffad 	bl	8003d50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e04:	2303      	movs	r3, #3
 8000e06:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000e0c:	2350      	movs	r3, #80	; 0x50
 8000e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 f835 	bl	8003e98 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e34:	f000 f82a 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e50:	2107      	movs	r1, #7
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fb38 	bl	80044c8 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e5e:	f000 f815 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000e62:	f248 0302 	movw	r3, #32770	; 0x8002
 8000e66:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e6c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fd43 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e80:	f000 f804 	bl	8000e8c <Error_Handler>
  }
}
 8000e84:	bf00      	nop
 8000e86:	3790      	adds	r7, #144	; 0x90
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <MX_OPAMP1_Init+0x58>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000eae:	2240      	movs	r2, #64	; 0x40
 8000eb0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000ec6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000ece:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_OPAMP1_Init+0x54>)
 8000edc:	f002 fe68 	bl	8003bb0 <HAL_OPAMP_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8000ee6:	f7ff ffd1 	bl	8000e8c <Error_Handler>
  }

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001cc 	.word	0x200001cc
 8000ef4:	40010300 	.word	0x40010300

08000ef8 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000efe:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <MX_OPAMP2_Init+0x58>)
 8000f00:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000f0a:	2240      	movs	r2, #64	; 0x40
 8000f0c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000f2a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_OPAMP2_Init+0x54>)
 8000f38:	f002 fe3a 	bl	8003bb0 <HAL_OPAMP_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8000f42:	f7ff ffa3 	bl	8000e8c <Error_Handler>
  }

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000154 	.word	0x20000154
 8000f50:	40010304 	.word	0x40010304

08000f54 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <MX_OPAMP3_Init+0x58>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f66:	2240      	movs	r2, #64	; 0x40
 8000f68:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f86:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_OPAMP3_Init+0x54>)
 8000f94:	f002 fe0c 	bl	8003bb0 <HAL_OPAMP_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8000f9e:	f7ff ff75 	bl	8000e8c <Error_Handler>
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000190 	.word	0x20000190
 8000fac:	40010308 	.word	0x40010308

08000fb0 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a2e      	ldr	r2, [pc, #184]	; (8001088 <HAL_OPAMP_MspInit+0xd8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d119      	bne.n	8001006 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <HAL_OPAMP_MspInit+0xdc>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	; (800108c <HAL_OPAMP_MspInit+0xdc>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_OPAMP_MspInit+0xdc>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fea:	230e      	movs	r3, #14
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f002 fc24 	bl	800384c <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001004:	e03b      	b.n	800107e <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a21      	ldr	r2, [pc, #132]	; (8001090 <HAL_OPAMP_MspInit+0xe0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d119      	bne.n	8001044 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <HAL_OPAMP_MspInit+0xdc>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_OPAMP_MspInit+0xdc>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_OPAMP_MspInit+0xdc>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001028:	23e0      	movs	r3, #224	; 0xe0
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102c:	2303      	movs	r3, #3
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f002 fc05 	bl	800384c <HAL_GPIO_Init>
}
 8001042:	e01c      	b.n	800107e <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a12      	ldr	r2, [pc, #72]	; (8001094 <HAL_OPAMP_MspInit+0xe4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d117      	bne.n	800107e <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_OPAMP_MspInit+0xdc>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_OPAMP_MspInit+0xdc>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_OPAMP_MspInit+0xdc>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001066:	2307      	movs	r3, #7
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	2303      	movs	r3, #3
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <HAL_OPAMP_MspInit+0xe8>)
 800107a:	f002 fbe7 	bl	800384c <HAL_GPIO_Init>
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40010300 	.word	0x40010300
 800108c:	40021000 	.word	0x40021000
 8001090:	40010304 	.word	0x40010304
 8001094:	40010308 	.word	0x40010308
 8001098:	48000400 	.word	0x48000400

0800109c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6093      	str	r3, [r2, #8]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40007000 	.word	0x40007000

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	; 0x60
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x44>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x44>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6593      	str	r3, [r2, #88]	; 0x58
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x44>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80010f2:	f7ff ffd3 	bl	800109c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 fc2a 	bl	80019b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <ADC1_2_IRQHandler+0x14>)
 8001166:	f000 fee1 	bl	8001f2c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <ADC1_2_IRQHandler+0x18>)
 800116c:	f000 fede 	bl	8001f2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000098 	.word	0x20000098
 8001178:	2000002c 	.word	0x2000002c

0800117c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001182:	f003 ff9d 	bl	80050c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000254 	.word	0x20000254

08001190 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001196:	f003 ff93 	bl	80050c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000254 	.word	0x20000254

080011a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <TIM1_CC_IRQHandler+0x10>)
 80011aa:	f003 ff89 	bl	80050c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000254 	.word	0x20000254

080011b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <USART2_IRQHandler+0x10>)
 80011be:	f005 fd6b 	bl	8006c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200002ec 	.word	0x200002ec

080011cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80011d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011d4:	f002 fcd4 	bl	8003b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <SystemInit+0x28>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <SystemInit+0x28>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SystemInit+0x28>)
 80011f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f6:	609a      	str	r2, [r3, #8]
#endif
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09c      	sub	sp, #112	; 0x70
 800120c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2234      	movs	r2, #52	; 0x34
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f007 fcf8 	bl	8008c38 <memset>

  htim1.Instance = TIM1;
 8001248:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <MX_TIM1_Init+0x1b4>)
 800124a:	4a5d      	ldr	r2, [pc, #372]	; (80013c0 <MX_TIM1_Init+0x1b8>)
 800124c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800124e:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <MX_TIM1_Init+0x1b4>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001254:	4b59      	ldr	r3, [pc, #356]	; (80013bc <MX_TIM1_Init+0x1b4>)
 8001256:	2220      	movs	r2, #32
 8001258:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800125a:	4b58      	ldr	r3, [pc, #352]	; (80013bc <MX_TIM1_Init+0x1b4>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b56      	ldr	r3, [pc, #344]	; (80013bc <MX_TIM1_Init+0x1b4>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001266:	4b55      	ldr	r3, [pc, #340]	; (80013bc <MX_TIM1_Init+0x1b4>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <MX_TIM1_Init+0x1b4>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001272:	4852      	ldr	r0, [pc, #328]	; (80013bc <MX_TIM1_Init+0x1b4>)
 8001274:	f003 fd34 	bl	8004ce0 <HAL_TIM_Base_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800127e:	f7ff fe05 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001288:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800128c:	4619      	mov	r1, r3
 800128e:	484b      	ldr	r0, [pc, #300]	; (80013bc <MX_TIM1_Init+0x1b4>)
 8001290:	f004 f9a6 	bl	80055e0 <HAL_TIM_ConfigClockSource>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800129a:	f7ff fdf7 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800129e:	4847      	ldr	r0, [pc, #284]	; (80013bc <MX_TIM1_Init+0x1b4>)
 80012a0:	f003 fdda 	bl	8004e58 <HAL_TIM_PWM_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012aa:	f7ff fdef 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80012ae:	2370      	movs	r3, #112	; 0x70
 80012b0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012be:	4619      	mov	r1, r3
 80012c0:	483e      	ldr	r0, [pc, #248]	; (80013bc <MX_TIM1_Init+0x1b4>)
 80012c2:	f005 fa3d 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80012cc:	f7ff fdde 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d0:	2360      	movs	r3, #96	; 0x60
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d8:	2300      	movs	r3, #0
 80012da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012dc:	2300      	movs	r3, #0
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4831      	ldr	r0, [pc, #196]	; (80013bc <MX_TIM1_Init+0x1b4>)
 80012f6:	f004 f863 	bl	80053c0 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001300:	f7ff fdc4 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001308:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800130c:	2204      	movs	r2, #4
 800130e:	4619      	mov	r1, r3
 8001310:	482a      	ldr	r0, [pc, #168]	; (80013bc <MX_TIM1_Init+0x1b4>)
 8001312:	f004 f855 	bl	80053c0 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800131c:	f7ff fdb6 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001324:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001328:	2208      	movs	r2, #8
 800132a:	4619      	mov	r1, r3
 800132c:	4823      	ldr	r0, [pc, #140]	; (80013bc <MX_TIM1_Init+0x1b4>)
 800132e:	f004 f847 	bl	80053c0 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001338:	f7ff fda8 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001344:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001348:	220c      	movs	r2, #12
 800134a:	4619      	mov	r1, r3
 800134c:	481b      	ldr	r0, [pc, #108]	; (80013bc <MX_TIM1_Init+0x1b4>)
 800134e:	f004 f837 	bl	80053c0 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8001358:	f7ff fd98 	bl	8000e8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800135c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001360:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001366:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 800136c:	2344      	movs	r3, #68	; 0x44
 800136e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001378:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 800138c:	2303      	movs	r3, #3
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <MX_TIM1_Init+0x1b4>)
 800139e:	f005 fa51 	bl	8006844 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x1a4>
  {
    Error_Handler();
 80013a8:	f7ff fd70 	bl	8000e8c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <MX_TIM1_Init+0x1b4>)
 80013ae:	f000 f963 	bl	8001678 <HAL_TIM_MspPostInit>

}
 80013b2:	bf00      	nop
 80013b4:	3770      	adds	r7, #112	; 0x70
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000254 	.word	0x20000254
 80013c0:	40012c00 	.word	0x40012c00

080013c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_TIM2_Init+0xa0>)
 80013e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_TIM2_Init+0xa0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_TIM2_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_TIM2_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_TIM2_Init+0xa0>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_TIM2_Init+0xa0>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800140a:	4816      	ldr	r0, [pc, #88]	; (8001464 <MX_TIM2_Init+0xa0>)
 800140c:	f003 fc68 	bl	8004ce0 <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001416:	f7ff fd39 	bl	8000e8c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800141a:	2307      	movs	r3, #7
 800141c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800141e:	2350      	movs	r3, #80	; 0x50
 8001420:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <MX_TIM2_Init+0xa0>)
 8001432:	f004 f9b3 	bl	800579c <HAL_TIM_SlaveConfigSynchro>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800143c:	f7ff fd26 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_TIM2_Init+0xa0>)
 800144e:	f005 f977 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001458:	f7ff fd18 	bl	8000e8c <Error_Handler>
  }

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002a0 	.word	0x200002a0

08001468 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_TIM4_Init+0xc8>)
 8001496:	4a27      	ldr	r2, [pc, #156]	; (8001534 <MX_TIM4_Init+0xcc>)
 8001498:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_TIM4_Init+0xc8>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <MX_TIM4_Init+0xc8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_TIM4_Init+0xc8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_TIM4_Init+0xc8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_TIM4_Init+0xc8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014b8:	481d      	ldr	r0, [pc, #116]	; (8001530 <MX_TIM4_Init+0xc8>)
 80014ba:	f003 fc11 	bl	8004ce0 <HAL_TIM_Base_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80014c4:	f7ff fce2 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	4619      	mov	r1, r3
 80014d4:	4816      	ldr	r0, [pc, #88]	; (8001530 <MX_TIM4_Init+0xc8>)
 80014d6:	f004 f883 	bl	80055e0 <HAL_TIM_ConfigClockSource>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014e0:	f7ff fcd4 	bl	8000e8c <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <MX_TIM4_Init+0xc8>)
 80014fc:	f004 ff0d 	bl	800631a <HAL_TIMEx_HallSensor_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001506:	f7ff fcc1 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800150a:	2350      	movs	r3, #80	; 0x50
 800150c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_TIM4_Init+0xc8>)
 8001518:	f005 f912 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8001522:	f7ff fcb3 	bl	8000e8c <Error_Handler>
  }

}
 8001526:	bf00      	nop
 8001528:	3730      	adds	r7, #48	; 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000208 	.word	0x20000208
 8001534:	40000800 	.word	0x40000800

08001538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a44      	ldr	r2, [pc, #272]	; (8001668 <HAL_TIM_Base_MspInit+0x130>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d124      	bne.n	80015a4 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155e:	4a43      	ldr	r2, [pc, #268]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001564:	6613      	str	r3, [r2, #96]	; 0x60
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2101      	movs	r1, #1
 8001576:	2019      	movs	r0, #25
 8001578:	f002 f8cd 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800157c:	2019      	movs	r0, #25
 800157e:	f002 f8e4 	bl	800374a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	201a      	movs	r0, #26
 8001588:	f002 f8c5 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800158c:	201a      	movs	r0, #26
 800158e:	f002 f8dc 	bl	800374a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2103      	movs	r1, #3
 8001596:	201b      	movs	r0, #27
 8001598:	f002 f8bd 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800159c:	201b      	movs	r0, #27
 800159e:	f002 f8d4 	bl	800374a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80015a2:	e05d      	b.n	8001660 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ac:	d12a      	bne.n	8001604 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	4a2e      	ldr	r2, [pc, #184]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ba:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a28      	ldr	r2, [pc, #160]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 80015de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015e8:	2302      	movs	r3, #2
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f002 f925 	bl	800384c <HAL_GPIO_Init>
}
 8001602:	e02d      	b.n	8001660 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM4)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	; (8001670 <HAL_TIM_Base_MspInit+0x138>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d128      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a10      	ldr	r2, [pc, #64]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_W_TIM4_Pin|HALL_U_TIM4_Pin|HALL_V_TIM4_Pin;
 800163e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2302      	movs	r3, #2
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001650:	2302      	movs	r3, #2
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <HAL_TIM_Base_MspInit+0x13c>)
 800165c:	f002 f8f6 	bl	800384c <HAL_GPIO_Init>
}
 8001660:	bf00      	nop
 8001662:	3730      	adds	r7, #48	; 0x30
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40000800 	.word	0x40000800
 8001674:	48000400 	.word	0x48000400

08001678 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a38      	ldr	r2, [pc, #224]	; (8001778 <HAL_TIM_MspPostInit+0x100>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d169      	bne.n	800176e <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <HAL_TIM_MspPostInit+0x104>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	4a37      	ldr	r2, [pc, #220]	; (800177c <HAL_TIM_MspPostInit+0x104>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a6:	4b35      	ldr	r3, [pc, #212]	; (800177c <HAL_TIM_MspPostInit+0x104>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4b32      	ldr	r3, [pc, #200]	; (800177c <HAL_TIM_MspPostInit+0x104>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4a31      	ldr	r2, [pc, #196]	; (800177c <HAL_TIM_MspPostInit+0x104>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <HAL_TIM_MspPostInit+0x104>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_TIM_MspPostInit+0x104>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	4a2b      	ldr	r2, [pc, #172]	; (800177c <HAL_TIM_MspPostInit+0x104>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <HAL_TIM_MspPostInit+0x104>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80016f4:	2304      	movs	r3, #4
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4820      	ldr	r0, [pc, #128]	; (8001780 <HAL_TIM_MspPostInit+0x108>)
 8001700:	f002 f8a4 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800170e:	2302      	movs	r3, #2
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001712:	2302      	movs	r3, #2
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001716:	2304      	movs	r3, #4
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4818      	ldr	r0, [pc, #96]	; (8001784 <HAL_TIM_MspPostInit+0x10c>)
 8001722:	f002 f893 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001726:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001730:	2302      	movs	r3, #2
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001734:	2302      	movs	r3, #2
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001738:	2306      	movs	r3, #6
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f002 f881 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800174a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 800175c:	230b      	movs	r3, #11
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176a:	f002 f86f 	bl	800384c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40012c00 	.word	0x40012c00
 800177c:	40021000 	.word	0x40021000
 8001780:	48000800 	.word	0x48000800
 8001784:	48000400 	.word	0x48000400

08001788 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <MX_USART2_UART_Init+0x90>)
 800178e:	4a23      	ldr	r2, [pc, #140]	; (800181c <MX_USART2_UART_Init+0x94>)
 8001790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <MX_USART2_UART_Init+0x90>)
 8001794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <MX_USART2_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d0:	4811      	ldr	r0, [pc, #68]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017d2:	f005 f938 	bl	8006a46 <HAL_UART_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017dc:	f7ff fb56 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e0:	2100      	movs	r1, #0
 80017e2:	480d      	ldr	r0, [pc, #52]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017e4:	f007 f91f 	bl	8008a26 <HAL_UARTEx_SetTxFifoThreshold>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017ee:	f7ff fb4d 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f2:	2100      	movs	r1, #0
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <MX_USART2_UART_Init+0x90>)
 80017f6:	f007 f954 	bl	8008aa2 <HAL_UARTEx_SetRxFifoThreshold>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001800:	f7ff fb44 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_USART2_UART_Init+0x90>)
 8001806:	f007 f8d5 	bl	80089b4 <HAL_UARTEx_DisableFifoMode>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001810:	f7ff fb3c 	bl	8000e8c <Error_Handler>
  }

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200002ec 	.word	0x200002ec
 800181c:	40004400 	.word	0x40004400

08001820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_UART_MspInit+0x8c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12f      	bne.n	80018a2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_UART_MspInit+0x90>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001872:	2318      	movs	r3, #24
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001882:	2307      	movs	r3, #7
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4809      	ldr	r0, [pc, #36]	; (80018b4 <HAL_UART_MspInit+0x94>)
 800188e:	f001 ffdd 	bl	800384c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 4, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2104      	movs	r1, #4
 8001896:	2026      	movs	r0, #38	; 0x26
 8001898:	f001 ff3d 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800189c:	2026      	movs	r0, #38	; 0x26
 800189e:	f001 ff54 	bl	800374a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	; 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40004400 	.word	0x40004400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000400 	.word	0x48000400

080018b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80018be:	490e      	ldr	r1, [pc, #56]	; (80018f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <LoopForever+0xe>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d4:	4c0b      	ldr	r4, [pc, #44]	; (8001904 <LoopForever+0x16>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e2:	f7ff fc7b 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f007 f983 	bl	8008bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ea:	f7ff f937 	bl	8000b5c <main>

080018ee <LoopForever>:

LoopForever:
    b LoopForever
 80018ee:	e7fe      	b.n	80018ee <LoopForever>
  ldr   r0, =_estack
 80018f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018fc:	08008c98 	.word	0x08008c98
  ldr r2, =_sbss
 8001900:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001904:	2000037c 	.word	0x2000037c

08001908 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <COMP1_2_3_IRQHandler>

0800190a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f001 fef3 	bl	8003700 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191a:	2000      	movs	r0, #0
 800191c:	f000 f80e 	bl	800193c <HAL_InitTick>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	71fb      	strb	r3, [r7, #7]
 800192a:	e001      	b.n	8001930 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800192c:	f7ff fbc6 	bl	80010bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001930:	79fb      	ldrb	r3, [r7, #7]

}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_InitTick+0x68>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d022      	beq.n	8001996 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_InitTick+0x6c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_InitTick+0x68>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800195c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	4618      	mov	r0, r3
 8001966:	f001 fefe 	bl	8003766 <HAL_SYSTICK_Config>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10f      	bne.n	8001990 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	d809      	bhi.n	800198a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001976:	2200      	movs	r2, #0
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	f04f 30ff 	mov.w	r0, #4294967295
 800197e:	f001 feca 	bl	8003716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_InitTick+0x70>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e007      	b.n	800199a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	e004      	b.n	800199a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e001      	b.n	800199a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000008 	.word	0x20000008
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_IncTick+0x1c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_IncTick+0x20>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_IncTick+0x1c>)
 80019c0:	6013      	str	r3, [r2, #0]
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	20000378 	.word	0x20000378
 80019d0:	20000008 	.word	0x20000008

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000378 	.word	0x20000378

080019ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 031f 	and.w	r3, r3, #31
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001aa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6093      	str	r3, [r2, #8]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ace:	d101      	bne.n	8001ad4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001af2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001af6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b1e:	d101      	bne.n	8001b24 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b6e:	f043 0202 	orr.w	r2, r3, #2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <LL_ADC_IsEnabled+0x18>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <LL_ADC_IsEnabled+0x1a>
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d101      	bne.n	8001bc0 <LL_ADC_IsDisableOngoing+0x18>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <LL_ADC_IsDisableOngoing+0x1a>
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d101      	bne.n	8001be6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d101      	bne.n	8001c0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e16b      	b.n	8001f0e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe fd7d 	bl	8000744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff2c 	bl	8001aba <LL_ADC_IsDeepPowerDownEnabled>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff12 	bl	8001a96 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff47 	bl	8001b0a <LL_ADC_IsInternalRegulatorEnabled>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d113      	bne.n	8001caa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff2b 	bl	8001ae2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c8c:	4ba2      	ldr	r3, [pc, #648]	; (8001f18 <HAL_ADC_Init+0x2fc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	4aa2      	ldr	r2, [pc, #648]	; (8001f1c <HAL_ADC_Init+0x300>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c9c:	e002      	b.n	8001ca4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff2b 	bl	8001b0a <LL_ADC_IsInternalRegulatorEnabled>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	f043 0210 	orr.w	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	f043 0201 	orr.w	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff77 	bl	8001bce <LL_ADC_REG_IsConversionOngoing>
 8001ce0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 8106 	bne.w	8001efc <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 8102 	bne.w	8001efc <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d00:	f043 0202 	orr.w	r2, r3, #2
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff38 	bl	8001b82 <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d111      	bne.n	8001d3c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d1c:	f7ff ff31 	bl	8001b82 <LL_ADC_IsEnabled>
 8001d20:	4604      	mov	r4, r0
 8001d22:	487f      	ldr	r0, [pc, #508]	; (8001f20 <HAL_ADC_Init+0x304>)
 8001d24:	f7ff ff2d 	bl	8001b82 <LL_ADC_IsEnabled>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4619      	mov	r1, r3
 8001d36:	487b      	ldr	r0, [pc, #492]	; (8001f24 <HAL_ADC_Init+0x308>)
 8001d38:	f7ff fe58 	bl	80019ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7f5b      	ldrb	r3, [r3, #29]
 8001d40:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d46:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d4c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d52:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d5a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d106      	bne.n	8001d78 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	045b      	lsls	r3, r3, #17
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d009      	beq.n	8001d94 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_ADC_Init+0x30c>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff03 	bl	8001bce <LL_ADC_REG_IsConversionOngoing>
 8001dc8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff10 	bl	8001bf4 <LL_ADC_INJ_IsConversionOngoing>
 8001dd4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d16d      	bne.n	8001eb8 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d16a      	bne.n	8001eb8 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001de6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dfe:	f023 0302 	bic.w	r3, r3, #2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	69b9      	ldr	r1, [r7, #24]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d017      	beq.n	8001e44 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6911      	ldr	r1, [r2, #16]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001e42:	e013      	b.n	8001e6c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d118      	bne.n	8001ea8 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	611a      	str	r2, [r3, #16]
 8001ea6:	e007      	b.n	8001eb8 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d10c      	bne.n	8001eda <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f023 010f 	bic.w	r1, r3, #15
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed8:	e007      	b.n	8001eea <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 020f 	bic.w	r2, r2, #15
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001efa:	e007      	b.n	8001f0c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	f043 0210 	orr.w	r2, r3, #16
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd90      	pop	{r4, r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	053e2d63 	.word	0x053e2d63
 8001f20:	50000100 	.word	0x50000100
 8001f24:	50000300 	.word	0x50000300
 8001f28:	fff04007 	.word	0xfff04007

08001f2c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f48:	4883      	ldr	r0, [pc, #524]	; (8002158 <HAL_ADC_IRQHandler+0x22c>)
 8001f4a:	f7ff fd88 	bl	8001a5e <LL_ADC_GetMultimode>
 8001f4e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d017      	beq.n	8001f8a <HAL_ADC_IRQHandler+0x5e>
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fded 	bl	8002b5c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2202      	movs	r2, #2
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x72>
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8085 	beq.w	80020b4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d07f      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fd1e 	bl	8001a12 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d064      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a5e      	ldr	r2, [pc, #376]	; (800215c <HAL_ADC_IRQHandler+0x230>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d002      	beq.n	8001fec <HAL_ADC_IRQHandler+0xc0>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	e001      	b.n	8001ff0 <HAL_ADC_IRQHandler+0xc4>
 8001fec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d008      	beq.n	800200a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d002      	beq.n	800200a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b09      	cmp	r3, #9
 8002008:	d104      	bne.n	8002014 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	623b      	str	r3, [r7, #32]
 8002012:	e00d      	b.n	8002030 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a50      	ldr	r2, [pc, #320]	; (800215c <HAL_ADC_IRQHandler+0x230>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d002      	beq.n	8002024 <HAL_ADC_IRQHandler+0xf8>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	e001      	b.n	8002028 <HAL_ADC_IRQHandler+0xfc>
 8002024:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002028:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d135      	bne.n	80020a6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b08      	cmp	r3, #8
 8002046:	d12e      	bne.n	80020a6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fdbe 	bl	8001bce <LL_ADC_REG_IsConversionOngoing>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11a      	bne.n	800208e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 020c 	bic.w	r2, r2, #12
 8002066:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d112      	bne.n	80020a6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	65da      	str	r2, [r3, #92]	; 0x5c
 800208c:	e00b      	b.n	80020a6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f95a 	bl	8002360 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	220c      	movs	r2, #12
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x19c>
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10b      	bne.n	80020e0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 809e 	beq.w	8002210 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8098 	beq.w	8002210 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fc9b 	bl	8001a38 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002102:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fc82 	bl	8001a12 <LL_ADC_REG_IsTriggerSourceSWStart>
 800210e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_ADC_IRQHandler+0x230>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d002      	beq.n	8002120 <HAL_ADC_IRQHandler+0x1f4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e001      	b.n	8002124 <HAL_ADC_IRQHandler+0x1f8>
 8002120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	4293      	cmp	r3, r2
 800212a:	d008      	beq.n	800213e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b06      	cmp	r3, #6
 8002136:	d002      	beq.n	800213e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b07      	cmp	r3, #7
 800213c:	d104      	bne.n	8002148 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	e011      	b.n	800216c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a03      	ldr	r2, [pc, #12]	; (800215c <HAL_ADC_IRQHandler+0x230>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d006      	beq.n	8002160 <HAL_ADC_IRQHandler+0x234>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	e005      	b.n	8002164 <HAL_ADC_IRQHandler+0x238>
 8002158:	50000300 	.word	0x50000300
 800215c:	50000100 	.word	0x50000100
 8002160:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002164:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002178:	2b00      	cmp	r3, #0
 800217a:	d142      	bne.n	8002202 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03f      	beq.n	8002202 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	d13a      	bne.n	8002202 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d133      	bne.n	8002202 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d12e      	bne.n	8002202 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fd23 	bl	8001bf4 <LL_ADC_INJ_IsConversionOngoing>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d11a      	bne.n	80021ea <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021c2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d112      	bne.n	8002202 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80021e8:	e00b      	b.n	8002202 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	f043 0210 	orr.w	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fba0 	bl	8000948 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2260      	movs	r2, #96	; 0x60
 800220e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d011      	beq.n	800223e <HAL_ADC_IRQHandler+0x312>
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00c      	beq.n	800223e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f89f 	bl	8002374 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2280      	movs	r2, #128	; 0x80
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d012      	beq.n	800226e <HAL_ADC_IRQHandler+0x342>
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fc68 	bl	8002b34 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <HAL_ADC_IRQHandler+0x372>
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00d      	beq.n	800229e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fc5a 	bl	8002b48 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d036      	beq.n	8002316 <HAL_ADC_IRQHandler+0x3ea>
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d031      	beq.n	8002316 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80022ba:	2301      	movs	r3, #1
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	e014      	b.n	80022ea <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022c6:	4825      	ldr	r0, [pc, #148]	; (800235c <HAL_ADC_IRQHandler+0x430>)
 80022c8:	f7ff fbd7 	bl	8001a7a <LL_ADC_GetMultiDMATransfer>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80022d2:	2301      	movs	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e008      	b.n	80022ea <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80022e6:	2301      	movs	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10e      	bne.n	800230e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002300:	f043 0202 	orr.w	r2, r3, #2
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f83d 	bl	8002388 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2210      	movs	r2, #16
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d018      	beq.n	8002352 <HAL_ADC_IRQHandler+0x426>
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002326:	2b00      	cmp	r3, #0
 8002328:	d013      	beq.n	8002352 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233a:	f043 0208 	orr.w	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fbe7 	bl	8002b20 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	; 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	50000300 	.word	0x50000300

08002360 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fbea 	bl	8001b82 <LL_ADC_IsEnabled>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d146      	bne.n	8002442 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <ADC_Enable+0xb0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00d      	beq.n	80023de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e032      	b.n	8002444 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fba5 	bl	8001b32 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023e8:	f7ff faf4 	bl	80019d4 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ee:	e021      	b.n	8002434 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fbc4 	bl	8001b82 <LL_ADC_IsEnabled>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d104      	bne.n	800240a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fb94 	bl	8001b32 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800240a:	f7ff fae3 	bl	80019d4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d90d      	bls.n	8002434 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	f043 0210 	orr.w	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e007      	b.n	8002444 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d1d6      	bne.n	80023f0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	8000003f 	.word	0x8000003f

08002450 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fba3 	bl	8001ba8 <LL_ADC_IsDisableOngoing>
 8002462:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fb8a 	bl	8001b82 <LL_ADC_IsEnabled>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d040      	beq.n	80024f6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d13d      	bne.n	80024f6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030d 	and.w	r3, r3, #13
 8002484:	2b01      	cmp	r3, #1
 8002486:	d10c      	bne.n	80024a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fb64 	bl	8001b5a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2203      	movs	r2, #3
 8002498:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800249a:	f7ff fa9b 	bl	80019d4 <HAL_GetTick>
 800249e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024a0:	e022      	b.n	80024e8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	f043 0210 	orr.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e01c      	b.n	80024f8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024be:	f7ff fa89 	bl	80019d4 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d90d      	bls.n	80024e8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	f043 0210 	orr.w	r2, r3, #16
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e007      	b.n	80024f8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1e3      	bne.n	80024be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <LL_ADC_SetCommonPathInternalCh>:
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_GetCommonPathInternalCh>:
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <LL_ADC_SetOffset>:
{
 8002544:	b490      	push	{r4, r7}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3360      	adds	r3, #96	; 0x60
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002560:	6822      	ldr	r2, [r4, #0]
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <LL_ADC_SetOffset+0x40>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	4313      	orrs	r3, r2
 8002572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002576:	6023      	str	r3, [r4, #0]
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bc90      	pop	{r4, r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	03fff000 	.word	0x03fff000

08002588 <LL_ADC_GetOffsetChannel>:
{
 8002588:	b490      	push	{r4, r7}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	461a      	mov	r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc90      	pop	{r4, r7}
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_SetOffsetState>:
{
 80025b0:	b490      	push	{r4, r7}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3360      	adds	r3, #96	; 0x60
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	6023      	str	r3, [r4, #0]
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc90      	pop	{r4, r7}
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_SetOffsetSign>:
{
 80025e0:	b490      	push	{r4, r7}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3360      	adds	r3, #96	; 0x60
 80025f0:	461a      	mov	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4313      	orrs	r3, r2
 8002604:	6023      	str	r3, [r4, #0]
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bc90      	pop	{r4, r7}
 800260e:	4770      	bx	lr

08002610 <LL_ADC_SetOffsetSaturation>:
{
 8002610:	b490      	push	{r4, r7}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3360      	adds	r3, #96	; 0x60
 8002620:	461a      	mov	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4313      	orrs	r3, r2
 8002634:	6023      	str	r3, [r4, #0]
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bc90      	pop	{r4, r7}
 800263e:	4770      	bx	lr

08002640 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	615a      	str	r2, [r3, #20]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_ADC_INJ_GetTrigAuto>:
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_ADC_SetChannelSamplingTime>:
{
 8002682:	b490      	push	{r4, r7}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3314      	adds	r3, #20
 8002692:	461a      	mov	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	0e5b      	lsrs	r3, r3, #25
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	0d1b      	lsrs	r3, r3, #20
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	2107      	movs	r1, #7
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	401a      	ands	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0d1b      	lsrs	r3, r3, #20
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	6023      	str	r3, [r4, #0]
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc90      	pop	{r4, r7}
 80026d0:	4770      	bx	lr
	...

080026d4 <LL_ADC_SetChannelSingleDiff>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	43db      	mvns	r3, r3
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0318 	and.w	r3, r3, #24
 80026f6:	4908      	ldr	r1, [pc, #32]	; (8002718 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026f8:	40d9      	lsrs	r1, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	400b      	ands	r3, r1
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	431a      	orrs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	0007ffff 	.word	0x0007ffff

0800271c <LL_ADC_GetMultimode>:
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 031f 	and.w	r3, r3, #31
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_IsEnabled>:
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <LL_ADC_IsEnabled+0x18>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <LL_ADC_IsEnabled+0x1a>
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_ADC_StartCalibration>:
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800277a:	4313      	orrs	r3, r2
 800277c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_IsCalibrationOnGoing>:
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027a4:	d101      	bne.n	80027aa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_REG_IsConversionOngoing>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d101      	bne.n	80027d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_INJ_StartConversion>:
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f2:	f043 0208 	orr.w	r2, r3, #8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_INJ_IsConversionOngoing>:
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b08      	cmp	r3, #8
 8002818:	d101      	bne.n	800281e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_ADCEx_Calibration_Start+0x1c>
 8002844:	2302      	movs	r3, #2
 8002846:	e04d      	b.n	80028e4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff fdfd 	bl	8002450 <ADC_Disable>
 8002856:	4603      	mov	r3, r0
 8002858:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d136      	bne.n	80028ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002868:	f023 0302 	bic.w	r3, r3, #2
 800286c:	f043 0202 	orr.w	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff6f 	bl	800275e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002880:	e014      	b.n	80028ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3301      	adds	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_ADCEx_Calibration_Start+0xc0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d90d      	bls.n	80028ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	f023 0312 	bic.w	r3, r3, #18
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e01b      	b.n	80028e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff6d 	bl	8002790 <LL_ADC_IsCalibrationOnGoing>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e2      	bne.n	8002882 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80028cc:	e005      	b.n	80028da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	0004de01 	.word	0x0004de01

080028f0 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f8:	486e      	ldr	r0, [pc, #440]	; (8002ab4 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80028fa:	f7ff ff0f 	bl	800271c <LL_ADC_GetMultimode>
 80028fe:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff7e 	bl	8002806 <LL_ADC_INJ_IsConversionOngoing>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
 8002912:	e0ca      	b.n	8002aaa <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800291e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b2      	b.n	8002aaa <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_ADCEx_InjectedStart_IT+0x62>
 800294e:	2302      	movs	r3, #2
 8002950:	e0ab      	b.n	8002aaa <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fd1e 	bl	800239c <ADC_Enable>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 809a 	bne.w	8002aa0 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d006      	beq.n	8002986 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297c:	f023 0208 	bic.w	r2, r3, #8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	661a      	str	r2, [r3, #96]	; 0x60
 8002984:	e002      	b.n	800298c <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a44      	ldr	r2, [pc, #272]	; (8002ab8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d002      	beq.n	80029b0 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	e001      	b.n	80029b4 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80029b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d002      	beq.n	80029c2 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2260      	movs	r2, #96	; 0x60
 80029d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029fa:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d110      	bne.n	8002a26 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0220 	bic.w	r2, r2, #32
 8002a12:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a22:	605a      	str	r2, [r3, #4]
          break;
 8002a24:	e010      	b.n	8002a48 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a34:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0220 	orr.w	r2, r2, #32
 8002a44:	605a      	str	r2, [r3, #4]
          break;
 8002a46:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d002      	beq.n	8002a58 <HAL_ADCEx_InjectedStart_IT+0x168>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	e001      	b.n	8002a5c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8002a58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d008      	beq.n	8002a76 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d002      	beq.n	8002a76 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b07      	cmp	r3, #7
 8002a74:	d10d      	bne.n	8002a92 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fdf3 	bl	8002666 <LL_ADC_INJ_GetTrigAuto>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d110      	bne.n	8002aa8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fea7 	bl	80027de <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002a90:	e00a      	b.n	8002aa8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a9e:	e003      	b.n	8002aa8 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	50000300 	.word	0x50000300
 8002ab8:	50000100 	.word	0x50000100

08002abc <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f240 2215 	movw	r2, #533	; 0x215
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00e      	beq.n	8002aee <HAL_ADCEx_InjectedGetValue+0x32>
 8002ad0:	f240 321b 	movw	r2, #795	; 0x31b
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_ADCEx_InjectedGetValue+0x26>
 8002ad8:	f240 120f 	movw	r2, #271	; 0x10f
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00c      	beq.n	8002afa <HAL_ADCEx_InjectedGetValue+0x3e>
 8002ae0:	e011      	b.n	8002b06 <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aea:	60fb      	str	r3, [r7, #12]
      break;
 8002aec:	e011      	b.n	8002b12 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	60fb      	str	r3, [r7, #12]
      break;
 8002af8:	e00b      	b.n	8002b12 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b02:	60fb      	str	r3, [r7, #12]
      break;
 8002b04:	e005      	b.n	8002b12 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b0e:	60fb      	str	r3, [r7, #12]
      break;
 8002b10:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0a8      	sub	sp, #160	; 0xa0
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002b94:	2302      	movs	r3, #2
 8002b96:	f000 bc39 	b.w	800340c <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d130      	bne.n	8002c14 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	d179      	bne.n	8002cae <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	025b      	lsls	r3, r3, #9
 8002bca:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002bd6:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002be2:	e007      	b.n	8002bf4 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	025b      	lsls	r3, r3, #9
 8002bec:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8002bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bfa:	4ba3      	ldr	r3, [pc, #652]	; (8002e88 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002c06:	430b      	orrs	r3, r1
 8002c08:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c10:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002c12:	e04c      	b.n	8002cae <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d11d      	bne.n	8002c58 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002c40:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c4c:	e004      	b.n	8002c58 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	f003 021f 	and.w	r2, r3, #31
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c9e:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	430b      	orrs	r3, r1
 8002cac:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fda7 	bl	8002806 <LL_ADC_INJ_IsConversionOngoing>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d124      	bne.n	8002d08 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d112      	bne.n	8002cee <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002cd8:	055a      	lsls	r2, r3, #21
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ce0:	051b      	lsls	r3, r3, #20
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	e00c      	b.n	8002d08 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002cfe:	055a      	lsls	r2, r3, #21
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fd53 	bl	80027b8 <LL_ADC_REG_IsConversionOngoing>
 8002d12:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fd73 	bl	8002806 <LL_ADC_INJ_IsConversionOngoing>
 8002d20:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 81d4 	bne.w	80030d6 <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 81cf 	bne.w	80030d6 <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d116      	bne.n	8002d76 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d108      	bne.n	8002d64 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002d60:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002d62:	e01f      	b.n	8002da4 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002d72:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002d74:	e016      	b.n	8002da4 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d109      	bne.n	8002d94 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002d92:	e007      	b.n	8002da4 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002da2:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d110      	bne.n	8002dd0 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0202 	orr.w	r2, r2, #2
 8002dcc:	611a      	str	r2, [r3, #16]
 8002dce:	e007      	b.n	8002de0 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0202 	bic.w	r2, r2, #2
 8002dde:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002de8:	d10f      	bne.n	8002e0a <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7ff fc44 	bl	8002682 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fc1c 	bl	8002640 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e08:	e00e      	b.n	8002e28 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f7ff fc33 	bl	8002682 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fc0c 	bl	8002640 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d025      	beq.n	8002e96 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e5a:	f7ff fb73 	bl	8002544 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6919      	ldr	r1, [r3, #16]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f7ff fbb8 	bl	80025e0 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e84:	e003      	b.n	8002e8e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8002e86:	bf00      	nop
 8002e88:	04104000 	.word	0x04104000
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f7ff fbbe 	bl	8002610 <LL_ADC_SetOffsetSaturation>
 8002e94:	e11f      	b.n	80030d6 <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fb73 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fb68 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	0e9b      	lsrs	r3, r3, #26
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	e014      	b.n	8002eec <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fb5d 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	e00a      	b.n	8002f1a <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d106      	bne.n	8002f2c <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fb42 	bl	80025b0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fb28 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fb1d 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	f003 021f 	and.w	r2, r3, #31
 8002f56:	e010      	b.n	8002f7a <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fb12 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8002f64:	4603      	mov	r3, r0
 8002f66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d105      	bne.n	8002f92 <HAL_ADCEx_InjectedConfigChannel+0x422>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	e00a      	b.n	8002fa8 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8002fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d106      	bne.n	8002fba <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fafb 	bl	80025b0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fae1 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <HAL_ADCEx_InjectedConfigChannel+0x476>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fad6 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	e010      	b.n	8003008 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2102      	movs	r1, #2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff facb 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	e00a      	b.n	8003036 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800302e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	429a      	cmp	r2, r3
 8003038:	d106      	bne.n	8003048 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2200      	movs	r2, #0
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fab4 	bl	80025b0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2103      	movs	r1, #3
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fa9a 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8003054:	4603      	mov	r3, r0
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <HAL_ADCEx_InjectedConfigChannel+0x504>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2103      	movs	r1, #3
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fa8f 	bl	8002588 <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	f003 021f 	and.w	r2, r3, #31
 8003072:	e010      	b.n	8003096 <HAL_ADCEx_InjectedConfigChannel+0x526>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2103      	movs	r1, #3
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fa84 	bl	8002588 <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 800308c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_ADCEx_InjectedConfigChannel+0x53e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0e9b      	lsrs	r3, r3, #26
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	e00a      	b.n	80030c4 <HAL_ADCEx_InjectedConfigChannel+0x554>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80030bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d106      	bne.n	80030d6 <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2103      	movs	r1, #3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fa6d 	bl	80025b0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fb2c 	bl	8002738 <LL_ADC_IsEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 810c 	bne.w	8003300 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6819      	ldr	r1, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f7ff faed 	bl	80026d4 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	4aab      	ldr	r2, [pc, #684]	; (80033ac <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	f040 80fd 	bne.w	8003300 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	0e9b      	lsrs	r3, r3, #26
 800311c:	3301      	adds	r3, #1
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2b09      	cmp	r3, #9
 8003124:	bf94      	ite	ls
 8003126:	2301      	movls	r3, #1
 8003128:	2300      	movhi	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e012      	b.n	8003154 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800313c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3301      	adds	r3, #1
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2b09      	cmp	r3, #9
 800314c:	bf94      	ite	ls
 800314e:	2301      	movls	r3, #1
 8003150:	2300      	movhi	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d064      	beq.n	8003222 <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	3301      	adds	r3, #1
 800316c:	069b      	lsls	r3, r3, #26
 800316e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003172:	e00e      	b.n	8003192 <HAL_ADCEx_InjectedConfigChannel+0x622>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	3301      	adds	r3, #1
 800318c:	069b      	lsls	r3, r3, #26
 800318e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_ADCEx_InjectedConfigChannel+0x642>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	0e9b      	lsrs	r3, r3, #26
 80031a4:	3301      	adds	r3, #1
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2101      	movs	r1, #1
 80031ac:	fa01 f303 	lsl.w	r3, r1, r3
 80031b0:	e010      	b.n	80031d4 <HAL_ADCEx_InjectedConfigChannel+0x664>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	3301      	adds	r3, #1
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2101      	movs	r1, #1
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	ea42 0103 	orr.w	r1, r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <HAL_ADCEx_InjectedConfigChannel+0x68a>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	3301      	adds	r3, #1
 80031ec:	f003 021f 	and.w	r2, r3, #31
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	051b      	lsls	r3, r3, #20
 80031f8:	e011      	b.n	800321e <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	3301      	adds	r3, #1
 8003212:	f003 021f 	and.w	r2, r3, #31
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	051b      	lsls	r3, r3, #20
 800321e:	430b      	orrs	r3, r1
 8003220:	e069      	b.n	80032f6 <HAL_ADCEx_InjectedConfigChannel+0x786>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	0e9b      	lsrs	r3, r3, #26
 8003234:	3301      	adds	r3, #1
 8003236:	069b      	lsls	r3, r3, #26
 8003238:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800323c:	e00e      	b.n	800325c <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	623b      	str	r3, [r7, #32]
  return result;
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	3301      	adds	r3, #1
 8003256:	069b      	lsls	r3, r3, #26
 8003258:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0e9b      	lsrs	r3, r3, #26
 800326e:	3301      	adds	r3, #1
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	e010      	b.n	800329e <HAL_ADCEx_InjectedConfigChannel+0x72e>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	61bb      	str	r3, [r7, #24]
  return result;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	ea42 0103 	orr.w	r1, r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10d      	bne.n	80032ca <HAL_ADCEx_InjectedConfigChannel+0x75a>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	3301      	adds	r3, #1
 80032b6:	f003 021f 	and.w	r2, r3, #31
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	3b1e      	subs	r3, #30
 80032c2:	051b      	lsls	r3, r3, #20
 80032c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032c8:	e014      	b.n	80032f4 <HAL_ADCEx_InjectedConfigChannel+0x784>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	613b      	str	r3, [r7, #16]
  return result;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f003 021f 	and.w	r2, r3, #31
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	3b1e      	subs	r3, #30
 80032ee:	051b      	lsls	r3, r3, #20
 80032f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032f4:	430b      	orrs	r3, r1
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	6892      	ldr	r2, [r2, #8]
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7ff f9c1 	bl	8002682 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d079      	beq.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800330c:	4829      	ldr	r0, [pc, #164]	; (80033b4 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800330e:	f7ff f90a 	bl	8002526 <LL_ADC_GetCommonPathInternalCh>
 8003312:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a27      	ldr	r2, [pc, #156]	; (80033b8 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d126      	bne.n	8003378 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800332a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800332e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d120      	bne.n	8003378 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333e:	d15f      	bne.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003348:	4619      	mov	r1, r3
 800334a:	481a      	ldr	r0, [pc, #104]	; (80033b4 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800334c:	f7ff f8d8 	bl	8002500 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	099a      	lsrs	r2, r3, #6
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003368:	e002      	b.n	8003370 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3b01      	subs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f9      	bne.n	800336a <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003376:	e043      	b.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d126      	bne.n	80033d0 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d120      	bne.n	80033d0 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d033      	beq.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800339c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a0:	4619      	mov	r1, r3
 80033a2:	4804      	ldr	r0, [pc, #16]	; (80033b4 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80033a4:	f7ff f8ac 	bl	8002500 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033a8:	e02a      	b.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x890>
 80033aa:	bf00      	nop
 80033ac:	407f0000 	.word	0x407f0000
 80033b0:	80080000 	.word	0x80080000
 80033b4:	50000300 	.word	0x50000300
 80033b8:	c3210000 	.word	0xc3210000
 80033bc:	90c00010 	.word	0x90c00010
 80033c0:	20000000 	.word	0x20000000
 80033c4:	053e2d63 	.word	0x053e2d63
 80033c8:	c7520000 	.word	0xc7520000
 80033cc:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d112      	bne.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10c      	bne.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033f8:	4619      	mov	r1, r3
 80033fa:	4808      	ldr	r0, [pc, #32]	; (800341c <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 80033fc:	f7ff f880 	bl	8002500 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003408:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800340c:	4618      	mov	r0, r3
 800340e:	37a0      	adds	r7, #160	; 0xa0
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	cb840000 	.word	0xcb840000
 8003418:	50000100 	.word	0x50000100
 800341c:	50000300 	.word	0x50000300

08003420 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b0a1      	sub	sp, #132	; 0x84
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800343a:	2302      	movs	r3, #2
 800343c:	e087      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344e:	d102      	bne.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003450:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	e001      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e06a      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff f99c 	bl	80027b8 <LL_ADC_REG_IsConversionOngoing>
 8003480:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff f996 	bl	80027b8 <LL_ADC_REG_IsConversionOngoing>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d14c      	bne.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003494:	2b00      	cmp	r3, #0
 8003496:	d149      	bne.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003498:	4b30      	ldr	r3, [pc, #192]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800349a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d028      	beq.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034b6:	035b      	lsls	r3, r3, #13
 80034b8:	430b      	orrs	r3, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034c4:	f7ff f938 	bl	8002738 <LL_ADC_IsEnabled>
 80034c8:	4604      	mov	r4, r0
 80034ca:	4823      	ldr	r0, [pc, #140]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80034cc:	f7ff f934 	bl	8002738 <LL_ADC_IsEnabled>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4323      	orrs	r3, r4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d133      	bne.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034e0:	f023 030f 	bic.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	6811      	ldr	r1, [r2, #0]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	6892      	ldr	r2, [r2, #8]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034f4:	e024      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003500:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003502:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003506:	f7ff f917 	bl	8002738 <LL_ADC_IsEnabled>
 800350a:	4604      	mov	r4, r0
 800350c:	4812      	ldr	r0, [pc, #72]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800350e:	f7ff f913 	bl	8002738 <LL_ADC_IsEnabled>
 8003512:	4603      	mov	r3, r0
 8003514:	4323      	orrs	r3, r4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d112      	bne.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800351a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003522:	f023 030f 	bic.w	r3, r3, #15
 8003526:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003528:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800352a:	e009      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800353e:	e000      	b.n	8003542 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003540:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800354a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800354e:	4618      	mov	r0, r3
 8003550:	3784      	adds	r7, #132	; 0x84
 8003552:	46bd      	mov	sp, r7
 8003554:	bd90      	pop	{r4, r7, pc}
 8003556:	bf00      	nop
 8003558:	50000100 	.word	0x50000100
 800355c:	50000300 	.word	0x50000300

08003560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800357c:	4013      	ands	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800358c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	60d3      	str	r3, [r2, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 0307 	and.w	r3, r3, #7
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db0b      	blt.n	80035ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	f003 021f 	and.w	r2, r3, #31
 80035dc:	4907      	ldr	r1, [pc, #28]	; (80035fc <__NVIC_EnableIRQ+0x38>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2001      	movs	r0, #1
 80035e6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000e100 	.word	0xe000e100

08003600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003610:	2b00      	cmp	r3, #0
 8003612:	db0a      	blt.n	800362a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	490c      	ldr	r1, [pc, #48]	; (800364c <__NVIC_SetPriority+0x4c>)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	440b      	add	r3, r1
 8003624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003628:	e00a      	b.n	8003640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4908      	ldr	r1, [pc, #32]	; (8003650 <__NVIC_SetPriority+0x50>)
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	3b04      	subs	r3, #4
 8003638:	0112      	lsls	r2, r2, #4
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	440b      	add	r3, r1
 800363e:	761a      	strb	r2, [r3, #24]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000e100 	.word	0xe000e100
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f1c3 0307 	rsb	r3, r3, #7
 800366e:	2b04      	cmp	r3, #4
 8003670:	bf28      	it	cs
 8003672:	2304      	movcs	r3, #4
 8003674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3304      	adds	r3, #4
 800367a:	2b06      	cmp	r3, #6
 800367c:	d902      	bls.n	8003684 <NVIC_EncodePriority+0x30>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3b03      	subs	r3, #3
 8003682:	e000      	b.n	8003686 <NVIC_EncodePriority+0x32>
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	f04f 32ff 	mov.w	r2, #4294967295
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	401a      	ands	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800369c:	f04f 31ff 	mov.w	r1, #4294967295
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	43d9      	mvns	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	4313      	orrs	r3, r2
         );
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036cc:	d301      	bcc.n	80036d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ce:	2301      	movs	r3, #1
 80036d0:	e00f      	b.n	80036f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <SysTick_Config+0x40>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036da:	210f      	movs	r1, #15
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295
 80036e0:	f7ff ff8e 	bl	8003600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <SysTick_Config+0x40>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ea:	4b04      	ldr	r3, [pc, #16]	; (80036fc <SysTick_Config+0x40>)
 80036ec:	2207      	movs	r2, #7
 80036ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	e000e010 	.word	0xe000e010

08003700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff29 	bl	8003560 <__NVIC_SetPriorityGrouping>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003724:	f7ff ff40 	bl	80035a8 <__NVIC_GetPriorityGrouping>
 8003728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	6978      	ldr	r0, [r7, #20]
 8003730:	f7ff ff90 	bl	8003654 <NVIC_EncodePriority>
 8003734:	4602      	mov	r2, r0
 8003736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff5f 	bl	8003600 <__NVIC_SetPriority>
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff33 	bl	80035c4 <__NVIC_EnableIRQ>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff ffa4 	bl	80036bc <SysTick_Config>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d00d      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e047      	b.n	8003842 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 020e 	bic.w	r2, r2, #14
 80037c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f003 021f 	and.w	r2, r3, #31
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f202 	lsl.w	r2, r1, r2
 80037f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00c      	beq.n	8003822 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003816:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003820:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
    }
  }
  return status;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800385a:	e15a      	b.n	8003b12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 814c 	beq.w	8003b0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d00b      	beq.n	8003894 <HAL_GPIO_Init+0x48>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d007      	beq.n	8003894 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003888:	2b11      	cmp	r3, #17
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b12      	cmp	r3, #18
 8003892:	d130      	bne.n	80038f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2203      	movs	r2, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ca:	2201      	movs	r2, #1
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	f003 0201 	and.w	r2, r3, #1
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	2203      	movs	r2, #3
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0xea>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b12      	cmp	r3, #18
 8003934:	d123      	bne.n	800397e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	08da      	lsrs	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3208      	adds	r2, #8
 800393e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	220f      	movs	r2, #15
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	6939      	ldr	r1, [r7, #16]
 800397a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	2203      	movs	r2, #3
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4013      	ands	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0203 	and.w	r2, r3, #3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80a6 	beq.w	8003b0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c0:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <HAL_GPIO_Init+0x2e4>)
 80039c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c4:	4a5a      	ldr	r2, [pc, #360]	; (8003b30 <HAL_GPIO_Init+0x2e4>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6613      	str	r3, [r2, #96]	; 0x60
 80039cc:	4b58      	ldr	r3, [pc, #352]	; (8003b30 <HAL_GPIO_Init+0x2e4>)
 80039ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d8:	4a56      	ldr	r2, [pc, #344]	; (8003b34 <HAL_GPIO_Init+0x2e8>)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	220f      	movs	r2, #15
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a02:	d01f      	beq.n	8003a44 <HAL_GPIO_Init+0x1f8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a4c      	ldr	r2, [pc, #304]	; (8003b38 <HAL_GPIO_Init+0x2ec>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d019      	beq.n	8003a40 <HAL_GPIO_Init+0x1f4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a4b      	ldr	r2, [pc, #300]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_GPIO_Init+0x1f0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a4a      	ldr	r2, [pc, #296]	; (8003b40 <HAL_GPIO_Init+0x2f4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00d      	beq.n	8003a38 <HAL_GPIO_Init+0x1ec>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a49      	ldr	r2, [pc, #292]	; (8003b44 <HAL_GPIO_Init+0x2f8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <HAL_GPIO_Init+0x1e8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a48      	ldr	r2, [pc, #288]	; (8003b48 <HAL_GPIO_Init+0x2fc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_GPIO_Init+0x1e4>
 8003a2c:	2305      	movs	r3, #5
 8003a2e:	e00a      	b.n	8003a46 <HAL_GPIO_Init+0x1fa>
 8003a30:	2306      	movs	r3, #6
 8003a32:	e008      	b.n	8003a46 <HAL_GPIO_Init+0x1fa>
 8003a34:	2304      	movs	r3, #4
 8003a36:	e006      	b.n	8003a46 <HAL_GPIO_Init+0x1fa>
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e004      	b.n	8003a46 <HAL_GPIO_Init+0x1fa>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e002      	b.n	8003a46 <HAL_GPIO_Init+0x1fa>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_GPIO_Init+0x1fa>
 8003a44:	2300      	movs	r3, #0
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	f002 0203 	and.w	r2, r2, #3
 8003a4c:	0092      	lsls	r2, r2, #2
 8003a4e:	4093      	lsls	r3, r2
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a56:	4937      	ldr	r1, [pc, #220]	; (8003b34 <HAL_GPIO_Init+0x2e8>)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <HAL_GPIO_Init+0x300>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a88:	4a30      	ldr	r2, [pc, #192]	; (8003b4c <HAL_GPIO_Init+0x300>)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a8e:	4b2f      	ldr	r3, [pc, #188]	; (8003b4c <HAL_GPIO_Init+0x300>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ab2:	4a26      	ldr	r2, [pc, #152]	; (8003b4c <HAL_GPIO_Init+0x300>)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab8:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_GPIO_Init+0x300>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003adc:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <HAL_GPIO_Init+0x300>)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <HAL_GPIO_Init+0x300>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b06:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <HAL_GPIO_Init+0x300>)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f47f ae9d 	bne.w	800385c <HAL_GPIO_Init+0x10>
  }
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40010000 	.word	0x40010000
 8003b38:	48000400 	.word	0x48000400
 8003b3c:	48000800 	.word	0x48000800
 8003b40:	48000c00 	.word	0x48000c00
 8003b44:	48001000 	.word	0x48001000
 8003b48:	48001400 	.word	0x48001400
 8003b4c:	40010400 	.word	0x40010400

08003b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e001      	b.n	8003b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d006      	beq.n	8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b96:	4a05      	ldr	r2, [pc, #20]	; (8003bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc ff3e 	bl	8000a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40010400 	.word	0x40010400

08003bb0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0bb      	b.n	8003d3e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d101      	bne.n	8003bd6 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e0b3      	b.n	8003d3e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d101      	bne.n	8003be6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0ab      	b.n	8003d3e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be6:	4b58      	ldr	r3, [pc, #352]	; (8003d48 <HAL_OPAMP_Init+0x198>)
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	4a57      	ldr	r2, [pc, #348]	; (8003d48 <HAL_OPAMP_Init+0x198>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8003bf2:	4b55      	ldr	r3, [pc, #340]	; (8003d48 <HAL_OPAMP_Init+0x198>)
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd f9cc 	bl	8000fb0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d003      	beq.n	8003c28 <HAL_OPAMP_Init+0x78>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b60      	cmp	r3, #96	; 0x60
 8003c26:	d133      	bne.n	8003c90 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 0110 	bic.w	r1, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <HAL_OPAMP_Init+0x19c>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6851      	ldr	r1, [r2, #4]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6892      	ldr	r2, [r2, #8]
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6912      	ldr	r2, [r2, #16]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	7d09      	ldrb	r1, [r1, #20]
 8003c5c:	2901      	cmp	r1, #1
 8003c5e:	d102      	bne.n	8003c66 <HAL_OPAMP_Init+0xb6>
 8003c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c64:	e000      	b.n	8003c68 <HAL_OPAMP_Init+0xb8>
 8003c66:	2100      	movs	r1, #0
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c6e:	4311      	orrs	r1, r2
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c7a:	04d2      	lsls	r2, r2, #19
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c82:	0612      	lsls	r2, r2, #24
 8003c84:	4311      	orrs	r1, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e035      	b.n	8003cfc <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 0110 	bic.w	r1, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_OPAMP_Init+0x19c>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6851      	ldr	r1, [r2, #4]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6892      	ldr	r2, [r2, #8]
 8003cb8:	4311      	orrs	r1, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68d2      	ldr	r2, [r2, #12]
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6912      	ldr	r2, [r2, #16]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	7d09      	ldrb	r1, [r1, #20]
 8003cca:	2901      	cmp	r1, #1
 8003ccc:	d102      	bne.n	8003cd4 <HAL_OPAMP_Init+0x124>
 8003cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cd2:	e000      	b.n	8003cd6 <HAL_OPAMP_Init+0x126>
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4311      	orrs	r1, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cdc:	4311      	orrs	r1, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ce8:	04d2      	lsls	r2, r2, #19
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf0:	0612      	lsls	r2, r2, #24
 8003cf2:	4311      	orrs	r1, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	db10      	blt.n	8003d28 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	e0003e11 	.word	0xe0003e11

08003d50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d141      	bne.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d5e:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6a:	d131      	bne.n	8003dd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d6c:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d72:	4a46      	ldr	r2, [pc, #280]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d7c:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d84:	4a41      	ldr	r2, [pc, #260]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d8c:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2232      	movs	r2, #50	; 0x32
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	4a3f      	ldr	r2, [pc, #252]	; (8003e94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	0c9b      	lsrs	r3, r3, #18
 8003d9e:	3301      	adds	r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da2:	e002      	b.n	8003daa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003daa:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db6:	d102      	bne.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f2      	bne.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dbe:	4b33      	ldr	r3, [pc, #204]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dca:	d158      	bne.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e057      	b.n	8003e80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd0:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd6:	4a2d      	ldr	r2, [pc, #180]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003de0:	e04d      	b.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de8:	d141      	bne.n	8003e6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dea:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df6:	d131      	bne.n	8003e5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfe:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e08:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e10:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2232      	movs	r2, #50	; 0x32
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	0c9b      	lsrs	r3, r3, #18
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e2e:	e002      	b.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e42:	d102      	bne.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f2      	bne.n	8003e30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e4a:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e56:	d112      	bne.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e011      	b.n	8003e80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e62:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e6c:	e007      	b.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e76:	4a05      	ldr	r2, [pc, #20]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	20000000 	.word	0x20000000
 8003e94:	431bde83 	.word	0x431bde83

08003e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e308      	b.n	80044bc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d075      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb6:	4ba3      	ldr	r3, [pc, #652]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec0:	4ba0      	ldr	r3, [pc, #640]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3e>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_OscConfig+0x44>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	4b99      	ldr	r3, [pc, #612]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d05b      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x108>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d157      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e2e3      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d106      	bne.n	8003f0c <HAL_RCC_OscConfig+0x74>
 8003efe:	4b91      	ldr	r3, [pc, #580]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a90      	ldr	r2, [pc, #576]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e01d      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x98>
 8003f16:	4b8b      	ldr	r3, [pc, #556]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a8a      	ldr	r2, [pc, #552]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b88      	ldr	r3, [pc, #544]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a87      	ldr	r2, [pc, #540]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f30:	4b84      	ldr	r3, [pc, #528]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a83      	ldr	r2, [pc, #524]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b81      	ldr	r3, [pc, #516]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a80      	ldr	r2, [pc, #512]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd fd40 	bl	80019d4 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fd fd3c 	bl	80019d4 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e2a8      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6a:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0xc0>
 8003f76:	e014      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fd2c 	bl	80019d4 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fd fd28 	bl	80019d4 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e294      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f92:	4b6c      	ldr	r3, [pc, #432]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0xe8>
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d075      	beq.n	800409a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fae:	4b65      	ldr	r3, [pc, #404]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb8:	4b62      	ldr	r3, [pc, #392]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d102      	bne.n	8003fce <HAL_RCC_OscConfig+0x136>
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d002      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x13c>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11f      	bne.n	8004014 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd4:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_OscConfig+0x154>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e267      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b55      	ldr	r3, [pc, #340]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4952      	ldr	r1, [pc, #328]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004000:	4b51      	ldr	r3, [pc, #324]	; (8004148 <HAL_RCC_OscConfig+0x2b0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd fc99 	bl	800193c <HAL_InitTick>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d043      	beq.n	8004098 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e253      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d023      	beq.n	8004064 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800401c:	4b49      	ldr	r3, [pc, #292]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a48      	ldr	r2, [pc, #288]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fcd4 	bl	80019d4 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004030:	f7fd fcd0 	bl	80019d4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e23c      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004042:	4b40      	ldr	r3, [pc, #256]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	4939      	ldr	r1, [pc, #228]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
 8004062:	e01a      	b.n	800409a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004064:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a36      	ldr	r2, [pc, #216]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 800406a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd fcb0 	bl	80019d4 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004078:	f7fd fcac 	bl	80019d4 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e218      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800408a:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x1e0>
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004098:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d03c      	beq.n	8004120 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ae:	4b25      	ldr	r3, [pc, #148]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b4:	4a23      	ldr	r2, [pc, #140]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fd fc89 	bl	80019d4 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fd fc85 	bl	80019d4 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e1f1      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0ef      	beq.n	80040c6 <HAL_RCC_OscConfig+0x22e>
 80040e6:	e01b      	b.n	8004120 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b16      	ldr	r3, [pc, #88]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	4a15      	ldr	r2, [pc, #84]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fd fc6c 	bl	80019d4 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fd fc68 	bl	80019d4 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e1d4      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ef      	bne.n	8004100 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80ab 	beq.w	8004284 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412e:	2300      	movs	r3, #0
 8004130:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004132:	4b04      	ldr	r3, [pc, #16]	; (8004144 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_RCC_OscConfig+0x2b4>
 800413e:	2301      	movs	r3, #1
 8004140:	e005      	b.n	800414e <HAL_RCC_OscConfig+0x2b6>
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	20000004 	.word	0x20000004
 800414c:	2300      	movs	r3, #0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	4baf      	ldr	r3, [pc, #700]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	4aae      	ldr	r2, [pc, #696]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415c:	6593      	str	r3, [r2, #88]	; 0x58
 800415e:	4bac      	ldr	r3, [pc, #688]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416e:	4ba9      	ldr	r3, [pc, #676]	; (8004414 <HAL_RCC_OscConfig+0x57c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417a:	4ba6      	ldr	r3, [pc, #664]	; (8004414 <HAL_RCC_OscConfig+0x57c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4aa5      	ldr	r2, [pc, #660]	; (8004414 <HAL_RCC_OscConfig+0x57c>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004186:	f7fd fc25 	bl	80019d4 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fd fc21 	bl	80019d4 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e18d      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a0:	4b9c      	ldr	r3, [pc, #624]	; (8004414 <HAL_RCC_OscConfig+0x57c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d108      	bne.n	80041c6 <HAL_RCC_OscConfig+0x32e>
 80041b4:	4b96      	ldr	r3, [pc, #600]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	4a95      	ldr	r2, [pc, #596]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c4:	e024      	b.n	8004210 <HAL_RCC_OscConfig+0x378>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d110      	bne.n	80041f0 <HAL_RCC_OscConfig+0x358>
 80041ce:	4b90      	ldr	r3, [pc, #576]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	4a8e      	ldr	r2, [pc, #568]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80041d6:	f043 0304 	orr.w	r3, r3, #4
 80041da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041de:	4b8c      	ldr	r3, [pc, #560]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	4a8a      	ldr	r2, [pc, #552]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ee:	e00f      	b.n	8004210 <HAL_RCC_OscConfig+0x378>
 80041f0:	4b87      	ldr	r3, [pc, #540]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	4a86      	ldr	r2, [pc, #536]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004200:	4b83      	ldr	r3, [pc, #524]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	4a82      	ldr	r2, [pc, #520]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d016      	beq.n	8004246 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fd fbdc 	bl	80019d4 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421e:	e00a      	b.n	8004236 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004220:	f7fd fbd8 	bl	80019d4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e142      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004236:	4b76      	ldr	r3, [pc, #472]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ed      	beq.n	8004220 <HAL_RCC_OscConfig+0x388>
 8004244:	e015      	b.n	8004272 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fd fbc5 	bl	80019d4 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fd fbc1 	bl	80019d4 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e12b      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004264:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ed      	bne.n	800424e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004272:	7ffb      	ldrb	r3, [r7, #31]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d105      	bne.n	8004284 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004278:	4b65      	ldr	r3, [pc, #404]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	4a64      	ldr	r2, [pc, #400]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 800427e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004282:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03c      	beq.n	800430a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004298:	4b5d      	ldr	r3, [pc, #372]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 800429a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429e:	4a5c      	ldr	r2, [pc, #368]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fd fb94 	bl	80019d4 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b0:	f7fd fb90 	bl	80019d4 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0fc      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042c2:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80042c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ef      	beq.n	80042b0 <HAL_RCC_OscConfig+0x418>
 80042d0:	e01b      	b.n	800430a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042d2:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80042d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d8:	4a4d      	ldr	r2, [pc, #308]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd fb77 	bl	80019d4 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ea:	f7fd fb73 	bl	80019d4 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0df      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042fc:	4b44      	ldr	r3, [pc, #272]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80042fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1ef      	bne.n	80042ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80d3 	beq.w	80044ba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004314:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b0c      	cmp	r3, #12
 800431e:	f000 808d 	beq.w	800443c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d15a      	bne.n	80043e0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a38      	ldr	r2, [pc, #224]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fd fb4d 	bl	80019d4 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433e:	f7fd fb49 	bl	80019d4 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0b5      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004350:	4b2f      	ldr	r3, [pc, #188]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800435c:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <HAL_RCC_OscConfig+0x580>)
 8004362:	4013      	ands	r3, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6a11      	ldr	r1, [r2, #32]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800436c:	3a01      	subs	r2, #1
 800436e:	0112      	lsls	r2, r2, #4
 8004370:	4311      	orrs	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004376:	0212      	lsls	r2, r2, #8
 8004378:	4311      	orrs	r1, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800437e:	0852      	lsrs	r2, r2, #1
 8004380:	3a01      	subs	r2, #1
 8004382:	0552      	lsls	r2, r2, #21
 8004384:	4311      	orrs	r1, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438a:	0852      	lsrs	r2, r2, #1
 800438c:	3a01      	subs	r2, #1
 800438e:	0652      	lsls	r2, r2, #25
 8004390:	4311      	orrs	r1, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004396:	06d2      	lsls	r2, r2, #27
 8004398:	430a      	orrs	r2, r1
 800439a:	491d      	ldr	r1, [pc, #116]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 800439c:	4313      	orrs	r3, r2
 800439e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1a      	ldr	r2, [pc, #104]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043ac:	4b18      	ldr	r3, [pc, #96]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a17      	ldr	r2, [pc, #92]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd fb0c 	bl	80019d4 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fb08 	bl	80019d4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e074      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x528>
 80043de:	e06c      	b.n	80044ba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a07      	ldr	r2, [pc, #28]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <HAL_RCC_OscConfig+0x578>)
 80043fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004406:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd fae4 	bl	80019d4 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440e:	e00e      	b.n	800442e <HAL_RCC_OscConfig+0x596>
 8004410:	40021000 	.word	0x40021000
 8004414:	40007000 	.word	0x40007000
 8004418:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fd fada 	bl	80019d4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e046      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442e:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <HAL_RCC_OscConfig+0x62c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x584>
 800443a:	e03e      	b.n	80044ba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e039      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004448:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <HAL_RCC_OscConfig+0x62c>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0203 	and.w	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	429a      	cmp	r2, r3
 800445a:	d12c      	bne.n	80044b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	3b01      	subs	r3, #1
 8004468:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d123      	bne.n	80044b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d11b      	bne.n	80044b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d113      	bne.n	80044b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	3b01      	subs	r3, #1
 800449c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d109      	bne.n	80044b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	3b01      	subs	r3, #1
 80044b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d001      	beq.n	80044ba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000

080044c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e11e      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e0:	4b91      	ldr	r3, [pc, #580]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d910      	bls.n	8004510 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b8e      	ldr	r3, [pc, #568]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 020f 	bic.w	r2, r3, #15
 80044f6:	498c      	ldr	r1, [pc, #560]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b8a      	ldr	r3, [pc, #552]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e106      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d073      	beq.n	8004604 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d129      	bne.n	8004578 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004524:	4b81      	ldr	r3, [pc, #516]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0f4      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004534:	f000 f99e 	bl	8004874 <RCC_GetSysClockFreqFromPLLSource>
 8004538:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4a7c      	ldr	r2, [pc, #496]	; (8004730 <HAL_RCC_ClockConfig+0x268>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d93f      	bls.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004556:	2b00      	cmp	r3, #0
 8004558:	d033      	beq.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800455e:	2b00      	cmp	r3, #0
 8004560:	d12f      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004562:	4b72      	ldr	r3, [pc, #456]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456a:	4a70      	ldr	r2, [pc, #448]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 800456c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004570:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e024      	b.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d107      	bne.n	8004590 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004580:	4b6a      	ldr	r3, [pc, #424]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0c6      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004590:	4b66      	ldr	r3, [pc, #408]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0be      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045a0:	f000 f8ce 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4a61      	ldr	r2, [pc, #388]	; (8004730 <HAL_RCC_ClockConfig+0x268>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d909      	bls.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b6:	4a5d      	ldr	r2, [pc, #372]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c2:	4b5a      	ldr	r3, [pc, #360]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f023 0203 	bic.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4957      	ldr	r1, [pc, #348]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d4:	f7fd f9fe 	bl	80019d4 <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045dc:	f7fd f9fa 	bl	80019d4 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e095      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b4e      	ldr	r3, [pc, #312]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 020c 	and.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	429a      	cmp	r2, r3
 8004602:	d1eb      	bne.n	80045dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d023      	beq.n	8004658 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800461c:	4b43      	ldr	r3, [pc, #268]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a42      	ldr	r2, [pc, #264]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004626:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004634:	4b3d      	ldr	r3, [pc, #244]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800463c:	4a3b      	ldr	r2, [pc, #236]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 800463e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004642:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4936      	ldr	r1, [pc, #216]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
 8004656:	e008      	b.n	800466a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d105      	bne.n	800466a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800465e:	4b33      	ldr	r3, [pc, #204]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	4a32      	ldr	r2, [pc, #200]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004668:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800466a:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d21d      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 020f 	bic.w	r2, r3, #15
 8004680:	4929      	ldr	r1, [pc, #164]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004688:	f7fd f9a4 	bl	80019d4 <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004690:	f7fd f9a0 	bl	80019d4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e03b      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1ed      	bne.n	8004690 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4917      	ldr	r1, [pc, #92]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	490f      	ldr	r1, [pc, #60]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046f2:	f000 f825 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80046f6:	4601      	mov	r1, r0
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <HAL_RCC_ClockConfig+0x26c>)
 8004704:	5cd3      	ldrb	r3, [r2, r3]
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	fa21 f303 	lsr.w	r3, r1, r3
 800470e:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <HAL_RCC_ClockConfig+0x270>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <HAL_RCC_ClockConfig+0x274>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd f910 	bl	800193c <HAL_InitTick>
 800471c:	4603      	mov	r3, r0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40022000 	.word	0x40022000
 800472c:	40021000 	.word	0x40021000
 8004730:	04c4b400 	.word	0x04c4b400
 8004734:	08008c70 	.word	0x08008c70
 8004738:	20000000 	.word	0x20000000
 800473c:	20000004 	.word	0x20000004

08004740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004746:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d102      	bne.n	8004758 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	e047      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b08      	cmp	r3, #8
 8004762:	d102      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004764:	4b26      	ldr	r3, [pc, #152]	; (8004800 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	e03e      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d136      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004776:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	3301      	adds	r3, #1
 800478c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d10c      	bne.n	80047ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004794:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800479e:	68d2      	ldr	r2, [r2, #12]
 80047a0:	0a12      	lsrs	r2, r2, #8
 80047a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	617b      	str	r3, [r7, #20]
      break;
 80047ac:	e00c      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047ae:	4a13      	ldr	r2, [pc, #76]	; (80047fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	4a10      	ldr	r2, [pc, #64]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	0a12      	lsrs	r2, r2, #8
 80047bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	617b      	str	r3, [r7, #20]
      break;
 80047c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	0e5b      	lsrs	r3, r3, #25
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	3301      	adds	r3, #1
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e001      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047e8:	693b      	ldr	r3, [r7, #16]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	00f42400 	.word	0x00f42400
 8004800:	007a1200 	.word	0x007a1200

08004804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_RCC_GetHCLKFreq+0x14>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000000 	.word	0x20000000

0800481c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004820:	f7ff fff0 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004824:	4601      	mov	r1, r0
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4a04      	ldr	r2, [pc, #16]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004832:	5cd3      	ldrb	r3, [r2, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa21 f303 	lsr.w	r3, r1, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	08008c80 	.word	0x08008c80

08004848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800484c:	f7ff ffda 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004850:	4601      	mov	r1, r0
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0adb      	lsrs	r3, r3, #11
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4a04      	ldr	r2, [pc, #16]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800485e:	5cd3      	ldrb	r3, [r2, r3]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	08008c80 	.word	0x08008c80

08004874 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800487a:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d10c      	bne.n	80048b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004898:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a2:	68d2      	ldr	r2, [r2, #12]
 80048a4:	0a12      	lsrs	r2, r2, #8
 80048a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	617b      	str	r3, [r7, #20]
    break;
 80048b0:	e00c      	b.n	80048cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ba:	4a0e      	ldr	r2, [pc, #56]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048bc:	68d2      	ldr	r2, [r2, #12]
 80048be:	0a12      	lsrs	r2, r2, #8
 80048c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
    break;
 80048ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	0e5b      	lsrs	r3, r3, #25
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	3301      	adds	r3, #1
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048e6:	687b      	ldr	r3, [r7, #4]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40021000 	.word	0x40021000
 80048f8:	007a1200 	.word	0x007a1200
 80048fc:	00f42400 	.word	0x00f42400

08004900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004908:	2300      	movs	r3, #0
 800490a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800490c:	2300      	movs	r3, #0
 800490e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8098 	beq.w	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004922:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10d      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	4b40      	ldr	r3, [pc, #256]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	4a3f      	ldr	r2, [pc, #252]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004938:	6593      	str	r3, [r2, #88]	; 0x58
 800493a:	4b3d      	ldr	r3, [pc, #244]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004946:	2301      	movs	r3, #1
 8004948:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800494a:	4b3a      	ldr	r3, [pc, #232]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a39      	ldr	r2, [pc, #228]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004954:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004956:	f7fd f83d 	bl	80019d4 <HAL_GetTick>
 800495a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800495c:	e009      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495e:	f7fd f839 	bl	80019d4 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d902      	bls.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	74fb      	strb	r3, [r7, #19]
        break;
 8004970:	e005      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004972:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0ef      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d159      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004984:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01e      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	429a      	cmp	r2, r3
 800499e:	d019      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049a0:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ac:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049bc:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049cc:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d016      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fc fff9 	bl	80019d4 <HAL_GetTick>
 80049e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e4:	e00b      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fc fff5 	bl	80019d4 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d902      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	74fb      	strb	r3, [r7, #19]
            break;
 80049fc:	e006      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0ec      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	4903      	ldr	r1, [pc, #12]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a28:	e008      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	74bb      	strb	r3, [r7, #18]
 8004a2e:	e005      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a3c:	7c7b      	ldrb	r3, [r7, #17]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	4ba6      	ldr	r3, [pc, #664]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a46:	4aa5      	ldr	r2, [pc, #660]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a5a:	4ba0      	ldr	r3, [pc, #640]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f023 0203 	bic.w	r2, r3, #3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	499c      	ldr	r1, [pc, #624]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a7c:	4b97      	ldr	r3, [pc, #604]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f023 020c 	bic.w	r2, r3, #12
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	4994      	ldr	r1, [pc, #592]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a9e:	4b8f      	ldr	r3, [pc, #572]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	498b      	ldr	r1, [pc, #556]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ac0:	4b86      	ldr	r3, [pc, #536]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	4983      	ldr	r1, [pc, #524]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ae2:	4b7e      	ldr	r3, [pc, #504]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	497a      	ldr	r1, [pc, #488]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b04:	4b75      	ldr	r3, [pc, #468]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	4972      	ldr	r1, [pc, #456]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b26:	4b6d      	ldr	r3, [pc, #436]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	4969      	ldr	r1, [pc, #420]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b48:	4b64      	ldr	r3, [pc, #400]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4961      	ldr	r1, [pc, #388]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b6a:	4b5c      	ldr	r3, [pc, #368]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	4958      	ldr	r1, [pc, #352]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d015      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b8c:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	4950      	ldr	r1, [pc, #320]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bac:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a4a      	ldr	r2, [pc, #296]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d015      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bc4:	4b45      	ldr	r3, [pc, #276]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	4942      	ldr	r1, [pc, #264]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004be4:	4b3d      	ldr	r3, [pc, #244]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a3c      	ldr	r2, [pc, #240]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d015      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bfc:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	4934      	ldr	r1, [pc, #208]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c1c:	4b2f      	ldr	r3, [pc, #188]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4a2e      	ldr	r2, [pc, #184]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d015      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c34:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	4926      	ldr	r1, [pc, #152]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c52:	d105      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c54:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d015      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	4918      	ldr	r1, [pc, #96]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c8c:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d015      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	490a      	ldr	r1, [pc, #40]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000

08004ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e049      	b.n	8004d86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fc16 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f000 fd9c 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d001      	beq.n	8004da8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e019      	b.n	8004ddc <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <HAL_TIM_Base_Start+0x58>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d00b      	beq.n	8004dda <HAL_TIM_Base_Start+0x4a>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc8:	d007      	beq.n	8004dda <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0201 	orr.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	00010007 	.word	0x00010007

08004dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d001      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e021      	b.n	8004e48 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <HAL_TIM_Base_Start_IT+0x68>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b06      	cmp	r3, #6
 8004e2c:	d00b      	beq.n	8004e46 <HAL_TIM_Base_Start_IT+0x5a>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e34:	d007      	beq.n	8004e46 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	00010007 	.word	0x00010007

08004e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e049      	b.n	8004efe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f841 	bl	8004f06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f000 fce0 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <HAL_TIM_PWM_Start+0x24>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e03c      	b.n	8004fba <HAL_TIM_PWM_Start+0x9e>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d109      	bne.n	8004f5a <HAL_TIM_PWM_Start+0x3e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e02f      	b.n	8004fba <HAL_TIM_PWM_Start+0x9e>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d109      	bne.n	8004f74 <HAL_TIM_PWM_Start+0x58>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e022      	b.n	8004fba <HAL_TIM_PWM_Start+0x9e>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	d109      	bne.n	8004f8e <HAL_TIM_PWM_Start+0x72>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	bf14      	ite	ne
 8004f86:	2301      	movne	r3, #1
 8004f88:	2300      	moveq	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	e015      	b.n	8004fba <HAL_TIM_PWM_Start+0x9e>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d109      	bne.n	8004fa8 <HAL_TIM_PWM_Start+0x8c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	e008      	b.n	8004fba <HAL_TIM_PWM_Start+0x9e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e06e      	b.n	80050a0 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <HAL_TIM_PWM_Start+0xb6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd0:	e023      	b.n	800501a <HAL_TIM_PWM_Start+0xfe>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d104      	bne.n	8004fe2 <HAL_TIM_PWM_Start+0xc6>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe0:	e01b      	b.n	800501a <HAL_TIM_PWM_Start+0xfe>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d104      	bne.n	8004ff2 <HAL_TIM_PWM_Start+0xd6>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff0:	e013      	b.n	800501a <HAL_TIM_PWM_Start+0xfe>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b0c      	cmp	r3, #12
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_PWM_Start+0xe6>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005000:	e00b      	b.n	800501a <HAL_TIM_PWM_Start+0xfe>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b10      	cmp	r3, #16
 8005006:	d104      	bne.n	8005012 <HAL_TIM_PWM_Start+0xf6>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005010:	e003      	b.n	800501a <HAL_TIM_PWM_Start+0xfe>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2201      	movs	r2, #1
 8005020:	6839      	ldr	r1, [r7, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f001 f954 	bl	80062d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1e      	ldr	r2, [pc, #120]	; (80050a8 <HAL_TIM_PWM_Start+0x18c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_TIM_PWM_Start+0x13e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <HAL_TIM_PWM_Start+0x190>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_TIM_PWM_Start+0x13e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <HAL_TIM_PWM_Start+0x194>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIM_PWM_Start+0x13e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <HAL_TIM_PWM_Start+0x198>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIM_PWM_Start+0x13e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <HAL_TIM_PWM_Start+0x19c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d101      	bne.n	800505e <HAL_TIM_PWM_Start+0x142>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <HAL_TIM_PWM_Start+0x144>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005072:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <HAL_TIM_PWM_Start+0x1a0>)
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b06      	cmp	r3, #6
 8005084:	d00b      	beq.n	800509e <HAL_TIM_PWM_Start+0x182>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d007      	beq.n	800509e <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800
 80050bc:	00010007 	.word	0x00010007

080050c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d122      	bne.n	800511c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d11b      	bne.n	800511c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0202 	mvn.w	r2, #2
 80050ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fb fcfe 	bl	8000b04 <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fb88 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fb8f 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b04      	cmp	r3, #4
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b04      	cmp	r3, #4
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0204 	mvn.w	r2, #4
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fb fcd4 	bl	8000b04 <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fb5e 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fb65 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b08      	cmp	r3, #8
 800517c:	d122      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b08      	cmp	r3, #8
 800518a:	d11b      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0208 	mvn.w	r2, #8
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2204      	movs	r2, #4
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fb fcaa 	bl	8000b04 <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fb34 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fb3b 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d122      	bne.n	8005218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d11b      	bne.n	8005218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0210 	mvn.w	r2, #16
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2208      	movs	r2, #8
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fb fc80 	bl	8000b04 <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fb0a 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fb11 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d10e      	bne.n	8005244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d107      	bne.n	8005244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0201 	mvn.w	r2, #1
 800523c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fb fc46 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b80      	cmp	r3, #128	; 0x80
 8005250:	d10e      	bne.n	8005270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	d107      	bne.n	8005270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f001 fb8a 	bl	8006984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527e:	d10e      	bne.n	800529e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d107      	bne.n	800529e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f001 fb7d 	bl	8006998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d10e      	bne.n	80052ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d107      	bne.n	80052ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fabf 	bl	8005848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d10e      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d107      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f06f 0220 	mvn.w	r2, #32
 80052ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fb fbd3 	bl	8000a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005304:	d10f      	bne.n	8005326 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005314:	d107      	bne.n	8005326 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f001 fb43 	bl	80069ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005334:	d10f      	bne.n	8005356 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005344:	d107      	bne.n	8005356 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800534e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 fb35 	bl	80069c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005364:	d10f      	bne.n	8005386 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005374:	d107      	bne.n	8005386 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f001 fb27 	bl	80069d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005390:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005394:	d10f      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053a4:	d107      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80053ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 fb19 	bl	80069e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e0fd      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b14      	cmp	r3, #20
 80053e6:	f200 80f0 	bhi.w	80055ca <HAL_TIM_PWM_ConfigChannel+0x20a>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005445 	.word	0x08005445
 80053f4:	080055cb 	.word	0x080055cb
 80053f8:	080055cb 	.word	0x080055cb
 80053fc:	080055cb 	.word	0x080055cb
 8005400:	08005485 	.word	0x08005485
 8005404:	080055cb 	.word	0x080055cb
 8005408:	080055cb 	.word	0x080055cb
 800540c:	080055cb 	.word	0x080055cb
 8005410:	080054c7 	.word	0x080054c7
 8005414:	080055cb 	.word	0x080055cb
 8005418:	080055cb 	.word	0x080055cb
 800541c:	080055cb 	.word	0x080055cb
 8005420:	08005507 	.word	0x08005507
 8005424:	080055cb 	.word	0x080055cb
 8005428:	080055cb 	.word	0x080055cb
 800542c:	080055cb 	.word	0x080055cb
 8005430:	08005549 	.word	0x08005549
 8005434:	080055cb 	.word	0x080055cb
 8005438:	080055cb 	.word	0x080055cb
 800543c:	080055cb 	.word	0x080055cb
 8005440:	08005589 	.word	0x08005589
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fa96 	bl	800597c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0208 	orr.w	r2, r2, #8
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0204 	bic.w	r2, r2, #4
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	619a      	str	r2, [r3, #24]
      break;
 8005482:	e0a3      	b.n	80055cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fb06 	bl	8005a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800549e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6999      	ldr	r1, [r3, #24]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	619a      	str	r2, [r3, #24]
      break;
 80054c4:	e082      	b.n	80055cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fb6f 	bl	8005bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0208 	orr.w	r2, r2, #8
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0204 	bic.w	r2, r2, #4
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	61da      	str	r2, [r3, #28]
      break;
 8005504:	e062      	b.n	80055cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fbd7 	bl	8005cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69d9      	ldr	r1, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	021a      	lsls	r2, r3, #8
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	61da      	str	r2, [r3, #28]
      break;
 8005546:	e041      	b.n	80055cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fc40 	bl	8005dd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0208 	orr.w	r2, r2, #8
 8005562:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0204 	bic.w	r2, r2, #4
 8005572:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005586:	e021      	b.n	80055cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fc84 	bl	8005e9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	021a      	lsls	r2, r3, #8
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80055c8:	e000      	b.n	80055cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80055ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop

080055e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_TIM_ConfigClockSource+0x18>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e0c3      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x1a0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800561a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005622:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b70      	cmp	r3, #112	; 0x70
 8005632:	d038      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0xc6>
 8005634:	2b70      	cmp	r3, #112	; 0x70
 8005636:	d815      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x84>
 8005638:	2b30      	cmp	r3, #48	; 0x30
 800563a:	f000 808e 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x17a>
 800563e:	2b30      	cmp	r3, #48	; 0x30
 8005640:	d809      	bhi.n	8005656 <HAL_TIM_ConfigClockSource+0x76>
 8005642:	2b10      	cmp	r3, #16
 8005644:	f000 8089 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x17a>
 8005648:	2b20      	cmp	r3, #32
 800564a:	f000 8086 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x17a>
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8083 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005654:	e08b      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005656:	2b50      	cmp	r3, #80	; 0x50
 8005658:	d04f      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x11a>
 800565a:	2b60      	cmp	r3, #96	; 0x60
 800565c:	d05d      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x13a>
 800565e:	2b40      	cmp	r3, #64	; 0x40
 8005660:	d06b      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8005662:	e084      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005664:	4a48      	ldr	r2, [pc, #288]	; (8005788 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d077      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x17a>
 800566a:	4a47      	ldr	r2, [pc, #284]	; (8005788 <HAL_TIM_ConfigClockSource+0x1a8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d809      	bhi.n	8005684 <HAL_TIM_ConfigClockSource+0xa4>
 8005670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005674:	d02e      	beq.n	80056d4 <HAL_TIM_ConfigClockSource+0xf4>
 8005676:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800567a:	d06e      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x17a>
 800567c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005680:	d074      	beq.n	800576c <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8005682:	e074      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005684:	4a41      	ldr	r2, [pc, #260]	; (800578c <HAL_TIM_ConfigClockSource+0x1ac>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d067      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x17a>
 800568a:	4a40      	ldr	r2, [pc, #256]	; (800578c <HAL_TIM_ConfigClockSource+0x1ac>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d803      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0xb8>
 8005690:	4a3f      	ldr	r2, [pc, #252]	; (8005790 <HAL_TIM_ConfigClockSource+0x1b0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d061      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005696:	e06a      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005698:	4a3e      	ldr	r2, [pc, #248]	; (8005794 <HAL_TIM_ConfigClockSource+0x1b4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d05d      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x17a>
 800569e:	4a3e      	ldr	r2, [pc, #248]	; (8005798 <HAL_TIM_ConfigClockSource+0x1b8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d05a      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80056a4:	e063      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6899      	ldr	r1, [r3, #8]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f000 fdeb 	bl	8006290 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	609a      	str	r2, [r3, #8]
      break;
 80056d2:	e04c      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6899      	ldr	r1, [r3, #8]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f000 fdd4 	bl	8006290 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f6:	609a      	str	r2, [r3, #8]
      break;
 80056f8:	e039      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	461a      	mov	r2, r3
 8005708:	f000 fd46 	bl	8006198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2150      	movs	r1, #80	; 0x50
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fd9f 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 8005718:	e029      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	461a      	mov	r2, r3
 8005728:	f000 fd65 	bl	80061f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2160      	movs	r1, #96	; 0x60
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fd8f 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 8005738:	e019      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	461a      	mov	r2, r3
 8005748:	f000 fd26 	bl	8006198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2140      	movs	r1, #64	; 0x40
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fd7f 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 8005758:	e009      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f000 fd76 	bl	8006256 <TIM_ITRx_SetConfig>
      break;
 800576a:	e000      	b.n	800576e <HAL_TIM_ConfigClockSource+0x18e>
      break;
 800576c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	00100020 	.word	0x00100020
 800578c:	00100040 	.word	0x00100040
 8005790:	00100030 	.word	0x00100030
 8005794:	00100060 	.word	0x00100060
 8005798:	00100070 	.word	0x00100070

0800579c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e031      	b.n	8005818 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fbce 	bl	8005f68 <TIM_SlaveTimer_SetConfig>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e018      	b.n	8005818 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005804:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a3c      	ldr	r2, [pc, #240]	; (8005960 <TIM_Base_SetConfig+0x104>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00f      	beq.n	8005894 <TIM_Base_SetConfig+0x38>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587a:	d00b      	beq.n	8005894 <TIM_Base_SetConfig+0x38>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a39      	ldr	r2, [pc, #228]	; (8005964 <TIM_Base_SetConfig+0x108>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d007      	beq.n	8005894 <TIM_Base_SetConfig+0x38>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a38      	ldr	r2, [pc, #224]	; (8005968 <TIM_Base_SetConfig+0x10c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0x38>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a37      	ldr	r2, [pc, #220]	; (800596c <TIM_Base_SetConfig+0x110>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d108      	bne.n	80058a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2d      	ldr	r2, [pc, #180]	; (8005960 <TIM_Base_SetConfig+0x104>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01b      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b4:	d017      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a2a      	ldr	r2, [pc, #168]	; (8005964 <TIM_Base_SetConfig+0x108>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a29      	ldr	r2, [pc, #164]	; (8005968 <TIM_Base_SetConfig+0x10c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00f      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a28      	ldr	r2, [pc, #160]	; (800596c <TIM_Base_SetConfig+0x110>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00b      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a27      	ldr	r2, [pc, #156]	; (8005970 <TIM_Base_SetConfig+0x114>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a26      	ldr	r2, [pc, #152]	; (8005974 <TIM_Base_SetConfig+0x118>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_Base_SetConfig+0x8a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a25      	ldr	r2, [pc, #148]	; (8005978 <TIM_Base_SetConfig+0x11c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d108      	bne.n	80058f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a10      	ldr	r2, [pc, #64]	; (8005960 <TIM_Base_SetConfig+0x104>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00f      	beq.n	8005944 <TIM_Base_SetConfig+0xe8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a11      	ldr	r2, [pc, #68]	; (800596c <TIM_Base_SetConfig+0x110>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00b      	beq.n	8005944 <TIM_Base_SetConfig+0xe8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a10      	ldr	r2, [pc, #64]	; (8005970 <TIM_Base_SetConfig+0x114>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <TIM_Base_SetConfig+0xe8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a0f      	ldr	r2, [pc, #60]	; (8005974 <TIM_Base_SetConfig+0x118>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_Base_SetConfig+0xe8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a0e      	ldr	r2, [pc, #56]	; (8005978 <TIM_Base_SetConfig+0x11c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d103      	bne.n	800594c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	615a      	str	r2, [r3, #20]
}
 8005952:	bf00      	nop
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40013400 	.word	0x40013400
 8005970:	40014000 	.word	0x40014000
 8005974:	40014400 	.word	0x40014400
 8005978:	40014800 	.word	0x40014800

0800597c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f023 0201 	bic.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 0302 	bic.w	r3, r3, #2
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a2c      	ldr	r2, [pc, #176]	; (8005a88 <TIM_OC1_SetConfig+0x10c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00f      	beq.n	80059fc <TIM_OC1_SetConfig+0x80>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a2b      	ldr	r2, [pc, #172]	; (8005a8c <TIM_OC1_SetConfig+0x110>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00b      	beq.n	80059fc <TIM_OC1_SetConfig+0x80>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a2a      	ldr	r2, [pc, #168]	; (8005a90 <TIM_OC1_SetConfig+0x114>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d007      	beq.n	80059fc <TIM_OC1_SetConfig+0x80>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a29      	ldr	r2, [pc, #164]	; (8005a94 <TIM_OC1_SetConfig+0x118>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_OC1_SetConfig+0x80>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <TIM_OC1_SetConfig+0x11c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d10c      	bne.n	8005a16 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f023 0308 	bic.w	r3, r3, #8
 8005a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <TIM_OC1_SetConfig+0x10c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00f      	beq.n	8005a3e <TIM_OC1_SetConfig+0xc2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1a      	ldr	r2, [pc, #104]	; (8005a8c <TIM_OC1_SetConfig+0x110>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <TIM_OC1_SetConfig+0xc2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <TIM_OC1_SetConfig+0x114>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <TIM_OC1_SetConfig+0xc2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a18      	ldr	r2, [pc, #96]	; (8005a94 <TIM_OC1_SetConfig+0x118>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_OC1_SetConfig+0xc2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <TIM_OC1_SetConfig+0x11c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d111      	bne.n	8005a62 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	621a      	str	r2, [r3, #32]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40013400 	.word	0x40013400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800

08005a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0210 	bic.w	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0320 	bic.w	r3, r3, #32
 8005aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <TIM_OC2_SetConfig+0x100>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_OC2_SetConfig+0x6c>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <TIM_OC2_SetConfig+0x104>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d10d      	bne.n	8005b24 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <TIM_OC2_SetConfig+0x100>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00f      	beq.n	8005b4c <TIM_OC2_SetConfig+0xb0>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ba0 <TIM_OC2_SetConfig+0x104>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <TIM_OC2_SetConfig+0xb0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a1b      	ldr	r2, [pc, #108]	; (8005ba4 <TIM_OC2_SetConfig+0x108>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d007      	beq.n	8005b4c <TIM_OC2_SetConfig+0xb0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <TIM_OC2_SetConfig+0x10c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_OC2_SetConfig+0xb0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a19      	ldr	r2, [pc, #100]	; (8005bac <TIM_OC2_SetConfig+0x110>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d113      	bne.n	8005b74 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40013400 	.word	0x40013400
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800

08005bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a27      	ldr	r2, [pc, #156]	; (8005cac <TIM_OC3_SetConfig+0xfc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_OC3_SetConfig+0x6a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <TIM_OC3_SetConfig+0x100>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d10d      	bne.n	8005c36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <TIM_OC3_SetConfig+0xfc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00f      	beq.n	8005c5e <TIM_OC3_SetConfig+0xae>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <TIM_OC3_SetConfig+0x100>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_OC3_SetConfig+0xae>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1a      	ldr	r2, [pc, #104]	; (8005cb4 <TIM_OC3_SetConfig+0x104>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <TIM_OC3_SetConfig+0xae>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a19      	ldr	r2, [pc, #100]	; (8005cb8 <TIM_OC3_SetConfig+0x108>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_OC3_SetConfig+0xae>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a18      	ldr	r2, [pc, #96]	; (8005cbc <TIM_OC3_SetConfig+0x10c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d113      	bne.n	8005c86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40013400 	.word	0x40013400
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400
 8005cbc:	40014800 	.word	0x40014800

08005cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	031b      	lsls	r3, r3, #12
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a28      	ldr	r2, [pc, #160]	; (8005dc0 <TIM_OC4_SetConfig+0x100>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC4_SetConfig+0x6c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a27      	ldr	r2, [pc, #156]	; (8005dc4 <TIM_OC4_SetConfig+0x104>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10d      	bne.n	8005d48 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	031b      	lsls	r3, r3, #12
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a1d      	ldr	r2, [pc, #116]	; (8005dc0 <TIM_OC4_SetConfig+0x100>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00f      	beq.n	8005d70 <TIM_OC4_SetConfig+0xb0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <TIM_OC4_SetConfig+0x104>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_OC4_SetConfig+0xb0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <TIM_OC4_SetConfig+0x108>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_OC4_SetConfig+0xb0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1a      	ldr	r2, [pc, #104]	; (8005dcc <TIM_OC4_SetConfig+0x10c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC4_SetConfig+0xb0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a19      	ldr	r2, [pc, #100]	; (8005dd0 <TIM_OC4_SetConfig+0x110>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d113      	bne.n	8005d98 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	019b      	lsls	r3, r3, #6
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	019b      	lsls	r3, r3, #6
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40013400 	.word	0x40013400
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	40014800 	.word	0x40014800

08005dd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <TIM_OC5_SetConfig+0xb4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00f      	beq.n	8005e4e <TIM_OC5_SetConfig+0x7a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <TIM_OC5_SetConfig+0xb8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00b      	beq.n	8005e4e <TIM_OC5_SetConfig+0x7a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <TIM_OC5_SetConfig+0xbc>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d007      	beq.n	8005e4e <TIM_OC5_SetConfig+0x7a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <TIM_OC5_SetConfig+0xc0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_OC5_SetConfig+0x7a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <TIM_OC5_SetConfig+0xc4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d109      	bne.n	8005e62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	621a      	str	r2, [r3, #32]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800

08005e9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	051b      	lsls	r3, r3, #20
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <TIM_OC6_SetConfig+0xb8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00f      	beq.n	8005f18 <TIM_OC6_SetConfig+0x7c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <TIM_OC6_SetConfig+0xbc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <TIM_OC6_SetConfig+0x7c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <TIM_OC6_SetConfig+0xc0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <TIM_OC6_SetConfig+0x7c>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a15      	ldr	r2, [pc, #84]	; (8005f60 <TIM_OC6_SetConfig+0xc4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_OC6_SetConfig+0x7c>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <TIM_OC6_SetConfig+0xc8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d109      	bne.n	8005f2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40012c00 	.word	0x40012c00
 8005f58:	40013400 	.word	0x40013400
 8005f5c:	40014000 	.word	0x40014000
 8005f60:	40014400 	.word	0x40014400
 8005f64:	40014800 	.word	0x40014800

08005f68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f96:	f023 0307 	bic.w	r3, r3, #7
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b60      	cmp	r3, #96	; 0x60
 8005fb4:	d06d      	beq.n	8006092 <TIM_SlaveTimer_SetConfig+0x12a>
 8005fb6:	2b60      	cmp	r3, #96	; 0x60
 8005fb8:	d80f      	bhi.n	8005fda <TIM_SlaveTimer_SetConfig+0x72>
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d073      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d804      	bhi.n	8005fcc <TIM_SlaveTimer_SetConfig+0x64>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d06f      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005fc6:	2b10      	cmp	r3, #16
 8005fc8:	d06d      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8005fca:	e06d      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	d028      	beq.n	8006022 <TIM_SlaveTimer_SetConfig+0xba>
 8005fd0:	2b50      	cmp	r3, #80	; 0x50
 8005fd2:	d054      	beq.n	800607e <TIM_SlaveTimer_SetConfig+0x116>
 8005fd4:	2b30      	cmp	r3, #48	; 0x30
 8005fd6:	d066      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8005fd8:	e066      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005fda:	4a36      	ldr	r2, [pc, #216]	; (80060b4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d062      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005fe0:	4a34      	ldr	r2, [pc, #208]	; (80060b4 <TIM_SlaveTimer_SetConfig+0x14c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d808      	bhi.n	8005ff8 <TIM_SlaveTimer_SetConfig+0x90>
 8005fe6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fea:	d05c      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005fec:	4a32      	ldr	r2, [pc, #200]	; (80060b8 <TIM_SlaveTimer_SetConfig+0x150>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d059      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005ff2:	2b70      	cmp	r3, #112	; 0x70
 8005ff4:	d00a      	beq.n	800600c <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8005ff6:	e057      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8005ff8:	4a30      	ldr	r2, [pc, #192]	; (80060bc <TIM_SlaveTimer_SetConfig+0x154>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d053      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
 8005ffe:	4a30      	ldr	r2, [pc, #192]	; (80060c0 <TIM_SlaveTimer_SetConfig+0x158>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d050      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
 8006004:	4a2f      	ldr	r2, [pc, #188]	; (80060c4 <TIM_SlaveTimer_SetConfig+0x15c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d04d      	beq.n	80060a6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 800600a:	e04d      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68d9      	ldr	r1, [r3, #12]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f000 f938 	bl	8006290 <TIM_ETR_SetConfig>
      break;
 8006020:	e042      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b05      	cmp	r3, #5
 8006028:	d004      	beq.n	8006034 <TIM_SlaveTimer_SetConfig+0xcc>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006032:	d101      	bne.n	8006038 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e038      	b.n	80060aa <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6a1a      	ldr	r2, [r3, #32]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0201 	bic.w	r2, r2, #1
 800604e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	621a      	str	r2, [r3, #32]
      break;
 800607c:	e014      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6899      	ldr	r1, [r3, #8]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	461a      	mov	r2, r3
 800608c:	f000 f884 	bl	8006198 <TIM_TI1_ConfigInputStage>
      break;
 8006090:	e00a      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6899      	ldr	r1, [r3, #8]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	461a      	mov	r2, r3
 80060a0:	f000 f8a9 	bl	80061f6 <TIM_TI2_ConfigInputStage>
      break;
 80060a4:	e000      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 80060a6:	bf00      	nop
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	00100030 	.word	0x00100030
 80060b8:	00100020 	.word	0x00100020
 80060bc:	00100060 	.word	0x00100060
 80060c0:	00100070 	.word	0x00100070
 80060c4:	00100040 	.word	0x00100040

080060c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f023 0201 	bic.w	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4a24      	ldr	r2, [pc, #144]	; (8006184 <TIM_TI1_SetConfig+0xbc>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d013      	beq.n	800611e <TIM_TI1_SetConfig+0x56>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fc:	d00f      	beq.n	800611e <TIM_TI1_SetConfig+0x56>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a21      	ldr	r2, [pc, #132]	; (8006188 <TIM_TI1_SetConfig+0xc0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00b      	beq.n	800611e <TIM_TI1_SetConfig+0x56>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a20      	ldr	r2, [pc, #128]	; (800618c <TIM_TI1_SetConfig+0xc4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d007      	beq.n	800611e <TIM_TI1_SetConfig+0x56>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <TIM_TI1_SetConfig+0xc8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d003      	beq.n	800611e <TIM_TI1_SetConfig+0x56>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4a1e      	ldr	r2, [pc, #120]	; (8006194 <TIM_TI1_SetConfig+0xcc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d101      	bne.n	8006122 <TIM_TI1_SetConfig+0x5a>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <TIM_TI1_SetConfig+0x5c>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	e003      	b.n	8006142 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	b2db      	uxtb	r3, r3
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f023 030a 	bic.w	r3, r3, #10
 800615c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f003 030a 	and.w	r3, r3, #10
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40013400 	.word	0x40013400
 8006194:	40014000 	.word	0x40014000

08006198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f023 030a 	bic.w	r3, r3, #10
 80061d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b087      	sub	sp, #28
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f023 0210 	bic.w	r2, r3, #16
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	031b      	lsls	r3, r3, #12
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800626c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	f043 0307 	orr.w	r3, r3, #7
 800627c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	609a      	str	r2, [r3, #8]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	021a      	lsls	r2, r3, #8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	609a      	str	r2, [r3, #8]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2201      	movs	r2, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1a      	ldr	r2, [r3, #32]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	401a      	ands	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	431a      	orrs	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b08a      	sub	sp, #40	; 0x28
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e0a0      	b.n	8006470 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f898 	bl	8006478 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f7ff fa7e 	bl	800585c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6819      	ldr	r1, [r3, #0]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2203      	movs	r2, #3
 800636e:	f7ff feab 	bl	80060c8 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699a      	ldr	r2, [r3, #24]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 020c 	bic.w	r2, r2, #12
 8006380:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6999      	ldr	r1, [r3, #24]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063a2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c6:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d6:	f023 0307 	bic.w	r3, r3, #7
 80063da:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0204 	orr.w	r2, r2, #4
 80063ea:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80063f0:	2300      	movs	r3, #0
 80063f2:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80063f4:	2370      	movs	r3, #112	; 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80063f8:	2300      	movs	r3, #0
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f107 020c 	add.w	r2, r7, #12
 8006412:	4611      	mov	r1, r2
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fb41 	bl	8005a9c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800643c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3728      	adds	r7, #40	; 0x28
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800649a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064aa:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d108      	bne.n	80064cc <HAL_TIMEx_HallSensor_Start+0x40>
   || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d105      	bne.n	80064cc <HAL_TIMEx_HallSensor_Start+0x40>
   || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064c0:	7b7b      	ldrb	r3, [r7, #13]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d102      	bne.n	80064cc <HAL_TIMEx_HallSensor_Start+0x40>
   || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064c6:	7b3b      	ldrb	r3, [r7, #12]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d001      	beq.n	80064d0 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e02c      	b.n	800652a <HAL_TIMEx_HallSensor_Start+0x9e>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2201      	movs	r2, #1
 80064f6:	2100      	movs	r1, #0
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fee9 	bl	80062d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_TIMEx_HallSensor_Start+0xa8>)
 8006506:	4013      	ands	r3, r2
 8006508:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b06      	cmp	r3, #6
 800650e:	d00b      	beq.n	8006528 <HAL_TIMEx_HallSensor_Start+0x9c>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006516:	d007      	beq.n	8006528 <HAL_TIMEx_HallSensor_Start+0x9c>
  {
    __HAL_TIM_ENABLE(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	00010007 	.word	0x00010007

08006538 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <HAL_TIMEx_PWMN_Start+0x24>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	e022      	b.n	80065a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b04      	cmp	r3, #4
 8006560:	d109      	bne.n	8006576 <HAL_TIMEx_PWMN_Start+0x3e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b01      	cmp	r3, #1
 800656c:	bf14      	ite	ne
 800656e:	2301      	movne	r3, #1
 8006570:	2300      	moveq	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	e015      	b.n	80065a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b08      	cmp	r3, #8
 800657a:	d109      	bne.n	8006590 <HAL_TIMEx_PWMN_Start+0x58>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	bf14      	ite	ne
 8006588:	2301      	movne	r3, #1
 800658a:	2300      	moveq	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	e008      	b.n	80065a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	bf14      	ite	ne
 800659c:	2301      	movne	r3, #1
 800659e:	2300      	moveq	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e040      	b.n	800662c <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <HAL_TIMEx_PWMN_Start+0x82>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b8:	e013      	b.n	80065e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d104      	bne.n	80065ca <HAL_TIMEx_PWMN_Start+0x92>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c8:	e00b      	b.n	80065e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d104      	bne.n	80065da <HAL_TIMEx_PWMN_Start+0xa2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065d8:	e003      	b.n	80065e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2202      	movs	r2, #2
 80065de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2204      	movs	r2, #4
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fa06 	bl	80069fc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <HAL_TIMEx_PWMN_Start+0xfc>)
 8006608:	4013      	ands	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b06      	cmp	r3, #6
 8006610:	d00b      	beq.n	800662a <HAL_TIMEx_PWMN_Start+0xf2>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006618:	d007      	beq.n	800662a <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0201 	orr.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	00010007 	.word	0x00010007

08006638 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE(htim->Instance, InputTrigger));

  __HAL_LOCK(htim);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 800664e:	2302      	movs	r3, #2
 8006650:	e066      	b.n	8006720 <HAL_TIMEx_ConfigCommutEvent_IT+0xe8>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      (InputTrigger == TIM_TS_ITR4)  || (InputTrigger == TIM_TS_ITR5) ||
      (InputTrigger == TIM_TS_ITR6)  || (InputTrigger == TIM_TS_ITR7) ||
      (InputTrigger == TIM_TS_ITR8)  || (InputTrigger == TIM_TS_ITR10) ||
      (InputTrigger == TIM_TS_ITR11))
#else
  if ((InputTrigger == TIM_TS_ITR0)  || (InputTrigger == TIM_TS_ITR1) ||
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d020      	beq.n	80066a2 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b10      	cmp	r3, #16
 8006664:	d01d      	beq.n	80066a2 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b20      	cmp	r3, #32
 800666a:	d01a      	beq.n	80066a2 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR2)  || (InputTrigger == TIM_TS_ITR3) ||
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b30      	cmp	r3, #48	; 0x30
 8006670:	d017      	beq.n	80066a2 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006678:	d013      	beq.n	80066a2 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR5)  || (InputTrigger == TIM_TS_ITR6) ||
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4a2b      	ldr	r2, [pc, #172]	; (800672c <HAL_TIMEx_ConfigCommutEvent_IT+0xf4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00f      	beq.n	80066a2 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4a2a      	ldr	r2, [pc, #168]	; (8006730 <HAL_TIMEx_ConfigCommutEvent_IT+0xf8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00b      	beq.n	80066a2 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR7)  || (InputTrigger == TIM_TS_ITR8) ||
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4a29      	ldr	r2, [pc, #164]	; (8006734 <HAL_TIMEx_ConfigCommutEvent_IT+0xfc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d007      	beq.n	80066a2 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4a28      	ldr	r2, [pc, #160]	; (8006738 <HAL_TIMEx_ConfigCommutEvent_IT+0x100>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR10) || (InputTrigger == TIM_TS_ITR11))
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	4a27      	ldr	r2, [pc, #156]	; (800673c <HAL_TIMEx_ConfigCommutEvent_IT+0x104>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d111      	bne.n	80066c6 <HAL_TIMEx_ConfigCommutEvent_IT+0x8e>
#endif /* TIM5 && TIM20 */
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80066b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b4:	6093      	str	r3, [r2, #8]
    htim->Instance->SMCR |= InputTrigger;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6899      	ldr	r1, [r3, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0201 	orr.w	r2, r2, #1
 80066d4:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0204 	bic.w	r2, r2, #4
 80066e4:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6859      	ldr	r1, [r3, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006704:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0220 	orr.w	r2, r2, #32
 8006714:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	00100020 	.word	0x00100020
 8006730:	00100030 	.word	0x00100030
 8006734:	00100040 	.word	0x00100040
 8006738:	00100060 	.word	0x00100060
 800673c:	00100070 	.word	0x00100070

08006740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006754:	2302      	movs	r3, #2
 8006756:	e065      	b.n	8006824 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a2c      	ldr	r2, [pc, #176]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d004      	beq.n	800678c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a2b      	ldr	r2, [pc, #172]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d108      	bne.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80067a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d018      	beq.n	80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ce:	d013      	beq.n	80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a18      	ldr	r2, [pc, #96]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00e      	beq.n	80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a17      	ldr	r2, [pc, #92]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d009      	beq.n	80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a12      	ldr	r2, [pc, #72]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d004      	beq.n	80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a13      	ldr	r2, [pc, #76]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d10c      	bne.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	4313      	orrs	r3, r2
 8006808:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40014000 	.word	0x40014000

08006844 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800685c:	2302      	movs	r3, #2
 800685e:	e087      	b.n	8006970 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	041b      	lsls	r3, r3, #16
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a27      	ldr	r2, [pc, #156]	; (800697c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a25      	ldr	r2, [pc, #148]	; (8006980 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d106      	bne.n	80068fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1e      	ldr	r2, [pc, #120]	; (800697c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1d      	ldr	r2, [pc, #116]	; (8006980 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d126      	bne.n	800695e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	051b      	lsls	r3, r3, #20
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0e      	ldr	r2, [pc, #56]	; (800697c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d004      	beq.n	8006950 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a0d      	ldr	r2, [pc, #52]	; (8006980 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d106      	bne.n	800695e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40013400 	.word	0x40013400

08006984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2204      	movs	r2, #4
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1a      	ldr	r2, [r3, #32]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	401a      	ands	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1a      	ldr	r2, [r3, #32]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	fa01 f303 	lsl.w	r3, r1, r3
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e042      	b.n	8006ade <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fa fed8 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2224      	movs	r2, #36	; 0x24
 8006a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0201 	bic.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fa81 	bl	8006f90 <UART_SetConfig>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e022      	b.n	8006ade <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 fc2f 	bl	8008304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ab4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ac4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0201 	orr.w	r2, r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fcb6 	bl	8008448 <UART_CheckIdleState>
 8006adc:	4603      	mov	r3, r0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	f040 80bc 	bne.w	8006c7a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <HAL_UART_Receive_IT+0x26>
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e0b4      	b.n	8006c7c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_UART_Receive_IT+0x38>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e0ad      	b.n	8006c7c <HAL_UART_Receive_IT+0x194>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	88fa      	ldrh	r2, [r7, #6]
 8006b3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4c:	d10e      	bne.n	8006b6c <HAL_UART_Receive_IT+0x84>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d105      	bne.n	8006b62 <HAL_UART_Receive_IT+0x7a>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b60:	e02d      	b.n	8006bbe <HAL_UART_Receive_IT+0xd6>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	22ff      	movs	r2, #255	; 0xff
 8006b66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b6a:	e028      	b.n	8006bbe <HAL_UART_Receive_IT+0xd6>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10d      	bne.n	8006b90 <HAL_UART_Receive_IT+0xa8>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <HAL_UART_Receive_IT+0x9e>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	22ff      	movs	r2, #255	; 0xff
 8006b80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b84:	e01b      	b.n	8006bbe <HAL_UART_Receive_IT+0xd6>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	227f      	movs	r2, #127	; 0x7f
 8006b8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b8e:	e016      	b.n	8006bbe <HAL_UART_Receive_IT+0xd6>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b98:	d10d      	bne.n	8006bb6 <HAL_UART_Receive_IT+0xce>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d104      	bne.n	8006bac <HAL_UART_Receive_IT+0xc4>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	227f      	movs	r2, #127	; 0x7f
 8006ba6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006baa:	e008      	b.n	8006bbe <HAL_UART_Receive_IT+0xd6>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	223f      	movs	r2, #63	; 0x3f
 8006bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bb4:	e003      	b.n	8006bbe <HAL_UART_Receive_IT+0xd6>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2222      	movs	r2, #34	; 0x22
 8006bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be6:	d12a      	bne.n	8006c3e <HAL_UART_Receive_IT+0x156>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bee:	88fa      	ldrh	r2, [r7, #6]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d324      	bcc.n	8006c3e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfc:	d107      	bne.n	8006c0e <HAL_UART_Receive_IT+0x126>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a1f      	ldr	r2, [pc, #124]	; (8006c88 <HAL_UART_Receive_IT+0x1a0>)
 8006c0a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006c0c:	e002      	b.n	8006c14 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a1e      	ldr	r2, [pc, #120]	; (8006c8c <HAL_UART_Receive_IT+0x1a4>)
 8006c12:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c2a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	e01b      	b.n	8006c76 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c46:	d107      	bne.n	8006c58 <HAL_UART_Receive_IT+0x170>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a0f      	ldr	r2, [pc, #60]	; (8006c90 <HAL_UART_Receive_IT+0x1a8>)
 8006c54:	66da      	str	r2, [r3, #108]	; 0x6c
 8006c56:	e002      	b.n	8006c5e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a0e      	ldr	r2, [pc, #56]	; (8006c94 <HAL_UART_Receive_IT+0x1ac>)
 8006c5c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006c74:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e000      	b.n	8006c7c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8006c7a:	2302      	movs	r3, #2
  }
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	08008871 	.word	0x08008871
 8006c8c:	08008769 	.word	0x08008769
 8006c90:	080086bd 	.word	0x080086bd
 8006c94:	08008613 	.word	0x08008613

08006c98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d118      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d013      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d104      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d009      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 812e 	beq.w	8006f4a <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
      }
      return;
 8006cf6:	e128      	b.n	8006f4a <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 80d1 	beq.w	8006ea2 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4b96      	ldr	r3, [pc, #600]	; (8006f5c <HAL_UART_IRQHandler+0x2c4>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d105      	bne.n	8006d16 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80c6 	beq.w	8006ea2 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d010      	beq.n	8006d42 <HAL_UART_IRQHandler+0xaa>
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00b      	beq.n	8006d42 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	f043 0201 	orr.w	r2, r3, #1
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <HAL_UART_IRQHandler+0xd6>
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d64:	f043 0204 	orr.w	r2, r3, #4
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d010      	beq.n	8006d9a <HAL_UART_IRQHandler+0x102>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00b      	beq.n	8006d9a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2204      	movs	r2, #4
 8006d88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d90:	f043 0202 	orr.w	r2, r3, #2
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d015      	beq.n	8006dd0 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4b6a      	ldr	r3, [pc, #424]	; (8006f5c <HAL_UART_IRQHandler+0x2c4>)
 8006db2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00b      	beq.n	8006dd0 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc6:	f043 0208 	orr.w	r2, r3, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80b9 	beq.w	8006f4e <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d011      	beq.n	8006e0a <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e10:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d004      	beq.n	8006e2a <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d031      	beq.n	8006e8e <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fb9e 	bl	800856c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d123      	bne.n	8006e86 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e4c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d013      	beq.n	8006e7e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e5a:	4a41      	ldr	r2, [pc, #260]	; (8006f60 <HAL_UART_IRQHandler+0x2c8>)
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fc fc8b 	bl	800377e <HAL_DMA_Abort_IT>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d017      	beq.n	8006e9e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7c:	e00f      	b.n	8006e9e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f87a 	bl	8006f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e84:	e00b      	b.n	8006e9e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f876 	bl	8006f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8c:	e007      	b.n	8006e9e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f872 	bl	8006f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006e9c:	e057      	b.n	8006f4e <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e9e:	bf00      	nop
    return;
 8006ea0:	e055      	b.n	8006f4e <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00d      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x230>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d008      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ebe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fd59 	bl	8008978 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ec6:	e045      	b.n	8006f54 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d012      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d008      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d031      	beq.n	8006f52 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	4798      	blx	r3
    }
    return;
 8006ef6:	e02c      	b.n	8006f52 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d008      	beq.n	8006f14 <HAL_UART_IRQHandler+0x27c>
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 fb66 	bl	80085de <UART_EndTransmit_IT>
    return;
 8006f12:	e01f      	b.n	8006f54 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d008      	beq.n	8006f30 <HAL_UART_IRQHandler+0x298>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fd39 	bl	80089a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f2e:	e011      	b.n	8006f54 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00c      	beq.n	8006f54 <HAL_UART_IRQHandler+0x2bc>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	da09      	bge.n	8006f54 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 fd23 	bl	800898c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f46:	bf00      	nop
 8006f48:	e004      	b.n	8006f54 <HAL_UART_IRQHandler+0x2bc>
      return;
 8006f4a:	bf00      	nop
 8006f4c:	e002      	b.n	8006f54 <HAL_UART_IRQHandler+0x2bc>
    return;
 8006f4e:	bf00      	nop
 8006f50:	e000      	b.n	8006f54 <HAL_UART_IRQHandler+0x2bc>
    return;
 8006f52:	bf00      	nop
  }
}
 8006f54:	3720      	adds	r7, #32
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	10000001 	.word	0x10000001
 8006f60:	080085b3 	.word	0x080085b3

08006f64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	0000      	movs	r0, r0
	...

08006f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006f94:	b08a      	sub	sp, #40	; 0x28
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4ba4      	ldr	r3, [pc, #656]	; (8007260 <UART_SetConfig+0x2d0>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a99      	ldr	r2, [pc, #612]	; (8007264 <UART_SetConfig+0x2d4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d004      	beq.n	800700c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007008:	4313      	orrs	r3, r2
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007016:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007020:	430b      	orrs	r3, r1
 8007022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	f023 010f 	bic.w	r1, r3, #15
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a8a      	ldr	r2, [pc, #552]	; (8007268 <UART_SetConfig+0x2d8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d126      	bne.n	8007092 <UART_SetConfig+0x102>
 8007044:	4b89      	ldr	r3, [pc, #548]	; (800726c <UART_SetConfig+0x2dc>)
 8007046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	2b03      	cmp	r3, #3
 8007050:	d81a      	bhi.n	8007088 <UART_SetConfig+0xf8>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0xc8>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007069 	.word	0x08007069
 800705c:	08007079 	.word	0x08007079
 8007060:	08007071 	.word	0x08007071
 8007064:	08007081 	.word	0x08007081
 8007068:	2301      	movs	r3, #1
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800706e:	e0d6      	b.n	800721e <UART_SetConfig+0x28e>
 8007070:	2302      	movs	r3, #2
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007076:	e0d2      	b.n	800721e <UART_SetConfig+0x28e>
 8007078:	2304      	movs	r3, #4
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800707e:	e0ce      	b.n	800721e <UART_SetConfig+0x28e>
 8007080:	2308      	movs	r3, #8
 8007082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007086:	e0ca      	b.n	800721e <UART_SetConfig+0x28e>
 8007088:	2310      	movs	r3, #16
 800708a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800708e:	bf00      	nop
 8007090:	e0c5      	b.n	800721e <UART_SetConfig+0x28e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a76      	ldr	r2, [pc, #472]	; (8007270 <UART_SetConfig+0x2e0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d138      	bne.n	800710e <UART_SetConfig+0x17e>
 800709c:	4b73      	ldr	r3, [pc, #460]	; (800726c <UART_SetConfig+0x2dc>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	f003 030c 	and.w	r3, r3, #12
 80070a6:	2b0c      	cmp	r3, #12
 80070a8:	d82c      	bhi.n	8007104 <UART_SetConfig+0x174>
 80070aa:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <UART_SetConfig+0x120>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070e5 	.word	0x080070e5
 80070b4:	08007105 	.word	0x08007105
 80070b8:	08007105 	.word	0x08007105
 80070bc:	08007105 	.word	0x08007105
 80070c0:	080070f5 	.word	0x080070f5
 80070c4:	08007105 	.word	0x08007105
 80070c8:	08007105 	.word	0x08007105
 80070cc:	08007105 	.word	0x08007105
 80070d0:	080070ed 	.word	0x080070ed
 80070d4:	08007105 	.word	0x08007105
 80070d8:	08007105 	.word	0x08007105
 80070dc:	08007105 	.word	0x08007105
 80070e0:	080070fd 	.word	0x080070fd
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ea:	e098      	b.n	800721e <UART_SetConfig+0x28e>
 80070ec:	2302      	movs	r3, #2
 80070ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070f2:	e094      	b.n	800721e <UART_SetConfig+0x28e>
 80070f4:	2304      	movs	r3, #4
 80070f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070fa:	e090      	b.n	800721e <UART_SetConfig+0x28e>
 80070fc:	2308      	movs	r3, #8
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007102:	e08c      	b.n	800721e <UART_SetConfig+0x28e>
 8007104:	2310      	movs	r3, #16
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800710a:	bf00      	nop
 800710c:	e087      	b.n	800721e <UART_SetConfig+0x28e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a58      	ldr	r2, [pc, #352]	; (8007274 <UART_SetConfig+0x2e4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d125      	bne.n	8007164 <UART_SetConfig+0x1d4>
 8007118:	4b54      	ldr	r3, [pc, #336]	; (800726c <UART_SetConfig+0x2dc>)
 800711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007122:	2b10      	cmp	r3, #16
 8007124:	d011      	beq.n	800714a <UART_SetConfig+0x1ba>
 8007126:	2b10      	cmp	r3, #16
 8007128:	d802      	bhi.n	8007130 <UART_SetConfig+0x1a0>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <UART_SetConfig+0x1aa>
 800712e:	e014      	b.n	800715a <UART_SetConfig+0x1ca>
 8007130:	2b20      	cmp	r3, #32
 8007132:	d006      	beq.n	8007142 <UART_SetConfig+0x1b2>
 8007134:	2b30      	cmp	r3, #48	; 0x30
 8007136:	d00c      	beq.n	8007152 <UART_SetConfig+0x1c2>
 8007138:	e00f      	b.n	800715a <UART_SetConfig+0x1ca>
 800713a:	2300      	movs	r3, #0
 800713c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007140:	e06d      	b.n	800721e <UART_SetConfig+0x28e>
 8007142:	2302      	movs	r3, #2
 8007144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007148:	e069      	b.n	800721e <UART_SetConfig+0x28e>
 800714a:	2304      	movs	r3, #4
 800714c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007150:	e065      	b.n	800721e <UART_SetConfig+0x28e>
 8007152:	2308      	movs	r3, #8
 8007154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007158:	e061      	b.n	800721e <UART_SetConfig+0x28e>
 800715a:	2310      	movs	r3, #16
 800715c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007160:	bf00      	nop
 8007162:	e05c      	b.n	800721e <UART_SetConfig+0x28e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a43      	ldr	r2, [pc, #268]	; (8007278 <UART_SetConfig+0x2e8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d125      	bne.n	80071ba <UART_SetConfig+0x22a>
 800716e:	4b3f      	ldr	r3, [pc, #252]	; (800726c <UART_SetConfig+0x2dc>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d011      	beq.n	80071a0 <UART_SetConfig+0x210>
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d802      	bhi.n	8007186 <UART_SetConfig+0x1f6>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <UART_SetConfig+0x200>
 8007184:	e014      	b.n	80071b0 <UART_SetConfig+0x220>
 8007186:	2b80      	cmp	r3, #128	; 0x80
 8007188:	d006      	beq.n	8007198 <UART_SetConfig+0x208>
 800718a:	2bc0      	cmp	r3, #192	; 0xc0
 800718c:	d00c      	beq.n	80071a8 <UART_SetConfig+0x218>
 800718e:	e00f      	b.n	80071b0 <UART_SetConfig+0x220>
 8007190:	2300      	movs	r3, #0
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007196:	e042      	b.n	800721e <UART_SetConfig+0x28e>
 8007198:	2302      	movs	r3, #2
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800719e:	e03e      	b.n	800721e <UART_SetConfig+0x28e>
 80071a0:	2304      	movs	r3, #4
 80071a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071a6:	e03a      	b.n	800721e <UART_SetConfig+0x28e>
 80071a8:	2308      	movs	r3, #8
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ae:	e036      	b.n	800721e <UART_SetConfig+0x28e>
 80071b0:	2310      	movs	r3, #16
 80071b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071b6:	bf00      	nop
 80071b8:	e031      	b.n	800721e <UART_SetConfig+0x28e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a29      	ldr	r2, [pc, #164]	; (8007264 <UART_SetConfig+0x2d4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d129      	bne.n	8007218 <UART_SetConfig+0x288>
 80071c4:	4b29      	ldr	r3, [pc, #164]	; (800726c <UART_SetConfig+0x2dc>)
 80071c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d2:	d014      	beq.n	80071fe <UART_SetConfig+0x26e>
 80071d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d8:	d802      	bhi.n	80071e0 <UART_SetConfig+0x250>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <UART_SetConfig+0x25e>
 80071de:	e016      	b.n	800720e <UART_SetConfig+0x27e>
 80071e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e4:	d007      	beq.n	80071f6 <UART_SetConfig+0x266>
 80071e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071ea:	d00c      	beq.n	8007206 <UART_SetConfig+0x276>
 80071ec:	e00f      	b.n	800720e <UART_SetConfig+0x27e>
 80071ee:	2300      	movs	r3, #0
 80071f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071f4:	e013      	b.n	800721e <UART_SetConfig+0x28e>
 80071f6:	2302      	movs	r3, #2
 80071f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071fc:	e00f      	b.n	800721e <UART_SetConfig+0x28e>
 80071fe:	2304      	movs	r3, #4
 8007200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007204:	e00b      	b.n	800721e <UART_SetConfig+0x28e>
 8007206:	2308      	movs	r3, #8
 8007208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800720c:	e007      	b.n	800721e <UART_SetConfig+0x28e>
 800720e:	2310      	movs	r3, #16
 8007210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007214:	bf00      	nop
 8007216:	e002      	b.n	800721e <UART_SetConfig+0x28e>
 8007218:	2310      	movs	r3, #16
 800721a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a10      	ldr	r2, [pc, #64]	; (8007264 <UART_SetConfig+0x2d4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	f040 842e 	bne.w	8007a86 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800722a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800722e:	2b08      	cmp	r3, #8
 8007230:	f200 8169 	bhi.w	8007506 <UART_SetConfig+0x576>
 8007234:	a201      	add	r2, pc, #4	; (adr r2, 800723c <UART_SetConfig+0x2ac>)
 8007236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723a:	bf00      	nop
 800723c:	0800727d 	.word	0x0800727d
 8007240:	08007507 	.word	0x08007507
 8007244:	0800731f 	.word	0x0800731f
 8007248:	08007507 	.word	0x08007507
 800724c:	080073b7 	.word	0x080073b7
 8007250:	08007507 	.word	0x08007507
 8007254:	08007507 	.word	0x08007507
 8007258:	08007507 	.word	0x08007507
 800725c:	08007459 	.word	0x08007459
 8007260:	cfff69f3 	.word	0xcfff69f3
 8007264:	40008000 	.word	0x40008000
 8007268:	40013800 	.word	0x40013800
 800726c:	40021000 	.word	0x40021000
 8007270:	40004400 	.word	0x40004400
 8007274:	40004800 	.word	0x40004800
 8007278:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800727c:	f7fd face 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8007280:	4602      	mov	r2, r0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d044      	beq.n	8007314 <UART_SetConfig+0x384>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b01      	cmp	r3, #1
 8007290:	d03e      	beq.n	8007310 <UART_SetConfig+0x380>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b02      	cmp	r3, #2
 8007298:	d038      	beq.n	800730c <UART_SetConfig+0x37c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d032      	beq.n	8007308 <UART_SetConfig+0x378>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d02c      	beq.n	8007304 <UART_SetConfig+0x374>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d026      	beq.n	8007300 <UART_SetConfig+0x370>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	2b06      	cmp	r3, #6
 80072b8:	d020      	beq.n	80072fc <UART_SetConfig+0x36c>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b07      	cmp	r3, #7
 80072c0:	d01a      	beq.n	80072f8 <UART_SetConfig+0x368>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d014      	beq.n	80072f4 <UART_SetConfig+0x364>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	2b09      	cmp	r3, #9
 80072d0:	d00e      	beq.n	80072f0 <UART_SetConfig+0x360>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	2b0a      	cmp	r3, #10
 80072d8:	d008      	beq.n	80072ec <UART_SetConfig+0x35c>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	2b0b      	cmp	r3, #11
 80072e0:	d102      	bne.n	80072e8 <UART_SetConfig+0x358>
 80072e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072e6:	e016      	b.n	8007316 <UART_SetConfig+0x386>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e014      	b.n	8007316 <UART_SetConfig+0x386>
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	e012      	b.n	8007316 <UART_SetConfig+0x386>
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	e010      	b.n	8007316 <UART_SetConfig+0x386>
 80072f4:	2320      	movs	r3, #32
 80072f6:	e00e      	b.n	8007316 <UART_SetConfig+0x386>
 80072f8:	2310      	movs	r3, #16
 80072fa:	e00c      	b.n	8007316 <UART_SetConfig+0x386>
 80072fc:	230c      	movs	r3, #12
 80072fe:	e00a      	b.n	8007316 <UART_SetConfig+0x386>
 8007300:	230a      	movs	r3, #10
 8007302:	e008      	b.n	8007316 <UART_SetConfig+0x386>
 8007304:	2308      	movs	r3, #8
 8007306:	e006      	b.n	8007316 <UART_SetConfig+0x386>
 8007308:	2306      	movs	r3, #6
 800730a:	e004      	b.n	8007316 <UART_SetConfig+0x386>
 800730c:	2304      	movs	r3, #4
 800730e:	e002      	b.n	8007316 <UART_SetConfig+0x386>
 8007310:	2302      	movs	r3, #2
 8007312:	e000      	b.n	8007316 <UART_SetConfig+0x386>
 8007314:	2301      	movs	r3, #1
 8007316:	fbb2 f3f3 	udiv	r3, r2, r3
 800731a:	617b      	str	r3, [r7, #20]
        break;
 800731c:	e0f6      	b.n	800750c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d044      	beq.n	80073b0 <UART_SetConfig+0x420>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b01      	cmp	r3, #1
 800732c:	d03e      	beq.n	80073ac <UART_SetConfig+0x41c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	2b02      	cmp	r3, #2
 8007334:	d038      	beq.n	80073a8 <UART_SetConfig+0x418>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	2b03      	cmp	r3, #3
 800733c:	d032      	beq.n	80073a4 <UART_SetConfig+0x414>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	2b04      	cmp	r3, #4
 8007344:	d02c      	beq.n	80073a0 <UART_SetConfig+0x410>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b05      	cmp	r3, #5
 800734c:	d026      	beq.n	800739c <UART_SetConfig+0x40c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b06      	cmp	r3, #6
 8007354:	d020      	beq.n	8007398 <UART_SetConfig+0x408>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	2b07      	cmp	r3, #7
 800735c:	d01a      	beq.n	8007394 <UART_SetConfig+0x404>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	2b08      	cmp	r3, #8
 8007364:	d014      	beq.n	8007390 <UART_SetConfig+0x400>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	2b09      	cmp	r3, #9
 800736c:	d00e      	beq.n	800738c <UART_SetConfig+0x3fc>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	2b0a      	cmp	r3, #10
 8007374:	d008      	beq.n	8007388 <UART_SetConfig+0x3f8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	2b0b      	cmp	r3, #11
 800737c:	d102      	bne.n	8007384 <UART_SetConfig+0x3f4>
 800737e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007382:	e016      	b.n	80073b2 <UART_SetConfig+0x422>
 8007384:	4ba1      	ldr	r3, [pc, #644]	; (800760c <UART_SetConfig+0x67c>)
 8007386:	e014      	b.n	80073b2 <UART_SetConfig+0x422>
 8007388:	4ba1      	ldr	r3, [pc, #644]	; (8007610 <UART_SetConfig+0x680>)
 800738a:	e012      	b.n	80073b2 <UART_SetConfig+0x422>
 800738c:	4ba1      	ldr	r3, [pc, #644]	; (8007614 <UART_SetConfig+0x684>)
 800738e:	e010      	b.n	80073b2 <UART_SetConfig+0x422>
 8007390:	4ba1      	ldr	r3, [pc, #644]	; (8007618 <UART_SetConfig+0x688>)
 8007392:	e00e      	b.n	80073b2 <UART_SetConfig+0x422>
 8007394:	4ba1      	ldr	r3, [pc, #644]	; (800761c <UART_SetConfig+0x68c>)
 8007396:	e00c      	b.n	80073b2 <UART_SetConfig+0x422>
 8007398:	4ba1      	ldr	r3, [pc, #644]	; (8007620 <UART_SetConfig+0x690>)
 800739a:	e00a      	b.n	80073b2 <UART_SetConfig+0x422>
 800739c:	4ba1      	ldr	r3, [pc, #644]	; (8007624 <UART_SetConfig+0x694>)
 800739e:	e008      	b.n	80073b2 <UART_SetConfig+0x422>
 80073a0:	4ba1      	ldr	r3, [pc, #644]	; (8007628 <UART_SetConfig+0x698>)
 80073a2:	e006      	b.n	80073b2 <UART_SetConfig+0x422>
 80073a4:	4ba1      	ldr	r3, [pc, #644]	; (800762c <UART_SetConfig+0x69c>)
 80073a6:	e004      	b.n	80073b2 <UART_SetConfig+0x422>
 80073a8:	4ba1      	ldr	r3, [pc, #644]	; (8007630 <UART_SetConfig+0x6a0>)
 80073aa:	e002      	b.n	80073b2 <UART_SetConfig+0x422>
 80073ac:	4ba1      	ldr	r3, [pc, #644]	; (8007634 <UART_SetConfig+0x6a4>)
 80073ae:	e000      	b.n	80073b2 <UART_SetConfig+0x422>
 80073b0:	4b96      	ldr	r3, [pc, #600]	; (800760c <UART_SetConfig+0x67c>)
 80073b2:	617b      	str	r3, [r7, #20]
        break;
 80073b4:	e0aa      	b.n	800750c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073b6:	f7fd f9c3 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80073ba:	4602      	mov	r2, r0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d044      	beq.n	800744e <UART_SetConfig+0x4be>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d03e      	beq.n	800744a <UART_SetConfig+0x4ba>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d038      	beq.n	8007446 <UART_SetConfig+0x4b6>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d032      	beq.n	8007442 <UART_SetConfig+0x4b2>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d02c      	beq.n	800743e <UART_SetConfig+0x4ae>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b05      	cmp	r3, #5
 80073ea:	d026      	beq.n	800743a <UART_SetConfig+0x4aa>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b06      	cmp	r3, #6
 80073f2:	d020      	beq.n	8007436 <UART_SetConfig+0x4a6>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2b07      	cmp	r3, #7
 80073fa:	d01a      	beq.n	8007432 <UART_SetConfig+0x4a2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b08      	cmp	r3, #8
 8007402:	d014      	beq.n	800742e <UART_SetConfig+0x49e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b09      	cmp	r3, #9
 800740a:	d00e      	beq.n	800742a <UART_SetConfig+0x49a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	2b0a      	cmp	r3, #10
 8007412:	d008      	beq.n	8007426 <UART_SetConfig+0x496>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	2b0b      	cmp	r3, #11
 800741a:	d102      	bne.n	8007422 <UART_SetConfig+0x492>
 800741c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007420:	e016      	b.n	8007450 <UART_SetConfig+0x4c0>
 8007422:	2301      	movs	r3, #1
 8007424:	e014      	b.n	8007450 <UART_SetConfig+0x4c0>
 8007426:	2380      	movs	r3, #128	; 0x80
 8007428:	e012      	b.n	8007450 <UART_SetConfig+0x4c0>
 800742a:	2340      	movs	r3, #64	; 0x40
 800742c:	e010      	b.n	8007450 <UART_SetConfig+0x4c0>
 800742e:	2320      	movs	r3, #32
 8007430:	e00e      	b.n	8007450 <UART_SetConfig+0x4c0>
 8007432:	2310      	movs	r3, #16
 8007434:	e00c      	b.n	8007450 <UART_SetConfig+0x4c0>
 8007436:	230c      	movs	r3, #12
 8007438:	e00a      	b.n	8007450 <UART_SetConfig+0x4c0>
 800743a:	230a      	movs	r3, #10
 800743c:	e008      	b.n	8007450 <UART_SetConfig+0x4c0>
 800743e:	2308      	movs	r3, #8
 8007440:	e006      	b.n	8007450 <UART_SetConfig+0x4c0>
 8007442:	2306      	movs	r3, #6
 8007444:	e004      	b.n	8007450 <UART_SetConfig+0x4c0>
 8007446:	2304      	movs	r3, #4
 8007448:	e002      	b.n	8007450 <UART_SetConfig+0x4c0>
 800744a:	2302      	movs	r3, #2
 800744c:	e000      	b.n	8007450 <UART_SetConfig+0x4c0>
 800744e:	2301      	movs	r3, #1
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]
        break;
 8007456:	e059      	b.n	800750c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d04e      	beq.n	80074fe <UART_SetConfig+0x56e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	2b01      	cmp	r3, #1
 8007466:	d047      	beq.n	80074f8 <UART_SetConfig+0x568>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	2b02      	cmp	r3, #2
 800746e:	d040      	beq.n	80074f2 <UART_SetConfig+0x562>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	2b03      	cmp	r3, #3
 8007476:	d039      	beq.n	80074ec <UART_SetConfig+0x55c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	2b04      	cmp	r3, #4
 800747e:	d032      	beq.n	80074e6 <UART_SetConfig+0x556>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	2b05      	cmp	r3, #5
 8007486:	d02b      	beq.n	80074e0 <UART_SetConfig+0x550>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	2b06      	cmp	r3, #6
 800748e:	d024      	beq.n	80074da <UART_SetConfig+0x54a>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	2b07      	cmp	r3, #7
 8007496:	d01d      	beq.n	80074d4 <UART_SetConfig+0x544>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	2b08      	cmp	r3, #8
 800749e:	d016      	beq.n	80074ce <UART_SetConfig+0x53e>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b09      	cmp	r3, #9
 80074a6:	d00f      	beq.n	80074c8 <UART_SetConfig+0x538>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2b0a      	cmp	r3, #10
 80074ae:	d008      	beq.n	80074c2 <UART_SetConfig+0x532>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b0b      	cmp	r3, #11
 80074b6:	d101      	bne.n	80074bc <UART_SetConfig+0x52c>
 80074b8:	2380      	movs	r3, #128	; 0x80
 80074ba:	e022      	b.n	8007502 <UART_SetConfig+0x572>
 80074bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c0:	e01f      	b.n	8007502 <UART_SetConfig+0x572>
 80074c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074c6:	e01c      	b.n	8007502 <UART_SetConfig+0x572>
 80074c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074cc:	e019      	b.n	8007502 <UART_SetConfig+0x572>
 80074ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074d2:	e016      	b.n	8007502 <UART_SetConfig+0x572>
 80074d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074d8:	e013      	b.n	8007502 <UART_SetConfig+0x572>
 80074da:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80074de:	e010      	b.n	8007502 <UART_SetConfig+0x572>
 80074e0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80074e4:	e00d      	b.n	8007502 <UART_SetConfig+0x572>
 80074e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ea:	e00a      	b.n	8007502 <UART_SetConfig+0x572>
 80074ec:	f241 5355 	movw	r3, #5461	; 0x1555
 80074f0:	e007      	b.n	8007502 <UART_SetConfig+0x572>
 80074f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074f6:	e004      	b.n	8007502 <UART_SetConfig+0x572>
 80074f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074fc:	e001      	b.n	8007502 <UART_SetConfig+0x572>
 80074fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007502:	617b      	str	r3, [r7, #20]
        break;
 8007504:	e002      	b.n	800750c <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	76fb      	strb	r3, [r7, #27]
        break;
 800750a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 86cd 	beq.w	80082ae <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	4413      	add	r3, r2
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	429a      	cmp	r2, r3
 8007522:	d305      	bcc.n	8007530 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	429a      	cmp	r2, r3
 800752e:	d903      	bls.n	8007538 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	76fb      	strb	r3, [r7, #27]
 8007534:	f000 bebb 	b.w	80082ae <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8007538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800753c:	2b08      	cmp	r3, #8
 800753e:	f200 828d 	bhi.w	8007a5c <UART_SetConfig+0xacc>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <UART_SetConfig+0x5b8>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	0800756d 	.word	0x0800756d
 800754c:	08007a5d 	.word	0x08007a5d
 8007550:	080076d7 	.word	0x080076d7
 8007554:	08007a5d 	.word	0x08007a5d
 8007558:	080077cd 	.word	0x080077cd
 800755c:	08007a5d 	.word	0x08007a5d
 8007560:	08007a5d 	.word	0x08007a5d
 8007564:	08007a5d 	.word	0x08007a5d
 8007568:	0800790b 	.word	0x0800790b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800756c:	f7fd f956 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8007570:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	4618      	mov	r0, r3
 8007576:	f04f 0100 	mov.w	r1, #0
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d07d      	beq.n	800767e <UART_SetConfig+0x6ee>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	2b01      	cmp	r3, #1
 8007588:	d074      	beq.n	8007674 <UART_SetConfig+0x6e4>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	2b02      	cmp	r3, #2
 8007590:	d06b      	beq.n	800766a <UART_SetConfig+0x6da>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	2b03      	cmp	r3, #3
 8007598:	d062      	beq.n	8007660 <UART_SetConfig+0x6d0>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d059      	beq.n	8007656 <UART_SetConfig+0x6c6>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b05      	cmp	r3, #5
 80075a8:	d050      	beq.n	800764c <UART_SetConfig+0x6bc>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	2b06      	cmp	r3, #6
 80075b0:	d047      	beq.n	8007642 <UART_SetConfig+0x6b2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b07      	cmp	r3, #7
 80075b8:	d03e      	beq.n	8007638 <UART_SetConfig+0x6a8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	2b08      	cmp	r3, #8
 80075c0:	d01f      	beq.n	8007602 <UART_SetConfig+0x672>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	2b09      	cmp	r3, #9
 80075c8:	d016      	beq.n	80075f8 <UART_SetConfig+0x668>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	2b0a      	cmp	r3, #10
 80075d0:	d00d      	beq.n	80075ee <UART_SetConfig+0x65e>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	2b0b      	cmp	r3, #11
 80075d8:	d104      	bne.n	80075e4 <UART_SetConfig+0x654>
 80075da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075de:	f04f 0400 	mov.w	r4, #0
 80075e2:	e050      	b.n	8007686 <UART_SetConfig+0x6f6>
 80075e4:	f04f 0301 	mov.w	r3, #1
 80075e8:	f04f 0400 	mov.w	r4, #0
 80075ec:	e04b      	b.n	8007686 <UART_SetConfig+0x6f6>
 80075ee:	f04f 0380 	mov.w	r3, #128	; 0x80
 80075f2:	f04f 0400 	mov.w	r4, #0
 80075f6:	e046      	b.n	8007686 <UART_SetConfig+0x6f6>
 80075f8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80075fc:	f04f 0400 	mov.w	r4, #0
 8007600:	e041      	b.n	8007686 <UART_SetConfig+0x6f6>
 8007602:	f04f 0320 	mov.w	r3, #32
 8007606:	f04f 0400 	mov.w	r4, #0
 800760a:	e03c      	b.n	8007686 <UART_SetConfig+0x6f6>
 800760c:	00f42400 	.word	0x00f42400
 8007610:	0001e848 	.word	0x0001e848
 8007614:	0003d090 	.word	0x0003d090
 8007618:	0007a120 	.word	0x0007a120
 800761c:	000f4240 	.word	0x000f4240
 8007620:	00145855 	.word	0x00145855
 8007624:	00186a00 	.word	0x00186a00
 8007628:	001e8480 	.word	0x001e8480
 800762c:	0028b0aa 	.word	0x0028b0aa
 8007630:	003d0900 	.word	0x003d0900
 8007634:	007a1200 	.word	0x007a1200
 8007638:	f04f 0310 	mov.w	r3, #16
 800763c:	f04f 0400 	mov.w	r4, #0
 8007640:	e021      	b.n	8007686 <UART_SetConfig+0x6f6>
 8007642:	f04f 030c 	mov.w	r3, #12
 8007646:	f04f 0400 	mov.w	r4, #0
 800764a:	e01c      	b.n	8007686 <UART_SetConfig+0x6f6>
 800764c:	f04f 030a 	mov.w	r3, #10
 8007650:	f04f 0400 	mov.w	r4, #0
 8007654:	e017      	b.n	8007686 <UART_SetConfig+0x6f6>
 8007656:	f04f 0308 	mov.w	r3, #8
 800765a:	f04f 0400 	mov.w	r4, #0
 800765e:	e012      	b.n	8007686 <UART_SetConfig+0x6f6>
 8007660:	f04f 0306 	mov.w	r3, #6
 8007664:	f04f 0400 	mov.w	r4, #0
 8007668:	e00d      	b.n	8007686 <UART_SetConfig+0x6f6>
 800766a:	f04f 0304 	mov.w	r3, #4
 800766e:	f04f 0400 	mov.w	r4, #0
 8007672:	e008      	b.n	8007686 <UART_SetConfig+0x6f6>
 8007674:	f04f 0302 	mov.w	r3, #2
 8007678:	f04f 0400 	mov.w	r4, #0
 800767c:	e003      	b.n	8007686 <UART_SetConfig+0x6f6>
 800767e:	f04f 0301 	mov.w	r3, #1
 8007682:	f04f 0400 	mov.w	r4, #0
 8007686:	461a      	mov	r2, r3
 8007688:	4623      	mov	r3, r4
 800768a:	f7f8 fdc5 	bl	8000218 <__aeabi_uldivmod>
 800768e:	4603      	mov	r3, r0
 8007690:	460c      	mov	r4, r1
 8007692:	4619      	mov	r1, r3
 8007694:	4622      	mov	r2, r4
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	f04f 0400 	mov.w	r4, #0
 800769e:	0214      	lsls	r4, r2, #8
 80076a0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80076a4:	020b      	lsls	r3, r1, #8
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6852      	ldr	r2, [r2, #4]
 80076aa:	0852      	lsrs	r2, r2, #1
 80076ac:	4611      	mov	r1, r2
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	eb13 0b01 	adds.w	fp, r3, r1
 80076b6:	eb44 0c02 	adc.w	ip, r4, r2
 80076ba:	4658      	mov	r0, fp
 80076bc:	4661      	mov	r1, ip
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f04f 0400 	mov.w	r4, #0
 80076c6:	461a      	mov	r2, r3
 80076c8:	4623      	mov	r3, r4
 80076ca:	f7f8 fda5 	bl	8000218 <__aeabi_uldivmod>
 80076ce:	4603      	mov	r3, r0
 80076d0:	460c      	mov	r4, r1
 80076d2:	61fb      	str	r3, [r7, #28]
            break;
 80076d4:	e1c5      	b.n	8007a62 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d05b      	beq.n	8007796 <UART_SetConfig+0x806>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d053      	beq.n	800778e <UART_SetConfig+0x7fe>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d04b      	beq.n	8007786 <UART_SetConfig+0x7f6>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d043      	beq.n	800777e <UART_SetConfig+0x7ee>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d03b      	beq.n	8007776 <UART_SetConfig+0x7e6>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b05      	cmp	r3, #5
 8007704:	d033      	beq.n	800776e <UART_SetConfig+0x7de>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	2b06      	cmp	r3, #6
 800770c:	d02b      	beq.n	8007766 <UART_SetConfig+0x7d6>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	2b07      	cmp	r3, #7
 8007714:	d023      	beq.n	800775e <UART_SetConfig+0x7ce>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	2b08      	cmp	r3, #8
 800771c:	d01b      	beq.n	8007756 <UART_SetConfig+0x7c6>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	2b09      	cmp	r3, #9
 8007724:	d013      	beq.n	800774e <UART_SetConfig+0x7be>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	2b0a      	cmp	r3, #10
 800772c:	d00b      	beq.n	8007746 <UART_SetConfig+0x7b6>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	2b0b      	cmp	r3, #11
 8007734:	d103      	bne.n	800773e <UART_SetConfig+0x7ae>
 8007736:	4bae      	ldr	r3, [pc, #696]	; (80079f0 <UART_SetConfig+0xa60>)
 8007738:	f04f 0400 	mov.w	r4, #0
 800773c:	e02e      	b.n	800779c <UART_SetConfig+0x80c>
 800773e:	4bad      	ldr	r3, [pc, #692]	; (80079f4 <UART_SetConfig+0xa64>)
 8007740:	f04f 0400 	mov.w	r4, #0
 8007744:	e02a      	b.n	800779c <UART_SetConfig+0x80c>
 8007746:	4bac      	ldr	r3, [pc, #688]	; (80079f8 <UART_SetConfig+0xa68>)
 8007748:	f04f 0400 	mov.w	r4, #0
 800774c:	e026      	b.n	800779c <UART_SetConfig+0x80c>
 800774e:	4bab      	ldr	r3, [pc, #684]	; (80079fc <UART_SetConfig+0xa6c>)
 8007750:	f04f 0400 	mov.w	r4, #0
 8007754:	e022      	b.n	800779c <UART_SetConfig+0x80c>
 8007756:	4baa      	ldr	r3, [pc, #680]	; (8007a00 <UART_SetConfig+0xa70>)
 8007758:	f04f 0400 	mov.w	r4, #0
 800775c:	e01e      	b.n	800779c <UART_SetConfig+0x80c>
 800775e:	4ba9      	ldr	r3, [pc, #676]	; (8007a04 <UART_SetConfig+0xa74>)
 8007760:	f04f 0400 	mov.w	r4, #0
 8007764:	e01a      	b.n	800779c <UART_SetConfig+0x80c>
 8007766:	a49e      	add	r4, pc, #632	; (adr r4, 80079e0 <UART_SetConfig+0xa50>)
 8007768:	e9d4 3400 	ldrd	r3, r4, [r4]
 800776c:	e016      	b.n	800779c <UART_SetConfig+0x80c>
 800776e:	4ba6      	ldr	r3, [pc, #664]	; (8007a08 <UART_SetConfig+0xa78>)
 8007770:	f04f 0400 	mov.w	r4, #0
 8007774:	e012      	b.n	800779c <UART_SetConfig+0x80c>
 8007776:	4ba5      	ldr	r3, [pc, #660]	; (8007a0c <UART_SetConfig+0xa7c>)
 8007778:	f04f 0400 	mov.w	r4, #0
 800777c:	e00e      	b.n	800779c <UART_SetConfig+0x80c>
 800777e:	a49a      	add	r4, pc, #616	; (adr r4, 80079e8 <UART_SetConfig+0xa58>)
 8007780:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007784:	e00a      	b.n	800779c <UART_SetConfig+0x80c>
 8007786:	4ba2      	ldr	r3, [pc, #648]	; (8007a10 <UART_SetConfig+0xa80>)
 8007788:	f04f 0400 	mov.w	r4, #0
 800778c:	e006      	b.n	800779c <UART_SetConfig+0x80c>
 800778e:	4ba1      	ldr	r3, [pc, #644]	; (8007a14 <UART_SetConfig+0xa84>)
 8007790:	f04f 0400 	mov.w	r4, #0
 8007794:	e002      	b.n	800779c <UART_SetConfig+0x80c>
 8007796:	4b97      	ldr	r3, [pc, #604]	; (80079f4 <UART_SetConfig+0xa64>)
 8007798:	f04f 0400 	mov.w	r4, #0
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6852      	ldr	r2, [r2, #4]
 80077a0:	0852      	lsrs	r2, r2, #1
 80077a2:	4611      	mov	r1, r2
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	eb13 0b01 	adds.w	fp, r3, r1
 80077ac:	eb44 0c02 	adc.w	ip, r4, r2
 80077b0:	4658      	mov	r0, fp
 80077b2:	4661      	mov	r1, ip
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f04f 0400 	mov.w	r4, #0
 80077bc:	461a      	mov	r2, r3
 80077be:	4623      	mov	r3, r4
 80077c0:	f7f8 fd2a 	bl	8000218 <__aeabi_uldivmod>
 80077c4:	4603      	mov	r3, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	61fb      	str	r3, [r7, #28]
            break;
 80077ca:	e14a      	b.n	8007a62 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80077cc:	f7fc ffb8 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80077d0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f04f 0100 	mov.w	r1, #0
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d067      	beq.n	80078b2 <UART_SetConfig+0x922>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d05e      	beq.n	80078a8 <UART_SetConfig+0x918>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d055      	beq.n	800789e <UART_SetConfig+0x90e>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d04c      	beq.n	8007894 <UART_SetConfig+0x904>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d043      	beq.n	800788a <UART_SetConfig+0x8fa>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	2b05      	cmp	r3, #5
 8007808:	d03a      	beq.n	8007880 <UART_SetConfig+0x8f0>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	2b06      	cmp	r3, #6
 8007810:	d031      	beq.n	8007876 <UART_SetConfig+0x8e6>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2b07      	cmp	r3, #7
 8007818:	d028      	beq.n	800786c <UART_SetConfig+0x8dc>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b08      	cmp	r3, #8
 8007820:	d01f      	beq.n	8007862 <UART_SetConfig+0x8d2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b09      	cmp	r3, #9
 8007828:	d016      	beq.n	8007858 <UART_SetConfig+0x8c8>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	2b0a      	cmp	r3, #10
 8007830:	d00d      	beq.n	800784e <UART_SetConfig+0x8be>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b0b      	cmp	r3, #11
 8007838:	d104      	bne.n	8007844 <UART_SetConfig+0x8b4>
 800783a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800783e:	f04f 0400 	mov.w	r4, #0
 8007842:	e03a      	b.n	80078ba <UART_SetConfig+0x92a>
 8007844:	f04f 0301 	mov.w	r3, #1
 8007848:	f04f 0400 	mov.w	r4, #0
 800784c:	e035      	b.n	80078ba <UART_SetConfig+0x92a>
 800784e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007852:	f04f 0400 	mov.w	r4, #0
 8007856:	e030      	b.n	80078ba <UART_SetConfig+0x92a>
 8007858:	f04f 0340 	mov.w	r3, #64	; 0x40
 800785c:	f04f 0400 	mov.w	r4, #0
 8007860:	e02b      	b.n	80078ba <UART_SetConfig+0x92a>
 8007862:	f04f 0320 	mov.w	r3, #32
 8007866:	f04f 0400 	mov.w	r4, #0
 800786a:	e026      	b.n	80078ba <UART_SetConfig+0x92a>
 800786c:	f04f 0310 	mov.w	r3, #16
 8007870:	f04f 0400 	mov.w	r4, #0
 8007874:	e021      	b.n	80078ba <UART_SetConfig+0x92a>
 8007876:	f04f 030c 	mov.w	r3, #12
 800787a:	f04f 0400 	mov.w	r4, #0
 800787e:	e01c      	b.n	80078ba <UART_SetConfig+0x92a>
 8007880:	f04f 030a 	mov.w	r3, #10
 8007884:	f04f 0400 	mov.w	r4, #0
 8007888:	e017      	b.n	80078ba <UART_SetConfig+0x92a>
 800788a:	f04f 0308 	mov.w	r3, #8
 800788e:	f04f 0400 	mov.w	r4, #0
 8007892:	e012      	b.n	80078ba <UART_SetConfig+0x92a>
 8007894:	f04f 0306 	mov.w	r3, #6
 8007898:	f04f 0400 	mov.w	r4, #0
 800789c:	e00d      	b.n	80078ba <UART_SetConfig+0x92a>
 800789e:	f04f 0304 	mov.w	r3, #4
 80078a2:	f04f 0400 	mov.w	r4, #0
 80078a6:	e008      	b.n	80078ba <UART_SetConfig+0x92a>
 80078a8:	f04f 0302 	mov.w	r3, #2
 80078ac:	f04f 0400 	mov.w	r4, #0
 80078b0:	e003      	b.n	80078ba <UART_SetConfig+0x92a>
 80078b2:	f04f 0301 	mov.w	r3, #1
 80078b6:	f04f 0400 	mov.w	r4, #0
 80078ba:	461a      	mov	r2, r3
 80078bc:	4623      	mov	r3, r4
 80078be:	f7f8 fcab 	bl	8000218 <__aeabi_uldivmod>
 80078c2:	4603      	mov	r3, r0
 80078c4:	460c      	mov	r4, r1
 80078c6:	4619      	mov	r1, r3
 80078c8:	4622      	mov	r2, r4
 80078ca:	f04f 0300 	mov.w	r3, #0
 80078ce:	f04f 0400 	mov.w	r4, #0
 80078d2:	0214      	lsls	r4, r2, #8
 80078d4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80078d8:	020b      	lsls	r3, r1, #8
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6852      	ldr	r2, [r2, #4]
 80078de:	0852      	lsrs	r2, r2, #1
 80078e0:	4611      	mov	r1, r2
 80078e2:	f04f 0200 	mov.w	r2, #0
 80078e6:	eb13 0b01 	adds.w	fp, r3, r1
 80078ea:	eb44 0c02 	adc.w	ip, r4, r2
 80078ee:	4658      	mov	r0, fp
 80078f0:	4661      	mov	r1, ip
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f04f 0400 	mov.w	r4, #0
 80078fa:	461a      	mov	r2, r3
 80078fc:	4623      	mov	r3, r4
 80078fe:	f7f8 fc8b 	bl	8000218 <__aeabi_uldivmod>
 8007902:	4603      	mov	r3, r0
 8007904:	460c      	mov	r4, r1
 8007906:	61fb      	str	r3, [r7, #28]
            break;
 8007908:	e0ab      	b.n	8007a62 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 8088 	beq.w	8007a24 <UART_SetConfig+0xa94>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b01      	cmp	r3, #1
 800791a:	d05b      	beq.n	80079d4 <UART_SetConfig+0xa44>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	2b02      	cmp	r3, #2
 8007922:	d052      	beq.n	80079ca <UART_SetConfig+0xa3a>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	2b03      	cmp	r3, #3
 800792a:	d04a      	beq.n	80079c2 <UART_SetConfig+0xa32>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	2b04      	cmp	r3, #4
 8007932:	d041      	beq.n	80079b8 <UART_SetConfig+0xa28>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	2b05      	cmp	r3, #5
 800793a:	d039      	beq.n	80079b0 <UART_SetConfig+0xa20>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	2b06      	cmp	r3, #6
 8007942:	d031      	beq.n	80079a8 <UART_SetConfig+0xa18>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	2b07      	cmp	r3, #7
 800794a:	d028      	beq.n	800799e <UART_SetConfig+0xa0e>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	2b08      	cmp	r3, #8
 8007952:	d01f      	beq.n	8007994 <UART_SetConfig+0xa04>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	2b09      	cmp	r3, #9
 800795a:	d016      	beq.n	800798a <UART_SetConfig+0x9fa>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	2b0a      	cmp	r3, #10
 8007962:	d00d      	beq.n	8007980 <UART_SetConfig+0x9f0>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	2b0b      	cmp	r3, #11
 800796a:	d104      	bne.n	8007976 <UART_SetConfig+0x9e6>
 800796c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007970:	f04f 0400 	mov.w	r4, #0
 8007974:	e05a      	b.n	8007a2c <UART_SetConfig+0xa9c>
 8007976:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800797a:	f04f 0400 	mov.w	r4, #0
 800797e:	e055      	b.n	8007a2c <UART_SetConfig+0xa9c>
 8007980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007984:	f04f 0400 	mov.w	r4, #0
 8007988:	e050      	b.n	8007a2c <UART_SetConfig+0xa9c>
 800798a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800798e:	f04f 0400 	mov.w	r4, #0
 8007992:	e04b      	b.n	8007a2c <UART_SetConfig+0xa9c>
 8007994:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007998:	f04f 0400 	mov.w	r4, #0
 800799c:	e046      	b.n	8007a2c <UART_SetConfig+0xa9c>
 800799e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80079a2:	f04f 0400 	mov.w	r4, #0
 80079a6:	e041      	b.n	8007a2c <UART_SetConfig+0xa9c>
 80079a8:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <UART_SetConfig+0xa88>)
 80079aa:	f04f 0400 	mov.w	r4, #0
 80079ae:	e03d      	b.n	8007a2c <UART_SetConfig+0xa9c>
 80079b0:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <UART_SetConfig+0xa8c>)
 80079b2:	f04f 0400 	mov.w	r4, #0
 80079b6:	e039      	b.n	8007a2c <UART_SetConfig+0xa9c>
 80079b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80079bc:	f04f 0400 	mov.w	r4, #0
 80079c0:	e034      	b.n	8007a2c <UART_SetConfig+0xa9c>
 80079c2:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <UART_SetConfig+0xa90>)
 80079c4:	f04f 0400 	mov.w	r4, #0
 80079c8:	e030      	b.n	8007a2c <UART_SetConfig+0xa9c>
 80079ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80079ce:	f04f 0400 	mov.w	r4, #0
 80079d2:	e02b      	b.n	8007a2c <UART_SetConfig+0xa9c>
 80079d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80079d8:	f04f 0400 	mov.w	r4, #0
 80079dc:	e026      	b.n	8007a2c <UART_SetConfig+0xa9c>
 80079de:	bf00      	nop
 80079e0:	14585500 	.word	0x14585500
 80079e4:	00000000 	.word	0x00000000
 80079e8:	28b0aa00 	.word	0x28b0aa00
 80079ec:	00000000 	.word	0x00000000
 80079f0:	00f42400 	.word	0x00f42400
 80079f4:	f4240000 	.word	0xf4240000
 80079f8:	01e84800 	.word	0x01e84800
 80079fc:	03d09000 	.word	0x03d09000
 8007a00:	07a12000 	.word	0x07a12000
 8007a04:	0f424000 	.word	0x0f424000
 8007a08:	186a0000 	.word	0x186a0000
 8007a0c:	1e848000 	.word	0x1e848000
 8007a10:	3d090000 	.word	0x3d090000
 8007a14:	7a120000 	.word	0x7a120000
 8007a18:	000aaa00 	.word	0x000aaa00
 8007a1c:	000ccc00 	.word	0x000ccc00
 8007a20:	00155500 	.word	0x00155500
 8007a24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007a28:	f04f 0400 	mov.w	r4, #0
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6852      	ldr	r2, [r2, #4]
 8007a30:	0852      	lsrs	r2, r2, #1
 8007a32:	4611      	mov	r1, r2
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	eb13 0b01 	adds.w	fp, r3, r1
 8007a3c:	eb44 0c02 	adc.w	ip, r4, r2
 8007a40:	4658      	mov	r0, fp
 8007a42:	4661      	mov	r1, ip
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f04f 0400 	mov.w	r4, #0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4623      	mov	r3, r4
 8007a50:	f7f8 fbe2 	bl	8000218 <__aeabi_uldivmod>
 8007a54:	4603      	mov	r3, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	61fb      	str	r3, [r7, #28]
            break;
 8007a5a:	e002      	b.n	8007a62 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	76fb      	strb	r3, [r7, #27]
            break;
 8007a60:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a68:	d309      	bcc.n	8007a7e <UART_SetConfig+0xaee>
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a70:	d205      	bcs.n	8007a7e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69fa      	ldr	r2, [r7, #28]
 8007a78:	60da      	str	r2, [r3, #12]
 8007a7a:	f000 bc18 	b.w	80082ae <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	76fb      	strb	r3, [r7, #27]
 8007a82:	f000 bc14 	b.w	80082ae <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8e:	f040 8204 	bne.w	8007e9a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8007a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	f200 81df 	bhi.w	8007e5a <UART_SetConfig+0xeca>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0xb14>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007b81 	.word	0x08007b81
 8007aac:	08007c39 	.word	0x08007c39
 8007ab0:	08007e5b 	.word	0x08007e5b
 8007ab4:	08007ce1 	.word	0x08007ce1
 8007ab8:	08007e5b 	.word	0x08007e5b
 8007abc:	08007e5b 	.word	0x08007e5b
 8007ac0:	08007e5b 	.word	0x08007e5b
 8007ac4:	08007d99 	.word	0x08007d99
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac8:	f7fc fea8 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8007acc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d044      	beq.n	8007b60 <UART_SetConfig+0xbd0>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d03e      	beq.n	8007b5c <UART_SetConfig+0xbcc>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d038      	beq.n	8007b58 <UART_SetConfig+0xbc8>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d032      	beq.n	8007b54 <UART_SetConfig+0xbc4>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d02c      	beq.n	8007b50 <UART_SetConfig+0xbc0>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	2b05      	cmp	r3, #5
 8007afc:	d026      	beq.n	8007b4c <UART_SetConfig+0xbbc>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2b06      	cmp	r3, #6
 8007b04:	d020      	beq.n	8007b48 <UART_SetConfig+0xbb8>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	2b07      	cmp	r3, #7
 8007b0c:	d01a      	beq.n	8007b44 <UART_SetConfig+0xbb4>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	d014      	beq.n	8007b40 <UART_SetConfig+0xbb0>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	2b09      	cmp	r3, #9
 8007b1c:	d00e      	beq.n	8007b3c <UART_SetConfig+0xbac>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	2b0a      	cmp	r3, #10
 8007b24:	d008      	beq.n	8007b38 <UART_SetConfig+0xba8>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	2b0b      	cmp	r3, #11
 8007b2c:	d102      	bne.n	8007b34 <UART_SetConfig+0xba4>
 8007b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b32:	e016      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e014      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b38:	2380      	movs	r3, #128	; 0x80
 8007b3a:	e012      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b3c:	2340      	movs	r3, #64	; 0x40
 8007b3e:	e010      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b40:	2320      	movs	r3, #32
 8007b42:	e00e      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b44:	2310      	movs	r3, #16
 8007b46:	e00c      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b48:	230c      	movs	r3, #12
 8007b4a:	e00a      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b4c:	230a      	movs	r3, #10
 8007b4e:	e008      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b50:	2308      	movs	r3, #8
 8007b52:	e006      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b54:	2306      	movs	r3, #6
 8007b56:	e004      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b58:	2304      	movs	r3, #4
 8007b5a:	e002      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e000      	b.n	8007b62 <UART_SetConfig+0xbd2>
 8007b60:	2301      	movs	r3, #1
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b68:	005a      	lsls	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	085b      	lsrs	r3, r3, #1
 8007b70:	441a      	add	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	61fb      	str	r3, [r7, #28]
        break;
 8007b7e:	e16f      	b.n	8007e60 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b80:	f7fc fe62 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 8007b84:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d044      	beq.n	8007c18 <UART_SetConfig+0xc88>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d03e      	beq.n	8007c14 <UART_SetConfig+0xc84>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d038      	beq.n	8007c10 <UART_SetConfig+0xc80>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d032      	beq.n	8007c0c <UART_SetConfig+0xc7c>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d02c      	beq.n	8007c08 <UART_SetConfig+0xc78>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	d026      	beq.n	8007c04 <UART_SetConfig+0xc74>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	2b06      	cmp	r3, #6
 8007bbc:	d020      	beq.n	8007c00 <UART_SetConfig+0xc70>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	2b07      	cmp	r3, #7
 8007bc4:	d01a      	beq.n	8007bfc <UART_SetConfig+0xc6c>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d014      	beq.n	8007bf8 <UART_SetConfig+0xc68>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	2b09      	cmp	r3, #9
 8007bd4:	d00e      	beq.n	8007bf4 <UART_SetConfig+0xc64>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	2b0a      	cmp	r3, #10
 8007bdc:	d008      	beq.n	8007bf0 <UART_SetConfig+0xc60>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	2b0b      	cmp	r3, #11
 8007be4:	d102      	bne.n	8007bec <UART_SetConfig+0xc5c>
 8007be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bea:	e016      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007bec:	2301      	movs	r3, #1
 8007bee:	e014      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007bf0:	2380      	movs	r3, #128	; 0x80
 8007bf2:	e012      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007bf4:	2340      	movs	r3, #64	; 0x40
 8007bf6:	e010      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007bf8:	2320      	movs	r3, #32
 8007bfa:	e00e      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	e00c      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007c00:	230c      	movs	r3, #12
 8007c02:	e00a      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007c04:	230a      	movs	r3, #10
 8007c06:	e008      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007c08:	2308      	movs	r3, #8
 8007c0a:	e006      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007c0c:	2306      	movs	r3, #6
 8007c0e:	e004      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007c10:	2304      	movs	r3, #4
 8007c12:	e002      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e000      	b.n	8007c1a <UART_SetConfig+0xc8a>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	005a      	lsls	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	441a      	add	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	61fb      	str	r3, [r7, #28]
        break;
 8007c36:	e113      	b.n	8007e60 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d043      	beq.n	8007cc8 <UART_SetConfig+0xd38>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d03d      	beq.n	8007cc4 <UART_SetConfig+0xd34>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d037      	beq.n	8007cc0 <UART_SetConfig+0xd30>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d031      	beq.n	8007cbc <UART_SetConfig+0xd2c>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d02b      	beq.n	8007cb8 <UART_SetConfig+0xd28>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	2b05      	cmp	r3, #5
 8007c66:	d025      	beq.n	8007cb4 <UART_SetConfig+0xd24>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b06      	cmp	r3, #6
 8007c6e:	d01f      	beq.n	8007cb0 <UART_SetConfig+0xd20>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b07      	cmp	r3, #7
 8007c76:	d019      	beq.n	8007cac <UART_SetConfig+0xd1c>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d013      	beq.n	8007ca8 <UART_SetConfig+0xd18>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2b09      	cmp	r3, #9
 8007c86:	d00d      	beq.n	8007ca4 <UART_SetConfig+0xd14>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	2b0a      	cmp	r3, #10
 8007c8e:	d007      	beq.n	8007ca0 <UART_SetConfig+0xd10>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	2b0b      	cmp	r3, #11
 8007c96:	d101      	bne.n	8007c9c <UART_SetConfig+0xd0c>
 8007c98:	4b8d      	ldr	r3, [pc, #564]	; (8007ed0 <UART_SetConfig+0xf40>)
 8007c9a:	e016      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007c9c:	4b8d      	ldr	r3, [pc, #564]	; (8007ed4 <UART_SetConfig+0xf44>)
 8007c9e:	e014      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007ca0:	4b8d      	ldr	r3, [pc, #564]	; (8007ed8 <UART_SetConfig+0xf48>)
 8007ca2:	e012      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007ca4:	4b8d      	ldr	r3, [pc, #564]	; (8007edc <UART_SetConfig+0xf4c>)
 8007ca6:	e010      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007ca8:	4b8d      	ldr	r3, [pc, #564]	; (8007ee0 <UART_SetConfig+0xf50>)
 8007caa:	e00e      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007cac:	4b8d      	ldr	r3, [pc, #564]	; (8007ee4 <UART_SetConfig+0xf54>)
 8007cae:	e00c      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007cb0:	4b8d      	ldr	r3, [pc, #564]	; (8007ee8 <UART_SetConfig+0xf58>)
 8007cb2:	e00a      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007cb4:	4b8d      	ldr	r3, [pc, #564]	; (8007eec <UART_SetConfig+0xf5c>)
 8007cb6:	e008      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007cb8:	4b8d      	ldr	r3, [pc, #564]	; (8007ef0 <UART_SetConfig+0xf60>)
 8007cba:	e006      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007cbc:	4b8d      	ldr	r3, [pc, #564]	; (8007ef4 <UART_SetConfig+0xf64>)
 8007cbe:	e004      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007cc0:	4b8d      	ldr	r3, [pc, #564]	; (8007ef8 <UART_SetConfig+0xf68>)
 8007cc2:	e002      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007cc4:	4b8d      	ldr	r3, [pc, #564]	; (8007efc <UART_SetConfig+0xf6c>)
 8007cc6:	e000      	b.n	8007cca <UART_SetConfig+0xd3a>
 8007cc8:	4b82      	ldr	r3, [pc, #520]	; (8007ed4 <UART_SetConfig+0xf44>)
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6852      	ldr	r2, [r2, #4]
 8007cce:	0852      	lsrs	r2, r2, #1
 8007cd0:	441a      	add	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	61fb      	str	r3, [r7, #28]
        break;
 8007cde:	e0bf      	b.n	8007e60 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce0:	f7fc fd2e 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 8007ce4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d044      	beq.n	8007d78 <UART_SetConfig+0xde8>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d03e      	beq.n	8007d74 <UART_SetConfig+0xde4>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d038      	beq.n	8007d70 <UART_SetConfig+0xde0>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d032      	beq.n	8007d6c <UART_SetConfig+0xddc>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d02c      	beq.n	8007d68 <UART_SetConfig+0xdd8>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d026      	beq.n	8007d64 <UART_SetConfig+0xdd4>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	2b06      	cmp	r3, #6
 8007d1c:	d020      	beq.n	8007d60 <UART_SetConfig+0xdd0>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b07      	cmp	r3, #7
 8007d24:	d01a      	beq.n	8007d5c <UART_SetConfig+0xdcc>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	2b08      	cmp	r3, #8
 8007d2c:	d014      	beq.n	8007d58 <UART_SetConfig+0xdc8>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	2b09      	cmp	r3, #9
 8007d34:	d00e      	beq.n	8007d54 <UART_SetConfig+0xdc4>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	2b0a      	cmp	r3, #10
 8007d3c:	d008      	beq.n	8007d50 <UART_SetConfig+0xdc0>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	2b0b      	cmp	r3, #11
 8007d44:	d102      	bne.n	8007d4c <UART_SetConfig+0xdbc>
 8007d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d4a:	e016      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e014      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d50:	2380      	movs	r3, #128	; 0x80
 8007d52:	e012      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d54:	2340      	movs	r3, #64	; 0x40
 8007d56:	e010      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d58:	2320      	movs	r3, #32
 8007d5a:	e00e      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	e00c      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d60:	230c      	movs	r3, #12
 8007d62:	e00a      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d64:	230a      	movs	r3, #10
 8007d66:	e008      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	e006      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d6c:	2306      	movs	r3, #6
 8007d6e:	e004      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d70:	2304      	movs	r3, #4
 8007d72:	e002      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e000      	b.n	8007d7a <UART_SetConfig+0xdea>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	005a      	lsls	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	441a      	add	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	61fb      	str	r3, [r7, #28]
        break;
 8007d96:	e063      	b.n	8007e60 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d04f      	beq.n	8007e40 <UART_SetConfig+0xeb0>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d048      	beq.n	8007e3a <UART_SetConfig+0xeaa>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d041      	beq.n	8007e34 <UART_SetConfig+0xea4>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d03a      	beq.n	8007e2e <UART_SetConfig+0xe9e>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d033      	beq.n	8007e28 <UART_SetConfig+0xe98>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	2b05      	cmp	r3, #5
 8007dc6:	d02c      	beq.n	8007e22 <UART_SetConfig+0xe92>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2b06      	cmp	r3, #6
 8007dce:	d025      	beq.n	8007e1c <UART_SetConfig+0xe8c>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	2b07      	cmp	r3, #7
 8007dd6:	d01e      	beq.n	8007e16 <UART_SetConfig+0xe86>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d017      	beq.n	8007e10 <UART_SetConfig+0xe80>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	2b09      	cmp	r3, #9
 8007de6:	d010      	beq.n	8007e0a <UART_SetConfig+0xe7a>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	2b0a      	cmp	r3, #10
 8007dee:	d009      	beq.n	8007e04 <UART_SetConfig+0xe74>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	2b0b      	cmp	r3, #11
 8007df6:	d102      	bne.n	8007dfe <UART_SetConfig+0xe6e>
 8007df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dfc:	e022      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e02:	e01f      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e08:	e01c      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e0e:	e019      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e14:	e016      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e1a:	e013      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e1c:	f241 5354 	movw	r3, #5460	; 0x1554
 8007e20:	e010      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e22:	f641 1398 	movw	r3, #6552	; 0x1998
 8007e26:	e00d      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e2c:	e00a      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e2e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007e32:	e007      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e38:	e004      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3e:	e001      	b.n	8007e44 <UART_SetConfig+0xeb4>
 8007e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6852      	ldr	r2, [r2, #4]
 8007e48:	0852      	lsrs	r2, r2, #1
 8007e4a:	441a      	add	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	61fb      	str	r3, [r7, #28]
        break;
 8007e58:	e002      	b.n	8007e60 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	76fb      	strb	r3, [r7, #27]
        break;
 8007e5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	2b0f      	cmp	r3, #15
 8007e64:	d916      	bls.n	8007e94 <UART_SetConfig+0xf04>
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e6c:	d212      	bcs.n	8007e94 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	f023 030f 	bic.w	r3, r3, #15
 8007e76:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	89fb      	ldrh	r3, [r7, #14]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	89fa      	ldrh	r2, [r7, #14]
 8007e90:	60da      	str	r2, [r3, #12]
 8007e92:	e20c      	b.n	80082ae <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	76fb      	strb	r3, [r7, #27]
 8007e98:	e209      	b.n	80082ae <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8007e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	f200 81f4 	bhi.w	800828c <UART_SetConfig+0x12fc>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <UART_SetConfig+0xf1c>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007f01 	.word	0x08007f01
 8007eb0:	08007fb7 	.word	0x08007fb7
 8007eb4:	0800806d 	.word	0x0800806d
 8007eb8:	0800828d 	.word	0x0800828d
 8007ebc:	08008117 	.word	0x08008117
 8007ec0:	0800828d 	.word	0x0800828d
 8007ec4:	0800828d 	.word	0x0800828d
 8007ec8:	0800828d 	.word	0x0800828d
 8007ecc:	080081cd 	.word	0x080081cd
 8007ed0:	0001e848 	.word	0x0001e848
 8007ed4:	01e84800 	.word	0x01e84800
 8007ed8:	0003d090 	.word	0x0003d090
 8007edc:	0007a120 	.word	0x0007a120
 8007ee0:	000f4240 	.word	0x000f4240
 8007ee4:	001e8480 	.word	0x001e8480
 8007ee8:	0028b0aa 	.word	0x0028b0aa
 8007eec:	0030d400 	.word	0x0030d400
 8007ef0:	003d0900 	.word	0x003d0900
 8007ef4:	00516154 	.word	0x00516154
 8007ef8:	007a1200 	.word	0x007a1200
 8007efc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f00:	f7fc fc8c 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8007f04:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d044      	beq.n	8007f98 <UART_SetConfig+0x1008>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d03e      	beq.n	8007f94 <UART_SetConfig+0x1004>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d038      	beq.n	8007f90 <UART_SetConfig+0x1000>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d032      	beq.n	8007f8c <UART_SetConfig+0xffc>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d02c      	beq.n	8007f88 <UART_SetConfig+0xff8>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d026      	beq.n	8007f84 <UART_SetConfig+0xff4>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	2b06      	cmp	r3, #6
 8007f3c:	d020      	beq.n	8007f80 <UART_SetConfig+0xff0>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	2b07      	cmp	r3, #7
 8007f44:	d01a      	beq.n	8007f7c <UART_SetConfig+0xfec>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d014      	beq.n	8007f78 <UART_SetConfig+0xfe8>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d00e      	beq.n	8007f74 <UART_SetConfig+0xfe4>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	2b0a      	cmp	r3, #10
 8007f5c:	d008      	beq.n	8007f70 <UART_SetConfig+0xfe0>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	2b0b      	cmp	r3, #11
 8007f64:	d102      	bne.n	8007f6c <UART_SetConfig+0xfdc>
 8007f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f6a:	e016      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e014      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f70:	2380      	movs	r3, #128	; 0x80
 8007f72:	e012      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f74:	2340      	movs	r3, #64	; 0x40
 8007f76:	e010      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f78:	2320      	movs	r3, #32
 8007f7a:	e00e      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	e00c      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f80:	230c      	movs	r3, #12
 8007f82:	e00a      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f84:	230a      	movs	r3, #10
 8007f86:	e008      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	e006      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f8c:	2306      	movs	r3, #6
 8007f8e:	e004      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f90:	2304      	movs	r3, #4
 8007f92:	e002      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e000      	b.n	8007f9a <UART_SetConfig+0x100a>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	085b      	lsrs	r3, r3, #1
 8007fa6:	441a      	add	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	61fb      	str	r3, [r7, #28]
        break;
 8007fb4:	e16d      	b.n	8008292 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb6:	f7fc fc47 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 8007fba:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d044      	beq.n	800804e <UART_SetConfig+0x10be>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d03e      	beq.n	800804a <UART_SetConfig+0x10ba>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d038      	beq.n	8008046 <UART_SetConfig+0x10b6>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d032      	beq.n	8008042 <UART_SetConfig+0x10b2>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d02c      	beq.n	800803e <UART_SetConfig+0x10ae>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	2b05      	cmp	r3, #5
 8007fea:	d026      	beq.n	800803a <UART_SetConfig+0x10aa>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	2b06      	cmp	r3, #6
 8007ff2:	d020      	beq.n	8008036 <UART_SetConfig+0x10a6>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	2b07      	cmp	r3, #7
 8007ffa:	d01a      	beq.n	8008032 <UART_SetConfig+0x10a2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b08      	cmp	r3, #8
 8008002:	d014      	beq.n	800802e <UART_SetConfig+0x109e>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b09      	cmp	r3, #9
 800800a:	d00e      	beq.n	800802a <UART_SetConfig+0x109a>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b0a      	cmp	r3, #10
 8008012:	d008      	beq.n	8008026 <UART_SetConfig+0x1096>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	2b0b      	cmp	r3, #11
 800801a:	d102      	bne.n	8008022 <UART_SetConfig+0x1092>
 800801c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008020:	e016      	b.n	8008050 <UART_SetConfig+0x10c0>
 8008022:	2301      	movs	r3, #1
 8008024:	e014      	b.n	8008050 <UART_SetConfig+0x10c0>
 8008026:	2380      	movs	r3, #128	; 0x80
 8008028:	e012      	b.n	8008050 <UART_SetConfig+0x10c0>
 800802a:	2340      	movs	r3, #64	; 0x40
 800802c:	e010      	b.n	8008050 <UART_SetConfig+0x10c0>
 800802e:	2320      	movs	r3, #32
 8008030:	e00e      	b.n	8008050 <UART_SetConfig+0x10c0>
 8008032:	2310      	movs	r3, #16
 8008034:	e00c      	b.n	8008050 <UART_SetConfig+0x10c0>
 8008036:	230c      	movs	r3, #12
 8008038:	e00a      	b.n	8008050 <UART_SetConfig+0x10c0>
 800803a:	230a      	movs	r3, #10
 800803c:	e008      	b.n	8008050 <UART_SetConfig+0x10c0>
 800803e:	2308      	movs	r3, #8
 8008040:	e006      	b.n	8008050 <UART_SetConfig+0x10c0>
 8008042:	2306      	movs	r3, #6
 8008044:	e004      	b.n	8008050 <UART_SetConfig+0x10c0>
 8008046:	2304      	movs	r3, #4
 8008048:	e002      	b.n	8008050 <UART_SetConfig+0x10c0>
 800804a:	2302      	movs	r3, #2
 800804c:	e000      	b.n	8008050 <UART_SetConfig+0x10c0>
 800804e:	2301      	movs	r3, #1
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	fbb2 f2f3 	udiv	r2, r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	085b      	lsrs	r3, r3, #1
 800805c:	441a      	add	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	fbb2 f3f3 	udiv	r3, r2, r3
 8008066:	b29b      	uxth	r3, r3
 8008068:	61fb      	str	r3, [r7, #28]
        break;
 800806a:	e112      	b.n	8008292 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d044      	beq.n	80080fe <UART_SetConfig+0x116e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	2b01      	cmp	r3, #1
 800807a:	d03e      	beq.n	80080fa <UART_SetConfig+0x116a>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	2b02      	cmp	r3, #2
 8008082:	d038      	beq.n	80080f6 <UART_SetConfig+0x1166>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2b03      	cmp	r3, #3
 800808a:	d032      	beq.n	80080f2 <UART_SetConfig+0x1162>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b04      	cmp	r3, #4
 8008092:	d02c      	beq.n	80080ee <UART_SetConfig+0x115e>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b05      	cmp	r3, #5
 800809a:	d026      	beq.n	80080ea <UART_SetConfig+0x115a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	2b06      	cmp	r3, #6
 80080a2:	d020      	beq.n	80080e6 <UART_SetConfig+0x1156>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	2b07      	cmp	r3, #7
 80080aa:	d01a      	beq.n	80080e2 <UART_SetConfig+0x1152>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d014      	beq.n	80080de <UART_SetConfig+0x114e>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	2b09      	cmp	r3, #9
 80080ba:	d00e      	beq.n	80080da <UART_SetConfig+0x114a>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2b0a      	cmp	r3, #10
 80080c2:	d008      	beq.n	80080d6 <UART_SetConfig+0x1146>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	2b0b      	cmp	r3, #11
 80080ca:	d102      	bne.n	80080d2 <UART_SetConfig+0x1142>
 80080cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80080d0:	e016      	b.n	8008100 <UART_SetConfig+0x1170>
 80080d2:	4b81      	ldr	r3, [pc, #516]	; (80082d8 <UART_SetConfig+0x1348>)
 80080d4:	e014      	b.n	8008100 <UART_SetConfig+0x1170>
 80080d6:	4b81      	ldr	r3, [pc, #516]	; (80082dc <UART_SetConfig+0x134c>)
 80080d8:	e012      	b.n	8008100 <UART_SetConfig+0x1170>
 80080da:	4b81      	ldr	r3, [pc, #516]	; (80082e0 <UART_SetConfig+0x1350>)
 80080dc:	e010      	b.n	8008100 <UART_SetConfig+0x1170>
 80080de:	4b81      	ldr	r3, [pc, #516]	; (80082e4 <UART_SetConfig+0x1354>)
 80080e0:	e00e      	b.n	8008100 <UART_SetConfig+0x1170>
 80080e2:	4b81      	ldr	r3, [pc, #516]	; (80082e8 <UART_SetConfig+0x1358>)
 80080e4:	e00c      	b.n	8008100 <UART_SetConfig+0x1170>
 80080e6:	4b81      	ldr	r3, [pc, #516]	; (80082ec <UART_SetConfig+0x135c>)
 80080e8:	e00a      	b.n	8008100 <UART_SetConfig+0x1170>
 80080ea:	4b81      	ldr	r3, [pc, #516]	; (80082f0 <UART_SetConfig+0x1360>)
 80080ec:	e008      	b.n	8008100 <UART_SetConfig+0x1170>
 80080ee:	4b81      	ldr	r3, [pc, #516]	; (80082f4 <UART_SetConfig+0x1364>)
 80080f0:	e006      	b.n	8008100 <UART_SetConfig+0x1170>
 80080f2:	4b81      	ldr	r3, [pc, #516]	; (80082f8 <UART_SetConfig+0x1368>)
 80080f4:	e004      	b.n	8008100 <UART_SetConfig+0x1170>
 80080f6:	4b81      	ldr	r3, [pc, #516]	; (80082fc <UART_SetConfig+0x136c>)
 80080f8:	e002      	b.n	8008100 <UART_SetConfig+0x1170>
 80080fa:	4b81      	ldr	r3, [pc, #516]	; (8008300 <UART_SetConfig+0x1370>)
 80080fc:	e000      	b.n	8008100 <UART_SetConfig+0x1170>
 80080fe:	4b76      	ldr	r3, [pc, #472]	; (80082d8 <UART_SetConfig+0x1348>)
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	6852      	ldr	r2, [r2, #4]
 8008104:	0852      	lsrs	r2, r2, #1
 8008106:	441a      	add	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008110:	b29b      	uxth	r3, r3
 8008112:	61fb      	str	r3, [r7, #28]
        break;
 8008114:	e0bd      	b.n	8008292 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008116:	f7fc fb13 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 800811a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d044      	beq.n	80081ae <UART_SetConfig+0x121e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	2b01      	cmp	r3, #1
 800812a:	d03e      	beq.n	80081aa <UART_SetConfig+0x121a>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b02      	cmp	r3, #2
 8008132:	d038      	beq.n	80081a6 <UART_SetConfig+0x1216>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b03      	cmp	r3, #3
 800813a:	d032      	beq.n	80081a2 <UART_SetConfig+0x1212>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	2b04      	cmp	r3, #4
 8008142:	d02c      	beq.n	800819e <UART_SetConfig+0x120e>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	2b05      	cmp	r3, #5
 800814a:	d026      	beq.n	800819a <UART_SetConfig+0x120a>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	2b06      	cmp	r3, #6
 8008152:	d020      	beq.n	8008196 <UART_SetConfig+0x1206>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	2b07      	cmp	r3, #7
 800815a:	d01a      	beq.n	8008192 <UART_SetConfig+0x1202>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b08      	cmp	r3, #8
 8008162:	d014      	beq.n	800818e <UART_SetConfig+0x11fe>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	2b09      	cmp	r3, #9
 800816a:	d00e      	beq.n	800818a <UART_SetConfig+0x11fa>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	2b0a      	cmp	r3, #10
 8008172:	d008      	beq.n	8008186 <UART_SetConfig+0x11f6>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b0b      	cmp	r3, #11
 800817a:	d102      	bne.n	8008182 <UART_SetConfig+0x11f2>
 800817c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008180:	e016      	b.n	80081b0 <UART_SetConfig+0x1220>
 8008182:	2301      	movs	r3, #1
 8008184:	e014      	b.n	80081b0 <UART_SetConfig+0x1220>
 8008186:	2380      	movs	r3, #128	; 0x80
 8008188:	e012      	b.n	80081b0 <UART_SetConfig+0x1220>
 800818a:	2340      	movs	r3, #64	; 0x40
 800818c:	e010      	b.n	80081b0 <UART_SetConfig+0x1220>
 800818e:	2320      	movs	r3, #32
 8008190:	e00e      	b.n	80081b0 <UART_SetConfig+0x1220>
 8008192:	2310      	movs	r3, #16
 8008194:	e00c      	b.n	80081b0 <UART_SetConfig+0x1220>
 8008196:	230c      	movs	r3, #12
 8008198:	e00a      	b.n	80081b0 <UART_SetConfig+0x1220>
 800819a:	230a      	movs	r3, #10
 800819c:	e008      	b.n	80081b0 <UART_SetConfig+0x1220>
 800819e:	2308      	movs	r3, #8
 80081a0:	e006      	b.n	80081b0 <UART_SetConfig+0x1220>
 80081a2:	2306      	movs	r3, #6
 80081a4:	e004      	b.n	80081b0 <UART_SetConfig+0x1220>
 80081a6:	2304      	movs	r3, #4
 80081a8:	e002      	b.n	80081b0 <UART_SetConfig+0x1220>
 80081aa:	2302      	movs	r3, #2
 80081ac:	e000      	b.n	80081b0 <UART_SetConfig+0x1220>
 80081ae:	2301      	movs	r3, #1
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	441a      	add	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	61fb      	str	r3, [r7, #28]
        break;
 80081ca:	e062      	b.n	8008292 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d04e      	beq.n	8008272 <UART_SetConfig+0x12e2>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d047      	beq.n	800826c <UART_SetConfig+0x12dc>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d040      	beq.n	8008266 <UART_SetConfig+0x12d6>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d039      	beq.n	8008260 <UART_SetConfig+0x12d0>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	d032      	beq.n	800825a <UART_SetConfig+0x12ca>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b05      	cmp	r3, #5
 80081fa:	d02b      	beq.n	8008254 <UART_SetConfig+0x12c4>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	2b06      	cmp	r3, #6
 8008202:	d024      	beq.n	800824e <UART_SetConfig+0x12be>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	2b07      	cmp	r3, #7
 800820a:	d01d      	beq.n	8008248 <UART_SetConfig+0x12b8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	2b08      	cmp	r3, #8
 8008212:	d016      	beq.n	8008242 <UART_SetConfig+0x12b2>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	2b09      	cmp	r3, #9
 800821a:	d00f      	beq.n	800823c <UART_SetConfig+0x12ac>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	2b0a      	cmp	r3, #10
 8008222:	d008      	beq.n	8008236 <UART_SetConfig+0x12a6>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	2b0b      	cmp	r3, #11
 800822a:	d101      	bne.n	8008230 <UART_SetConfig+0x12a0>
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	e022      	b.n	8008276 <UART_SetConfig+0x12e6>
 8008230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008234:	e01f      	b.n	8008276 <UART_SetConfig+0x12e6>
 8008236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800823a:	e01c      	b.n	8008276 <UART_SetConfig+0x12e6>
 800823c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008240:	e019      	b.n	8008276 <UART_SetConfig+0x12e6>
 8008242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008246:	e016      	b.n	8008276 <UART_SetConfig+0x12e6>
 8008248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800824c:	e013      	b.n	8008276 <UART_SetConfig+0x12e6>
 800824e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008252:	e010      	b.n	8008276 <UART_SetConfig+0x12e6>
 8008254:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008258:	e00d      	b.n	8008276 <UART_SetConfig+0x12e6>
 800825a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800825e:	e00a      	b.n	8008276 <UART_SetConfig+0x12e6>
 8008260:	f241 5355 	movw	r3, #5461	; 0x1555
 8008264:	e007      	b.n	8008276 <UART_SetConfig+0x12e6>
 8008266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800826a:	e004      	b.n	8008276 <UART_SetConfig+0x12e6>
 800826c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008270:	e001      	b.n	8008276 <UART_SetConfig+0x12e6>
 8008272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6852      	ldr	r2, [r2, #4]
 800827a:	0852      	lsrs	r2, r2, #1
 800827c:	441a      	add	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	fbb2 f3f3 	udiv	r3, r2, r3
 8008286:	b29b      	uxth	r3, r3
 8008288:	61fb      	str	r3, [r7, #28]
        break;
 800828a:	e002      	b.n	8008292 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	76fb      	strb	r3, [r7, #27]
        break;
 8008290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	2b0f      	cmp	r3, #15
 8008296:	d908      	bls.n	80082aa <UART_SetConfig+0x131a>
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800829e:	d204      	bcs.n	80082aa <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	60da      	str	r2, [r3, #12]
 80082a8:	e001      	b.n	80082ae <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80082ca:	7efb      	ldrb	r3, [r7, #27]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3728      	adds	r7, #40	; 0x28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80082d6:	bf00      	nop
 80082d8:	00f42400 	.word	0x00f42400
 80082dc:	0001e848 	.word	0x0001e848
 80082e0:	0003d090 	.word	0x0003d090
 80082e4:	0007a120 	.word	0x0007a120
 80082e8:	000f4240 	.word	0x000f4240
 80082ec:	00145855 	.word	0x00145855
 80082f0:	00186a00 	.word	0x00186a00
 80082f4:	001e8480 	.word	0x001e8480
 80082f8:	0028b0aa 	.word	0x0028b0aa
 80082fc:	003d0900 	.word	0x003d0900
 8008300:	007a1200 	.word	0x007a1200

08008304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00a      	beq.n	80083b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00a      	beq.n	80083d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01a      	beq.n	800841a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008402:	d10a      	bne.n	800841a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	605a      	str	r2, [r3, #4]
  }
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af02      	add	r7, sp, #8
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008458:	f7f9 fabc 	bl	80019d4 <HAL_GetTick>
 800845c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0308 	and.w	r3, r3, #8
 8008468:	2b08      	cmp	r3, #8
 800846a:	d10e      	bne.n	800848a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800846c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f82c 	bl	80084d8 <UART_WaitOnFlagUntilTimeout>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e022      	b.n	80084d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b04      	cmp	r3, #4
 8008496:	d10e      	bne.n	80084b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f816 	bl	80084d8 <UART_WaitOnFlagUntilTimeout>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e00c      	b.n	80084d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084e8:	e02c      	b.n	8008544 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d028      	beq.n	8008544 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f2:	f7f9 fa6f 	bl	80019d4 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d302      	bcc.n	8008508 <UART_WaitOnFlagUntilTimeout+0x30>
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d11d      	bne.n	8008544 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008516:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0201 	bic.w	r2, r2, #1
 8008526:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2220      	movs	r2, #32
 800852c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2220      	movs	r2, #32
 8008534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e00f      	b.n	8008564 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69da      	ldr	r2, [r3, #28]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4013      	ands	r3, r2
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	bf0c      	ite	eq
 8008554:	2301      	moveq	r3, #1
 8008556:	2300      	movne	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	461a      	mov	r2, r3
 800855c:	79fb      	ldrb	r3, [r7, #7]
 800855e:	429a      	cmp	r2, r3
 8008560:	d0c3      	beq.n	80084ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008582:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	6812      	ldr	r2, [r2, #0]
 800858e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008592:	f023 0301 	bic.w	r3, r3, #1
 8008596:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7fe fcd1 	bl	8006f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7fe fcad 	bl	8006f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008620:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008628:	2b22      	cmp	r3, #34	; 0x22
 800862a:	d13b      	bne.n	80086a4 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008634:	89bb      	ldrh	r3, [r7, #12]
 8008636:	b2d9      	uxtb	r1, r3
 8008638:	89fb      	ldrh	r3, [r7, #14]
 800863a:	b2da      	uxtb	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008640:	400a      	ands	r2, r1
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008656:	b29b      	uxth	r3, r3
 8008658:	3b01      	subs	r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008668:	b29b      	uxth	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d122      	bne.n	80086b4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800867c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 0201 	bic.w	r2, r2, #1
 800868c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2220      	movs	r2, #32
 8008692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7f8 fa3f 	bl	8000b20 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086a2:	e007      	b.n	80086b4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	699a      	ldr	r2, [r3, #24]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0208 	orr.w	r2, r2, #8
 80086b2:	619a      	str	r2, [r3, #24]
}
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086ca:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086d2:	2b22      	cmp	r3, #34	; 0x22
 80086d4:	d13b      	bne.n	800874e <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80086e4:	89ba      	ldrh	r2, [r7, #12]
 80086e6:	89fb      	ldrh	r3, [r7, #14]
 80086e8:	4013      	ands	r3, r2
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f4:	1c9a      	adds	r2, r3, #2
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008712:	b29b      	uxth	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d122      	bne.n	800875e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008726:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0201 	bic.w	r2, r2, #1
 8008736:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2220      	movs	r2, #32
 800873c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7f8 f9ea 	bl	8000b20 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800874c:	e007      	b.n	800875e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0208 	orr.w	r2, r2, #8
 800875c:	619a      	str	r2, [r3, #24]
}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008776:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800877e:	2b22      	cmp	r3, #34	; 0x22
 8008780:	d168      	bne.n	8008854 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008788:	81fb      	strh	r3, [r7, #14]
 800878a:	e03f      	b.n	800880c <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008794:	893b      	ldrh	r3, [r7, #8]
 8008796:	b2d9      	uxtb	r1, r3
 8008798:	89bb      	ldrh	r3, [r7, #12]
 800879a:	b2da      	uxtb	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a0:	400a      	ands	r2, r1
 80087a2:	b2d2      	uxtb	r2, r2
 80087a4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d11b      	bne.n	8008806 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087dc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	6812      	ldr	r2, [r2, #0]
 80087e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7f8 f98d 	bl	8000b20 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008806:	89fb      	ldrh	r3, [r7, #14]
 8008808:	3b01      	subs	r3, #1
 800880a:	81fb      	strh	r3, [r7, #14]
 800880c:	89fb      	ldrh	r3, [r7, #14]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1bc      	bne.n	800878c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008818:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800881a:	897b      	ldrh	r3, [r7, #10]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d021      	beq.n	8008864 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008826:	897a      	ldrh	r2, [r7, #10]
 8008828:	429a      	cmp	r2, r3
 800882a:	d21b      	bcs.n	8008864 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800883a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a0b      	ldr	r2, [pc, #44]	; (800886c <UART_RxISR_8BIT_FIFOEN+0x104>)
 8008840:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0220 	orr.w	r2, r2, #32
 8008850:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008852:	e007      	b.n	8008864 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0208 	orr.w	r2, r2, #8
 8008862:	619a      	str	r2, [r3, #24]
}
 8008864:	bf00      	nop
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	08008613 	.word	0x08008613

08008870 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800887e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008886:	2b22      	cmp	r3, #34	; 0x22
 8008888:	d168      	bne.n	800895c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008890:	82fb      	strh	r3, [r7, #22]
 8008892:	e03f      	b.n	8008914 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a0:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80088a2:	8a3a      	ldrh	r2, [r7, #16]
 80088a4:	8abb      	ldrh	r3, [r7, #20]
 80088a6:	4013      	ands	r3, r2
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b2:	1c9a      	adds	r2, r3, #2
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088be:	b29b      	uxth	r3, r3
 80088c0:	3b01      	subs	r3, #1
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d11b      	bne.n	800890e <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088e4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7f8 f909 	bl	8000b20 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800890e:	8afb      	ldrh	r3, [r7, #22]
 8008910:	3b01      	subs	r3, #1
 8008912:	82fb      	strh	r3, [r7, #22]
 8008914:	8afb      	ldrh	r3, [r7, #22]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1bc      	bne.n	8008894 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008920:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008922:	8a7b      	ldrh	r3, [r7, #18]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d021      	beq.n	800896c <UART_RxISR_16BIT_FIFOEN+0xfc>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800892e:	8a7a      	ldrh	r2, [r7, #18]
 8008930:	429a      	cmp	r2, r3
 8008932:	d21b      	bcs.n	800896c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689a      	ldr	r2, [r3, #8]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008942:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a0b      	ldr	r2, [pc, #44]	; (8008974 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8008948:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0220 	orr.w	r2, r2, #32
 8008958:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800895a:	e007      	b.n	800896c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0208 	orr.w	r2, r2, #8
 800896a:	619a      	str	r2, [r3, #24]
}
 800896c:	bf00      	nop
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	080086bd 	.word	0x080086bd

08008978 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <HAL_UARTEx_DisableFifoMode+0x16>
 80089c6:	2302      	movs	r3, #2
 80089c8:	e027      	b.n	8008a1a <HAL_UARTEx_DisableFifoMode+0x66>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2224      	movs	r2, #36	; 0x24
 80089d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0201 	bic.w	r2, r2, #1
 80089f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e02d      	b.n	8008a9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2224      	movs	r2, #36	; 0x24
 8008a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0201 	bic.w	r2, r2, #1
 8008a64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f850 	bl	8008b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d101      	bne.n	8008aba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	e02d      	b.n	8008b16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2224      	movs	r2, #36	; 0x24
 8008ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0201 	bic.w	r2, r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f812 	bl	8008b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b089      	sub	sp, #36	; 0x24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008b28:	4a2f      	ldr	r2, [pc, #188]	; (8008be8 <UARTEx_SetNbDataToProcess+0xc8>)
 8008b2a:	f107 0314 	add.w	r3, r7, #20
 8008b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008b36:	4a2d      	ldr	r2, [pc, #180]	; (8008bec <UARTEx_SetNbDataToProcess+0xcc>)
 8008b38:	f107 030c 	add.w	r3, r7, #12
 8008b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d108      	bne.n	8008b5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b5c:	e03d      	b.n	8008bda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b5e:	2308      	movs	r3, #8
 8008b60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b62:	2308      	movs	r3, #8
 8008b64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	0e5b      	lsrs	r3, r3, #25
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	0f5b      	lsrs	r3, r3, #29
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b86:	7fbb      	ldrb	r3, [r7, #30]
 8008b88:	7f3a      	ldrb	r2, [r7, #28]
 8008b8a:	f107 0120 	add.w	r1, r7, #32
 8008b8e:	440a      	add	r2, r1
 8008b90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008b94:	fb02 f303 	mul.w	r3, r2, r3
 8008b98:	7f3a      	ldrb	r2, [r7, #28]
 8008b9a:	f107 0120 	add.w	r1, r7, #32
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008bb0:	7ffb      	ldrb	r3, [r7, #31]
 8008bb2:	7f7a      	ldrb	r2, [r7, #29]
 8008bb4:	f107 0120 	add.w	r1, r7, #32
 8008bb8:	440a      	add	r2, r1
 8008bba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
 8008bc2:	7f7a      	ldrb	r2, [r7, #29]
 8008bc4:	f107 0120 	add.w	r1, r7, #32
 8008bc8:	440a      	add	r2, r1
 8008bca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008bce:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bda:	bf00      	nop
 8008bdc:	3724      	adds	r7, #36	; 0x24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	08008c60 	.word	0x08008c60
 8008bec:	08008c68 	.word	0x08008c68

08008bf0 <__libc_init_array>:
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	4e0d      	ldr	r6, [pc, #52]	; (8008c28 <__libc_init_array+0x38>)
 8008bf4:	4c0d      	ldr	r4, [pc, #52]	; (8008c2c <__libc_init_array+0x3c>)
 8008bf6:	1ba4      	subs	r4, r4, r6
 8008bf8:	10a4      	asrs	r4, r4, #2
 8008bfa:	2500      	movs	r5, #0
 8008bfc:	42a5      	cmp	r5, r4
 8008bfe:	d109      	bne.n	8008c14 <__libc_init_array+0x24>
 8008c00:	4e0b      	ldr	r6, [pc, #44]	; (8008c30 <__libc_init_array+0x40>)
 8008c02:	4c0c      	ldr	r4, [pc, #48]	; (8008c34 <__libc_init_array+0x44>)
 8008c04:	f000 f820 	bl	8008c48 <_init>
 8008c08:	1ba4      	subs	r4, r4, r6
 8008c0a:	10a4      	asrs	r4, r4, #2
 8008c0c:	2500      	movs	r5, #0
 8008c0e:	42a5      	cmp	r5, r4
 8008c10:	d105      	bne.n	8008c1e <__libc_init_array+0x2e>
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c18:	4798      	blx	r3
 8008c1a:	3501      	adds	r5, #1
 8008c1c:	e7ee      	b.n	8008bfc <__libc_init_array+0xc>
 8008c1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c22:	4798      	blx	r3
 8008c24:	3501      	adds	r5, #1
 8008c26:	e7f2      	b.n	8008c0e <__libc_init_array+0x1e>
 8008c28:	08008c90 	.word	0x08008c90
 8008c2c:	08008c90 	.word	0x08008c90
 8008c30:	08008c90 	.word	0x08008c90
 8008c34:	08008c94 	.word	0x08008c94

08008c38 <memset>:
 8008c38:	4402      	add	r2, r0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d100      	bne.n	8008c42 <memset+0xa>
 8008c40:	4770      	bx	lr
 8008c42:	f803 1b01 	strb.w	r1, [r3], #1
 8008c46:	e7f9      	b.n	8008c3c <memset+0x4>

08008c48 <_init>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr

08008c54 <_fini>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr
