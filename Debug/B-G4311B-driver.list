
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b0  080067b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b8  080067b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080067c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  080067cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080067cc  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011567  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a0  00000000  00000000  000315a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00033848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  00034890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df10  00000000  00000000  000357b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc49  00000000  00000000  000536c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ee7  00000000  00000000  00061309  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001241f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  0012426c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006770 	.word	0x08006770

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006770 	.word	0x08006770

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0xac>)
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_GPIO_Init+0xb0>)
 80005a4:	f001 f8b6 	bl	8001714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f001 f816 	bl	80015de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f001 f82d 	bl	8001612 <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10110000 	.word	0x10110000
 80005c8:	48000800 	.word	0x48000800

080005cc <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005dc:	d122      	bne.n	8000624 <HAL_GPIO_EXTI_Callback+0x58>
	{
				 HAL_TIMEx_HallSensor_Start(&htim4);
 80005de:	4813      	ldr	r0, [pc, #76]	; (800062c <HAL_GPIO_EXTI_Callback+0x60>)
 80005e0:	f003 ff28 	bl	8004434 <HAL_TIMEx_HallSensor_Start>

				 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 80005e4:	2100      	movs	r1, #0
 80005e6:	4812      	ldr	r0, [pc, #72]	; (8000630 <HAL_GPIO_EXTI_Callback+0x64>)
 80005e8:	f003 ff7a 	bl	80044e0 <HAL_TIMEx_PWMN_Start_IT>
				 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 80005ec:	2104      	movs	r1, #4
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <HAL_GPIO_EXTI_Callback+0x64>)
 80005f0:	f003 ff76 	bl	80044e0 <HAL_TIMEx_PWMN_Start_IT>
				 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 80005f4:	2108      	movs	r1, #8
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <HAL_GPIO_EXTI_Callback+0x64>)
 80005f8:	f003 ff72 	bl	80044e0 <HAL_TIMEx_PWMN_Start_IT>

				 HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80005fc:	2100      	movs	r1, #0
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <HAL_GPIO_EXTI_Callback+0x68>)
 8000600:	f002 fb1c 	bl	8002c3c <HAL_TIM_IC_Start>
				 HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000604:	2104      	movs	r1, #4
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <HAL_GPIO_EXTI_Callback+0x68>)
 8000608:	f002 fb18 	bl	8002c3c <HAL_TIM_IC_Start>

				 TIM4->CNT=0;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_GPIO_EXTI_Callback+0x6c>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
				 TIM4->CCR1=0;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000614:	2200      	movs	r2, #0
 8000616:	635a      	str	r2, [r3, #52]	; 0x34


				 start_stop=1;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_GPIO_EXTI_Callback+0x70>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
				 licznik=0;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <HAL_GPIO_EXTI_Callback+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]

	}
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000034 	.word	0x20000034
 8000630:	20000080 	.word	0x20000080
 8000634:	200000cc 	.word	0x200000cc
 8000638:	40000800 	.word	0x40000800
 800063c:	20000031 	.word	0x20000031
 8000640:	2000002f 	.word	0x2000002f

08000644 <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a97      	ldr	r2, [pc, #604]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	f040 8126 	bne.w	80008a4 <HAL_TIMEx_CommutCallback+0x260>
	{

	if (start_stop==1)
 8000658:	4b96      	ldr	r3, [pc, #600]	; (80008b4 <HAL_TIMEx_CommutCallback+0x270>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b01      	cmp	r3, #1
 8000660:	f040 8120 	bne.w	80008a4 <HAL_TIMEx_CommutCallback+0x260>
	{


										if( a==1 && b==0 && c==0)
 8000664:	4b94      	ldr	r3, [pc, #592]	; (80008b8 <HAL_TIMEx_CommutCallback+0x274>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d12b      	bne.n	80006c4 <HAL_TIMEx_CommutCallback+0x80>
 800066c:	4b93      	ldr	r3, [pc, #588]	; (80008bc <HAL_TIMEx_CommutCallback+0x278>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d127      	bne.n	80006c4 <HAL_TIMEx_CommutCallback+0x80>
 8000674:	4b92      	ldr	r3, [pc, #584]	; (80008c0 <HAL_TIMEx_CommutCallback+0x27c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d123      	bne.n	80006c4 <HAL_TIMEx_CommutCallback+0x80>
										{
										SET_CC1_T1;
 800067c:	4b8c      	ldr	r3, [pc, #560]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	4a8b      	ldr	r2, [pc, #556]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6213      	str	r3, [r2, #32]
										RESET_CC1N_T2;
 8000688:	4b89      	ldr	r3, [pc, #548]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800068a:	6a1b      	ldr	r3, [r3, #32]
 800068c:	4a88      	ldr	r2, [pc, #544]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800068e:	f023 0304 	bic.w	r3, r3, #4
 8000692:	6213      	str	r3, [r2, #32]
										RESET_CC2_T3;
 8000694:	4b86      	ldr	r3, [pc, #536]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000696:	6a1b      	ldr	r3, [r3, #32]
 8000698:	4a85      	ldr	r2, [pc, #532]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800069a:	f023 0310 	bic.w	r3, r3, #16
 800069e:	6213      	str	r3, [r2, #32]
										SET_CC2N_T4;
 80006a0:	4b83      	ldr	r3, [pc, #524]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	4a82      	ldr	r2, [pc, #520]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006aa:	6213      	str	r3, [r2, #32]
										RESET_CC3_T5;
 80006ac:	4b80      	ldr	r3, [pc, #512]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	4a7f      	ldr	r2, [pc, #508]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006b6:	6213      	str	r3, [r2, #32]
										RESET_CC3N_T6;
 80006b8:	4b7d      	ldr	r3, [pc, #500]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a7c      	ldr	r2, [pc, #496]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006c2:	6213      	str	r3, [r2, #32]
										}

										if( a==1 && b==1 && c==0)
 80006c4:	4b7c      	ldr	r3, [pc, #496]	; (80008b8 <HAL_TIMEx_CommutCallback+0x274>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d12b      	bne.n	8000724 <HAL_TIMEx_CommutCallback+0xe0>
 80006cc:	4b7b      	ldr	r3, [pc, #492]	; (80008bc <HAL_TIMEx_CommutCallback+0x278>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d127      	bne.n	8000724 <HAL_TIMEx_CommutCallback+0xe0>
 80006d4:	4b7a      	ldr	r3, [pc, #488]	; (80008c0 <HAL_TIMEx_CommutCallback+0x27c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d123      	bne.n	8000724 <HAL_TIMEx_CommutCallback+0xe0>
										{
										SET_CC1_T1;
 80006dc:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006de:	6a1b      	ldr	r3, [r3, #32]
 80006e0:	4a73      	ldr	r2, [pc, #460]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6213      	str	r3, [r2, #32]
										RESET_CC1N_T2;
 80006e8:	4b71      	ldr	r3, [pc, #452]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006ea:	6a1b      	ldr	r3, [r3, #32]
 80006ec:	4a70      	ldr	r2, [pc, #448]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006ee:	f023 0304 	bic.w	r3, r3, #4
 80006f2:	6213      	str	r3, [r2, #32]
										RESET_CC2_T3;
 80006f4:	4b6e      	ldr	r3, [pc, #440]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006f6:	6a1b      	ldr	r3, [r3, #32]
 80006f8:	4a6d      	ldr	r2, [pc, #436]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80006fa:	f023 0310 	bic.w	r3, r3, #16
 80006fe:	6213      	str	r3, [r2, #32]
										RESET_CC2N_T4;
 8000700:	4b6b      	ldr	r3, [pc, #428]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000702:	6a1b      	ldr	r3, [r3, #32]
 8000704:	4a6a      	ldr	r2, [pc, #424]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800070a:	6213      	str	r3, [r2, #32]
										RESET_CC3_T5;
 800070c:	4b68      	ldr	r3, [pc, #416]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800070e:	6a1b      	ldr	r3, [r3, #32]
 8000710:	4a67      	ldr	r2, [pc, #412]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000716:	6213      	str	r3, [r2, #32]
										SET_CC3N_T6;
 8000718:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800071a:	6a1b      	ldr	r3, [r3, #32]
 800071c:	4a64      	ldr	r2, [pc, #400]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800071e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000722:	6213      	str	r3, [r2, #32]
										}


										if( a==0 && b==1 && c==0)
 8000724:	4b64      	ldr	r3, [pc, #400]	; (80008b8 <HAL_TIMEx_CommutCallback+0x274>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d12b      	bne.n	8000784 <HAL_TIMEx_CommutCallback+0x140>
 800072c:	4b63      	ldr	r3, [pc, #396]	; (80008bc <HAL_TIMEx_CommutCallback+0x278>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d127      	bne.n	8000784 <HAL_TIMEx_CommutCallback+0x140>
 8000734:	4b62      	ldr	r3, [pc, #392]	; (80008c0 <HAL_TIMEx_CommutCallback+0x27c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d123      	bne.n	8000784 <HAL_TIMEx_CommutCallback+0x140>
										{
										RESET_CC1_T1;
 800073c:	4b5c      	ldr	r3, [pc, #368]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	4a5b      	ldr	r2, [pc, #364]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	6213      	str	r3, [r2, #32]
										RESET_CC1N_T2;
 8000748:	4b59      	ldr	r3, [pc, #356]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	4a58      	ldr	r2, [pc, #352]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800074e:	f023 0304 	bic.w	r3, r3, #4
 8000752:	6213      	str	r3, [r2, #32]
										SET_CC2_T3;
 8000754:	4b56      	ldr	r3, [pc, #344]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000756:	6a1b      	ldr	r3, [r3, #32]
 8000758:	4a55      	ldr	r2, [pc, #340]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6213      	str	r3, [r2, #32]
										RESET_CC2N_T4;
 8000760:	4b53      	ldr	r3, [pc, #332]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000762:	6a1b      	ldr	r3, [r3, #32]
 8000764:	4a52      	ldr	r2, [pc, #328]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800076a:	6213      	str	r3, [r2, #32]
										RESET_CC3_T5;
 800076c:	4b50      	ldr	r3, [pc, #320]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800076e:	6a1b      	ldr	r3, [r3, #32]
 8000770:	4a4f      	ldr	r2, [pc, #316]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000776:	6213      	str	r3, [r2, #32]
										SET_CC3N_T6;
 8000778:	4b4d      	ldr	r3, [pc, #308]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800077a:	6a1b      	ldr	r3, [r3, #32]
 800077c:	4a4c      	ldr	r2, [pc, #304]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800077e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000782:	6213      	str	r3, [r2, #32]
										}


										if( a==0 && b==1 && c==1)
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <HAL_TIMEx_CommutCallback+0x274>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d12b      	bne.n	80007e4 <HAL_TIMEx_CommutCallback+0x1a0>
 800078c:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <HAL_TIMEx_CommutCallback+0x278>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d127      	bne.n	80007e4 <HAL_TIMEx_CommutCallback+0x1a0>
 8000794:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <HAL_TIMEx_CommutCallback+0x27c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d123      	bne.n	80007e4 <HAL_TIMEx_CommutCallback+0x1a0>
										{
				    					RESET_CC1_T1;
 800079c:	4b44      	ldr	r3, [pc, #272]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800079e:	6a1b      	ldr	r3, [r3, #32]
 80007a0:	4a43      	ldr	r2, [pc, #268]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007a2:	f023 0301 	bic.w	r3, r3, #1
 80007a6:	6213      	str	r3, [r2, #32]
				    					SET_CC1N_T2;
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007aa:	6a1b      	ldr	r3, [r3, #32]
 80007ac:	4a40      	ldr	r2, [pc, #256]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6213      	str	r3, [r2, #32]
				    					SET_CC2_T3;
 80007b4:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007b6:	6a1b      	ldr	r3, [r3, #32]
 80007b8:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6213      	str	r3, [r2, #32]
				    					RESET_CC2N_T4;
 80007c0:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007c2:	6a1b      	ldr	r3, [r3, #32]
 80007c4:	4a3a      	ldr	r2, [pc, #232]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ca:	6213      	str	r3, [r2, #32]
				    					RESET_CC3_T5;
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007ce:	6a1b      	ldr	r3, [r3, #32]
 80007d0:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007d6:	6213      	str	r3, [r2, #32]
				    					RESET_CC3N_T6;
 80007d8:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007da:	6a1b      	ldr	r3, [r3, #32]
 80007dc:	4a34      	ldr	r2, [pc, #208]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007e2:	6213      	str	r3, [r2, #32]
										}


				    					if( a==0 && b==0 && c==1)
 80007e4:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <HAL_TIMEx_CommutCallback+0x274>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d12b      	bne.n	8000844 <HAL_TIMEx_CommutCallback+0x200>
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <HAL_TIMEx_CommutCallback+0x278>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d127      	bne.n	8000844 <HAL_TIMEx_CommutCallback+0x200>
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <HAL_TIMEx_CommutCallback+0x27c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d123      	bne.n	8000844 <HAL_TIMEx_CommutCallback+0x200>
				    					{
				    					RESET_CC1_T1;
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 80007fe:	6a1b      	ldr	r3, [r3, #32]
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000802:	f023 0301 	bic.w	r3, r3, #1
 8000806:	6213      	str	r3, [r2, #32]
				    					SET_CC1N_T2;
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800080a:	6a1b      	ldr	r3, [r3, #32]
 800080c:	4a28      	ldr	r2, [pc, #160]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6213      	str	r3, [r2, #32]
				    					RESET_CC2_T3;
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000816:	6a1b      	ldr	r3, [r3, #32]
 8000818:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800081a:	f023 0310 	bic.w	r3, r3, #16
 800081e:	6213      	str	r3, [r2, #32]
				    					RESET_CC2N_T4;
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000822:	6a1b      	ldr	r3, [r3, #32]
 8000824:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800082a:	6213      	str	r3, [r2, #32]
				    					SET_CC3_T5;
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800082e:	6a1b      	ldr	r3, [r3, #32]
 8000830:	4a1f      	ldr	r2, [pc, #124]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000836:	6213      	str	r3, [r2, #32]
				    					RESET_CC3N_T6;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800083a:	6a1b      	ldr	r3, [r3, #32]
 800083c:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800083e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000842:	6213      	str	r3, [r2, #32]
				    					}


				    					if( a==1 && b==0 && c==1)
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_TIMEx_CommutCallback+0x274>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d12b      	bne.n	80008a4 <HAL_TIMEx_CommutCallback+0x260>
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_TIMEx_CommutCallback+0x278>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d127      	bne.n	80008a4 <HAL_TIMEx_CommutCallback+0x260>
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_TIMEx_CommutCallback+0x27c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d123      	bne.n	80008a4 <HAL_TIMEx_CommutCallback+0x260>
				    					{
				    					RESET_CC1_T1;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800085e:	6a1b      	ldr	r3, [r3, #32]
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000862:	f023 0301 	bic.w	r3, r3, #1
 8000866:	6213      	str	r3, [r2, #32]
				    					RESET_CC1N_T2;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800086a:	6a1b      	ldr	r3, [r3, #32]
 800086c:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800086e:	f023 0304 	bic.w	r3, r3, #4
 8000872:	6213      	str	r3, [r2, #32]
				    					RESET_CC2_T3;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800087a:	f023 0310 	bic.w	r3, r3, #16
 800087e:	6213      	str	r3, [r2, #32]
				    					SET_CC2N_T4;
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000882:	6a1b      	ldr	r3, [r3, #32]
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088a:	6213      	str	r3, [r2, #32]
				    					SET_CC3_T5;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800088e:	6a1b      	ldr	r3, [r3, #32]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 8000892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000896:	6213      	str	r3, [r2, #32]
				    					RESET_CC3N_T6;
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800089a:	6a1b      	ldr	r3, [r3, #32]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_TIMEx_CommutCallback+0x26c>)
 800089e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008a2:	6213      	str	r3, [r2, #32]

	}


	}
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40012c00 	.word	0x40012c00
 80008b4:	20000031 	.word	0x20000031
 80008b8:	20000030 	.word	0x20000030
 80008bc:	20000028 	.word	0x20000028
 80008c0:	2000002e 	.word	0x2000002e

080008c4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	//i++;
	if(htim->Instance==TIM2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		//  TIM1->CCR2=TIM2->CCR2;
		//  TIM1->CCR3=TIM2->CCR2;
		}
	}

}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f000 fd2f 	bl	8001346 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f882 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f7ff fe14 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008f0:	f000 f97c 	bl	8000bec <MX_TIM1_Init>
  MX_TIM4_Init();
 80008f4:	f000 faf8 	bl	8000ee8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80008f8:	f000 fc64 	bl	80011c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008fc:	f000 fa5a 	bl	8000db4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //////// konfiguracja Timer 2  ////////////
    TIM2->ARR=0xFFFF;
 8000900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->PSC=500;
 800090a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800090e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000912:	629a      	str	r2, [r3, #40]	; 0x28

  //////// konfiguracja Timer 4  ////////////
    TIM4->ARR=0xFFFF;
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <main+0xf4>)
 8000916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->PSC=500;
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <main+0xf4>)
 800091e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->CCR2=2;
 8000924:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <main+0xf4>)
 8000926:	2202      	movs	r2, #2
 8000928:	639a      	str	r2, [r3, #56]	; 0x38

    //////// konfiguracja Timer 1  ////////////
    TIM1->ARR=0;
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <main+0xf8>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC=0;
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <main+0xf8>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->CCR1=0;
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <main+0xf8>)
 8000938:	2200      	movs	r2, #0
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2=0;
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <main+0xf8>)
 800093e:	2200      	movs	r2, #0
 8000940:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3=0;
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <main+0xf8>)
 8000944:	2200      	movs	r2, #0
 8000946:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_TIMEx_ConfigCommutEvent_IT(&htim1,TIM_TS_ITR3, TIM_COMMUTATION_TRGI);
 8000948:	2204      	movs	r2, #4
 800094a:	2130      	movs	r1, #48	; 0x30
 800094c:	4823      	ldr	r0, [pc, #140]	; (80009dc <main+0xfc>)
 800094e:	f003 fe95 	bl	800467c <HAL_TIMEx_ConfigCommutEvent_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000952:	2140      	movs	r1, #64	; 0x40
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <main+0x100>)
 8000956:	f001 f85f 	bl	8001a18 <HAL_GPIO_ReadPin>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d003      	beq.n	8000968 <main+0x88>
	 		  a=1;
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <main+0x104>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e002      	b.n	800096e <main+0x8e>
	 	  else
	 		  a=0;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <main+0x104>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]

	 	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	481b      	ldr	r0, [pc, #108]	; (80009e0 <main+0x100>)
 8000972:	f001 f851 	bl	8001a18 <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d003      	beq.n	8000984 <main+0xa4>
	 	  		  b=1;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0x108>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e002      	b.n	800098a <main+0xaa>
	 	  else
	 		  b=0;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <main+0x108>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]

	 	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <main+0x100>)
 8000990:	f001 f842 	bl	8001a18 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <main+0xc2>
	 	  		  c=1;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <main+0x10c>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	e002      	b.n	80009a8 <main+0xc8>
	 	  else
	 		  c=0;
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <main+0x10c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]

	  TIM1->ARR=TIM2->CCR1;
 80009a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <main+0xf8>)
 80009ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b0:	62d3      	str	r3, [r2, #44]	; 0x2c
	  TIM1->CCR1=TIM2->CCR2;
 80009b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <main+0xf8>)
 80009b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ba:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1->CCR2=TIM2->CCR2;
 80009bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c0:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <main+0xf8>)
 80009c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009c4:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM1->CCR3=TIM2->CCR2;
 80009c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ca:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <main+0xf8>)
 80009cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ce:	63d3      	str	r3, [r2, #60]	; 0x3c
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80009d0:	e7bf      	b.n	8000952 <main+0x72>
 80009d2:	bf00      	nop
 80009d4:	40000800 	.word	0x40000800
 80009d8:	40012c00 	.word	0x40012c00
 80009dc:	20000080 	.word	0x20000080
 80009e0:	48000400 	.word	0x48000400
 80009e4:	20000030 	.word	0x20000030
 80009e8:	20000028 	.word	0x20000028
 80009ec:	2000002e 	.word	0x2000002e

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0a4      	sub	sp, #144	; 0x90
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009fa:	2238      	movs	r2, #56	; 0x38
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 feae 	bl	8006760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2244      	movs	r2, #68	; 0x44
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 fea0 	bl	8006760 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f001 f829 	bl	8001a78 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a26:	2301      	movs	r3, #1
 8000a28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a34:	2303      	movs	r3, #3
 8000a36:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a3c:	2350      	movs	r3, #80	; 0x50
 8000a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 f8b1 	bl	8001bc0 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a64:	f000 f826 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a80:	2107      	movs	r1, #7
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fbb4 	bl	80021f0 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a8e:	f000 f811 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fdc3 	bl	8002628 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000aa8:	f000 f804 	bl	8000ab4 <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	3790      	adds	r7, #144	; 0x90
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	6093      	str	r3, [r2, #8]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_MspInit+0x44>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6613      	str	r3, [r2, #96]	; 0x60
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x44>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000b1a:	f7ff ffd3 	bl	8000ac4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 fc34 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000b8e:	f002 f917 	bl	8002dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000080 	.word	0x20000080

08000b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <USART2_IRQHandler+0x10>)
 8000ba2:	f003 ffc3 	bl	8004b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000118 	.word	0x20000118

08000bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000bb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bb8:	f000 ff46 	bl	8001a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <SystemInit+0x28>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <SystemInit+0x28>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SystemInit+0x28>)
 8000bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bda:	609a      	str	r2, [r3, #8]
#endif
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0a0      	sub	sp, #128	; 0x80
 8000bf0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]
 8000c2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2234      	movs	r2, #52	; 0x34
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f005 fd92 	bl	8006760 <memset>

  htim1.Instance = TIM1;
 8000c3c:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c3e:	4a5c      	ldr	r2, [pc, #368]	; (8000db0 <MX_TIM1_Init+0x1c4>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c42:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b58      	ldr	r3, [pc, #352]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000c4e:	4b57      	ldr	r3, [pc, #348]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b55      	ldr	r3, [pc, #340]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c5a:	4b54      	ldr	r3, [pc, #336]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b52      	ldr	r3, [pc, #328]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c66:	4851      	ldr	r0, [pc, #324]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c68:	f001 fece 	bl	8002a08 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c72:	f7ff ff1f 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7a:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c80:	4619      	mov	r1, r3
 8000c82:	484a      	ldr	r0, [pc, #296]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c84:	f002 fbc0 	bl	8003408 <HAL_TIM_ConfigClockSource>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c8e:	f7ff ff11 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c92:	4846      	ldr	r0, [pc, #280]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000c94:	f001 ff0f 	bl	8002ab6 <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000c9e:	f7ff ff09 	bl	8000ab4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000ca6:	2330      	movs	r3, #48	; 0x30
 8000ca8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000caa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cae:	4619      	mov	r1, r3
 8000cb0:	483e      	ldr	r0, [pc, #248]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000cb2:	f002 fc87 	bl	80035c4 <HAL_TIM_SlaveConfigSynchro>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000cbc:	f7ff fefa 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000cc0:	2370      	movs	r3, #112	; 0x70
 8000cc2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ccc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4836      	ldr	r0, [pc, #216]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000cd4:	f003 fd56 	bl	8004784 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000cde:	f7ff fee9 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce2:	2360      	movs	r3, #96	; 0x60
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cea:	2300      	movs	r3, #0
 8000cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d02:	2200      	movs	r2, #0
 8000d04:	4619      	mov	r1, r3
 8000d06:	4829      	ldr	r0, [pc, #164]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000d08:	f002 fa6e 	bl	80031e8 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d12:	f7ff fecf 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d1e:	2204      	movs	r2, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4822      	ldr	r0, [pc, #136]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000d24:	f002 fa60 	bl	80031e8 <HAL_TIM_PWM_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000d2e:	f7ff fec1 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	481b      	ldr	r0, [pc, #108]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000d40:	f002 fa52 	bl	80031e8 <HAL_TIM_PWM_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000d4a:	f7ff feb3 	bl	8000ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d52:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8000d5e:	2344      	movs	r3, #68	; 0x44
 8000d60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4807      	ldr	r0, [pc, #28]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000d90:	f003 fd7a 	bl	8004888 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8000d9a:	f7ff fe8b 	bl	8000ab4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <MX_TIM1_Init+0x1c0>)
 8000da0:	f000 f99a 	bl	80010d8 <HAL_TIM_MspPostInit>

}
 8000da4:	bf00      	nop
 8000da6:	3780      	adds	r7, #128	; 0x80
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000080 	.word	0x20000080
 8000db0:	40012c00 	.word	0x40012c00

08000db4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b090      	sub	sp, #64	; 0x40
 8000db8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000df0:	4b3c      	ldr	r3, [pc, #240]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000df8:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000e04:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b34      	ldr	r3, [pc, #208]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e16:	4833      	ldr	r0, [pc, #204]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000e18:	f001 fdf6 	bl	8002a08 <HAL_TIM_Base_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e22:	f7ff fe47 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e30:	4619      	mov	r1, r3
 8000e32:	482c      	ldr	r0, [pc, #176]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000e34:	f002 fae8 	bl	8003408 <HAL_TIM_ConfigClockSource>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e3e:	f7ff fe39 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e42:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000e44:	f001 fe98 	bl	8002b78 <HAL_TIM_IC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e4e:	f7ff fe31 	bl	8000ab4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e52:	2304      	movs	r3, #4
 8000e54:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e56:	2350      	movs	r3, #80	; 0x50
 8000e58:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000e6a:	f002 fbab 	bl	80035c4 <HAL_TIM_SlaveConfigSynchro>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000e74:	f7ff fe1e 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4619      	mov	r1, r3
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000e88:	f003 fc7c 	bl	8004784 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000e92:	f7ff fe0f 	bl	8000ab4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000eae:	f002 f906 	bl	80030be <HAL_TIM_IC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000eb8:	f7ff fdfc 	bl	8000ab4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_TIM2_Init+0x130>)
 8000ecc:	f002 f8f7 	bl	80030be <HAL_TIM_IC_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000ed6:	f7ff fded 	bl	8000ab4 <Error_Handler>
  }

}
 8000eda:	bf00      	nop
 8000edc:	3740      	adds	r7, #64	; 0x40
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000cc 	.word	0x200000cc

08000ee8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	; 0x30
 8000eec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f16:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <MX_TIM4_Init+0xcc>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f38:	481d      	ldr	r0, [pc, #116]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f3a:	f001 fd65 	bl	8002a08 <HAL_TIM_Base_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000f44:	f7ff fdb6 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	4619      	mov	r1, r3
 8000f54:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f56:	f002 fa57 	bl	8003408 <HAL_TIM_ConfigClockSource>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f60:	f7ff fda8 	bl	8000ab4 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f7c:	f003 f9a1 	bl	80042c2 <HAL_TIMEx_HallSensor_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000f86:	f7ff fd95 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000f8a:	2350      	movs	r3, #80	; 0x50
 8000f8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_TIM4_Init+0xc8>)
 8000f98:	f003 fbf4 	bl	8004784 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000fa2:	f7ff fd87 	bl	8000ab4 <Error_Handler>
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3730      	adds	r7, #48	; 0x30
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000034 	.word	0x20000034
 8000fb4:	40000800 	.word	0x40000800

08000fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08c      	sub	sp, #48	; 0x30
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a3c      	ldr	r2, [pc, #240]	; (80010c8 <HAL_TIM_Base_MspInit+0x110>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d114      	bne.n	8001004 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	4a3b      	ldr	r2, [pc, #236]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8000fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fe4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe6:	4b39      	ldr	r3, [pc, #228]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fee:	61bb      	str	r3, [r7, #24]
 8000ff0:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	201a      	movs	r0, #26
 8000ff8:	f000 faf1 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ffc:	201a      	movs	r0, #26
 8000ffe:	f000 fb08 	bl	8001612 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001002:	e05d      	b.n	80010c0 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800100c:	d12a      	bne.n	8001064 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6593      	str	r3, [r2, #88]	; 0x58
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a28      	ldr	r2, [pc, #160]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 800103e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001048:	2302      	movs	r3, #2
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104c:	2302      	movs	r3, #2
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f000 fb59 	bl	8001714 <HAL_GPIO_Init>
}
 8001062:	e02d      	b.n	80010c0 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM4)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_TIM_Base_MspInit+0x118>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d128      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a16      	ldr	r2, [pc, #88]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_TIM_Base_MspInit+0x114>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_W_TIM4_Pin|HALL_U_TIM4_Pin|HALL_V_TIM4_Pin;
 800109e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <HAL_TIM_Base_MspInit+0x11c>)
 80010bc:	f000 fb2a 	bl	8001714 <HAL_GPIO_Init>
}
 80010c0:	bf00      	nop
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40012c00 	.word	0x40012c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40000800 	.word	0x40000800
 80010d4:	48000400 	.word	0x48000400

080010d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a2f      	ldr	r2, [pc, #188]	; (80011b4 <HAL_TIM_MspPostInit+0xdc>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d157      	bne.n	80011aa <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a2e      	ldr	r2, [pc, #184]	; (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_TIM_MspPostInit+0xe0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001154:	2304      	movs	r3, #4
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4817      	ldr	r0, [pc, #92]	; (80011bc <HAL_TIM_MspPostInit+0xe4>)
 8001160:	f000 fad8 	bl	8001714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116e:	2302      	movs	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2302      	movs	r3, #2
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001176:	2304      	movs	r3, #4
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	480f      	ldr	r0, [pc, #60]	; (80011c0 <HAL_TIM_MspPostInit+0xe8>)
 8001182:	f000 fac7 	bl	8001714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001186:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001190:	2302      	movs	r3, #2
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001198:	2306      	movs	r3, #6
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f000 fab5 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012c00 	.word	0x40012c00
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000800 	.word	0x48000800
 80011c0:	48000400 	.word	0x48000400

080011c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011ca:	4a23      	ldr	r2, [pc, #140]	; (8001258 <MX_USART2_UART_Init+0x94>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_USART2_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <MX_USART2_UART_Init+0x90>)
 800120e:	f003 fc3c 	bl	8004a8a <HAL_UART_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001218:	f7ff fc4c 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001220:	f005 f996 	bl	8006550 <HAL_UARTEx_SetTxFifoThreshold>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800122a:	f7ff fc43 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122e:	2100      	movs	r1, #0
 8001230:	4808      	ldr	r0, [pc, #32]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001232:	f005 f9cb 	bl	80065cc <HAL_UARTEx_SetRxFifoThreshold>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800123c:	f7ff fc3a 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_USART2_UART_Init+0x90>)
 8001242:	f005 f94c 	bl	80064de <HAL_UARTEx_DisableFifoMode>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800124c:	f7ff fc32 	bl	8000ab4 <Error_Handler>
  }

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000118 	.word	0x20000118
 8001258:	40004400 	.word	0x40004400

0800125c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_UART_MspInit+0x8c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d12f      	bne.n	80012de <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_UART_MspInit+0x90>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <HAL_UART_MspInit+0x90>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	6593      	str	r3, [r2, #88]	; 0x58
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_UART_MspInit+0x90>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_UART_MspInit+0x90>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_UART_MspInit+0x90>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_UART_MspInit+0x90>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012ae:	2318      	movs	r3, #24
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012be:	2307      	movs	r3, #7
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <HAL_UART_MspInit+0x94>)
 80012ca:	f000 fa23 	bl	8001714 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2103      	movs	r1, #3
 80012d2:	2026      	movs	r0, #38	; 0x26
 80012d4:	f000 f983 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d8:	2026      	movs	r0, #38	; 0x26
 80012da:	f000 f99a 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40004400 	.word	0x40004400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000400 	.word	0x48000400

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fa:	490e      	ldr	r1, [pc, #56]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001310:	4c0b      	ldr	r4, [pc, #44]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131e:	f7ff fc4f 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f005 f9f9 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff fadb 	bl	80008e0 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   r0, =_estack
 800132c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001338:	080067c0 	.word	0x080067c0
  ldr r2, =_sbss
 800133c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001340:	200001a8 	.word	0x200001a8

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>

08001346 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f939 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	2000      	movs	r0, #0
 8001358:	f000 f80e 	bl	8001378 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	e001      	b.n	800136c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001368:	f7ff fbbc 	bl	8000ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800136c:	79fb      	ldrb	r3, [r7, #7]

}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_InitTick+0x68>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d022      	beq.n	80013d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_InitTick+0x6c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_InitTick+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001398:	fbb1 f3f3 	udiv	r3, r1, r3
 800139c:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f944 	bl	800162e <HAL_SYSTICK_Config>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10f      	bne.n	80013cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	d809      	bhi.n	80013c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b2:	2200      	movs	r2, #0
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ba:	f000 f910 	bl	80015de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_InitTick+0x70>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e004      	b.n	80013d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e001      	b.n	80013d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_IncTick+0x1c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x20>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a03      	ldr	r2, [pc, #12]	; (8001408 <HAL_IncTick+0x1c>)
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	200001a4 	.word	0x200001a4
 800140c:	20000008 	.word	0x20000008

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200001a4 	.word	0x200001a4

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff29 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff40 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff90 	bl	800151c <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5f 	bl	80014c8 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff33 	bl	800148c <__NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa4 	bl	8001584 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d00d      	beq.n	800167a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2204      	movs	r2, #4
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e047      	b.n	800170a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 020e 	bic.w	r2, r2, #14
 8001688:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 021f 	and.w	r2, r3, #31
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00c      	beq.n	80016ea <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
    }
  }
  return status;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001722:	e15a      	b.n	80019da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 814c 	beq.w	80019d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d00b      	beq.n	800175c <HAL_GPIO_Init+0x48>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	2b11      	cmp	r3, #17
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b12      	cmp	r3, #18
 800175a:	d130      	bne.n	80017be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001792:	2201      	movs	r2, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	f003 0201 	and.w	r2, r3, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0xea>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d123      	bne.n	8001846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	08da      	lsrs	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3208      	adds	r2, #8
 8001840:	6939      	ldr	r1, [r7, #16]
 8001842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0203 	and.w	r2, r3, #3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80a6 	beq.w	80019d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001888:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <HAL_GPIO_Init+0x2e4>)
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <HAL_GPIO_Init+0x2e4>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6613      	str	r3, [r2, #96]	; 0x60
 8001894:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_GPIO_Init+0x2e4>)
 8001896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a0:	4a56      	ldr	r2, [pc, #344]	; (80019fc <HAL_GPIO_Init+0x2e8>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ca:	d01f      	beq.n	800190c <HAL_GPIO_Init+0x1f8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a4c      	ldr	r2, [pc, #304]	; (8001a00 <HAL_GPIO_Init+0x2ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d019      	beq.n	8001908 <HAL_GPIO_Init+0x1f4>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a4b      	ldr	r2, [pc, #300]	; (8001a04 <HAL_GPIO_Init+0x2f0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_GPIO_Init+0x1f0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a4a      	ldr	r2, [pc, #296]	; (8001a08 <HAL_GPIO_Init+0x2f4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_Init+0x1ec>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <HAL_GPIO_Init+0x2f8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x1e8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a48      	ldr	r2, [pc, #288]	; (8001a10 <HAL_GPIO_Init+0x2fc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_Init+0x1e4>
 80018f4:	2305      	movs	r3, #5
 80018f6:	e00a      	b.n	800190e <HAL_GPIO_Init+0x1fa>
 80018f8:	2306      	movs	r3, #6
 80018fa:	e008      	b.n	800190e <HAL_GPIO_Init+0x1fa>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e006      	b.n	800190e <HAL_GPIO_Init+0x1fa>
 8001900:	2303      	movs	r3, #3
 8001902:	e004      	b.n	800190e <HAL_GPIO_Init+0x1fa>
 8001904:	2302      	movs	r3, #2
 8001906:	e002      	b.n	800190e <HAL_GPIO_Init+0x1fa>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_GPIO_Init+0x1fa>
 800190c:	2300      	movs	r3, #0
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	f002 0203 	and.w	r2, r2, #3
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	4093      	lsls	r3, r2
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191e:	4937      	ldr	r1, [pc, #220]	; (80019fc <HAL_GPIO_Init+0x2e8>)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_GPIO_Init+0x300>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001950:	4a30      	ldr	r2, [pc, #192]	; (8001a14 <HAL_GPIO_Init+0x300>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001956:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <HAL_GPIO_Init+0x300>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800197a:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <HAL_GPIO_Init+0x300>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_GPIO_Init+0x300>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a4:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ce:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f47f ae9d 	bne.w	8001724 <HAL_GPIO_Init+0x10>
  }
}
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	48000400 	.word	0x48000400
 8001a04:	48000800 	.word	0x48000800
 8001a08:	48000c00 	.word	0x48000c00
 8001a0c:	48001000 	.word	0x48001000
 8001a10:	48001400 	.word	0x48001400
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e001      	b.n	8001a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fdb0 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d141      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a86:	4b4b      	ldr	r3, [pc, #300]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a92:	d131      	bne.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a94:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a9a:	4a46      	ldr	r2, [pc, #280]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa4:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aac:	4a41      	ldr	r2, [pc, #260]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ab4:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2232      	movs	r2, #50	; 0x32
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	4a3f      	ldr	r2, [pc, #252]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9b      	lsrs	r3, r3, #18
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aca:	e002      	b.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ade:	d102      	bne.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f2      	bne.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae6:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af2:	d158      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e057      	b.n	8001ba8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b08:	e04d      	b.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b10:	d141      	bne.n	8001b96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1e:	d131      	bne.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b26:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b38:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2232      	movs	r2, #50	; 0x32
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b56:	e002      	b.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d102      	bne.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f2      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	d112      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e011      	b.n	8001ba8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b94:	e007      	b.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	431bde83 	.word	0x431bde83

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e308      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d075      	beq.n	8001cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bde:	4ba3      	ldr	r3, [pc, #652]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be8:	4ba0      	ldr	r3, [pc, #640]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3e>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d002      	beq.n	8001c04 <HAL_RCC_OscConfig+0x44>
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d10b      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	4b99      	ldr	r3, [pc, #612]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d05b      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x108>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d157      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e2e3      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d106      	bne.n	8001c34 <HAL_RCC_OscConfig+0x74>
 8001c26:	4b91      	ldr	r3, [pc, #580]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a90      	ldr	r2, [pc, #576]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a8a      	ldr	r2, [pc, #552]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a87      	ldr	r2, [pc, #540]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c58:	4b84      	ldr	r3, [pc, #528]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a83      	ldr	r2, [pc, #524]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a80      	ldr	r2, [pc, #512]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fbca 	bl	8001410 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fbc6 	bl	8001410 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e2a8      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c92:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xc0>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fbb6 	bl	8001410 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fbb2 	bl	8001410 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e294      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cba:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xe8>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x136>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x13c>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d11f      	bne.n	8001d3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cfc:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_OscConfig+0x154>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e267      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	4952      	ldr	r1, [pc, #328]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d28:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_RCC_OscConfig+0x2b0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fb23 	bl	8001378 <HAL_InitTick>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d043      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e253      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d023      	beq.n	8001d8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d44:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a48      	ldr	r2, [pc, #288]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fb5e 	bl	8001410 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fb5a 	bl	8001410 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e23c      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	061b      	lsls	r3, r3, #24
 8001d84:	4939      	ldr	r1, [pc, #228]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
 8001d8a:	e01a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8c:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a36      	ldr	r2, [pc, #216]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fb3a 	bl	8001410 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fb36 	bl	8001410 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e218      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1e0>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d03c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ddc:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de6:	f7ff fb13 	bl	8001410 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dee:	f7ff fb0f 	bl	8001410 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e1f1      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0ef      	beq.n	8001dee <HAL_RCC_OscConfig+0x22e>
 8001e0e:	e01b      	b.n	8001e48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e10:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff faf6 	bl	8001410 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff faf2 	bl	8001410 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1d4      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ef      	bne.n	8001e28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80ab 	beq.w	8001fac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2b4>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e005      	b.n	8001e76 <HAL_RCC_OscConfig+0x2b6>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	20000004 	.word	0x20000004
 8001e74:	2300      	movs	r3, #0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00d      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4baf      	ldr	r3, [pc, #700]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4aae      	ldr	r2, [pc, #696]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
 8001e86:	4bac      	ldr	r3, [pc, #688]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e92:	2301      	movs	r3, #1
 8001e94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e96:	4ba9      	ldr	r3, [pc, #676]	; (800213c <HAL_RCC_OscConfig+0x57c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea2:	4ba6      	ldr	r3, [pc, #664]	; (800213c <HAL_RCC_OscConfig+0x57c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4aa5      	ldr	r2, [pc, #660]	; (800213c <HAL_RCC_OscConfig+0x57c>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7ff faaf 	bl	8001410 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7ff faab 	bl	8001410 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e18d      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec8:	4b9c      	ldr	r3, [pc, #624]	; (800213c <HAL_RCC_OscConfig+0x57c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d108      	bne.n	8001eee <HAL_RCC_OscConfig+0x32e>
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	4a95      	ldr	r2, [pc, #596]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eec:	e024      	b.n	8001f38 <HAL_RCC_OscConfig+0x378>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d110      	bne.n	8001f18 <HAL_RCC_OscConfig+0x358>
 8001ef6:	4b90      	ldr	r3, [pc, #576]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	4a8e      	ldr	r2, [pc, #568]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f06:	4b8c      	ldr	r3, [pc, #560]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	4a8a      	ldr	r2, [pc, #552]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f16:	e00f      	b.n	8001f38 <HAL_RCC_OscConfig+0x378>
 8001f18:	4b87      	ldr	r3, [pc, #540]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4a86      	ldr	r2, [pc, #536]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f28:	4b83      	ldr	r3, [pc, #524]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	4a82      	ldr	r2, [pc, #520]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d016      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7ff fa66 	bl	8001410 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f48:	f7ff fa62 	bl	8001410 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e142      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5e:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ed      	beq.n	8001f48 <HAL_RCC_OscConfig+0x388>
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fa4f 	bl	8001410 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff fa4b 	bl	8001410 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e12b      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f8c:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ed      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f9a:	7ffb      	ldrb	r3, [r7, #31]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d105      	bne.n	8001fac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa0:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	4a64      	ldr	r2, [pc, #400]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001faa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d03c      	beq.n	8002032 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fc0:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc6:	4a5c      	ldr	r2, [pc, #368]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fa1e 	bl	8001410 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fd8:	f7ff fa1a 	bl	8001410 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0fc      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fea:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ef      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x418>
 8001ff8:	e01b      	b.n	8002032 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ffa:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8001ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff fa01 	bl	8001410 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002012:	f7ff f9fd 	bl	8001410 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0df      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002024:	4b44      	ldr	r3, [pc, #272]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8002026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ef      	bne.n	8002012 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80d3 	beq.w	80021e2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b0c      	cmp	r3, #12
 8002046:	f000 808d 	beq.w	8002164 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d15a      	bne.n	8002108 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a38      	ldr	r2, [pc, #224]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8002058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800205c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff f9d7 	bl	8001410 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff f9d3 	bl	8001410 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0b5      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002084:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_RCC_OscConfig+0x580>)
 800208a:	4013      	ands	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6a11      	ldr	r1, [r2, #32]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002094:	3a01      	subs	r2, #1
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	4311      	orrs	r1, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800209e:	0212      	lsls	r2, r2, #8
 80020a0:	4311      	orrs	r1, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020a6:	0852      	lsrs	r2, r2, #1
 80020a8:	3a01      	subs	r2, #1
 80020aa:	0552      	lsls	r2, r2, #21
 80020ac:	4311      	orrs	r1, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020b2:	0852      	lsrs	r2, r2, #1
 80020b4:	3a01      	subs	r2, #1
 80020b6:	0652      	lsls	r2, r2, #25
 80020b8:	4311      	orrs	r1, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020be:	06d2      	lsls	r2, r2, #27
 80020c0:	430a      	orrs	r2, r1
 80020c2:	491d      	ldr	r1, [pc, #116]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1a      	ldr	r2, [pc, #104]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 80020ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 80020da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff f996 	bl	8001410 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff f992 	bl	8001410 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e074      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x528>
 8002106:	e06c      	b.n	80021e2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 800210e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a07      	ldr	r2, [pc, #28]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_RCC_OscConfig+0x578>)
 8002126:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff f96e 	bl	8001410 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002136:	e00e      	b.n	8002156 <HAL_RCC_OscConfig+0x596>
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
 8002140:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f964 	bl	8001410 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e046      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002156:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_RCC_OscConfig+0x62c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x584>
 8002162:	e03e      	b.n	80021e2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e039      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_OscConfig+0x62c>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	429a      	cmp	r2, r3
 8002182:	d12c      	bne.n	80021de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	3b01      	subs	r3, #1
 8002190:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d123      	bne.n	80021de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11b      	bne.n	80021de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d113      	bne.n	80021de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d109      	bne.n	80021de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	3b01      	subs	r3, #1
 80021d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e11e      	b.n	8002446 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b91      	ldr	r3, [pc, #580]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 020f 	bic.w	r2, r3, #15
 800221e:	498c      	ldr	r1, [pc, #560]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b8a      	ldr	r3, [pc, #552]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e106      	b.n	8002446 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d073      	beq.n	800232c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d129      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224c:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0f4      	b.n	8002446 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800225c:	f000 f99e 	bl	800259c <RCC_GetSysClockFreqFromPLLSource>
 8002260:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4a7c      	ldr	r2, [pc, #496]	; (8002458 <HAL_RCC_ClockConfig+0x268>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d93f      	bls.n	80022ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800226a:	4b7a      	ldr	r3, [pc, #488]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800227e:	2b00      	cmp	r3, #0
 8002280:	d033      	beq.n	80022ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002286:	2b00      	cmp	r3, #0
 8002288:	d12f      	bne.n	80022ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800228a:	4b72      	ldr	r3, [pc, #456]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002292:	4a70      	ldr	r2, [pc, #448]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 8002294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002298:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e024      	b.n	80022ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a8:	4b6a      	ldr	r3, [pc, #424]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0c6      	b.n	8002446 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b8:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0be      	b.n	8002446 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022c8:	f000 f8ce 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4a61      	ldr	r2, [pc, #388]	; (8002458 <HAL_RCC_ClockConfig+0x268>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d909      	bls.n	80022ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022d6:	4b5f      	ldr	r3, [pc, #380]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022de:	4a5d      	ldr	r2, [pc, #372]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 80022e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ea:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4957      	ldr	r1, [pc, #348]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022fc:	f7ff f888 	bl	8001410 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	e00a      	b.n	800231a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002304:	f7ff f884 	bl	8001410 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e095      	b.n	8002446 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 020c 	and.w	r2, r3, #12
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	429a      	cmp	r2, r3
 800232a:	d1eb      	bne.n	8002304 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d023      	beq.n	8002380 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a42      	ldr	r2, [pc, #264]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 800234a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800234e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800235c:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002364:	4a3b      	ldr	r2, [pc, #236]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 8002366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800236a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236c:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4936      	ldr	r1, [pc, #216]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
 800237e:	e008      	b.n	8002392 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d105      	bne.n	8002392 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002386:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4a32      	ldr	r2, [pc, #200]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 800238c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002390:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d21d      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a0:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 020f 	bic.w	r2, r3, #15
 80023a8:	4929      	ldr	r1, [pc, #164]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023b0:	f7ff f82e 	bl	8001410 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7ff f82a 	bl	8001410 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e03b      	b.n	8002446 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1ed      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4917      	ldr	r1, [pc, #92]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	490f      	ldr	r1, [pc, #60]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800241a:	f000 f825 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 800241e:	4601      	mov	r1, r0
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_RCC_ClockConfig+0x264>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	4a0c      	ldr	r2, [pc, #48]	; (800245c <HAL_RCC_ClockConfig+0x26c>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	fa21 f303 	lsr.w	r3, r1, r3
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_RCC_ClockConfig+0x270>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x274>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe ff9a 	bl	8001378 <HAL_InitTick>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000
 8002454:	40021000 	.word	0x40021000
 8002458:	04c4b400 	.word	0x04c4b400
 800245c:	08006798 	.word	0x08006798
 8002460:	20000000 	.word	0x20000000
 8002464:	20000004 	.word	0x20000004

08002468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d102      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <HAL_RCC_GetSysClockFreq+0xbc>)
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e047      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d102      	bne.n	8002492 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800248c:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc0>)
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e03e      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d136      	bne.n	800250c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3301      	adds	r3, #1
 80024b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d10c      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024bc:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	4a16      	ldr	r2, [pc, #88]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c6:	68d2      	ldr	r2, [r2, #12]
 80024c8:	0a12      	lsrs	r2, r2, #8
 80024ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	617b      	str	r3, [r7, #20]
      break;
 80024d4:	e00c      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	4a10      	ldr	r2, [pc, #64]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	0a12      	lsrs	r2, r2, #8
 80024e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
      break;
 80024ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0e5b      	lsrs	r3, r3, #25
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	3301      	adds	r3, #1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	e001      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002510:	693b      	ldr	r3, [r7, #16]
}
 8002512:	4618      	mov	r0, r3
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	00f42400 	.word	0x00f42400
 8002528:	007a1200 	.word	0x007a1200

0800252c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_RCC_GetHCLKFreq+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000000 	.word	0x20000000

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002548:	f7ff fff0 	bl	800252c <HAL_RCC_GetHCLKFreq>
 800254c:	4601      	mov	r1, r0
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_RCC_GetPCLK1Freq+0x28>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	080067a8 	.word	0x080067a8

08002570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002574:	f7ff ffda 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8002578:	4601      	mov	r1, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0adb      	lsrs	r3, r3, #11
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	080067a8 	.word	0x080067a8

0800259c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3301      	adds	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d10c      	bne.n	80025da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025c0:	4a17      	ldr	r2, [pc, #92]	; (8002620 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ca:	68d2      	ldr	r2, [r2, #12]
 80025cc:	0a12      	lsrs	r2, r2, #8
 80025ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
    break;
 80025d8:	e00c      	b.n	80025f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e4:	68d2      	ldr	r2, [r2, #12]
 80025e6:	0a12      	lsrs	r2, r2, #8
 80025e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025ec:	fb02 f303 	mul.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
    break;
 80025f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0e5b      	lsrs	r3, r3, #25
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800260e:	687b      	ldr	r3, [r7, #4]
}
 8002610:	4618      	mov	r0, r3
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200
 8002624:	00f42400 	.word	0x00f42400

08002628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002630:	2300      	movs	r3, #0
 8002632:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002634:	2300      	movs	r3, #0
 8002636:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8098 	beq.w	8002776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10d      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	4b40      	ldr	r3, [pc, #256]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266e:	2301      	movs	r3, #1
 8002670:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002672:	4b3a      	ldr	r3, [pc, #232]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a39      	ldr	r2, [pc, #228]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800267e:	f7fe fec7 	bl	8001410 <HAL_GetTick>
 8002682:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002684:	e009      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7fe fec3 	bl	8001410 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d902      	bls.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	74fb      	strb	r3, [r7, #19]
        break;
 8002698:	e005      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0ef      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026a6:	7cfb      	ldrb	r3, [r7, #19]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d159      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01e      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d019      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026e4:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f4:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d016      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fe83 	bl	8001410 <HAL_GetTick>
 800270a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270c:	e00b      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fe7f 	bl	8001410 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d902      	bls.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	74fb      	strb	r3, [r7, #19]
            break;
 8002724:	e006      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ec      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10b      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	4903      	ldr	r1, [pc, #12]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002750:	e008      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	74bb      	strb	r3, [r7, #18]
 8002756:	e005      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002764:	7c7b      	ldrb	r3, [r7, #17]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d105      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276a:	4ba6      	ldr	r3, [pc, #664]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	4aa5      	ldr	r2, [pc, #660]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002782:	4ba0      	ldr	r3, [pc, #640]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	f023 0203 	bic.w	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	499c      	ldr	r1, [pc, #624]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a4:	4b97      	ldr	r3, [pc, #604]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 020c 	bic.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4994      	ldr	r1, [pc, #592]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027c6:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	498b      	ldr	r1, [pc, #556]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027e8:	4b86      	ldr	r3, [pc, #536]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	4983      	ldr	r1, [pc, #524]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800280a:	4b7e      	ldr	r3, [pc, #504]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002810:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	497a      	ldr	r1, [pc, #488]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800282c:	4b75      	ldr	r3, [pc, #468]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	4972      	ldr	r1, [pc, #456]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800284e:	4b6d      	ldr	r3, [pc, #436]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4969      	ldr	r1, [pc, #420]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002870:	4b64      	ldr	r3, [pc, #400]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4961      	ldr	r1, [pc, #388]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002892:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	4958      	ldr	r1, [pc, #352]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d015      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	4950      	ldr	r1, [pc, #320]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028d2:	d105      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d4:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a4a      	ldr	r2, [pc, #296]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d015      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028ec:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	4942      	ldr	r1, [pc, #264]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290a:	d105      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a3c      	ldr	r2, [pc, #240]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002916:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002924:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4934      	ldr	r1, [pc, #208]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002942:	d105      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002944:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800295c:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	4926      	ldr	r1, [pc, #152]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297a:	d105      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002986:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	4918      	ldr	r1, [pc, #96]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b2:	d105      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	490a      	ldr	r1, [pc, #40]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ea:	d105      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000

08002a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e049      	b.n	8002aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fac2 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 fe26 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e049      	b.n	8002b5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d106      	bne.n	8002ae2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f841 	bl	8002b64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4610      	mov	r0, r2
 8002af6:	f000 fdcf 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e049      	b.n	8002c1e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f841 	bl	8002c26 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f000 fd6e 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_IC_Start+0x1a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e023      	b.n	8002c9e <HAL_TIM_IC_Start+0x62>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_IC_Start+0x2a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e01b      	b.n	8002c9e <HAL_TIM_IC_Start+0x62>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_IC_Start+0x3a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e013      	b.n	8002c9e <HAL_TIM_IC_Start+0x62>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_IC_Start+0x4a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	e00b      	b.n	8002c9e <HAL_TIM_IC_Start+0x62>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_IC_Start+0x5a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e003      	b.n	8002c9e <HAL_TIM_IC_Start+0x62>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_TIM_IC_Start+0x74>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e013      	b.n	8002cd8 <HAL_TIM_IC_Start+0x9c>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d104      	bne.n	8002cc0 <HAL_TIM_IC_Start+0x84>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e00b      	b.n	8002cd8 <HAL_TIM_IC_Start+0x9c>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d104      	bne.n	8002cd0 <HAL_TIM_IC_Start+0x94>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e003      	b.n	8002cd8 <HAL_TIM_IC_Start+0x9c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d102      	bne.n	8002ce6 <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ce0:	7bbb      	ldrb	r3, [r7, #14]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e064      	b.n	8002db4 <HAL_TIM_IC_Start+0x178>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_IC_Start+0xbe>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf8:	e023      	b.n	8002d42 <HAL_TIM_IC_Start+0x106>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_IC_Start+0xce>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d08:	e01b      	b.n	8002d42 <HAL_TIM_IC_Start+0x106>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_IC_Start+0xde>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	e013      	b.n	8002d42 <HAL_TIM_IC_Start+0x106>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_IC_Start+0xee>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d28:	e00b      	b.n	8002d42 <HAL_TIM_IC_Start+0x106>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_IC_Start+0xfe>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d38:	e003      	b.n	8002d42 <HAL_TIM_IC_Start+0x106>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_IC_Start+0x116>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d50:	e013      	b.n	8002d7a <HAL_TIM_IC_Start+0x13e>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_IC_Start+0x126>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d60:	e00b      	b.n	8002d7a <HAL_TIM_IC_Start+0x13e>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d104      	bne.n	8002d72 <HAL_TIM_IC_Start+0x136>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d70:	e003      	b.n	8002d7a <HAL_TIM_IC_Start+0x13e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f001 fa78 	bl	8004278 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_TIM_IC_Start+0x180>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d00b      	beq.n	8002db2 <HAL_TIM_IC_Start+0x176>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d007      	beq.n	8002db2 <HAL_TIM_IC_Start+0x176>
  {
    __HAL_TIM_ENABLE(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	00010007 	.word	0x00010007

08002dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d122      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d11b      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0202 	mvn.w	r2, #2
 8002dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fd5e 	bl	80008c4 <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fc26 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fc2d 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d122      	bne.n	8002e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d11b      	bne.n	8002e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0204 	mvn.w	r2, #4
 8002e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fd34 	bl	80008c4 <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fbfc 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fc03 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0208 	mvn.w	r2, #8
 8002e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd fd0a 	bl	80008c4 <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fbd2 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fbd9 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0210 	mvn.w	r2, #16
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2208      	movs	r2, #8
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd fce0 	bl	80008c4 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fba8 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fbaf 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d10e      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d107      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0201 	mvn.w	r2, #1
 8002f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fb82 	bl	8003648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d10e      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b80      	cmp	r3, #128	; 0x80
 8002f5e:	d107      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f001 fd2c 	bl	80049c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	d10e      	bne.n	8002f9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d107      	bne.n	8002f9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f001 fd1f 	bl	80049dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d10e      	bne.n	8002fca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b40      	cmp	r3, #64	; 0x40
 8002fb8:	d107      	bne.n	8002fca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fb5d 	bl	8003684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d107      	bne.n	8002ff6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f06f 0220 	mvn.w	r2, #32
 8002fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fd fb27 	bl	8000644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003004:	d10f      	bne.n	8003026 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003014:	d107      	bne.n	8003026 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800301e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f001 fce5 	bl	80049f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003034:	d10f      	bne.n	8003056 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003044:	d107      	bne.n	8003056 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800304e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f001 fcd7 	bl	8004a04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003064:	d10f      	bne.n	8003086 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003074:	d107      	bne.n	8003086 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800307e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f001 fcc9 	bl	8004a18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003094:	d10f      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030a4:	d107      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80030ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f001 fcbb 	bl	8004a2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e082      	b.n	80031de <HAL_TIM_IC_ConfigChannel+0x120>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d11b      	bne.n	800311e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f000 ff05 	bl	8003f04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 020c 	bic.w	r2, r2, #12
 8003108:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6999      	ldr	r1, [r3, #24]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	619a      	str	r2, [r3, #24]
 800311c:	e05a      	b.n	80031d4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d11c      	bne.n	800315e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f000 ff7d 	bl	8004032 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003146:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6999      	ldr	r1, [r3, #24]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	021a      	lsls	r2, r3, #8
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	619a      	str	r2, [r3, #24]
 800315c:	e03a      	b.n	80031d4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f000 ffca 	bl	800410c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 020c 	bic.w	r2, r2, #12
 8003186:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69d9      	ldr	r1, [r3, #28]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	61da      	str	r2, [r3, #28]
 800319a:	e01b      	b.n	80031d4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f000 ffea 	bl	8004184 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69d9      	ldr	r1, [r3, #28]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	021a      	lsls	r2, r3, #8
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0fd      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x216>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b14      	cmp	r3, #20
 800320e:	f200 80f0 	bhi.w	80033f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	0800326d 	.word	0x0800326d
 800321c:	080033f3 	.word	0x080033f3
 8003220:	080033f3 	.word	0x080033f3
 8003224:	080033f3 	.word	0x080033f3
 8003228:	080032ad 	.word	0x080032ad
 800322c:	080033f3 	.word	0x080033f3
 8003230:	080033f3 	.word	0x080033f3
 8003234:	080033f3 	.word	0x080033f3
 8003238:	080032ef 	.word	0x080032ef
 800323c:	080033f3 	.word	0x080033f3
 8003240:	080033f3 	.word	0x080033f3
 8003244:	080033f3 	.word	0x080033f3
 8003248:	0800332f 	.word	0x0800332f
 800324c:	080033f3 	.word	0x080033f3
 8003250:	080033f3 	.word	0x080033f3
 8003254:	080033f3 	.word	0x080033f3
 8003258:	08003371 	.word	0x08003371
 800325c:	080033f3 	.word	0x080033f3
 8003260:	080033f3 	.word	0x080033f3
 8003264:	080033f3 	.word	0x080033f3
 8003268:	080033b1 	.word	0x080033b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 faa0 	bl	80037b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0208 	orr.w	r2, r2, #8
 8003286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	619a      	str	r2, [r3, #24]
      break;
 80032aa:	e0a3      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fb10 	bl	80038d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6999      	ldr	r1, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	021a      	lsls	r2, r3, #8
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
      break;
 80032ec:	e082      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fb79 	bl	80039ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0208 	orr.w	r2, r2, #8
 8003308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0204 	bic.w	r2, r2, #4
 8003318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	61da      	str	r2, [r3, #28]
      break;
 800332c:	e062      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fbe1 	bl	8003afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69d9      	ldr	r1, [r3, #28]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	61da      	str	r2, [r3, #28]
      break;
 800336e:	e041      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fc4a 	bl	8003c10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0204 	bic.w	r2, r2, #4
 800339a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033ae:	e021      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fc8e 	bl	8003cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033f0:	e000      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80033f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop

08003408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIM_ConfigClockSource+0x18>
 800341c:	2302      	movs	r3, #2
 800341e:	e0c3      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x1a0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800343e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800344a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b70      	cmp	r3, #112	; 0x70
 800345a:	d038      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0xc6>
 800345c:	2b70      	cmp	r3, #112	; 0x70
 800345e:	d815      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x84>
 8003460:	2b30      	cmp	r3, #48	; 0x30
 8003462:	f000 808e 	beq.w	8003582 <HAL_TIM_ConfigClockSource+0x17a>
 8003466:	2b30      	cmp	r3, #48	; 0x30
 8003468:	d809      	bhi.n	800347e <HAL_TIM_ConfigClockSource+0x76>
 800346a:	2b10      	cmp	r3, #16
 800346c:	f000 8089 	beq.w	8003582 <HAL_TIM_ConfigClockSource+0x17a>
 8003470:	2b20      	cmp	r3, #32
 8003472:	f000 8086 	beq.w	8003582 <HAL_TIM_ConfigClockSource+0x17a>
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8083 	beq.w	8003582 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800347c:	e08b      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800347e:	2b50      	cmp	r3, #80	; 0x50
 8003480:	d04f      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x11a>
 8003482:	2b60      	cmp	r3, #96	; 0x60
 8003484:	d05d      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x13a>
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d06b      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 800348a:	e084      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800348c:	4a48      	ldr	r2, [pc, #288]	; (80035b0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d077      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x17a>
 8003492:	4a47      	ldr	r2, [pc, #284]	; (80035b0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d809      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0xa4>
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d02e      	beq.n	80034fc <HAL_TIM_ConfigClockSource+0xf4>
 800349e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80034a2:	d06e      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x17a>
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d074      	beq.n	8003594 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80034aa:	e074      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034ac:	4a41      	ldr	r2, [pc, #260]	; (80035b4 <HAL_TIM_ConfigClockSource+0x1ac>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d067      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x17a>
 80034b2:	4a40      	ldr	r2, [pc, #256]	; (80035b4 <HAL_TIM_ConfigClockSource+0x1ac>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d803      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0xb8>
 80034b8:	4a3f      	ldr	r2, [pc, #252]	; (80035b8 <HAL_TIM_ConfigClockSource+0x1b0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d061      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80034be:	e06a      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034c0:	4a3e      	ldr	r2, [pc, #248]	; (80035bc <HAL_TIM_ConfigClockSource+0x1b4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d05d      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x17a>
 80034c6:	4a3e      	ldr	r2, [pc, #248]	; (80035c0 <HAL_TIM_ConfigClockSource+0x1b8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d05a      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80034cc:	e063      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f000 feab 	bl	8004238 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	609a      	str	r2, [r3, #8]
      break;
 80034fa:	e04c      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6899      	ldr	r1, [r3, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f000 fe94 	bl	8004238 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800351e:	609a      	str	r2, [r3, #8]
      break;
 8003520:	e039      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	461a      	mov	r2, r3
 8003530:	f000 fd50 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2150      	movs	r1, #80	; 0x50
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fe5f 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003540:	e029      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	f000 fdac 	bl	80040ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2160      	movs	r1, #96	; 0x60
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fe4f 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003560:	e019      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	461a      	mov	r2, r3
 8003570:	f000 fd30 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2140      	movs	r1, #64	; 0x40
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fe3f 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003580:	e009      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f000 fe36 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003592:	e000      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8003594:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	00100020 	.word	0x00100020
 80035b4:	00100040 	.word	0x00100040
 80035b8:	00100030 	.word	0x00100030
 80035bc:	00100060 	.word	0x00100060
 80035c0:	00100070 	.word	0x00100070

080035c4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_TIM_SlaveConfigSynchro+0x18>
 80035d8:	2302      	movs	r3, #2
 80035da:	e031      	b.n	8003640 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fbd8 	bl	8003da4 <TIM_SlaveTimer_SetConfig>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e018      	b.n	8003640 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800362c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a3c      	ldr	r2, [pc, #240]	; (800379c <TIM_Base_SetConfig+0x104>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00f      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d00b      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a39      	ldr	r2, [pc, #228]	; (80037a0 <TIM_Base_SetConfig+0x108>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a38      	ldr	r2, [pc, #224]	; (80037a4 <TIM_Base_SetConfig+0x10c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a37      	ldr	r2, [pc, #220]	; (80037a8 <TIM_Base_SetConfig+0x110>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d108      	bne.n	80036e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2d      	ldr	r2, [pc, #180]	; (800379c <TIM_Base_SetConfig+0x104>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01b      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d017      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <TIM_Base_SetConfig+0x108>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a29      	ldr	r2, [pc, #164]	; (80037a4 <TIM_Base_SetConfig+0x10c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00f      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <TIM_Base_SetConfig+0x110>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00b      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a27      	ldr	r2, [pc, #156]	; (80037ac <TIM_Base_SetConfig+0x114>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a26      	ldr	r2, [pc, #152]	; (80037b0 <TIM_Base_SetConfig+0x118>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d003      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <TIM_Base_SetConfig+0x11c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d108      	bne.n	8003734 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a10      	ldr	r2, [pc, #64]	; (800379c <TIM_Base_SetConfig+0x104>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00f      	beq.n	8003780 <TIM_Base_SetConfig+0xe8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <TIM_Base_SetConfig+0x110>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00b      	beq.n	8003780 <TIM_Base_SetConfig+0xe8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a10      	ldr	r2, [pc, #64]	; (80037ac <TIM_Base_SetConfig+0x114>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <TIM_Base_SetConfig+0xe8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <TIM_Base_SetConfig+0x118>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_Base_SetConfig+0xe8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a0e      	ldr	r2, [pc, #56]	; (80037b4 <TIM_Base_SetConfig+0x11c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d103      	bne.n	8003788 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	615a      	str	r2, [r3, #20]
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800
 80037a8:	40013400 	.word	0x40013400
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40014400 	.word	0x40014400
 80037b4:	40014800 	.word	0x40014800

080037b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0201 	bic.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f023 0302 	bic.w	r3, r3, #2
 8003804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <TIM_OC1_SetConfig+0x10c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00f      	beq.n	8003838 <TIM_OC1_SetConfig+0x80>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <TIM_OC1_SetConfig+0x110>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00b      	beq.n	8003838 <TIM_OC1_SetConfig+0x80>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <TIM_OC1_SetConfig+0x114>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <TIM_OC1_SetConfig+0x80>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a29      	ldr	r2, [pc, #164]	; (80038d0 <TIM_OC1_SetConfig+0x118>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_OC1_SetConfig+0x80>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <TIM_OC1_SetConfig+0x11c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d10c      	bne.n	8003852 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 0308 	bic.w	r3, r3, #8
 800383e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <TIM_OC1_SetConfig+0x10c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00f      	beq.n	800387a <TIM_OC1_SetConfig+0xc2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <TIM_OC1_SetConfig+0x110>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00b      	beq.n	800387a <TIM_OC1_SetConfig+0xc2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a19      	ldr	r2, [pc, #100]	; (80038cc <TIM_OC1_SetConfig+0x114>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <TIM_OC1_SetConfig+0xc2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <TIM_OC1_SetConfig+0x118>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_OC1_SetConfig+0xc2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <TIM_OC1_SetConfig+0x11c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d111      	bne.n	800389e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	621a      	str	r2, [r3, #32]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40013400 	.word	0x40013400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800

080038d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0210 	bic.w	r2, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0320 	bic.w	r3, r3, #32
 8003926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <TIM_OC2_SetConfig+0x100>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d003      	beq.n	8003944 <TIM_OC2_SetConfig+0x6c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a27      	ldr	r2, [pc, #156]	; (80039dc <TIM_OC2_SetConfig+0x104>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d10d      	bne.n	8003960 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800395e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <TIM_OC2_SetConfig+0x100>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00f      	beq.n	8003988 <TIM_OC2_SetConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <TIM_OC2_SetConfig+0x104>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00b      	beq.n	8003988 <TIM_OC2_SetConfig+0xb0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <TIM_OC2_SetConfig+0x108>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <TIM_OC2_SetConfig+0xb0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <TIM_OC2_SetConfig+0x10c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_OC2_SetConfig+0xb0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <TIM_OC2_SetConfig+0x110>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d113      	bne.n	80039b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800398e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40013400 	.word	0x40013400
 80039e0:	40014000 	.word	0x40014000
 80039e4:	40014400 	.word	0x40014400
 80039e8:	40014800 	.word	0x40014800

080039ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a27      	ldr	r2, [pc, #156]	; (8003ae8 <TIM_OC3_SetConfig+0xfc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_OC3_SetConfig+0x6a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a26      	ldr	r2, [pc, #152]	; (8003aec <TIM_OC3_SetConfig+0x100>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10d      	bne.n	8003a72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <TIM_OC3_SetConfig+0xfc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00f      	beq.n	8003a9a <TIM_OC3_SetConfig+0xae>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <TIM_OC3_SetConfig+0x100>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <TIM_OC3_SetConfig+0xae>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <TIM_OC3_SetConfig+0x104>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d007      	beq.n	8003a9a <TIM_OC3_SetConfig+0xae>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <TIM_OC3_SetConfig+0x108>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_OC3_SetConfig+0xae>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <TIM_OC3_SetConfig+0x10c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d113      	bne.n	8003ac2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	621a      	str	r2, [r3, #32]
}
 8003adc:	bf00      	nop
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40013400 	.word	0x40013400
 8003af0:	40014000 	.word	0x40014000
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800

08003afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <TIM_OC4_SetConfig+0x100>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_OC4_SetConfig+0x6c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <TIM_OC4_SetConfig+0x104>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d10d      	bne.n	8003b84 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	031b      	lsls	r3, r3, #12
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <TIM_OC4_SetConfig+0x100>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00f      	beq.n	8003bac <TIM_OC4_SetConfig+0xb0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <TIM_OC4_SetConfig+0x104>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00b      	beq.n	8003bac <TIM_OC4_SetConfig+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <TIM_OC4_SetConfig+0x108>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <TIM_OC4_SetConfig+0xb0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <TIM_OC4_SetConfig+0x10c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_OC4_SetConfig+0xb0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <TIM_OC4_SetConfig+0x110>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d113      	bne.n	8003bd4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40013400 	.word	0x40013400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800

08003c10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <TIM_OC5_SetConfig+0xb4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00f      	beq.n	8003c8a <TIM_OC5_SetConfig+0x7a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <TIM_OC5_SetConfig+0xb8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_OC5_SetConfig+0x7a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <TIM_OC5_SetConfig+0xbc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <TIM_OC5_SetConfig+0x7a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <TIM_OC5_SetConfig+0xc0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_OC5_SetConfig+0x7a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <TIM_OC5_SetConfig+0xc4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d109      	bne.n	8003c9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40013400 	.word	0x40013400
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40014400 	.word	0x40014400
 8003cd4:	40014800 	.word	0x40014800

08003cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	051b      	lsls	r3, r3, #20
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <TIM_OC6_SetConfig+0xb8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00f      	beq.n	8003d54 <TIM_OC6_SetConfig+0x7c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <TIM_OC6_SetConfig+0xbc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00b      	beq.n	8003d54 <TIM_OC6_SetConfig+0x7c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <TIM_OC6_SetConfig+0xc0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d007      	beq.n	8003d54 <TIM_OC6_SetConfig+0x7c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <TIM_OC6_SetConfig+0xc4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_OC6_SetConfig+0x7c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <TIM_OC6_SetConfig+0xc8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d109      	bne.n	8003d68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	029b      	lsls	r3, r3, #10
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40013400 	.word	0x40013400
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800

08003da4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	f023 0307 	bic.w	r3, r3, #7
 8003dd6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b60      	cmp	r3, #96	; 0x60
 8003df0:	d06d      	beq.n	8003ece <TIM_SlaveTimer_SetConfig+0x12a>
 8003df2:	2b60      	cmp	r3, #96	; 0x60
 8003df4:	d80f      	bhi.n	8003e16 <TIM_SlaveTimer_SetConfig+0x72>
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d073      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d804      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x64>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d06f      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d06d      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8003e06:	e06d      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d028      	beq.n	8003e5e <TIM_SlaveTimer_SetConfig+0xba>
 8003e0c:	2b50      	cmp	r3, #80	; 0x50
 8003e0e:	d054      	beq.n	8003eba <TIM_SlaveTimer_SetConfig+0x116>
 8003e10:	2b30      	cmp	r3, #48	; 0x30
 8003e12:	d066      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003e14:	e066      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e16:	4a36      	ldr	r2, [pc, #216]	; (8003ef0 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d062      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e1c:	4a34      	ldr	r2, [pc, #208]	; (8003ef0 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d808      	bhi.n	8003e34 <TIM_SlaveTimer_SetConfig+0x90>
 8003e22:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e26:	d05c      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e28:	4a32      	ldr	r2, [pc, #200]	; (8003ef4 <TIM_SlaveTimer_SetConfig+0x150>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d059      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e2e:	2b70      	cmp	r3, #112	; 0x70
 8003e30:	d00a      	beq.n	8003e48 <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8003e32:	e057      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e34:	4a30      	ldr	r2, [pc, #192]	; (8003ef8 <TIM_SlaveTimer_SetConfig+0x154>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d053      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e3a:	4a30      	ldr	r2, [pc, #192]	; (8003efc <TIM_SlaveTimer_SetConfig+0x158>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d050      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
 8003e40:	4a2f      	ldr	r2, [pc, #188]	; (8003f00 <TIM_SlaveTimer_SetConfig+0x15c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d04d      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003e46:	e04d      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68d9      	ldr	r1, [r3, #12]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f000 f9ee 	bl	8004238 <TIM_ETR_SetConfig>
      break;
 8003e5c:	e042      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d004      	beq.n	8003e70 <TIM_SlaveTimer_SetConfig+0xcc>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003e6e:	d101      	bne.n	8003e74 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e038      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	621a      	str	r2, [r3, #32]
      break;
 8003eb8:	e014      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6899      	ldr	r1, [r3, #8]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f000 f884 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      break;
 8003ecc:	e00a      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6899      	ldr	r1, [r3, #8]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f000 f8e6 	bl	80040ac <TIM_TI2_ConfigInputStage>
      break;
 8003ee0:	e000      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8003ee2:	bf00      	nop
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	00100030 	.word	0x00100030
 8003ef4:	00100020 	.word	0x00100020
 8003ef8:	00100060 	.word	0x00100060
 8003efc:	00100070 	.word	0x00100070
 8003f00:	00100040 	.word	0x00100040

08003f04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f023 0201 	bic.w	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4a24      	ldr	r2, [pc, #144]	; (8003fc0 <TIM_TI1_SetConfig+0xbc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <TIM_TI1_SetConfig+0x56>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d00f      	beq.n	8003f5a <TIM_TI1_SetConfig+0x56>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a21      	ldr	r2, [pc, #132]	; (8003fc4 <TIM_TI1_SetConfig+0xc0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00b      	beq.n	8003f5a <TIM_TI1_SetConfig+0x56>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a20      	ldr	r2, [pc, #128]	; (8003fc8 <TIM_TI1_SetConfig+0xc4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <TIM_TI1_SetConfig+0x56>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a1f      	ldr	r2, [pc, #124]	; (8003fcc <TIM_TI1_SetConfig+0xc8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d003      	beq.n	8003f5a <TIM_TI1_SetConfig+0x56>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a1e      	ldr	r2, [pc, #120]	; (8003fd0 <TIM_TI1_SetConfig+0xcc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <TIM_TI1_SetConfig+0x5a>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <TIM_TI1_SetConfig+0x5c>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e003      	b.n	8003f7e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f023 030a 	bic.w	r3, r3, #10
 8003f98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f003 030a 	and.w	r3, r3, #10
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40013400 	.word	0x40013400
 8003fd0:	40014000 	.word	0x40014000

08003fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 030a 	bic.w	r3, r3, #10
 8004010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004032:	b480      	push	{r7}
 8004034:	b087      	sub	sp, #28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f023 0210 	bic.w	r2, r3, #16
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	b29b      	uxth	r3, r3
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004084:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 0210 	bic.w	r2, r3, #16
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	031b      	lsls	r3, r3, #12
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004148:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	b2db      	uxtb	r3, r3
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800415c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	621a      	str	r2, [r3, #32]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	031b      	lsls	r3, r3, #12
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	031b      	lsls	r3, r3, #12
 80041dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	f043 0307 	orr.w	r3, r3, #7
 8004224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	609a      	str	r2, [r3, #8]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	021a      	lsls	r2, r3, #8
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	431a      	orrs	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4313      	orrs	r3, r2
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2201      	movs	r2, #1
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	43db      	mvns	r3, r3
 800429a:	401a      	ands	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b08a      	sub	sp, #40	; 0x28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0a0      	b.n	8004418 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f898 	bl	8004420 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f7ff f9c8 	bl	8003698 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2203      	movs	r2, #3
 8004316:	f7ff fdf5 	bl	8003f04 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699a      	ldr	r2, [r3, #24]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 020c 	bic.w	r2, r2, #12
 8004328:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6999      	ldr	r1, [r3, #24]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800434a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437e:	f023 0307 	bic.w	r3, r3, #7
 8004382:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0204 	orr.w	r2, r2, #4
 8004392:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004398:	2300      	movs	r3, #0
 800439a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800439c:	2370      	movs	r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f107 020c 	add.w	r2, r7, #12
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fa8b 	bl	80038d8 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80043d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d4:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80043e4:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004442:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800444a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004452:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800445a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d108      	bne.n	8004474 <HAL_TIMEx_HallSensor_Start+0x40>
   || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004462:	7bbb      	ldrb	r3, [r7, #14]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d105      	bne.n	8004474 <HAL_TIMEx_HallSensor_Start+0x40>
   || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004468:	7b7b      	ldrb	r3, [r7, #13]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d102      	bne.n	8004474 <HAL_TIMEx_HallSensor_Start+0x40>
   || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800446e:	7b3b      	ldrb	r3, [r7, #12]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d001      	beq.n	8004478 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e02c      	b.n	80044d2 <HAL_TIMEx_HallSensor_Start+0x9e>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fee9 	bl	8004278 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_TIMEx_HallSensor_Start+0xa8>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b06      	cmp	r3, #6
 80044b6:	d00b      	beq.n	80044d0 <HAL_TIMEx_HallSensor_Start+0x9c>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044be:	d007      	beq.n	80044d0 <HAL_TIMEx_HallSensor_Start+0x9c>
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	00010007 	.word	0x00010007

080044e0 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_TIMEx_PWMN_Start_IT+0x24>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e022      	b.n	800454a <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d109      	bne.n	800451e <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e015      	b.n	800454a <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d109      	bne.n	8004538 <HAL_TIMEx_PWMN_Start_IT+0x58>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e008      	b.n	800454a <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e08e      	b.n	8004670 <HAL_TIMEx_PWMN_Start_IT+0x190>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_TIMEx_PWMN_Start_IT+0x82>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004560:	e013      	b.n	800458a <HAL_TIMEx_PWMN_Start_IT+0xaa>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d104      	bne.n	8004572 <HAL_TIMEx_PWMN_Start_IT+0x92>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004570:	e00b      	b.n	800458a <HAL_TIMEx_PWMN_Start_IT+0xaa>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d104      	bne.n	8004582 <HAL_TIMEx_PWMN_Start_IT+0xa2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004580:	e003      	b.n	800458a <HAL_TIMEx_PWMN_Start_IT+0xaa>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d841      	bhi.n	8004614 <HAL_TIMEx_PWMN_Start_IT+0x134>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <HAL_TIMEx_PWMN_Start_IT+0xb8>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045cd 	.word	0x080045cd
 800459c:	08004615 	.word	0x08004615
 80045a0:	08004615 	.word	0x08004615
 80045a4:	08004615 	.word	0x08004615
 80045a8:	080045df 	.word	0x080045df
 80045ac:	08004615 	.word	0x08004615
 80045b0:	08004615 	.word	0x08004615
 80045b4:	08004615 	.word	0x08004615
 80045b8:	080045f1 	.word	0x080045f1
 80045bc:	08004615 	.word	0x08004615
 80045c0:	08004615 	.word	0x08004615
 80045c4:	08004615 	.word	0x08004615
 80045c8:	08004603 	.word	0x08004603
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0202 	orr.w	r2, r2, #2
 80045da:	60da      	str	r2, [r3, #12]
      break;
 80045dc:	e01b      	b.n	8004616 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0204 	orr.w	r2, r2, #4
 80045ec:	60da      	str	r2, [r3, #12]
      break;
 80045ee:	e012      	b.n	8004616 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0208 	orr.w	r2, r2, #8
 80045fe:	60da      	str	r2, [r3, #12]
      break;
 8004600:	e009      	b.n	8004616 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0210 	orr.w	r2, r2, #16
 8004610:	60da      	str	r2, [r3, #12]
      break;
 8004612:	e000      	b.n	8004616 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    default:
      break;
 8004614:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004624:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2204      	movs	r2, #4
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fa06 	bl	8004a40 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004642:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_TIMEx_PWMN_Start_IT+0x198>)
 800464c:	4013      	ands	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b06      	cmp	r3, #6
 8004654:	d00b      	beq.n	800466e <HAL_TIMEx_PWMN_Start_IT+0x18e>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d007      	beq.n	800466e <HAL_TIMEx_PWMN_Start_IT+0x18e>
  {
    __HAL_TIM_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	00010007 	.word	0x00010007

0800467c <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE(htim->Instance, InputTrigger));

  __HAL_LOCK(htim);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8004692:	2302      	movs	r3, #2
 8004694:	e066      	b.n	8004764 <HAL_TIMEx_ConfigCommutEvent_IT+0xe8>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      (InputTrigger == TIM_TS_ITR4)  || (InputTrigger == TIM_TS_ITR5) ||
      (InputTrigger == TIM_TS_ITR6)  || (InputTrigger == TIM_TS_ITR7) ||
      (InputTrigger == TIM_TS_ITR8)  || (InputTrigger == TIM_TS_ITR10) ||
      (InputTrigger == TIM_TS_ITR11))
#else
  if ((InputTrigger == TIM_TS_ITR0)  || (InputTrigger == TIM_TS_ITR1) ||
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d020      	beq.n	80046e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d01d      	beq.n	80046e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d01a      	beq.n	80046e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR2)  || (InputTrigger == TIM_TS_ITR3) ||
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b30      	cmp	r3, #48	; 0x30
 80046b4:	d017      	beq.n	80046e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046bc:	d013      	beq.n	80046e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR5)  || (InputTrigger == TIM_TS_ITR6) ||
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <HAL_TIMEx_ConfigCommutEvent_IT+0xf4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00f      	beq.n	80046e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <HAL_TIMEx_ConfigCommutEvent_IT+0xf8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR7)  || (InputTrigger == TIM_TS_ITR8) ||
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4a29      	ldr	r2, [pc, #164]	; (8004778 <HAL_TIMEx_ConfigCommutEvent_IT+0xfc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4a28      	ldr	r2, [pc, #160]	; (800477c <HAL_TIMEx_ConfigCommutEvent_IT+0x100>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR10) || (InputTrigger == TIM_TS_ITR11))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4a27      	ldr	r2, [pc, #156]	; (8004780 <HAL_TIMEx_ConfigCommutEvent_IT+0x104>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d111      	bne.n	800470a <HAL_TIMEx_ConfigCommutEvent_IT+0x8e>
#endif /* TIM5 && TIM20 */
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80046f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f8:	6093      	str	r3, [r2, #8]
    htim->Instance->SMCR |= InputTrigger;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6899      	ldr	r1, [r3, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	430a      	orrs	r2, r1
 8004708:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0204 	bic.w	r2, r2, #4
 8004728:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004748:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0220 	orr.w	r2, r2, #32
 8004758:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	00100020 	.word	0x00100020
 8004774:	00100030 	.word	0x00100030
 8004778:	00100040 	.word	0x00100040
 800477c:	00100060 	.word	0x00100060
 8004780:	00100070 	.word	0x00100070

08004784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004798:	2302      	movs	r3, #2
 800479a:	e065      	b.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a2b      	ldr	r2, [pc, #172]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d108      	bne.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80047e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004812:	d013      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a17      	ldr	r2, [pc, #92]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a12      	ldr	r2, [pc, #72]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a13      	ldr	r2, [pc, #76]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d10c      	bne.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004842:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	4313      	orrs	r3, r2
 800484c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40013400 	.word	0x40013400
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40014000 	.word	0x40014000

08004888 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e087      	b.n	80049b4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a25      	ldr	r2, [pc, #148]	; (80049c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d106      	bne.n	8004940 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d004      	beq.n	8004954 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d126      	bne.n	80049a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	051b      	lsls	r3, r3, #20
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0e      	ldr	r2, [pc, #56]	; (80049c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a0d      	ldr	r2, [pc, #52]	; (80049c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d106      	bne.n	80049a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40013400 	.word	0x40013400

080049c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	2204      	movs	r2, #4
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	401a      	ands	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e042      	b.n	8004b22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fc fbd4 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2224      	movs	r2, #36	; 0x24
 8004ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f9a7 	bl	8004e20 <UART_SetConfig>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e022      	b.n	8004b22 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f001 fb55 	bl	8006194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f001 fbdc 	bl	80062d8 <UART_CheckIdleState>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d118      	bne.n	8004b8c <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d013      	beq.n	8004b8c <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 812e 	beq.w	8004dde <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	4798      	blx	r3
      }
      return;
 8004b8a:	e128      	b.n	8004dde <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80d1 	beq.w	8004d36 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4b96      	ldr	r3, [pc, #600]	; (8004df0 <HAL_UART_IRQHandler+0x2c4>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80c6 	beq.w	8004d36 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d010      	beq.n	8004bd6 <HAL_UART_IRQHandler+0xaa>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f043 0201 	orr.w	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d010      	beq.n	8004c02 <HAL_UART_IRQHandler+0xd6>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	f043 0204 	orr.w	r2, r3, #4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d010      	beq.n	8004c2e <HAL_UART_IRQHandler+0x102>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f043 0202 	orr.w	r2, r3, #2
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d015      	beq.n	8004c64 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <HAL_UART_IRQHandler+0x2c4>)
 8004c46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2208      	movs	r2, #8
 8004c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f043 0208 	orr.w	r2, r3, #8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80b9 	beq.w	8004de2 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d011      	beq.n	8004c9e <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d004      	beq.n	8004cbe <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d031      	beq.n	8004d22 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f001 fb9c 	bl	80063fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d123      	bne.n	8004d1a <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d013      	beq.n	8004d12 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cee:	4a41      	ldr	r2, [pc, #260]	; (8004df4 <HAL_UART_IRQHandler+0x2c8>)
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fc fca5 	bl	8001646 <HAL_DMA_Abort_IT>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d017      	beq.n	8004d32 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	e00f      	b.n	8004d32 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f87a 	bl	8004e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	e00b      	b.n	8004d32 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f876 	bl	8004e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d20:	e007      	b.n	8004d32 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f872 	bl	8004e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004d30:	e057      	b.n	8004de2 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d32:	bf00      	nop
    return;
 8004d34:	e055      	b.n	8004de2 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <HAL_UART_IRQHandler+0x230>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 fba4 	bl	80064a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d5a:	e045      	b.n	8004de8 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d012      	beq.n	8004d8c <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d031      	beq.n	8004de6 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
    }
    return;
 8004d8a:	e02c      	b.n	8004de6 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_UART_IRQHandler+0x27c>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 fb64 	bl	800646e <UART_EndTransmit_IT>
    return;
 8004da6:	e01f      	b.n	8004de8 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x298>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f001 fb84 	bl	80064ca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dc2:	e011      	b.n	8004de8 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <HAL_UART_IRQHandler+0x2bc>
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	da09      	bge.n	8004de8 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f001 fb6e 	bl	80064b6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dda:	bf00      	nop
 8004ddc:	e004      	b.n	8004de8 <HAL_UART_IRQHandler+0x2bc>
      return;
 8004dde:	bf00      	nop
 8004de0:	e002      	b.n	8004de8 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004de2:	bf00      	nop
 8004de4:	e000      	b.n	8004de8 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004de6:	bf00      	nop
  }
}
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	10000001 	.word	0x10000001
 8004df4:	08006443 	.word	0x08006443

08004df8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004e24:	b08a      	sub	sp, #40	; 0x28
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e54:	4313      	orrs	r3, r2
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4ba4      	ldr	r3, [pc, #656]	; (80050f0 <UART_SetConfig+0x2d0>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a99      	ldr	r2, [pc, #612]	; (80050f4 <UART_SetConfig+0x2d4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ea6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	f023 010f 	bic.w	r1, r3, #15
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a8a      	ldr	r2, [pc, #552]	; (80050f8 <UART_SetConfig+0x2d8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d126      	bne.n	8004f22 <UART_SetConfig+0x102>
 8004ed4:	4b89      	ldr	r3, [pc, #548]	; (80050fc <UART_SetConfig+0x2dc>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d81a      	bhi.n	8004f18 <UART_SetConfig+0xf8>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0xc8>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004f09 	.word	0x08004f09
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e0d6      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f00:	2302      	movs	r3, #2
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e0d2      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0e:	e0ce      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f16:	e0ca      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1e:	bf00      	nop
 8004f20:	e0c5      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a76      	ldr	r2, [pc, #472]	; (8005100 <UART_SetConfig+0x2e0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d138      	bne.n	8004f9e <UART_SetConfig+0x17e>
 8004f2c:	4b73      	ldr	r3, [pc, #460]	; (80050fc <UART_SetConfig+0x2dc>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b0c      	cmp	r3, #12
 8004f38:	d82c      	bhi.n	8004f94 <UART_SetConfig+0x174>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x120>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f95 	.word	0x08004f95
 8004f48:	08004f95 	.word	0x08004f95
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004f95 	.word	0x08004f95
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e098      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f82:	e094      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f84:	2304      	movs	r3, #4
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8a:	e090      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f92:	e08c      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9a:	bf00      	nop
 8004f9c:	e087      	b.n	80050ae <UART_SetConfig+0x28e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a58      	ldr	r2, [pc, #352]	; (8005104 <UART_SetConfig+0x2e4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d125      	bne.n	8004ff4 <UART_SetConfig+0x1d4>
 8004fa8:	4b54      	ldr	r3, [pc, #336]	; (80050fc <UART_SetConfig+0x2dc>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d011      	beq.n	8004fda <UART_SetConfig+0x1ba>
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d802      	bhi.n	8004fc0 <UART_SetConfig+0x1a0>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <UART_SetConfig+0x1aa>
 8004fbe:	e014      	b.n	8004fea <UART_SetConfig+0x1ca>
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d006      	beq.n	8004fd2 <UART_SetConfig+0x1b2>
 8004fc4:	2b30      	cmp	r3, #48	; 0x30
 8004fc6:	d00c      	beq.n	8004fe2 <UART_SetConfig+0x1c2>
 8004fc8:	e00f      	b.n	8004fea <UART_SetConfig+0x1ca>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd0:	e06d      	b.n	80050ae <UART_SetConfig+0x28e>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd8:	e069      	b.n	80050ae <UART_SetConfig+0x28e>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe0:	e065      	b.n	80050ae <UART_SetConfig+0x28e>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe8:	e061      	b.n	80050ae <UART_SetConfig+0x28e>
 8004fea:	2310      	movs	r3, #16
 8004fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff0:	bf00      	nop
 8004ff2:	e05c      	b.n	80050ae <UART_SetConfig+0x28e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a43      	ldr	r2, [pc, #268]	; (8005108 <UART_SetConfig+0x2e8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d125      	bne.n	800504a <UART_SetConfig+0x22a>
 8004ffe:	4b3f      	ldr	r3, [pc, #252]	; (80050fc <UART_SetConfig+0x2dc>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d011      	beq.n	8005030 <UART_SetConfig+0x210>
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d802      	bhi.n	8005016 <UART_SetConfig+0x1f6>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <UART_SetConfig+0x200>
 8005014:	e014      	b.n	8005040 <UART_SetConfig+0x220>
 8005016:	2b80      	cmp	r3, #128	; 0x80
 8005018:	d006      	beq.n	8005028 <UART_SetConfig+0x208>
 800501a:	2bc0      	cmp	r3, #192	; 0xc0
 800501c:	d00c      	beq.n	8005038 <UART_SetConfig+0x218>
 800501e:	e00f      	b.n	8005040 <UART_SetConfig+0x220>
 8005020:	2300      	movs	r3, #0
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005026:	e042      	b.n	80050ae <UART_SetConfig+0x28e>
 8005028:	2302      	movs	r3, #2
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502e:	e03e      	b.n	80050ae <UART_SetConfig+0x28e>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005036:	e03a      	b.n	80050ae <UART_SetConfig+0x28e>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503e:	e036      	b.n	80050ae <UART_SetConfig+0x28e>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005046:	bf00      	nop
 8005048:	e031      	b.n	80050ae <UART_SetConfig+0x28e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a29      	ldr	r2, [pc, #164]	; (80050f4 <UART_SetConfig+0x2d4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d129      	bne.n	80050a8 <UART_SetConfig+0x288>
 8005054:	4b29      	ldr	r3, [pc, #164]	; (80050fc <UART_SetConfig+0x2dc>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005062:	d014      	beq.n	800508e <UART_SetConfig+0x26e>
 8005064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005068:	d802      	bhi.n	8005070 <UART_SetConfig+0x250>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <UART_SetConfig+0x25e>
 800506e:	e016      	b.n	800509e <UART_SetConfig+0x27e>
 8005070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005074:	d007      	beq.n	8005086 <UART_SetConfig+0x266>
 8005076:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800507a:	d00c      	beq.n	8005096 <UART_SetConfig+0x276>
 800507c:	e00f      	b.n	800509e <UART_SetConfig+0x27e>
 800507e:	2300      	movs	r3, #0
 8005080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005084:	e013      	b.n	80050ae <UART_SetConfig+0x28e>
 8005086:	2302      	movs	r3, #2
 8005088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508c:	e00f      	b.n	80050ae <UART_SetConfig+0x28e>
 800508e:	2304      	movs	r3, #4
 8005090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005094:	e00b      	b.n	80050ae <UART_SetConfig+0x28e>
 8005096:	2308      	movs	r3, #8
 8005098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509c:	e007      	b.n	80050ae <UART_SetConfig+0x28e>
 800509e:	2310      	movs	r3, #16
 80050a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a4:	bf00      	nop
 80050a6:	e002      	b.n	80050ae <UART_SetConfig+0x28e>
 80050a8:	2310      	movs	r3, #16
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a10      	ldr	r2, [pc, #64]	; (80050f4 <UART_SetConfig+0x2d4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	f040 842e 	bne.w	8005916 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050be:	2b08      	cmp	r3, #8
 80050c0:	f200 8169 	bhi.w	8005396 <UART_SetConfig+0x576>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0x2ac>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	08005397 	.word	0x08005397
 80050d4:	080051af 	.word	0x080051af
 80050d8:	08005397 	.word	0x08005397
 80050dc:	08005247 	.word	0x08005247
 80050e0:	08005397 	.word	0x08005397
 80050e4:	08005397 	.word	0x08005397
 80050e8:	08005397 	.word	0x08005397
 80050ec:	080052e9 	.word	0x080052e9
 80050f0:	cfff69f3 	.word	0xcfff69f3
 80050f4:	40008000 	.word	0x40008000
 80050f8:	40013800 	.word	0x40013800
 80050fc:	40021000 	.word	0x40021000
 8005100:	40004400 	.word	0x40004400
 8005104:	40004800 	.word	0x40004800
 8005108:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800510c:	f7fd fa1a 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8005110:	4602      	mov	r2, r0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	2b00      	cmp	r3, #0
 8005118:	d044      	beq.n	80051a4 <UART_SetConfig+0x384>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b01      	cmp	r3, #1
 8005120:	d03e      	beq.n	80051a0 <UART_SetConfig+0x380>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	2b02      	cmp	r3, #2
 8005128:	d038      	beq.n	800519c <UART_SetConfig+0x37c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b03      	cmp	r3, #3
 8005130:	d032      	beq.n	8005198 <UART_SetConfig+0x378>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	2b04      	cmp	r3, #4
 8005138:	d02c      	beq.n	8005194 <UART_SetConfig+0x374>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b05      	cmp	r3, #5
 8005140:	d026      	beq.n	8005190 <UART_SetConfig+0x370>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b06      	cmp	r3, #6
 8005148:	d020      	beq.n	800518c <UART_SetConfig+0x36c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	2b07      	cmp	r3, #7
 8005150:	d01a      	beq.n	8005188 <UART_SetConfig+0x368>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2b08      	cmp	r3, #8
 8005158:	d014      	beq.n	8005184 <UART_SetConfig+0x364>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b09      	cmp	r3, #9
 8005160:	d00e      	beq.n	8005180 <UART_SetConfig+0x360>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b0a      	cmp	r3, #10
 8005168:	d008      	beq.n	800517c <UART_SetConfig+0x35c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	2b0b      	cmp	r3, #11
 8005170:	d102      	bne.n	8005178 <UART_SetConfig+0x358>
 8005172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005176:	e016      	b.n	80051a6 <UART_SetConfig+0x386>
 8005178:	2301      	movs	r3, #1
 800517a:	e014      	b.n	80051a6 <UART_SetConfig+0x386>
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	e012      	b.n	80051a6 <UART_SetConfig+0x386>
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	e010      	b.n	80051a6 <UART_SetConfig+0x386>
 8005184:	2320      	movs	r3, #32
 8005186:	e00e      	b.n	80051a6 <UART_SetConfig+0x386>
 8005188:	2310      	movs	r3, #16
 800518a:	e00c      	b.n	80051a6 <UART_SetConfig+0x386>
 800518c:	230c      	movs	r3, #12
 800518e:	e00a      	b.n	80051a6 <UART_SetConfig+0x386>
 8005190:	230a      	movs	r3, #10
 8005192:	e008      	b.n	80051a6 <UART_SetConfig+0x386>
 8005194:	2308      	movs	r3, #8
 8005196:	e006      	b.n	80051a6 <UART_SetConfig+0x386>
 8005198:	2306      	movs	r3, #6
 800519a:	e004      	b.n	80051a6 <UART_SetConfig+0x386>
 800519c:	2304      	movs	r3, #4
 800519e:	e002      	b.n	80051a6 <UART_SetConfig+0x386>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e000      	b.n	80051a6 <UART_SetConfig+0x386>
 80051a4:	2301      	movs	r3, #1
 80051a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051aa:	617b      	str	r3, [r7, #20]
        break;
 80051ac:	e0f6      	b.n	800539c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d044      	beq.n	8005240 <UART_SetConfig+0x420>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d03e      	beq.n	800523c <UART_SetConfig+0x41c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d038      	beq.n	8005238 <UART_SetConfig+0x418>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d032      	beq.n	8005234 <UART_SetConfig+0x414>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d02c      	beq.n	8005230 <UART_SetConfig+0x410>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d026      	beq.n	800522c <UART_SetConfig+0x40c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d020      	beq.n	8005228 <UART_SetConfig+0x408>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b07      	cmp	r3, #7
 80051ec:	d01a      	beq.n	8005224 <UART_SetConfig+0x404>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d014      	beq.n	8005220 <UART_SetConfig+0x400>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2b09      	cmp	r3, #9
 80051fc:	d00e      	beq.n	800521c <UART_SetConfig+0x3fc>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b0a      	cmp	r3, #10
 8005204:	d008      	beq.n	8005218 <UART_SetConfig+0x3f8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b0b      	cmp	r3, #11
 800520c:	d102      	bne.n	8005214 <UART_SetConfig+0x3f4>
 800520e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005212:	e016      	b.n	8005242 <UART_SetConfig+0x422>
 8005214:	4ba1      	ldr	r3, [pc, #644]	; (800549c <UART_SetConfig+0x67c>)
 8005216:	e014      	b.n	8005242 <UART_SetConfig+0x422>
 8005218:	4ba1      	ldr	r3, [pc, #644]	; (80054a0 <UART_SetConfig+0x680>)
 800521a:	e012      	b.n	8005242 <UART_SetConfig+0x422>
 800521c:	4ba1      	ldr	r3, [pc, #644]	; (80054a4 <UART_SetConfig+0x684>)
 800521e:	e010      	b.n	8005242 <UART_SetConfig+0x422>
 8005220:	4ba1      	ldr	r3, [pc, #644]	; (80054a8 <UART_SetConfig+0x688>)
 8005222:	e00e      	b.n	8005242 <UART_SetConfig+0x422>
 8005224:	4ba1      	ldr	r3, [pc, #644]	; (80054ac <UART_SetConfig+0x68c>)
 8005226:	e00c      	b.n	8005242 <UART_SetConfig+0x422>
 8005228:	4ba1      	ldr	r3, [pc, #644]	; (80054b0 <UART_SetConfig+0x690>)
 800522a:	e00a      	b.n	8005242 <UART_SetConfig+0x422>
 800522c:	4ba1      	ldr	r3, [pc, #644]	; (80054b4 <UART_SetConfig+0x694>)
 800522e:	e008      	b.n	8005242 <UART_SetConfig+0x422>
 8005230:	4ba1      	ldr	r3, [pc, #644]	; (80054b8 <UART_SetConfig+0x698>)
 8005232:	e006      	b.n	8005242 <UART_SetConfig+0x422>
 8005234:	4ba1      	ldr	r3, [pc, #644]	; (80054bc <UART_SetConfig+0x69c>)
 8005236:	e004      	b.n	8005242 <UART_SetConfig+0x422>
 8005238:	4ba1      	ldr	r3, [pc, #644]	; (80054c0 <UART_SetConfig+0x6a0>)
 800523a:	e002      	b.n	8005242 <UART_SetConfig+0x422>
 800523c:	4ba1      	ldr	r3, [pc, #644]	; (80054c4 <UART_SetConfig+0x6a4>)
 800523e:	e000      	b.n	8005242 <UART_SetConfig+0x422>
 8005240:	4b96      	ldr	r3, [pc, #600]	; (800549c <UART_SetConfig+0x67c>)
 8005242:	617b      	str	r3, [r7, #20]
        break;
 8005244:	e0aa      	b.n	800539c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005246:	f7fd f90f 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 800524a:	4602      	mov	r2, r0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d044      	beq.n	80052de <UART_SetConfig+0x4be>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2b01      	cmp	r3, #1
 800525a:	d03e      	beq.n	80052da <UART_SetConfig+0x4ba>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	2b02      	cmp	r3, #2
 8005262:	d038      	beq.n	80052d6 <UART_SetConfig+0x4b6>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2b03      	cmp	r3, #3
 800526a:	d032      	beq.n	80052d2 <UART_SetConfig+0x4b2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	2b04      	cmp	r3, #4
 8005272:	d02c      	beq.n	80052ce <UART_SetConfig+0x4ae>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b05      	cmp	r3, #5
 800527a:	d026      	beq.n	80052ca <UART_SetConfig+0x4aa>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b06      	cmp	r3, #6
 8005282:	d020      	beq.n	80052c6 <UART_SetConfig+0x4a6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	2b07      	cmp	r3, #7
 800528a:	d01a      	beq.n	80052c2 <UART_SetConfig+0x4a2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	2b08      	cmp	r3, #8
 8005292:	d014      	beq.n	80052be <UART_SetConfig+0x49e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	2b09      	cmp	r3, #9
 800529a:	d00e      	beq.n	80052ba <UART_SetConfig+0x49a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	2b0a      	cmp	r3, #10
 80052a2:	d008      	beq.n	80052b6 <UART_SetConfig+0x496>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b0b      	cmp	r3, #11
 80052aa:	d102      	bne.n	80052b2 <UART_SetConfig+0x492>
 80052ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052b0:	e016      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e014      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052b6:	2380      	movs	r3, #128	; 0x80
 80052b8:	e012      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052ba:	2340      	movs	r3, #64	; 0x40
 80052bc:	e010      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052be:	2320      	movs	r3, #32
 80052c0:	e00e      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052c2:	2310      	movs	r3, #16
 80052c4:	e00c      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052c6:	230c      	movs	r3, #12
 80052c8:	e00a      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052ca:	230a      	movs	r3, #10
 80052cc:	e008      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052ce:	2308      	movs	r3, #8
 80052d0:	e006      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052d2:	2306      	movs	r3, #6
 80052d4:	e004      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052d6:	2304      	movs	r3, #4
 80052d8:	e002      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052da:	2302      	movs	r3, #2
 80052dc:	e000      	b.n	80052e0 <UART_SetConfig+0x4c0>
 80052de:	2301      	movs	r3, #1
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]
        break;
 80052e6:	e059      	b.n	800539c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d04e      	beq.n	800538e <UART_SetConfig+0x56e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d047      	beq.n	8005388 <UART_SetConfig+0x568>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d040      	beq.n	8005382 <UART_SetConfig+0x562>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b03      	cmp	r3, #3
 8005306:	d039      	beq.n	800537c <UART_SetConfig+0x55c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b04      	cmp	r3, #4
 800530e:	d032      	beq.n	8005376 <UART_SetConfig+0x556>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2b05      	cmp	r3, #5
 8005316:	d02b      	beq.n	8005370 <UART_SetConfig+0x550>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2b06      	cmp	r3, #6
 800531e:	d024      	beq.n	800536a <UART_SetConfig+0x54a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2b07      	cmp	r3, #7
 8005326:	d01d      	beq.n	8005364 <UART_SetConfig+0x544>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b08      	cmp	r3, #8
 800532e:	d016      	beq.n	800535e <UART_SetConfig+0x53e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b09      	cmp	r3, #9
 8005336:	d00f      	beq.n	8005358 <UART_SetConfig+0x538>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	2b0a      	cmp	r3, #10
 800533e:	d008      	beq.n	8005352 <UART_SetConfig+0x532>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	2b0b      	cmp	r3, #11
 8005346:	d101      	bne.n	800534c <UART_SetConfig+0x52c>
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	e022      	b.n	8005392 <UART_SetConfig+0x572>
 800534c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005350:	e01f      	b.n	8005392 <UART_SetConfig+0x572>
 8005352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005356:	e01c      	b.n	8005392 <UART_SetConfig+0x572>
 8005358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800535c:	e019      	b.n	8005392 <UART_SetConfig+0x572>
 800535e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005362:	e016      	b.n	8005392 <UART_SetConfig+0x572>
 8005364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005368:	e013      	b.n	8005392 <UART_SetConfig+0x572>
 800536a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800536e:	e010      	b.n	8005392 <UART_SetConfig+0x572>
 8005370:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005374:	e00d      	b.n	8005392 <UART_SetConfig+0x572>
 8005376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800537a:	e00a      	b.n	8005392 <UART_SetConfig+0x572>
 800537c:	f241 5355 	movw	r3, #5461	; 0x1555
 8005380:	e007      	b.n	8005392 <UART_SetConfig+0x572>
 8005382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005386:	e004      	b.n	8005392 <UART_SetConfig+0x572>
 8005388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800538c:	e001      	b.n	8005392 <UART_SetConfig+0x572>
 800538e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005392:	617b      	str	r3, [r7, #20]
        break;
 8005394:	e002      	b.n	800539c <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	76fb      	strb	r3, [r7, #27]
        break;
 800539a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 86cd 	beq.w	800613e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	4413      	add	r3, r2
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d305      	bcc.n	80053c0 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d903      	bls.n	80053c8 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	76fb      	strb	r3, [r7, #27]
 80053c4:	f000 bebb 	b.w	800613e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80053c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	f200 828d 	bhi.w	80058ec <UART_SetConfig+0xacc>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x5b8>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	080058ed 	.word	0x080058ed
 80053e0:	08005567 	.word	0x08005567
 80053e4:	080058ed 	.word	0x080058ed
 80053e8:	0800565d 	.word	0x0800565d
 80053ec:	080058ed 	.word	0x080058ed
 80053f0:	080058ed 	.word	0x080058ed
 80053f4:	080058ed 	.word	0x080058ed
 80053f8:	0800579b 	.word	0x0800579b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fd f8a2 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8005400:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4618      	mov	r0, r3
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	2b00      	cmp	r3, #0
 8005410:	d07d      	beq.n	800550e <UART_SetConfig+0x6ee>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b01      	cmp	r3, #1
 8005418:	d074      	beq.n	8005504 <UART_SetConfig+0x6e4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	2b02      	cmp	r3, #2
 8005420:	d06b      	beq.n	80054fa <UART_SetConfig+0x6da>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2b03      	cmp	r3, #3
 8005428:	d062      	beq.n	80054f0 <UART_SetConfig+0x6d0>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b04      	cmp	r3, #4
 8005430:	d059      	beq.n	80054e6 <UART_SetConfig+0x6c6>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b05      	cmp	r3, #5
 8005438:	d050      	beq.n	80054dc <UART_SetConfig+0x6bc>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b06      	cmp	r3, #6
 8005440:	d047      	beq.n	80054d2 <UART_SetConfig+0x6b2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b07      	cmp	r3, #7
 8005448:	d03e      	beq.n	80054c8 <UART_SetConfig+0x6a8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b08      	cmp	r3, #8
 8005450:	d01f      	beq.n	8005492 <UART_SetConfig+0x672>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b09      	cmp	r3, #9
 8005458:	d016      	beq.n	8005488 <UART_SetConfig+0x668>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b0a      	cmp	r3, #10
 8005460:	d00d      	beq.n	800547e <UART_SetConfig+0x65e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b0b      	cmp	r3, #11
 8005468:	d104      	bne.n	8005474 <UART_SetConfig+0x654>
 800546a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546e:	f04f 0400 	mov.w	r4, #0
 8005472:	e050      	b.n	8005516 <UART_SetConfig+0x6f6>
 8005474:	f04f 0301 	mov.w	r3, #1
 8005478:	f04f 0400 	mov.w	r4, #0
 800547c:	e04b      	b.n	8005516 <UART_SetConfig+0x6f6>
 800547e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005482:	f04f 0400 	mov.w	r4, #0
 8005486:	e046      	b.n	8005516 <UART_SetConfig+0x6f6>
 8005488:	f04f 0340 	mov.w	r3, #64	; 0x40
 800548c:	f04f 0400 	mov.w	r4, #0
 8005490:	e041      	b.n	8005516 <UART_SetConfig+0x6f6>
 8005492:	f04f 0320 	mov.w	r3, #32
 8005496:	f04f 0400 	mov.w	r4, #0
 800549a:	e03c      	b.n	8005516 <UART_SetConfig+0x6f6>
 800549c:	00f42400 	.word	0x00f42400
 80054a0:	0001e848 	.word	0x0001e848
 80054a4:	0003d090 	.word	0x0003d090
 80054a8:	0007a120 	.word	0x0007a120
 80054ac:	000f4240 	.word	0x000f4240
 80054b0:	00145855 	.word	0x00145855
 80054b4:	00186a00 	.word	0x00186a00
 80054b8:	001e8480 	.word	0x001e8480
 80054bc:	0028b0aa 	.word	0x0028b0aa
 80054c0:	003d0900 	.word	0x003d0900
 80054c4:	007a1200 	.word	0x007a1200
 80054c8:	f04f 0310 	mov.w	r3, #16
 80054cc:	f04f 0400 	mov.w	r4, #0
 80054d0:	e021      	b.n	8005516 <UART_SetConfig+0x6f6>
 80054d2:	f04f 030c 	mov.w	r3, #12
 80054d6:	f04f 0400 	mov.w	r4, #0
 80054da:	e01c      	b.n	8005516 <UART_SetConfig+0x6f6>
 80054dc:	f04f 030a 	mov.w	r3, #10
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	e017      	b.n	8005516 <UART_SetConfig+0x6f6>
 80054e6:	f04f 0308 	mov.w	r3, #8
 80054ea:	f04f 0400 	mov.w	r4, #0
 80054ee:	e012      	b.n	8005516 <UART_SetConfig+0x6f6>
 80054f0:	f04f 0306 	mov.w	r3, #6
 80054f4:	f04f 0400 	mov.w	r4, #0
 80054f8:	e00d      	b.n	8005516 <UART_SetConfig+0x6f6>
 80054fa:	f04f 0304 	mov.w	r3, #4
 80054fe:	f04f 0400 	mov.w	r4, #0
 8005502:	e008      	b.n	8005516 <UART_SetConfig+0x6f6>
 8005504:	f04f 0302 	mov.w	r3, #2
 8005508:	f04f 0400 	mov.w	r4, #0
 800550c:	e003      	b.n	8005516 <UART_SetConfig+0x6f6>
 800550e:	f04f 0301 	mov.w	r3, #1
 8005512:	f04f 0400 	mov.w	r4, #0
 8005516:	461a      	mov	r2, r3
 8005518:	4623      	mov	r3, r4
 800551a:	f7fa fe7d 	bl	8000218 <__aeabi_uldivmod>
 800551e:	4603      	mov	r3, r0
 8005520:	460c      	mov	r4, r1
 8005522:	4619      	mov	r1, r3
 8005524:	4622      	mov	r2, r4
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	f04f 0400 	mov.w	r4, #0
 800552e:	0214      	lsls	r4, r2, #8
 8005530:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005534:	020b      	lsls	r3, r1, #8
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6852      	ldr	r2, [r2, #4]
 800553a:	0852      	lsrs	r2, r2, #1
 800553c:	4611      	mov	r1, r2
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	eb13 0b01 	adds.w	fp, r3, r1
 8005546:	eb44 0c02 	adc.w	ip, r4, r2
 800554a:	4658      	mov	r0, fp
 800554c:	4661      	mov	r1, ip
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f04f 0400 	mov.w	r4, #0
 8005556:	461a      	mov	r2, r3
 8005558:	4623      	mov	r3, r4
 800555a:	f7fa fe5d 	bl	8000218 <__aeabi_uldivmod>
 800555e:	4603      	mov	r3, r0
 8005560:	460c      	mov	r4, r1
 8005562:	61fb      	str	r3, [r7, #28]
            break;
 8005564:	e1c5      	b.n	80058f2 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	2b00      	cmp	r3, #0
 800556c:	d05b      	beq.n	8005626 <UART_SetConfig+0x806>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2b01      	cmp	r3, #1
 8005574:	d053      	beq.n	800561e <UART_SetConfig+0x7fe>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	2b02      	cmp	r3, #2
 800557c:	d04b      	beq.n	8005616 <UART_SetConfig+0x7f6>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	2b03      	cmp	r3, #3
 8005584:	d043      	beq.n	800560e <UART_SetConfig+0x7ee>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2b04      	cmp	r3, #4
 800558c:	d03b      	beq.n	8005606 <UART_SetConfig+0x7e6>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	2b05      	cmp	r3, #5
 8005594:	d033      	beq.n	80055fe <UART_SetConfig+0x7de>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2b06      	cmp	r3, #6
 800559c:	d02b      	beq.n	80055f6 <UART_SetConfig+0x7d6>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2b07      	cmp	r3, #7
 80055a4:	d023      	beq.n	80055ee <UART_SetConfig+0x7ce>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d01b      	beq.n	80055e6 <UART_SetConfig+0x7c6>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b09      	cmp	r3, #9
 80055b4:	d013      	beq.n	80055de <UART_SetConfig+0x7be>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	2b0a      	cmp	r3, #10
 80055bc:	d00b      	beq.n	80055d6 <UART_SetConfig+0x7b6>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2b0b      	cmp	r3, #11
 80055c4:	d103      	bne.n	80055ce <UART_SetConfig+0x7ae>
 80055c6:	4bae      	ldr	r3, [pc, #696]	; (8005880 <UART_SetConfig+0xa60>)
 80055c8:	f04f 0400 	mov.w	r4, #0
 80055cc:	e02e      	b.n	800562c <UART_SetConfig+0x80c>
 80055ce:	4bad      	ldr	r3, [pc, #692]	; (8005884 <UART_SetConfig+0xa64>)
 80055d0:	f04f 0400 	mov.w	r4, #0
 80055d4:	e02a      	b.n	800562c <UART_SetConfig+0x80c>
 80055d6:	4bac      	ldr	r3, [pc, #688]	; (8005888 <UART_SetConfig+0xa68>)
 80055d8:	f04f 0400 	mov.w	r4, #0
 80055dc:	e026      	b.n	800562c <UART_SetConfig+0x80c>
 80055de:	4bab      	ldr	r3, [pc, #684]	; (800588c <UART_SetConfig+0xa6c>)
 80055e0:	f04f 0400 	mov.w	r4, #0
 80055e4:	e022      	b.n	800562c <UART_SetConfig+0x80c>
 80055e6:	4baa      	ldr	r3, [pc, #680]	; (8005890 <UART_SetConfig+0xa70>)
 80055e8:	f04f 0400 	mov.w	r4, #0
 80055ec:	e01e      	b.n	800562c <UART_SetConfig+0x80c>
 80055ee:	4ba9      	ldr	r3, [pc, #676]	; (8005894 <UART_SetConfig+0xa74>)
 80055f0:	f04f 0400 	mov.w	r4, #0
 80055f4:	e01a      	b.n	800562c <UART_SetConfig+0x80c>
 80055f6:	a49e      	add	r4, pc, #632	; (adr r4, 8005870 <UART_SetConfig+0xa50>)
 80055f8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80055fc:	e016      	b.n	800562c <UART_SetConfig+0x80c>
 80055fe:	4ba6      	ldr	r3, [pc, #664]	; (8005898 <UART_SetConfig+0xa78>)
 8005600:	f04f 0400 	mov.w	r4, #0
 8005604:	e012      	b.n	800562c <UART_SetConfig+0x80c>
 8005606:	4ba5      	ldr	r3, [pc, #660]	; (800589c <UART_SetConfig+0xa7c>)
 8005608:	f04f 0400 	mov.w	r4, #0
 800560c:	e00e      	b.n	800562c <UART_SetConfig+0x80c>
 800560e:	a49a      	add	r4, pc, #616	; (adr r4, 8005878 <UART_SetConfig+0xa58>)
 8005610:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005614:	e00a      	b.n	800562c <UART_SetConfig+0x80c>
 8005616:	4ba2      	ldr	r3, [pc, #648]	; (80058a0 <UART_SetConfig+0xa80>)
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	e006      	b.n	800562c <UART_SetConfig+0x80c>
 800561e:	4ba1      	ldr	r3, [pc, #644]	; (80058a4 <UART_SetConfig+0xa84>)
 8005620:	f04f 0400 	mov.w	r4, #0
 8005624:	e002      	b.n	800562c <UART_SetConfig+0x80c>
 8005626:	4b97      	ldr	r3, [pc, #604]	; (8005884 <UART_SetConfig+0xa64>)
 8005628:	f04f 0400 	mov.w	r4, #0
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6852      	ldr	r2, [r2, #4]
 8005630:	0852      	lsrs	r2, r2, #1
 8005632:	4611      	mov	r1, r2
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	eb13 0b01 	adds.w	fp, r3, r1
 800563c:	eb44 0c02 	adc.w	ip, r4, r2
 8005640:	4658      	mov	r0, fp
 8005642:	4661      	mov	r1, ip
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f04f 0400 	mov.w	r4, #0
 800564c:	461a      	mov	r2, r3
 800564e:	4623      	mov	r3, r4
 8005650:	f7fa fde2 	bl	8000218 <__aeabi_uldivmod>
 8005654:	4603      	mov	r3, r0
 8005656:	460c      	mov	r4, r1
 8005658:	61fb      	str	r3, [r7, #28]
            break;
 800565a:	e14a      	b.n	80058f2 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800565c:	f7fc ff04 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8005660:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4618      	mov	r0, r3
 8005666:	f04f 0100 	mov.w	r1, #0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d067      	beq.n	8005742 <UART_SetConfig+0x922>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b01      	cmp	r3, #1
 8005678:	d05e      	beq.n	8005738 <UART_SetConfig+0x918>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	2b02      	cmp	r3, #2
 8005680:	d055      	beq.n	800572e <UART_SetConfig+0x90e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b03      	cmp	r3, #3
 8005688:	d04c      	beq.n	8005724 <UART_SetConfig+0x904>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	2b04      	cmp	r3, #4
 8005690:	d043      	beq.n	800571a <UART_SetConfig+0x8fa>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b05      	cmp	r3, #5
 8005698:	d03a      	beq.n	8005710 <UART_SetConfig+0x8f0>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d031      	beq.n	8005706 <UART_SetConfig+0x8e6>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	2b07      	cmp	r3, #7
 80056a8:	d028      	beq.n	80056fc <UART_SetConfig+0x8dc>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d01f      	beq.n	80056f2 <UART_SetConfig+0x8d2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2b09      	cmp	r3, #9
 80056b8:	d016      	beq.n	80056e8 <UART_SetConfig+0x8c8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2b0a      	cmp	r3, #10
 80056c0:	d00d      	beq.n	80056de <UART_SetConfig+0x8be>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	2b0b      	cmp	r3, #11
 80056c8:	d104      	bne.n	80056d4 <UART_SetConfig+0x8b4>
 80056ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056ce:	f04f 0400 	mov.w	r4, #0
 80056d2:	e03a      	b.n	800574a <UART_SetConfig+0x92a>
 80056d4:	f04f 0301 	mov.w	r3, #1
 80056d8:	f04f 0400 	mov.w	r4, #0
 80056dc:	e035      	b.n	800574a <UART_SetConfig+0x92a>
 80056de:	f04f 0380 	mov.w	r3, #128	; 0x80
 80056e2:	f04f 0400 	mov.w	r4, #0
 80056e6:	e030      	b.n	800574a <UART_SetConfig+0x92a>
 80056e8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80056ec:	f04f 0400 	mov.w	r4, #0
 80056f0:	e02b      	b.n	800574a <UART_SetConfig+0x92a>
 80056f2:	f04f 0320 	mov.w	r3, #32
 80056f6:	f04f 0400 	mov.w	r4, #0
 80056fa:	e026      	b.n	800574a <UART_SetConfig+0x92a>
 80056fc:	f04f 0310 	mov.w	r3, #16
 8005700:	f04f 0400 	mov.w	r4, #0
 8005704:	e021      	b.n	800574a <UART_SetConfig+0x92a>
 8005706:	f04f 030c 	mov.w	r3, #12
 800570a:	f04f 0400 	mov.w	r4, #0
 800570e:	e01c      	b.n	800574a <UART_SetConfig+0x92a>
 8005710:	f04f 030a 	mov.w	r3, #10
 8005714:	f04f 0400 	mov.w	r4, #0
 8005718:	e017      	b.n	800574a <UART_SetConfig+0x92a>
 800571a:	f04f 0308 	mov.w	r3, #8
 800571e:	f04f 0400 	mov.w	r4, #0
 8005722:	e012      	b.n	800574a <UART_SetConfig+0x92a>
 8005724:	f04f 0306 	mov.w	r3, #6
 8005728:	f04f 0400 	mov.w	r4, #0
 800572c:	e00d      	b.n	800574a <UART_SetConfig+0x92a>
 800572e:	f04f 0304 	mov.w	r3, #4
 8005732:	f04f 0400 	mov.w	r4, #0
 8005736:	e008      	b.n	800574a <UART_SetConfig+0x92a>
 8005738:	f04f 0302 	mov.w	r3, #2
 800573c:	f04f 0400 	mov.w	r4, #0
 8005740:	e003      	b.n	800574a <UART_SetConfig+0x92a>
 8005742:	f04f 0301 	mov.w	r3, #1
 8005746:	f04f 0400 	mov.w	r4, #0
 800574a:	461a      	mov	r2, r3
 800574c:	4623      	mov	r3, r4
 800574e:	f7fa fd63 	bl	8000218 <__aeabi_uldivmod>
 8005752:	4603      	mov	r3, r0
 8005754:	460c      	mov	r4, r1
 8005756:	4619      	mov	r1, r3
 8005758:	4622      	mov	r2, r4
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	f04f 0400 	mov.w	r4, #0
 8005762:	0214      	lsls	r4, r2, #8
 8005764:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005768:	020b      	lsls	r3, r1, #8
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6852      	ldr	r2, [r2, #4]
 800576e:	0852      	lsrs	r2, r2, #1
 8005770:	4611      	mov	r1, r2
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	eb13 0b01 	adds.w	fp, r3, r1
 800577a:	eb44 0c02 	adc.w	ip, r4, r2
 800577e:	4658      	mov	r0, fp
 8005780:	4661      	mov	r1, ip
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f04f 0400 	mov.w	r4, #0
 800578a:	461a      	mov	r2, r3
 800578c:	4623      	mov	r3, r4
 800578e:	f7fa fd43 	bl	8000218 <__aeabi_uldivmod>
 8005792:	4603      	mov	r3, r0
 8005794:	460c      	mov	r4, r1
 8005796:	61fb      	str	r3, [r7, #28]
            break;
 8005798:	e0ab      	b.n	80058f2 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 8088 	beq.w	80058b4 <UART_SetConfig+0xa94>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d05b      	beq.n	8005864 <UART_SetConfig+0xa44>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d052      	beq.n	800585a <UART_SetConfig+0xa3a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d04a      	beq.n	8005852 <UART_SetConfig+0xa32>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d041      	beq.n	8005848 <UART_SetConfig+0xa28>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2b05      	cmp	r3, #5
 80057ca:	d039      	beq.n	8005840 <UART_SetConfig+0xa20>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	2b06      	cmp	r3, #6
 80057d2:	d031      	beq.n	8005838 <UART_SetConfig+0xa18>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	2b07      	cmp	r3, #7
 80057da:	d028      	beq.n	800582e <UART_SetConfig+0xa0e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d01f      	beq.n	8005824 <UART_SetConfig+0xa04>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b09      	cmp	r3, #9
 80057ea:	d016      	beq.n	800581a <UART_SetConfig+0x9fa>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b0a      	cmp	r3, #10
 80057f2:	d00d      	beq.n	8005810 <UART_SetConfig+0x9f0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	2b0b      	cmp	r3, #11
 80057fa:	d104      	bne.n	8005806 <UART_SetConfig+0x9e6>
 80057fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005800:	f04f 0400 	mov.w	r4, #0
 8005804:	e05a      	b.n	80058bc <UART_SetConfig+0xa9c>
 8005806:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800580a:	f04f 0400 	mov.w	r4, #0
 800580e:	e055      	b.n	80058bc <UART_SetConfig+0xa9c>
 8005810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005814:	f04f 0400 	mov.w	r4, #0
 8005818:	e050      	b.n	80058bc <UART_SetConfig+0xa9c>
 800581a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800581e:	f04f 0400 	mov.w	r4, #0
 8005822:	e04b      	b.n	80058bc <UART_SetConfig+0xa9c>
 8005824:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	e046      	b.n	80058bc <UART_SetConfig+0xa9c>
 800582e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005832:	f04f 0400 	mov.w	r4, #0
 8005836:	e041      	b.n	80058bc <UART_SetConfig+0xa9c>
 8005838:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <UART_SetConfig+0xa88>)
 800583a:	f04f 0400 	mov.w	r4, #0
 800583e:	e03d      	b.n	80058bc <UART_SetConfig+0xa9c>
 8005840:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <UART_SetConfig+0xa8c>)
 8005842:	f04f 0400 	mov.w	r4, #0
 8005846:	e039      	b.n	80058bc <UART_SetConfig+0xa9c>
 8005848:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800584c:	f04f 0400 	mov.w	r4, #0
 8005850:	e034      	b.n	80058bc <UART_SetConfig+0xa9c>
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <UART_SetConfig+0xa90>)
 8005854:	f04f 0400 	mov.w	r4, #0
 8005858:	e030      	b.n	80058bc <UART_SetConfig+0xa9c>
 800585a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800585e:	f04f 0400 	mov.w	r4, #0
 8005862:	e02b      	b.n	80058bc <UART_SetConfig+0xa9c>
 8005864:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005868:	f04f 0400 	mov.w	r4, #0
 800586c:	e026      	b.n	80058bc <UART_SetConfig+0xa9c>
 800586e:	bf00      	nop
 8005870:	14585500 	.word	0x14585500
 8005874:	00000000 	.word	0x00000000
 8005878:	28b0aa00 	.word	0x28b0aa00
 800587c:	00000000 	.word	0x00000000
 8005880:	00f42400 	.word	0x00f42400
 8005884:	f4240000 	.word	0xf4240000
 8005888:	01e84800 	.word	0x01e84800
 800588c:	03d09000 	.word	0x03d09000
 8005890:	07a12000 	.word	0x07a12000
 8005894:	0f424000 	.word	0x0f424000
 8005898:	186a0000 	.word	0x186a0000
 800589c:	1e848000 	.word	0x1e848000
 80058a0:	3d090000 	.word	0x3d090000
 80058a4:	7a120000 	.word	0x7a120000
 80058a8:	000aaa00 	.word	0x000aaa00
 80058ac:	000ccc00 	.word	0x000ccc00
 80058b0:	00155500 	.word	0x00155500
 80058b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80058b8:	f04f 0400 	mov.w	r4, #0
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6852      	ldr	r2, [r2, #4]
 80058c0:	0852      	lsrs	r2, r2, #1
 80058c2:	4611      	mov	r1, r2
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	eb13 0b01 	adds.w	fp, r3, r1
 80058cc:	eb44 0c02 	adc.w	ip, r4, r2
 80058d0:	4658      	mov	r0, fp
 80058d2:	4661      	mov	r1, ip
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	461a      	mov	r2, r3
 80058de:	4623      	mov	r3, r4
 80058e0:	f7fa fc9a 	bl	8000218 <__aeabi_uldivmod>
 80058e4:	4603      	mov	r3, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	61fb      	str	r3, [r7, #28]
            break;
 80058ea:	e002      	b.n	80058f2 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	76fb      	strb	r3, [r7, #27]
            break;
 80058f0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058f8:	d309      	bcc.n	800590e <UART_SetConfig+0xaee>
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005900:	d205      	bcs.n	800590e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	60da      	str	r2, [r3, #12]
 800590a:	f000 bc18 	b.w	800613e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	76fb      	strb	r3, [r7, #27]
 8005912:	f000 bc14 	b.w	800613e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800591e:	f040 8204 	bne.w	8005d2a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8005922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005926:	2b08      	cmp	r3, #8
 8005928:	f200 81df 	bhi.w	8005cea <UART_SetConfig+0xeca>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <UART_SetConfig+0xb14>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005959 	.word	0x08005959
 8005938:	08005a11 	.word	0x08005a11
 800593c:	08005ac9 	.word	0x08005ac9
 8005940:	08005ceb 	.word	0x08005ceb
 8005944:	08005b71 	.word	0x08005b71
 8005948:	08005ceb 	.word	0x08005ceb
 800594c:	08005ceb 	.word	0x08005ceb
 8005950:	08005ceb 	.word	0x08005ceb
 8005954:	08005c29 	.word	0x08005c29
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005958:	f7fc fdf4 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 800595c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	d044      	beq.n	80059f0 <UART_SetConfig+0xbd0>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b01      	cmp	r3, #1
 800596c:	d03e      	beq.n	80059ec <UART_SetConfig+0xbcc>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b02      	cmp	r3, #2
 8005974:	d038      	beq.n	80059e8 <UART_SetConfig+0xbc8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b03      	cmp	r3, #3
 800597c:	d032      	beq.n	80059e4 <UART_SetConfig+0xbc4>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b04      	cmp	r3, #4
 8005984:	d02c      	beq.n	80059e0 <UART_SetConfig+0xbc0>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b05      	cmp	r3, #5
 800598c:	d026      	beq.n	80059dc <UART_SetConfig+0xbbc>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b06      	cmp	r3, #6
 8005994:	d020      	beq.n	80059d8 <UART_SetConfig+0xbb8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b07      	cmp	r3, #7
 800599c:	d01a      	beq.n	80059d4 <UART_SetConfig+0xbb4>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d014      	beq.n	80059d0 <UART_SetConfig+0xbb0>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b09      	cmp	r3, #9
 80059ac:	d00e      	beq.n	80059cc <UART_SetConfig+0xbac>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b0a      	cmp	r3, #10
 80059b4:	d008      	beq.n	80059c8 <UART_SetConfig+0xba8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2b0b      	cmp	r3, #11
 80059bc:	d102      	bne.n	80059c4 <UART_SetConfig+0xba4>
 80059be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059c2:	e016      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e014      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059c8:	2380      	movs	r3, #128	; 0x80
 80059ca:	e012      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	e010      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059d0:	2320      	movs	r3, #32
 80059d2:	e00e      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059d4:	2310      	movs	r3, #16
 80059d6:	e00c      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059d8:	230c      	movs	r3, #12
 80059da:	e00a      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059dc:	230a      	movs	r3, #10
 80059de:	e008      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059e0:	2308      	movs	r3, #8
 80059e2:	e006      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059e4:	2306      	movs	r3, #6
 80059e6:	e004      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059e8:	2304      	movs	r3, #4
 80059ea:	e002      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e000      	b.n	80059f2 <UART_SetConfig+0xbd2>
 80059f0:	2301      	movs	r3, #1
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	005a      	lsls	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	441a      	add	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	61fb      	str	r3, [r7, #28]
        break;
 8005a0e:	e16f      	b.n	8005cf0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a10:	f7fc fdae 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
 8005a14:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d044      	beq.n	8005aa8 <UART_SetConfig+0xc88>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d03e      	beq.n	8005aa4 <UART_SetConfig+0xc84>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d038      	beq.n	8005aa0 <UART_SetConfig+0xc80>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d032      	beq.n	8005a9c <UART_SetConfig+0xc7c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d02c      	beq.n	8005a98 <UART_SetConfig+0xc78>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	d026      	beq.n	8005a94 <UART_SetConfig+0xc74>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b06      	cmp	r3, #6
 8005a4c:	d020      	beq.n	8005a90 <UART_SetConfig+0xc70>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b07      	cmp	r3, #7
 8005a54:	d01a      	beq.n	8005a8c <UART_SetConfig+0xc6c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d014      	beq.n	8005a88 <UART_SetConfig+0xc68>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b09      	cmp	r3, #9
 8005a64:	d00e      	beq.n	8005a84 <UART_SetConfig+0xc64>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b0a      	cmp	r3, #10
 8005a6c:	d008      	beq.n	8005a80 <UART_SetConfig+0xc60>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b0b      	cmp	r3, #11
 8005a74:	d102      	bne.n	8005a7c <UART_SetConfig+0xc5c>
 8005a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a7a:	e016      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e014      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	e012      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005a84:	2340      	movs	r3, #64	; 0x40
 8005a86:	e010      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005a88:	2320      	movs	r3, #32
 8005a8a:	e00e      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	e00c      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005a90:	230c      	movs	r3, #12
 8005a92:	e00a      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005a94:	230a      	movs	r3, #10
 8005a96:	e008      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	e006      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005a9c:	2306      	movs	r3, #6
 8005a9e:	e004      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	e002      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e000      	b.n	8005aaa <UART_SetConfig+0xc8a>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	005a      	lsls	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	441a      	add	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	61fb      	str	r3, [r7, #28]
        break;
 8005ac6:	e113      	b.n	8005cf0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d043      	beq.n	8005b58 <UART_SetConfig+0xd38>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d03d      	beq.n	8005b54 <UART_SetConfig+0xd34>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d037      	beq.n	8005b50 <UART_SetConfig+0xd30>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d031      	beq.n	8005b4c <UART_SetConfig+0xd2c>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d02b      	beq.n	8005b48 <UART_SetConfig+0xd28>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	d025      	beq.n	8005b44 <UART_SetConfig+0xd24>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b06      	cmp	r3, #6
 8005afe:	d01f      	beq.n	8005b40 <UART_SetConfig+0xd20>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b07      	cmp	r3, #7
 8005b06:	d019      	beq.n	8005b3c <UART_SetConfig+0xd1c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d013      	beq.n	8005b38 <UART_SetConfig+0xd18>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b09      	cmp	r3, #9
 8005b16:	d00d      	beq.n	8005b34 <UART_SetConfig+0xd14>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b0a      	cmp	r3, #10
 8005b1e:	d007      	beq.n	8005b30 <UART_SetConfig+0xd10>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b0b      	cmp	r3, #11
 8005b26:	d101      	bne.n	8005b2c <UART_SetConfig+0xd0c>
 8005b28:	4b8d      	ldr	r3, [pc, #564]	; (8005d60 <UART_SetConfig+0xf40>)
 8005b2a:	e016      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b2c:	4b8d      	ldr	r3, [pc, #564]	; (8005d64 <UART_SetConfig+0xf44>)
 8005b2e:	e014      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b30:	4b8d      	ldr	r3, [pc, #564]	; (8005d68 <UART_SetConfig+0xf48>)
 8005b32:	e012      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b34:	4b8d      	ldr	r3, [pc, #564]	; (8005d6c <UART_SetConfig+0xf4c>)
 8005b36:	e010      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b38:	4b8d      	ldr	r3, [pc, #564]	; (8005d70 <UART_SetConfig+0xf50>)
 8005b3a:	e00e      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b3c:	4b8d      	ldr	r3, [pc, #564]	; (8005d74 <UART_SetConfig+0xf54>)
 8005b3e:	e00c      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b40:	4b8d      	ldr	r3, [pc, #564]	; (8005d78 <UART_SetConfig+0xf58>)
 8005b42:	e00a      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b44:	4b8d      	ldr	r3, [pc, #564]	; (8005d7c <UART_SetConfig+0xf5c>)
 8005b46:	e008      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b48:	4b8d      	ldr	r3, [pc, #564]	; (8005d80 <UART_SetConfig+0xf60>)
 8005b4a:	e006      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b4c:	4b8d      	ldr	r3, [pc, #564]	; (8005d84 <UART_SetConfig+0xf64>)
 8005b4e:	e004      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b50:	4b8d      	ldr	r3, [pc, #564]	; (8005d88 <UART_SetConfig+0xf68>)
 8005b52:	e002      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b54:	4b8d      	ldr	r3, [pc, #564]	; (8005d8c <UART_SetConfig+0xf6c>)
 8005b56:	e000      	b.n	8005b5a <UART_SetConfig+0xd3a>
 8005b58:	4b82      	ldr	r3, [pc, #520]	; (8005d64 <UART_SetConfig+0xf44>)
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6852      	ldr	r2, [r2, #4]
 8005b5e:	0852      	lsrs	r2, r2, #1
 8005b60:	441a      	add	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	61fb      	str	r3, [r7, #28]
        break;
 8005b6e:	e0bf      	b.n	8005cf0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b70:	f7fc fc7a 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8005b74:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d044      	beq.n	8005c08 <UART_SetConfig+0xde8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d03e      	beq.n	8005c04 <UART_SetConfig+0xde4>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d038      	beq.n	8005c00 <UART_SetConfig+0xde0>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d032      	beq.n	8005bfc <UART_SetConfig+0xddc>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d02c      	beq.n	8005bf8 <UART_SetConfig+0xdd8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d026      	beq.n	8005bf4 <UART_SetConfig+0xdd4>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d020      	beq.n	8005bf0 <UART_SetConfig+0xdd0>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b07      	cmp	r3, #7
 8005bb4:	d01a      	beq.n	8005bec <UART_SetConfig+0xdcc>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d014      	beq.n	8005be8 <UART_SetConfig+0xdc8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b09      	cmp	r3, #9
 8005bc4:	d00e      	beq.n	8005be4 <UART_SetConfig+0xdc4>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2b0a      	cmp	r3, #10
 8005bcc:	d008      	beq.n	8005be0 <UART_SetConfig+0xdc0>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b0b      	cmp	r3, #11
 8005bd4:	d102      	bne.n	8005bdc <UART_SetConfig+0xdbc>
 8005bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bda:	e016      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e014      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	e012      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005be4:	2340      	movs	r3, #64	; 0x40
 8005be6:	e010      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005be8:	2320      	movs	r3, #32
 8005bea:	e00e      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005bec:	2310      	movs	r3, #16
 8005bee:	e00c      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005bf0:	230c      	movs	r3, #12
 8005bf2:	e00a      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005bf4:	230a      	movs	r3, #10
 8005bf6:	e008      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	e006      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005bfc:	2306      	movs	r3, #6
 8005bfe:	e004      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005c00:	2304      	movs	r3, #4
 8005c02:	e002      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e000      	b.n	8005c0a <UART_SetConfig+0xdea>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	005a      	lsls	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	441a      	add	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	61fb      	str	r3, [r7, #28]
        break;
 8005c26:	e063      	b.n	8005cf0 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d04f      	beq.n	8005cd0 <UART_SetConfig+0xeb0>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d048      	beq.n	8005cca <UART_SetConfig+0xeaa>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d041      	beq.n	8005cc4 <UART_SetConfig+0xea4>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d03a      	beq.n	8005cbe <UART_SetConfig+0xe9e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d033      	beq.n	8005cb8 <UART_SetConfig+0xe98>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	d02c      	beq.n	8005cb2 <UART_SetConfig+0xe92>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b06      	cmp	r3, #6
 8005c5e:	d025      	beq.n	8005cac <UART_SetConfig+0xe8c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b07      	cmp	r3, #7
 8005c66:	d01e      	beq.n	8005ca6 <UART_SetConfig+0xe86>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d017      	beq.n	8005ca0 <UART_SetConfig+0xe80>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2b09      	cmp	r3, #9
 8005c76:	d010      	beq.n	8005c9a <UART_SetConfig+0xe7a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2b0a      	cmp	r3, #10
 8005c7e:	d009      	beq.n	8005c94 <UART_SetConfig+0xe74>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b0b      	cmp	r3, #11
 8005c86:	d102      	bne.n	8005c8e <UART_SetConfig+0xe6e>
 8005c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c8c:	e022      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c92:	e01f      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c98:	e01c      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c9e:	e019      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ca4:	e016      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005caa:	e013      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005cac:	f241 5354 	movw	r3, #5460	; 0x1554
 8005cb0:	e010      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005cb2:	f641 1398 	movw	r3, #6552	; 0x1998
 8005cb6:	e00d      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cbc:	e00a      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005cbe:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005cc2:	e007      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005cc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cc8:	e004      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cce:	e001      	b.n	8005cd4 <UART_SetConfig+0xeb4>
 8005cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6852      	ldr	r2, [r2, #4]
 8005cd8:	0852      	lsrs	r2, r2, #1
 8005cda:	441a      	add	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	61fb      	str	r3, [r7, #28]
        break;
 8005ce8:	e002      	b.n	8005cf0 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	76fb      	strb	r3, [r7, #27]
        break;
 8005cee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	d916      	bls.n	8005d24 <UART_SetConfig+0xf04>
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d212      	bcs.n	8005d24 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f023 030f 	bic.w	r3, r3, #15
 8005d06:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	89fb      	ldrh	r3, [r7, #14]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	89fa      	ldrh	r2, [r7, #14]
 8005d20:	60da      	str	r2, [r3, #12]
 8005d22:	e20c      	b.n	800613e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	76fb      	strb	r3, [r7, #27]
 8005d28:	e209      	b.n	800613e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8005d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	f200 81f4 	bhi.w	800611c <UART_SetConfig+0x12fc>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <UART_SetConfig+0xf1c>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005e47 	.word	0x08005e47
 8005d44:	08005efd 	.word	0x08005efd
 8005d48:	0800611d 	.word	0x0800611d
 8005d4c:	08005fa7 	.word	0x08005fa7
 8005d50:	0800611d 	.word	0x0800611d
 8005d54:	0800611d 	.word	0x0800611d
 8005d58:	0800611d 	.word	0x0800611d
 8005d5c:	0800605d 	.word	0x0800605d
 8005d60:	0001e848 	.word	0x0001e848
 8005d64:	01e84800 	.word	0x01e84800
 8005d68:	0003d090 	.word	0x0003d090
 8005d6c:	0007a120 	.word	0x0007a120
 8005d70:	000f4240 	.word	0x000f4240
 8005d74:	001e8480 	.word	0x001e8480
 8005d78:	0028b0aa 	.word	0x0028b0aa
 8005d7c:	0030d400 	.word	0x0030d400
 8005d80:	003d0900 	.word	0x003d0900
 8005d84:	00516154 	.word	0x00516154
 8005d88:	007a1200 	.word	0x007a1200
 8005d8c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fc fbd8 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8005d94:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d044      	beq.n	8005e28 <UART_SetConfig+0x1008>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d03e      	beq.n	8005e24 <UART_SetConfig+0x1004>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d038      	beq.n	8005e20 <UART_SetConfig+0x1000>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d032      	beq.n	8005e1c <UART_SetConfig+0xffc>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d02c      	beq.n	8005e18 <UART_SetConfig+0xff8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	2b05      	cmp	r3, #5
 8005dc4:	d026      	beq.n	8005e14 <UART_SetConfig+0xff4>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b06      	cmp	r3, #6
 8005dcc:	d020      	beq.n	8005e10 <UART_SetConfig+0xff0>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	2b07      	cmp	r3, #7
 8005dd4:	d01a      	beq.n	8005e0c <UART_SetConfig+0xfec>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d014      	beq.n	8005e08 <UART_SetConfig+0xfe8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	2b09      	cmp	r3, #9
 8005de4:	d00e      	beq.n	8005e04 <UART_SetConfig+0xfe4>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	2b0a      	cmp	r3, #10
 8005dec:	d008      	beq.n	8005e00 <UART_SetConfig+0xfe0>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	2b0b      	cmp	r3, #11
 8005df4:	d102      	bne.n	8005dfc <UART_SetConfig+0xfdc>
 8005df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dfa:	e016      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e014      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e00:	2380      	movs	r3, #128	; 0x80
 8005e02:	e012      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e04:	2340      	movs	r3, #64	; 0x40
 8005e06:	e010      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e08:	2320      	movs	r3, #32
 8005e0a:	e00e      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	e00c      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e10:	230c      	movs	r3, #12
 8005e12:	e00a      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e14:	230a      	movs	r3, #10
 8005e16:	e008      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e18:	2308      	movs	r3, #8
 8005e1a:	e006      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e1c:	2306      	movs	r3, #6
 8005e1e:	e004      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e20:	2304      	movs	r3, #4
 8005e22:	e002      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e000      	b.n	8005e2a <UART_SetConfig+0x100a>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	441a      	add	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	61fb      	str	r3, [r7, #28]
        break;
 8005e44:	e16d      	b.n	8006122 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e46:	f7fc fb93 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
 8005e4a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d044      	beq.n	8005ede <UART_SetConfig+0x10be>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d03e      	beq.n	8005eda <UART_SetConfig+0x10ba>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d038      	beq.n	8005ed6 <UART_SetConfig+0x10b6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d032      	beq.n	8005ed2 <UART_SetConfig+0x10b2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d02c      	beq.n	8005ece <UART_SetConfig+0x10ae>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	d026      	beq.n	8005eca <UART_SetConfig+0x10aa>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b06      	cmp	r3, #6
 8005e82:	d020      	beq.n	8005ec6 <UART_SetConfig+0x10a6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b07      	cmp	r3, #7
 8005e8a:	d01a      	beq.n	8005ec2 <UART_SetConfig+0x10a2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d014      	beq.n	8005ebe <UART_SetConfig+0x109e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b09      	cmp	r3, #9
 8005e9a:	d00e      	beq.n	8005eba <UART_SetConfig+0x109a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b0a      	cmp	r3, #10
 8005ea2:	d008      	beq.n	8005eb6 <UART_SetConfig+0x1096>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2b0b      	cmp	r3, #11
 8005eaa:	d102      	bne.n	8005eb2 <UART_SetConfig+0x1092>
 8005eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eb0:	e016      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e014      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	e012      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005eba:	2340      	movs	r3, #64	; 0x40
 8005ebc:	e010      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005ebe:	2320      	movs	r3, #32
 8005ec0:	e00e      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005ec2:	2310      	movs	r3, #16
 8005ec4:	e00c      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	e00a      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005eca:	230a      	movs	r3, #10
 8005ecc:	e008      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005ece:	2308      	movs	r3, #8
 8005ed0:	e006      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005ed2:	2306      	movs	r3, #6
 8005ed4:	e004      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	e002      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e000      	b.n	8005ee0 <UART_SetConfig+0x10c0>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	61fb      	str	r3, [r7, #28]
        break;
 8005efa:	e112      	b.n	8006122 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d044      	beq.n	8005f8e <UART_SetConfig+0x116e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d03e      	beq.n	8005f8a <UART_SetConfig+0x116a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d038      	beq.n	8005f86 <UART_SetConfig+0x1166>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d032      	beq.n	8005f82 <UART_SetConfig+0x1162>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d02c      	beq.n	8005f7e <UART_SetConfig+0x115e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d026      	beq.n	8005f7a <UART_SetConfig+0x115a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d020      	beq.n	8005f76 <UART_SetConfig+0x1156>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b07      	cmp	r3, #7
 8005f3a:	d01a      	beq.n	8005f72 <UART_SetConfig+0x1152>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d014      	beq.n	8005f6e <UART_SetConfig+0x114e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b09      	cmp	r3, #9
 8005f4a:	d00e      	beq.n	8005f6a <UART_SetConfig+0x114a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2b0a      	cmp	r3, #10
 8005f52:	d008      	beq.n	8005f66 <UART_SetConfig+0x1146>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	2b0b      	cmp	r3, #11
 8005f5a:	d102      	bne.n	8005f62 <UART_SetConfig+0x1142>
 8005f5c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005f60:	e016      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f62:	4b81      	ldr	r3, [pc, #516]	; (8006168 <UART_SetConfig+0x1348>)
 8005f64:	e014      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f66:	4b81      	ldr	r3, [pc, #516]	; (800616c <UART_SetConfig+0x134c>)
 8005f68:	e012      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f6a:	4b81      	ldr	r3, [pc, #516]	; (8006170 <UART_SetConfig+0x1350>)
 8005f6c:	e010      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f6e:	4b81      	ldr	r3, [pc, #516]	; (8006174 <UART_SetConfig+0x1354>)
 8005f70:	e00e      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f72:	4b81      	ldr	r3, [pc, #516]	; (8006178 <UART_SetConfig+0x1358>)
 8005f74:	e00c      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f76:	4b81      	ldr	r3, [pc, #516]	; (800617c <UART_SetConfig+0x135c>)
 8005f78:	e00a      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f7a:	4b81      	ldr	r3, [pc, #516]	; (8006180 <UART_SetConfig+0x1360>)
 8005f7c:	e008      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f7e:	4b81      	ldr	r3, [pc, #516]	; (8006184 <UART_SetConfig+0x1364>)
 8005f80:	e006      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f82:	4b81      	ldr	r3, [pc, #516]	; (8006188 <UART_SetConfig+0x1368>)
 8005f84:	e004      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f86:	4b81      	ldr	r3, [pc, #516]	; (800618c <UART_SetConfig+0x136c>)
 8005f88:	e002      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f8a:	4b81      	ldr	r3, [pc, #516]	; (8006190 <UART_SetConfig+0x1370>)
 8005f8c:	e000      	b.n	8005f90 <UART_SetConfig+0x1170>
 8005f8e:	4b76      	ldr	r3, [pc, #472]	; (8006168 <UART_SetConfig+0x1348>)
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6852      	ldr	r2, [r2, #4]
 8005f94:	0852      	lsrs	r2, r2, #1
 8005f96:	441a      	add	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	61fb      	str	r3, [r7, #28]
        break;
 8005fa4:	e0bd      	b.n	8006122 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa6:	f7fc fa5f 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8005faa:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d044      	beq.n	800603e <UART_SetConfig+0x121e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d03e      	beq.n	800603a <UART_SetConfig+0x121a>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d038      	beq.n	8006036 <UART_SetConfig+0x1216>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d032      	beq.n	8006032 <UART_SetConfig+0x1212>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d02c      	beq.n	800602e <UART_SetConfig+0x120e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	2b05      	cmp	r3, #5
 8005fda:	d026      	beq.n	800602a <UART_SetConfig+0x120a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b06      	cmp	r3, #6
 8005fe2:	d020      	beq.n	8006026 <UART_SetConfig+0x1206>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b07      	cmp	r3, #7
 8005fea:	d01a      	beq.n	8006022 <UART_SetConfig+0x1202>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d014      	beq.n	800601e <UART_SetConfig+0x11fe>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2b09      	cmp	r3, #9
 8005ffa:	d00e      	beq.n	800601a <UART_SetConfig+0x11fa>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	2b0a      	cmp	r3, #10
 8006002:	d008      	beq.n	8006016 <UART_SetConfig+0x11f6>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2b0b      	cmp	r3, #11
 800600a:	d102      	bne.n	8006012 <UART_SetConfig+0x11f2>
 800600c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006010:	e016      	b.n	8006040 <UART_SetConfig+0x1220>
 8006012:	2301      	movs	r3, #1
 8006014:	e014      	b.n	8006040 <UART_SetConfig+0x1220>
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	e012      	b.n	8006040 <UART_SetConfig+0x1220>
 800601a:	2340      	movs	r3, #64	; 0x40
 800601c:	e010      	b.n	8006040 <UART_SetConfig+0x1220>
 800601e:	2320      	movs	r3, #32
 8006020:	e00e      	b.n	8006040 <UART_SetConfig+0x1220>
 8006022:	2310      	movs	r3, #16
 8006024:	e00c      	b.n	8006040 <UART_SetConfig+0x1220>
 8006026:	230c      	movs	r3, #12
 8006028:	e00a      	b.n	8006040 <UART_SetConfig+0x1220>
 800602a:	230a      	movs	r3, #10
 800602c:	e008      	b.n	8006040 <UART_SetConfig+0x1220>
 800602e:	2308      	movs	r3, #8
 8006030:	e006      	b.n	8006040 <UART_SetConfig+0x1220>
 8006032:	2306      	movs	r3, #6
 8006034:	e004      	b.n	8006040 <UART_SetConfig+0x1220>
 8006036:	2304      	movs	r3, #4
 8006038:	e002      	b.n	8006040 <UART_SetConfig+0x1220>
 800603a:	2302      	movs	r3, #2
 800603c:	e000      	b.n	8006040 <UART_SetConfig+0x1220>
 800603e:	2301      	movs	r3, #1
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	fbb2 f2f3 	udiv	r2, r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	441a      	add	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	fbb2 f3f3 	udiv	r3, r2, r3
 8006056:	b29b      	uxth	r3, r3
 8006058:	61fb      	str	r3, [r7, #28]
        break;
 800605a:	e062      	b.n	8006122 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d04e      	beq.n	8006102 <UART_SetConfig+0x12e2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b01      	cmp	r3, #1
 800606a:	d047      	beq.n	80060fc <UART_SetConfig+0x12dc>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2b02      	cmp	r3, #2
 8006072:	d040      	beq.n	80060f6 <UART_SetConfig+0x12d6>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	2b03      	cmp	r3, #3
 800607a:	d039      	beq.n	80060f0 <UART_SetConfig+0x12d0>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	2b04      	cmp	r3, #4
 8006082:	d032      	beq.n	80060ea <UART_SetConfig+0x12ca>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	2b05      	cmp	r3, #5
 800608a:	d02b      	beq.n	80060e4 <UART_SetConfig+0x12c4>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b06      	cmp	r3, #6
 8006092:	d024      	beq.n	80060de <UART_SetConfig+0x12be>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b07      	cmp	r3, #7
 800609a:	d01d      	beq.n	80060d8 <UART_SetConfig+0x12b8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d016      	beq.n	80060d2 <UART_SetConfig+0x12b2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b09      	cmp	r3, #9
 80060aa:	d00f      	beq.n	80060cc <UART_SetConfig+0x12ac>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b0a      	cmp	r3, #10
 80060b2:	d008      	beq.n	80060c6 <UART_SetConfig+0x12a6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b0b      	cmp	r3, #11
 80060ba:	d101      	bne.n	80060c0 <UART_SetConfig+0x12a0>
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	e022      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c4:	e01f      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060ca:	e01c      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d0:	e019      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d6:	e016      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060dc:	e013      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060de:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80060e2:	e010      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060e4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80060e8:	e00d      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ee:	e00a      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060f0:	f241 5355 	movw	r3, #5461	; 0x1555
 80060f4:	e007      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060fa:	e004      	b.n	8006106 <UART_SetConfig+0x12e6>
 80060fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006100:	e001      	b.n	8006106 <UART_SetConfig+0x12e6>
 8006102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6852      	ldr	r2, [r2, #4]
 800610a:	0852      	lsrs	r2, r2, #1
 800610c:	441a      	add	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	fbb2 f3f3 	udiv	r3, r2, r3
 8006116:	b29b      	uxth	r3, r3
 8006118:	61fb      	str	r3, [r7, #28]
        break;
 800611a:	e002      	b.n	8006122 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	76fb      	strb	r3, [r7, #27]
        break;
 8006120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2b0f      	cmp	r3, #15
 8006126:	d908      	bls.n	800613a <UART_SetConfig+0x131a>
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612e:	d204      	bcs.n	800613a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	e001      	b.n	800613e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800615a:	7efb      	ldrb	r3, [r7, #27]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3728      	adds	r7, #40	; 0x28
 8006160:	46bd      	mov	sp, r7
 8006162:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006166:	bf00      	nop
 8006168:	00f42400 	.word	0x00f42400
 800616c:	0001e848 	.word	0x0001e848
 8006170:	0003d090 	.word	0x0003d090
 8006174:	0007a120 	.word	0x0007a120
 8006178:	000f4240 	.word	0x000f4240
 800617c:	00145855 	.word	0x00145855
 8006180:	00186a00 	.word	0x00186a00
 8006184:	001e8480 	.word	0x001e8480
 8006188:	0028b0aa 	.word	0x0028b0aa
 800618c:	003d0900 	.word	0x003d0900
 8006190:	007a1200 	.word	0x007a1200

08006194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01a      	beq.n	80062aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006292:	d10a      	bne.n	80062aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af02      	add	r7, sp, #8
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80062e8:	f7fb f892 	bl	8001410 <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d10e      	bne.n	800631a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f82c 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e022      	b.n	8006360 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b04      	cmp	r3, #4
 8006326:	d10e      	bne.n	8006346 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f816 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e00c      	b.n	8006360 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006378:	e02c      	b.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d028      	beq.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fb f845 	bl	8001410 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <UART_WaitOnFlagUntilTimeout+0x30>
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11d      	bne.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e00f      	b.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69da      	ldr	r2, [r3, #28]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4013      	ands	r3, r2
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d0c3      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006412:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006422:	f023 0301 	bic.w	r3, r3, #1
 8006426:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7fe fcd3 	bl	8004e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006484:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fe fcaf 	bl	8004df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e027      	b.n	8006544 <HAL_UARTEx_DisableFifoMode+0x66>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2224      	movs	r2, #36	; 0x24
 8006500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0201 	bic.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006522:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006564:	2302      	movs	r3, #2
 8006566:	e02d      	b.n	80065c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2224      	movs	r2, #36	; 0x24
 8006574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0201 	bic.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f84f 	bl	8006648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e02d      	b.n	8006640 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2224      	movs	r2, #36	; 0x24
 80065f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f811 	bl	8006648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b089      	sub	sp, #36	; 0x24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006650:	4a2f      	ldr	r2, [pc, #188]	; (8006710 <UARTEx_SetNbDataToProcess+0xc8>)
 8006652:	f107 0314 	add.w	r3, r7, #20
 8006656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800665a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800665e:	4a2d      	ldr	r2, [pc, #180]	; (8006714 <UARTEx_SetNbDataToProcess+0xcc>)
 8006660:	f107 030c 	add.w	r3, r7, #12
 8006664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006668:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006670:	2b00      	cmp	r3, #0
 8006672:	d108      	bne.n	8006686 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006684:	e03d      	b.n	8006702 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006686:	2308      	movs	r3, #8
 8006688:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800668a:	2308      	movs	r3, #8
 800668c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	0e5b      	lsrs	r3, r3, #25
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	0f5b      	lsrs	r3, r3, #29
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80066ae:	7fbb      	ldrb	r3, [r7, #30]
 80066b0:	7f3a      	ldrb	r2, [r7, #28]
 80066b2:	f107 0120 	add.w	r1, r7, #32
 80066b6:	440a      	add	r2, r1
 80066b8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	7f3a      	ldrb	r2, [r7, #28]
 80066c2:	f107 0120 	add.w	r1, r7, #32
 80066c6:	440a      	add	r2, r1
 80066c8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80066cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80066d8:	7ffb      	ldrb	r3, [r7, #31]
 80066da:	7f7a      	ldrb	r2, [r7, #29]
 80066dc:	f107 0120 	add.w	r1, r7, #32
 80066e0:	440a      	add	r2, r1
 80066e2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	7f7a      	ldrb	r2, [r7, #29]
 80066ec:	f107 0120 	add.w	r1, r7, #32
 80066f0:	440a      	add	r2, r1
 80066f2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80066f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006702:	bf00      	nop
 8006704:	3724      	adds	r7, #36	; 0x24
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	08006788 	.word	0x08006788
 8006714:	08006790 	.word	0x08006790

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4e0d      	ldr	r6, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1ba4      	subs	r4, r4, r6
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2500      	movs	r5, #0
 8006724:	42a5      	cmp	r5, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4e0b      	ldr	r6, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f000 f820 	bl	8006770 <_init>
 8006730:	1ba4      	subs	r4, r4, r6
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2500      	movs	r5, #0
 8006736:	42a5      	cmp	r5, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006740:	4798      	blx	r3
 8006742:	3501      	adds	r5, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800674a:	4798      	blx	r3
 800674c:	3501      	adds	r5, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	080067b8 	.word	0x080067b8
 8006754:	080067b8 	.word	0x080067b8
 8006758:	080067b8 	.word	0x080067b8
 800675c:	080067bc 	.word	0x080067bc

08006760 <memset>:
 8006760:	4402      	add	r2, r0
 8006762:	4603      	mov	r3, r0
 8006764:	4293      	cmp	r3, r2
 8006766:	d100      	bne.n	800676a <memset+0xa>
 8006768:	4770      	bx	lr
 800676a:	f803 1b01 	strb.w	r1, [r3], #1
 800676e:	e7f9      	b.n	8006764 <memset+0x4>

08006770 <_init>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	bf00      	nop
 8006774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006776:	bc08      	pop	{r3}
 8006778:	469e      	mov	lr, r3
 800677a:	4770      	bx	lr

0800677c <_fini>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	bf00      	nop
 8006780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006782:	bc08      	pop	{r3}
 8006784:	469e      	mov	lr, r3
 8006786:	4770      	bx	lr
