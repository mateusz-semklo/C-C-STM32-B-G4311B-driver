
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c20  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e20  08008e20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e28  08008e28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  2000000c  08008e3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08008e3c  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ac7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e04  00000000  00000000  00038b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001590  00000000  00000000  0003b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001408  00000000  00000000  0003ce98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219fc  00000000  00000000  0003e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001303d  00000000  00000000  0005fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de0a3  00000000  00000000  00072cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150d7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c90  00000000  00000000  00150df8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008de0 	.word	0x08008de0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008de0 	.word	0x08008de0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b972 	b.w	8000d50 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4615      	mov	r5, r2
 8000a96:	d967      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0720 	rsb	r7, r2, #32
 8000aa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aaa:	4095      	lsls	r5, r2
 8000aac:	ea47 0803 	orr.w	r8, r7, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000abc:	fa1f fc85 	uxth.w	ip, r5
 8000ac0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ac4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac8:	fb07 f10c 	mul.w	r1, r7, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18eb      	adds	r3, r5, r3
 8000ad2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ad6:	f080 811b 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8118 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000ae0:	3f02      	subs	r7, #2
 8000ae2:	442b      	add	r3, r5
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af8:	45a4      	cmp	ip, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	192c      	adds	r4, r5, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	442c      	add	r4, r5
 8000b10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	2700      	movs	r7, #0
 8000b1a:	b11e      	cbz	r6, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c6 4300 	strd	r4, r3, [r6]
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xbe>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80eb 	beq.w	8000d0a <__udivmoddi4+0x286>
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9c6 0100 	strd	r0, r1, [r6]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f783 	clz	r7, r3
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d147      	bne.n	8000bda <__udivmoddi4+0x156>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd0>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80fa 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000b62:	e9c6 4800 	strd	r4, r8, [r6]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xe8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 808f 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b76:	1b49      	subs	r1, r1, r5
 8000b78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7c:	fa1f f885 	uxth.w	r8, r5
 8000b80:	2701      	movs	r7, #1
 8000b82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb08 f10c 	mul.w	r1, r8, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x14c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x14a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80b6 	bhi.w	8000d3a <__udivmoddi4+0x2b6>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e79f      	b.n	8000b1a <__udivmoddi4+0x96>
 8000bda:	f1c7 0c20 	rsb	ip, r7, #32
 8000bde:	40bb      	lsls	r3, r7
 8000be0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000be4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf8:	4325      	orrs	r5, r4
 8000bfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bfe:	0c2c      	lsrs	r4, r5, #16
 8000c00:	fb08 3319 	mls	r3, r8, r9, r3
 8000c04:	fa1f fa8e 	uxth.w	sl, lr
 8000c08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c10:	429c      	cmp	r4, r3
 8000c12:	fa02 f207 	lsl.w	r2, r2, r7
 8000c16:	fa00 f107 	lsl.w	r1, r0, r7
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	f080 8087 	bcs.w	8000d36 <__udivmoddi4+0x2b2>
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	f240 8084 	bls.w	8000d36 <__udivmoddi4+0x2b2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4473      	add	r3, lr
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	b2ad      	uxth	r5, r5
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c48:	45a2      	cmp	sl, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	d26b      	bcs.n	8000d2e <__udivmoddi4+0x2aa>
 8000c56:	45a2      	cmp	sl, r4
 8000c58:	d969      	bls.n	8000d2e <__udivmoddi4+0x2aa>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4474      	add	r4, lr
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	eba4 040a 	sub.w	r4, r4, sl
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c2      	mov	sl, r8
 8000c6e:	464b      	mov	r3, r9
 8000c70:	d354      	bcc.n	8000d1c <__udivmoddi4+0x298>
 8000c72:	d051      	beq.n	8000d18 <__udivmoddi4+0x294>
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d069      	beq.n	8000d4c <__udivmoddi4+0x2c8>
 8000c78:	ebb1 050a 	subs.w	r5, r1, sl
 8000c7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c84:	40fd      	lsrs	r5, r7
 8000c86:	40fc      	lsrs	r4, r7
 8000c88:	ea4c 0505 	orr.w	r5, ip, r5
 8000c8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c90:	2700      	movs	r7, #0
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000c94:	f1c2 0320 	rsb	r3, r2, #32
 8000c98:	fa20 f703 	lsr.w	r7, r0, r3
 8000c9c:	4095      	lsls	r5, r2
 8000c9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	4338      	orrs	r0, r7
 8000cac:	0c01      	lsrs	r1, r0, #16
 8000cae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cb2:	fa1f f885 	uxth.w	r8, r5
 8000cb6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb07 f308 	mul.w	r3, r7, r8
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x256>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd0:	d22f      	bcs.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d92d      	bls.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd6:	3f02      	subs	r7, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1acb      	subs	r3, r1, r3
 8000cdc:	b281      	uxth	r1, r0
 8000cde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cea:	fb00 f308 	mul.w	r3, r0, r8
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x27e>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf8:	d217      	bcs.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d915      	bls.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d08:	e73b      	b.n	8000b82 <__udivmoddi4+0xfe>
 8000d0a:	4637      	mov	r7, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e709      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d10:	4607      	mov	r7, r0
 8000d12:	e6e7      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d14:	4618      	mov	r0, r3
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d18:	4541      	cmp	r1, r8
 8000d1a:	d2ab      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d20:	eb69 020e 	sbc.w	r2, r9, lr
 8000d24:	3801      	subs	r0, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	e7a4      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	e7e9      	b.n	8000d02 <__udivmoddi4+0x27e>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e795      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d32:	4667      	mov	r7, ip
 8000d34:	e7d1      	b.n	8000cda <__udivmoddi4+0x256>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e77c      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	442c      	add	r4, r5
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0x14c>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	442b      	add	r3, r5
 8000d46:	e72f      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xda>
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0xa0>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b092      	sub	sp, #72	; 0x48
 8000d58:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	223c      	movs	r2, #60	; 0x3c
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f008 f82f 	bl	8008dd0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d94:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9a:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000da0:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db2:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd0:	482b      	ldr	r0, [pc, #172]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dd2:	f001 fabf 	bl	8002354 <HAL_ADC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ddc:	f000 fc55 	bl	800168a <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000de4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4825      	ldr	r0, [pc, #148]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000dec:	f002 ffb2 	bl	8003d54 <HAL_ADCEx_MultiModeConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000df6:	f000 fc48 	bl	800168a <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_ADC1_Init+0x130>)
 8000dfc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000dfe:	2309      	movs	r3, #9
 8000e00:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000e02:	2301      	movs	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e06:	237f      	movs	r3, #127	; 0x7f
 8000e08:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000e28:	2384      	movs	r3, #132	; 0x84
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4811      	ldr	r0, [pc, #68]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000e3c:	f002 fb32 	bl	80034a4 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000e46:	f000 fc20 	bl	800168a <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_ADC1_Init+0x134>)
 8000e4c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e4e:	f240 130f 	movw	r3, #271	; 0x10f
 8000e52:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8000e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e5c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	773b      	strb	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_ADC1_Init+0x12c>)
 8000e68:	f002 fb1c 	bl	80034a4 <HAL_ADCEx_InjectedConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000e72:	f000 fc0a 	bl	800168a <Error_Handler>
  }

}
 8000e76:	bf00      	nop
 8000e78:	3748      	adds	r7, #72	; 0x48
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000098 	.word	0x20000098
 8000e84:	0c900008 	.word	0x0c900008
 8000e88:	32601000 	.word	0x32601000

08000e8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b090      	sub	sp, #64	; 0x40
 8000e90:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	223c      	movs	r2, #60	; 0x3c
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f007 ff99 	bl	8008dd0 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000e9e:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ea0:	4a34      	ldr	r2, [pc, #208]	; (8000f74 <MX_ADC2_Init+0xe8>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ea6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000efa:	481d      	ldr	r0, [pc, #116]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000efc:	f001 fa2a 	bl	8002354 <HAL_ADC_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000f06:	f000 fbc0 	bl	800168a <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_ADC2_Init+0xec>)
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8000f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f26:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000f44:	2384      	movs	r3, #132	; 0x84
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_ADC2_Init+0xe4>)
 8000f58:	f002 faa4 	bl	80034a4 <HAL_ADCEx_InjectedConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8000f62:	f000 fb92 	bl	800168a <Error_Handler>
  }

}
 8000f66:	bf00      	nop
 8000f68:	3740      	adds	r7, #64	; 0x40
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000002c 	.word	0x2000002c
 8000f74:	50000100 	.word	0x50000100
 8000f78:	0c900008 	.word	0x0c900008

08000f7c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	; 0x30
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9c:	d14e      	bne.n	800103c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f9e:	4b47      	ldr	r3, [pc, #284]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a45      	ldr	r2, [pc, #276]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8000fa6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fa8:	4b44      	ldr	r3, [pc, #272]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d10b      	bne.n	8000fc8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fb0:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100e:	f003 f8b7 	bl	8004180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001012:	2302      	movs	r3, #2
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	4827      	ldr	r0, [pc, #156]	; (80010c4 <HAL_ADC_MspInit+0x148>)
 8001026:	f003 f8ab 	bl	8004180 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2101      	movs	r1, #1
 800102e:	2012      	movs	r0, #18
 8001030:	f003 f80b 	bl	800404a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001034:	2012      	movs	r0, #18
 8001036:	f003 f822 	bl	800407e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800103a:	e03a      	b.n	80010b2 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <HAL_ADC_MspInit+0x14c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d135      	bne.n	80010b2 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <HAL_ADC_MspInit+0x140>)
 800104e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_ADC_MspInit+0x140>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10b      	bne.n	8001070 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 800105e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_ADC_MspInit+0x144>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001088:	2340      	movs	r3, #64	; 0x40
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108c:	2303      	movs	r3, #3
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f003 f86f 	bl	8004180 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	2012      	movs	r0, #18
 80010a8:	f002 ffcf 	bl	800404a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010ac:	2012      	movs	r0, #18
 80010ae:	f002 ffe6 	bl	800407e <HAL_NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3730      	adds	r7, #48	; 0x30
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000028 	.word	0x20000028
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	50000100 	.word	0x50000100

080010cc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a26      	ldr	r2, [pc, #152]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_GPIO_Init+0xcc>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8001142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001154:	2301      	movs	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f003 f80d 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_GPIO_Init+0xd0>)
 800116e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_GPIO_Init+0xd4>)
 800117c:	f003 f800 	bl	8004180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	210f      	movs	r1, #15
 8001184:	2028      	movs	r0, #40	; 0x28
 8001186:	f002 ff60 	bl	800404a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800118a:	2028      	movs	r0, #40	; 0x28
 800118c:	f002 ff77 	bl	800407e <HAL_NVIC_EnableIRQ>

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	10110000 	.word	0x10110000
 80011a0:	48000800 	.word	0x48000800

080011a4 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	; 0x40
 80011a8:	af00      	add	r7, sp, #0


	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 80011aa:	217f      	movs	r1, #127	; 0x7f
 80011ac:	482f      	ldr	r0, [pc, #188]	; (800126c <start_up+0xc8>)
 80011ae:	f001 ff8d 	bl	80030cc <HAL_ADCEx_Calibration_Start>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <start_up+0x26>
 80011b8:	217f      	movs	r1, #127	; 0x7f
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <start_up+0xcc>)
 80011bc:	f001 ff86 	bl	80030cc <HAL_ADCEx_Calibration_Start>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <start_up+0x26>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <start_up+0x28>
 80011ca:	2300      	movs	r3, #0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d148      	bne.n	8001262 <start_up+0xbe>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)));
 80011d0:	4a28      	ldr	r2, [pc, #160]	; (8001274 <start_up+0xd0>)
 80011d2:	4929      	ldr	r1, [pc, #164]	; (8001278 <start_up+0xd4>)
 80011d4:	4829      	ldr	r0, [pc, #164]	; (800127c <start_up+0xd8>)
 80011d6:	f003 fa6e 	bl	80046b6 <HAL_OPAMPEx_SelfCalibrateAll>
		{
			ADC_InjectionConfTypeDef sConfigInjected;

			//////// start OPAMP 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 80011da:	4828      	ldr	r0, [pc, #160]	; (800127c <start_up+0xd8>)
 80011dc:	f003 fa3a 	bl	8004654 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 80011e0:	4825      	ldr	r0, [pc, #148]	; (8001278 <start_up+0xd4>)
 80011e2:	f003 fa37 	bl	8004654 <HAL_OPAMP_Start>

			//////// start ADC 1 2 ///////////////////////////////////



			HAL_ADCEx_InjectedStart_IT(&hadc1);
 80011e6:	4821      	ldr	r0, [pc, #132]	; (800126c <start_up+0xc8>)
 80011e8:	f001 ffd2 	bl	8003190 <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 80011ec:	4820      	ldr	r0, [pc, #128]	; (8001270 <start_up+0xcc>)
 80011ee:	f001 ffcf 	bl	8003190 <HAL_ADCEx_InjectedStart_IT>





			TIM2->ARR= TIM2_ARR;
 80011f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->PSC= TIM2_PSC;
 80011fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001200:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001204:	629a      	str	r2, [r3, #40]	; 0x28

			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <start_up+0xdc>)
 8001208:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <start_up+0xdc>)
 8001210:	2200      	movs	r2, #0
 8001212:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR4=(TIM1->ARR-10);
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <start_up+0xdc>)
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	4a19      	ldr	r2, [pc, #100]	; (8001280 <start_up+0xdc>)
 800121a:	3b0a      	subs	r3, #10
 800121c:	6413      	str	r3, [r2, #64]	; 0x40

			TIM1->CCR1=0;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <start_up+0xdc>)
 8001220:	2200      	movs	r2, #0
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
			//TIM1->CCR1=30000;

		//	HAL_TIM_Base_Start_IT(&htim2);
		//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

			HAL_TIM_Base_Start_IT(&htim1);
 8001224:	4817      	ldr	r0, [pc, #92]	; (8001284 <start_up+0xe0>)
 8001226:	f004 fd5b 	bl	8005ce0 <HAL_TIM_Base_Start_IT>

				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800122a:	2100      	movs	r1, #0
 800122c:	4815      	ldr	r0, [pc, #84]	; (8001284 <start_up+0xe0>)
 800122e:	f004 fdef 	bl	8005e10 <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001232:	2100      	movs	r1, #0
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <start_up+0xe0>)
 8001236:	f005 fd99 	bl	8006d6c <HAL_TIMEx_PWMN_Start>
			   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800123a:	2104      	movs	r1, #4
 800123c:	4811      	ldr	r0, [pc, #68]	; (8001284 <start_up+0xe0>)
 800123e:	f004 fde7 	bl	8005e10 <HAL_TIM_PWM_Start>
			   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001242:	2104      	movs	r1, #4
 8001244:	480f      	ldr	r0, [pc, #60]	; (8001284 <start_up+0xe0>)
 8001246:	f005 fd91 	bl	8006d6c <HAL_TIMEx_PWMN_Start>
			    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800124a:	2108      	movs	r1, #8
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <start_up+0xe0>)
 800124e:	f004 fddf 	bl	8005e10 <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001252:	2108      	movs	r1, #8
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <start_up+0xe0>)
 8001256:	f005 fd89 	bl	8006d6c <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800125a:	210c      	movs	r1, #12
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <start_up+0xe0>)
 800125e:	f004 fdd7 	bl	8005e10 <HAL_TIM_PWM_Start>
		}


	   }

}
 8001262:	bf00      	nop
 8001264:	3740      	adds	r7, #64	; 0x40
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000098 	.word	0x20000098
 8001270:	2000002c 	.word	0x2000002c
 8001274:	20000284 	.word	0x20000284
 8001278:	20000248 	.word	0x20000248
 800127c:	200002c0 	.word	0x200002c0
 8001280:	40012c00 	.word	0x40012c00
 8001284:	20000348 	.word	0x20000348

08001288 <HAL_ADCEx_InjectedConvCpltCallback>:
	else{}
}


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b093      	sub	sp, #76	; 0x4c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	ADC_InjectionConfTypeDef sConfigInjected;


	index_event_adc++;
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4a69      	ldr	r2, [pc, #420]	; (800143c <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 8001298:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800129a:	2109      	movs	r1, #9
 800129c:	4868      	ldr	r0, [pc, #416]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 800129e:	f002 f8a7 	bl	80033f0 <HAL_ADCEx_InjectedGetValue>
 80012a2:	4602      	mov	r2, r0
 80012a4:	4b67      	ldr	r3, [pc, #412]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 80012a6:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 80012a8:	bf00      	nop
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a63      	ldr	r2, [pc, #396]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	f003 0320 	and.w	r3, r3, #32
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f5      	bne.n	80012aa <HAL_ADCEx_InjectedConvCpltCallback+0x22>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80012be:	f240 110f 	movw	r1, #271	; 0x10f
 80012c2:	485f      	ldr	r0, [pc, #380]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012c4:	f002 f894 	bl	80033f0 <HAL_ADCEx_InjectedGetValue>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 80012cc:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 80012ce:	bf00      	nop
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a5a      	ldr	r2, [pc, #360]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f5      	bne.n	80012d0 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
    adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80012e4:	2109      	movs	r1, #9
 80012e6:	4859      	ldr	r0, [pc, #356]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 80012e8:	f002 f882 	bl	80033f0 <HAL_ADCEx_InjectedGetValue>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b58      	ldr	r3, [pc, #352]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 80012f0:	601a      	str	r2, [r3, #0]
    while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 80012f2:	bf00      	nop
 80012f4:	4b55      	ldr	r3, [pc, #340]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a54      	ldr	r2, [pc, #336]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f5      	bne.n	80012f4 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>




	if(index_event_adc<500)
 8001308:	4b4c      	ldr	r3, [pc, #304]	; (800143c <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001310:	d206      	bcs.n	8001320 <HAL_ADCEx_InjectedConvCpltCallback+0x98>
	{


	    HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001312:	484b      	ldr	r0, [pc, #300]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8001314:	f001 ff3c 	bl	8003190 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001318:	484c      	ldr	r0, [pc, #304]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 800131a:	f001 ff39 	bl	8003190 <HAL_ADCEx_InjectedStart_IT>


	// HAL_ADCEx_InjectedStart_IT(&hadc1);
	// HAL_ADCEx_InjectedStart_IT(&hadc2);

}
 800131e:	e088      	b.n	8001432 <HAL_ADCEx_InjectedConvCpltCallback+0x1aa>
	else if(index_event_adc == 500)
 8001320:	4b46      	ldr	r3, [pc, #280]	; (800143c <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001328:	d118      	bne.n	800135c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>
		       HAL_ADCEx_InjectedStop_IT(&hadc1);
 800132a:	4845      	ldr	r0, [pc, #276]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 800132c:	f002 f816 	bl	800335c <HAL_ADCEx_InjectedStop_IT>
			   HAL_ADCEx_InjectedStop_IT(&hadc2);
 8001330:	4846      	ldr	r0, [pc, #280]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8001332:	f002 f813 	bl	800335c <HAL_ADCEx_InjectedStop_IT>
			   offset1=adc_Ia;
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a46      	ldr	r2, [pc, #280]	; (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800133c:	6013      	str	r3, [r2, #0]
			   offset2=adc_Ib;
 800133e:	4b44      	ldr	r3, [pc, #272]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a45      	ldr	r2, [pc, #276]	; (8001458 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 8001344:	6013      	str	r3, [r2, #0]
			   offset3=adc_Ic;
 8001346:	4b40      	ldr	r3, [pc, #256]	; (8001448 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a44      	ldr	r2, [pc, #272]	; (800145c <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 800134c:	6013      	str	r3, [r2, #0]
			    HAL_ADCEx_InjectedStart_IT(&hadc1);
 800134e:	483c      	ldr	r0, [pc, #240]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8001350:	f001 ff1e 	bl	8003190 <HAL_ADCEx_InjectedStart_IT>
			    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001354:	483d      	ldr	r0, [pc, #244]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8001356:	f001 ff1b 	bl	8003190 <HAL_ADCEx_InjectedStart_IT>
}
 800135a:	e06a      	b.n	8001432 <HAL_ADCEx_InjectedConvCpltCallback+0x1aa>
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 800135c:	4838      	ldr	r0, [pc, #224]	; (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 800135e:	f001 ff17 	bl	8003190 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001362:	483a      	ldr	r0, [pc, #232]	; (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8001364:	f001 ff14 	bl	8003190 <HAL_ADCEx_InjectedStart_IT>
	    sum=(adc_Ia-offset1)+(adc_Ic-offset3)+(adc_Ib-offset2);
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad2      	subs	r2, r2, r3
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 8001374:	6819      	ldr	r1, [r3, #0]
 8001376:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1acb      	subs	r3, r1, r3
 800137c:	441a      	add	r2, r3
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 8001380:	6819      	ldr	r1, [r3, #0]
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	1acb      	subs	r3, r1, r3
 8001388:	4413      	add	r3, r2
 800138a:	461a      	mov	r2, r3
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800138e:	601a      	str	r2, [r3, #0]
		    IIa=(adc_Ia-offset1);
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	461a      	mov	r2, r3
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 800139e:	601a      	str	r2, [r3, #0]
		    IIb=(adc_Ib-offset2);
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 80013ae:	601a      	str	r2, [r3, #0]
		    IIc=(adc_Ic-offset3);
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 80013be:	601a      	str	r2, [r3, #0]
	    pa=IIa/32.0;
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f879 	bl	80004bc <__aeabi_i2d>
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 80013d0:	f7ff fa08 	bl	80007e4 <__aeabi_ddiv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	4618      	mov	r0, r3
 80013da:	4621      	mov	r1, r4
 80013dc:	f7ff faea 	bl	80009b4 <__aeabi_d2f>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 80013e4:	601a      	str	r2, [r3, #0]
	    pb=IIb/32.0;
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f866 	bl	80004bc <__aeabi_i2d>
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 80013f6:	f7ff f9f5 	bl	80007e4 <__aeabi_ddiv>
 80013fa:	4603      	mov	r3, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	4618      	mov	r0, r3
 8001400:	4621      	mov	r1, r4
 8001402:	f7ff fad7 	bl	80009b4 <__aeabi_d2f>
 8001406:	4602      	mov	r2, r0
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800140a:	601a      	str	r2, [r3, #0]
	    pc=IIc/32.0;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f853 	bl	80004bc <__aeabi_i2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800141c:	f7ff f9e2 	bl	80007e4 <__aeabi_ddiv>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f7ff fac4 	bl	80009b4 <__aeabi_d2f>
 800142c:	4602      	mov	r2, r0
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 8001430:	601a      	str	r2, [r3, #0]
}
 8001432:	bf00      	nop
 8001434:	374c      	adds	r7, #76	; 0x4c
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	2000020c 	.word	0x2000020c
 8001440:	20000098 	.word	0x20000098
 8001444:	200001a4 	.word	0x200001a4
 8001448:	20000220 	.word	0x20000220
 800144c:	2000002c 	.word	0x2000002c
 8001450:	20000130 	.word	0x20000130
 8001454:	20000124 	.word	0x20000124
 8001458:	2000016c 	.word	0x2000016c
 800145c:	20000230 	.word	0x20000230
 8001460:	20000164 	.word	0x20000164
 8001464:	200001e8 	.word	0x200001e8
 8001468:	2000012c 	.word	0x2000012c
 800146c:	20000194 	.word	0x20000194
 8001470:	40400000 	.word	0x40400000
 8001474:	2000023c 	.word	0x2000023c
 8001478:	2000018c 	.word	0x2000018c
 800147c:	20000214 	.word	0x20000214

08001480 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001490:	d170      	bne.n	8001574 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		licznik++;
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_GPIO_EXTI_Callback+0x100>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a39      	ldr	r2, [pc, #228]	; (8001580 <HAL_GPIO_EXTI_Callback+0x100>)
 800149a:	6013      	str	r3, [r2, #0]
		switch (licznik)
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_GPIO_EXTI_Callback+0x100>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d85f      	bhi.n	8001566 <HAL_GPIO_EXTI_Callback+0xe6>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_GPIO_EXTI_Callback+0x2c>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	0800153d 	.word	0x0800153d
 80014b0:	080014c9 	.word	0x080014c9
 80014b4:	080014e1 	.word	0x080014e1
 80014b8:	080014f7 	.word	0x080014f7
 80014bc:	0800150f 	.word	0x0800150f
 80014c0:	08001525 	.word	0x08001525
 80014c4:	08001553 	.word	0x08001553
		{

								case 2:
									TIM1->CCR1=duty;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 80014ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 80014d0:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 80014d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 80014da:	2200      	movs	r2, #0
 80014dc:	63da      	str	r2, [r3, #60]	; 0x3c



							    break;
 80014de:	e042      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0xe6>

								case 3:
									TIM1->CCR1=0;
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 80014e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 80014f4:	e037      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0xe6>

								case 4:
									TIM1->CCR1=0;
 80014f6:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 80014fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001502:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=duty;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 8001506:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 800150c:	e02b      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0xe6>

							    case 5:
							    	TIM1->CCR1=0;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 8001516:	2200      	movs	r2, #0
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=duty;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 800151c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001520:	63da      	str	r2, [r3, #60]	; 0x3c


								break;
 8001522:	e020      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0xe6>

							    case 6:
							    	TIM1->CCR1=duty;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 8001526:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 800152e:	2200      	movs	r2, #0
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=duty;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 8001534:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001538:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 800153a:	e014      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0xe6>

							    case 1:
							    TIM1->CCR1=duty;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 800153e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001542:	635a      	str	r2, [r3, #52]	; 0x34
							    TIM1->CCR2=0;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 8001546:	2200      	movs	r2, #0
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
							    TIM1->CCR3=0;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 800154c:	2200      	movs	r2, #0
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
							    break;
 8001550:	e009      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0xe6>

							    case 7:
							  							    TIM1->CCR1=0;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	; 0x34
							  							    TIM1->CCR2=0;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 800155a:	2200      	movs	r2, #0
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
							  							    TIM1->CCR3=0;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_GPIO_EXTI_Callback+0x104>)
 8001560:	2200      	movs	r2, #0
 8001562:	63da      	str	r2, [r3, #60]	; 0x3c
							  							    break;
 8001564:	bf00      	nop





								if(licznik>7)
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_GPIO_EXTI_Callback+0x100>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b07      	cmp	r3, #7
 800156c:	d902      	bls.n	8001574 <HAL_GPIO_EXTI_Callback+0xf4>
								licznik=0;
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_GPIO_EXTI_Callback+0x100>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]




	}
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20000200 	.word	0x20000200
 8001584:	40012c00 	.word	0x40012c00

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158c:	f000 fd0f 	bl	8001fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001590:	f000 f815 	bl	80015be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001594:	f7ff fd9a 	bl	80010cc <MX_GPIO_Init>
  MX_TIM1_Init();
 8001598:	f000 fa16 	bl	80019c8 <MX_TIM1_Init>
  MX_TIM4_Init();
 800159c:	f000 faf4 	bl	8001b88 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80015a0:	f000 fc44 	bl	8001e2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015a4:	f7ff fbd6 	bl	8000d54 <MX_ADC1_Init>
  MX_ADC2_Init();
 80015a8:	f7ff fc70 	bl	8000e8c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80015ac:	f000 f874 	bl	8001698 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80015b0:	f000 f8a0 	bl	80016f4 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80015b4:	f000 f8cc 	bl	8001750 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


    start_up();
 80015b8:	f7ff fdf4 	bl	80011a4 <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <main+0x34>

080015be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b0a4      	sub	sp, #144	; 0x90
 80015c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015c8:	2238      	movs	r2, #56	; 0x38
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f007 fbff 	bl	8008dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2244      	movs	r2, #68	; 0x44
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f007 fbf1 	bl	8008dd0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f003 fb56 	bl	8004ca0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f4:	2301      	movs	r3, #1
 80015f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fe:	2302      	movs	r3, #2
 8001600:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001602:	2303      	movs	r3, #3
 8001604:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001606:	2302      	movs	r3, #2
 8001608:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800160a:	2350      	movs	r3, #80	; 0x50
 800160c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001610:	2302      	movs	r3, #2
 8001612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fbde 	bl	8004de8 <HAL_RCC_OscConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001632:	f000 f82a 	bl	800168a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001636:	230f      	movs	r3, #15
 8001638:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163a:	2303      	movs	r3, #3
 800163c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800164a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800164e:	2107      	movs	r1, #7
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fee1 	bl	8005418 <HAL_RCC_ClockConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800165c:	f000 f815 	bl	800168a <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001660:	f248 0302 	movw	r3, #32770	; 0x8002
 8001664:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800166a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800166e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	4618      	mov	r0, r3
 8001674:	f004 f8ec 	bl	8005850 <HAL_RCCEx_PeriphCLKConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800167e:	f000 f804 	bl	800168a <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3790      	adds	r7, #144	; 0x90
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_OPAMP1_Init+0x54>)
 800169e:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <MX_OPAMP1_Init+0x58>)
 80016a0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_OPAMP1_Init+0x54>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_OPAMP1_Init+0x54>)
 80016aa:	2240      	movs	r2, #64	; 0x40
 80016ac:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_OPAMP1_Init+0x54>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_OPAMP1_Init+0x54>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_OPAMP1_Init+0x54>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_OPAMP1_Init+0x54>)
 80016c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_OPAMP1_Init+0x54>)
 80016ca:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_OPAMP1_Init+0x54>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_OPAMP1_Init+0x54>)
 80016d8:	f002 feec 	bl	80044b4 <HAL_OPAMP_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 80016e2:	f7ff ffd2 	bl	800168a <Error_Handler>
  }

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200002c0 	.word	0x200002c0
 80016f0:	40010300 	.word	0x40010300

080016f4 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_OPAMP2_Init+0x54>)
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <MX_OPAMP2_Init+0x58>)
 80016fc:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_OPAMP2_Init+0x54>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <MX_OPAMP2_Init+0x54>)
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_OPAMP2_Init+0x54>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <MX_OPAMP2_Init+0x54>)
 8001712:	2200      	movs	r2, #0
 8001714:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_OPAMP2_Init+0x54>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_OPAMP2_Init+0x54>)
 800171e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_OPAMP2_Init+0x54>)
 8001726:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_OPAMP2_Init+0x54>)
 800172e:	2200      	movs	r2, #0
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_OPAMP2_Init+0x54>)
 8001734:	f002 febe 	bl	80044b4 <HAL_OPAMP_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 800173e:	f7ff ffa4 	bl	800168a <Error_Handler>
  }

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000248 	.word	0x20000248
 800174c:	40010304 	.word	0x40010304

08001750 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 8001756:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <MX_OPAMP3_Init+0x58>)
 8001758:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 800176e:	2200      	movs	r2, #0
 8001770:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 800177a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 8001782:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 800178a:	2200      	movs	r2, #0
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_OPAMP3_Init+0x54>)
 8001790:	f002 fe90 	bl	80044b4 <HAL_OPAMP_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 800179a:	f7ff ff76 	bl	800168a <Error_Handler>
  }

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000284 	.word	0x20000284
 80017a8:	40010308 	.word	0x40010308

080017ac <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <HAL_OPAMP_MspInit+0xd8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d119      	bne.n	8001802 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <HAL_OPAMP_MspInit+0xdc>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <HAL_OPAMP_MspInit+0xdc>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_OPAMP_MspInit+0xdc>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017e6:	230e      	movs	r3, #14
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f002 fcc0 	bl	8004180 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001800:	e03b      	b.n	800187a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_OPAMP_MspInit+0xe0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d119      	bne.n	8001840 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_OPAMP_MspInit+0xdc>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_OPAMP_MspInit+0xdc>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_OPAMP_MspInit+0xdc>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001824:	23e0      	movs	r3, #224	; 0xe0
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001828:	2303      	movs	r3, #3
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f002 fca1 	bl	8004180 <HAL_GPIO_Init>
}
 800183e:	e01c      	b.n	800187a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_OPAMP_MspInit+0xe4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d117      	bne.n	800187a <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_OPAMP_MspInit+0xdc>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <HAL_OPAMP_MspInit+0xdc>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_OPAMP_MspInit+0xdc>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001862:	2307      	movs	r3, #7
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001866:	2303      	movs	r3, #3
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4807      	ldr	r0, [pc, #28]	; (8001894 <HAL_OPAMP_MspInit+0xe8>)
 8001876:	f002 fc83 	bl	8004180 <HAL_GPIO_Init>
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40010300 	.word	0x40010300
 8001888:	40021000 	.word	0x40021000
 800188c:	40010304 	.word	0x40010304
 8001890:	40010308 	.word	0x40010308
 8001894:	48000400 	.word	0x48000400

08001898 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80018a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a6:	6093      	str	r3, [r2, #8]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40007000 	.word	0x40007000

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_MspInit+0x44>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_MspInit+0x44>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_MspInit+0x44>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_MspInit+0x44>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_MspInit+0x44>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6593      	str	r3, [r2, #88]	; 0x58
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_MspInit+0x44>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80018ee:	f7ff ffd3 	bl	8001898 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001954:	f000 fb7e 	bl	8002054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <ADC1_2_IRQHandler+0x14>)
 8001962:	f000 fe7f 	bl	8002664 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001966:	4803      	ldr	r0, [pc, #12]	; (8001974 <ADC1_2_IRQHandler+0x18>)
 8001968:	f000 fe7c 	bl	8002664 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000098 	.word	0x20000098
 8001974:	2000002c 	.word	0x2000002c

08001978 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <USART2_IRQHandler+0x10>)
 800197e:	f005 fc0d 	bl	800719c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000394 	.word	0x20000394

0800198c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001990:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001994:	f002 fd76 	bl	8004484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <SystemInit+0x28>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <SystemInit+0x28>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SystemInit+0x28>)
 80019b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019b6:	609a      	str	r2, [r3, #8]
#endif
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b09c      	sub	sp, #112	; 0x70
 80019cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2234      	movs	r2, #52	; 0x34
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f007 f9e4 	bl	8008dd0 <memset>

  htim1.Instance = TIM1;
 8001a08:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a0a:	4a5e      	ldr	r2, [pc, #376]	; (8001b84 <MX_TIM1_Init+0x1bc>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a14:	4b5a      	ldr	r3, [pc, #360]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a16:	2220      	movs	r2, #32
 8001a18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001a1a:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a26:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a32:	4853      	ldr	r0, [pc, #332]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a34:	f004 f8fc 	bl	8005c30 <HAL_TIM_Base_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a3e:	f7ff fe24 	bl	800168a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a46:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	484c      	ldr	r0, [pc, #304]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a50:	f004 fc66 	bl	8006320 <HAL_TIM_ConfigClockSource>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a5a:	f7ff fe16 	bl	800168a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a5e:	4848      	ldr	r0, [pc, #288]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a60:	f004 f974 	bl	8005d4c <HAL_TIM_PWM_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a6a:	f7ff fe0e 	bl	800168a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001a6e:	2370      	movs	r3, #112	; 0x70
 8001a70:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a7e:	4619      	mov	r1, r3
 8001a80:	483f      	ldr	r0, [pc, #252]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001a82:	f005 f9f3 	bl	8006e6c <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001a8c:	f7ff fdfd 	bl	800168a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a90:	2360      	movs	r3, #96	; 0x60
 8001a92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4832      	ldr	r0, [pc, #200]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001ab6:	f004 fb23 	bl	8006100 <HAL_TIM_PWM_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001ac0:	f7ff fde3 	bl	800168a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001acc:	2204      	movs	r2, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	482b      	ldr	r0, [pc, #172]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001ad2:	f004 fb15 	bl	8006100 <HAL_TIM_PWM_ConfigChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001adc:	f7ff fdd5 	bl	800168a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ae4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ae8:	2208      	movs	r2, #8
 8001aea:	4619      	mov	r1, r3
 8001aec:	4824      	ldr	r0, [pc, #144]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001aee:	f004 fb07 	bl	8006100 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001af8:	f7ff fdc7 	bl	800168a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001afc:	2370      	movs	r3, #112	; 0x70
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b04:	2300      	movs	r3, #0
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4619      	mov	r1, r3
 8001b10:	481b      	ldr	r0, [pc, #108]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001b12:	f004 faf5 	bl	8006100 <HAL_TIM_PWM_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001b1c:	f7ff fdb5 	bl	800168a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8001b30:	2344      	movs	r3, #68	; 0x44
 8001b32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 8001b50:	2303      	movs	r3, #3
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4807      	ldr	r0, [pc, #28]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001b62:	f005 fa05 	bl	8006f70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8001b6c:	f7ff fd8d 	bl	800168a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <MX_TIM1_Init+0x1b8>)
 8001b72:	f000 f8d3 	bl	8001d1c <HAL_TIM_MspPostInit>

}
 8001b76:	bf00      	nop
 8001b78:	3770      	adds	r7, #112	; 0x70
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000348 	.word	0x20000348
 8001b84:	40012c00 	.word	0x40012c00

08001b88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2224      	movs	r2, #36	; 0x24
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f007 f91a 	bl	8008dd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001ba8:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <MX_TIM4_Init+0xa4>)
 8001baa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <MX_TIM4_Init+0xa8>)
 8001bcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001be2:	2301      	movs	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001bf6:	f004 f9dd 	bl	8005fb4 <HAL_TIM_Encoder_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c00:	f7ff fd43 	bl	800168a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_TIM4_Init+0xa0>)
 8001c12:	f005 f92b 	bl	8006e6c <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c1c:	f7ff fd35 	bl	800168a <Error_Handler>
  }

}
 8001c20:	bf00      	nop
 8001c22:	3730      	adds	r7, #48	; 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200002fc 	.word	0x200002fc
 8001c2c:	40000800 	.word	0x40000800
 8001c30:	00010006 	.word	0x00010006

08001c34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_TIM_Base_MspInit+0x38>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10b      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_TIM_Base_MspInit+0x3c>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_TIM_Base_MspInit+0x3c>)
 8001c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c50:	6613      	str	r3, [r2, #96]	; 0x60
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_TIM_Base_MspInit+0x3c>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40012c00 	.word	0x40012c00
 8001c70:	40021000 	.word	0x40021000

08001c74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d138      	bne.n	8001d08 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 8001cc6:	23c0      	movs	r3, #192	; 0xc0
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001ce2:	f002 fa4d 	bl	8004180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 8001ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001d04:	f002 fa3c 	bl	8004180 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400

08001d1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_TIM_MspPostInit+0x100>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d169      	bne.n	8001e12 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_TIM_MspPostInit+0x104>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a37      	ldr	r2, [pc, #220]	; (8001e20 <HAL_TIM_MspPostInit+0x104>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4a:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <HAL_TIM_MspPostInit+0x104>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <HAL_TIM_MspPostInit+0x104>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	4a31      	ldr	r2, [pc, #196]	; (8001e20 <HAL_TIM_MspPostInit+0x104>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d62:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <HAL_TIM_MspPostInit+0x104>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_TIM_MspPostInit+0x104>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	4a2b      	ldr	r2, [pc, #172]	; (8001e20 <HAL_TIM_MspPostInit+0x104>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_TIM_MspPostInit+0x104>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4820      	ldr	r0, [pc, #128]	; (8001e24 <HAL_TIM_MspPostInit+0x108>)
 8001da4:	f002 f9ec 	bl	8004180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001da8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db6:	2302      	movs	r3, #2
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4818      	ldr	r0, [pc, #96]	; (8001e28 <HAL_TIM_MspPostInit+0x10c>)
 8001dc6:	f002 f9db 	bl	8004180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001dca:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ddc:	2306      	movs	r3, #6
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dea:	f002 f9c9 	bl	8004180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001e00:	230b      	movs	r3, #11
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f002 f9b7 	bl	8004180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000800 	.word	0x48000800
 8001e28:	48000400 	.word	0x48000400

08001e2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e32:	4a23      	ldr	r2, [pc, #140]	; (8001ec0 <MX_USART2_UART_Init+0x94>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e74:	4811      	ldr	r0, [pc, #68]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e76:	f005 f940 	bl	80070fa <HAL_UART_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e80:	f7ff fc03 	bl	800168a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e84:	2100      	movs	r1, #0
 8001e86:	480d      	ldr	r0, [pc, #52]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e88:	f006 fe9a 	bl	8008bc0 <HAL_UARTEx_SetTxFifoThreshold>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e92:	f7ff fbfa 	bl	800168a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e96:	2100      	movs	r1, #0
 8001e98:	4808      	ldr	r0, [pc, #32]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001e9a:	f006 fecf 	bl	8008c3c <HAL_UARTEx_SetRxFifoThreshold>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ea4:	f7ff fbf1 	bl	800168a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <MX_USART2_UART_Init+0x90>)
 8001eaa:	f006 fe50 	bl	8008b4e <HAL_UARTEx_DisableFifoMode>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001eb4:	f7ff fbe9 	bl	800168a <Error_Handler>
  }

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000394 	.word	0x20000394
 8001ec0:	40004400 	.word	0x40004400

08001ec4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <HAL_UART_MspInit+0x8c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12f      	bne.n	8001f46 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f16:	2318      	movs	r3, #24
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f26:	2307      	movs	r3, #7
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <HAL_UART_MspInit+0x94>)
 8001f32:	f002 f925 	bl	8004180 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2108      	movs	r1, #8
 8001f3a:	2026      	movs	r0, #38	; 0x26
 8001f3c:	f002 f885 	bl	800404a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f40:	2026      	movs	r0, #38	; 0x26
 8001f42:	f002 f89c 	bl	800407e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f46:	bf00      	nop
 8001f48:	3728      	adds	r7, #40	; 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40004400 	.word	0x40004400
 8001f54:	40021000 	.word	0x40021000
 8001f58:	48000400 	.word	0x48000400

08001f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f62:	490e      	ldr	r1, [pc, #56]	; (8001f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <LoopForever+0xe>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f78:	4c0b      	ldr	r4, [pc, #44]	; (8001fa8 <LoopForever+0x16>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f86:	f7ff fd09 	bl	800199c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f006 fefd 	bl	8008d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f8e:	f7ff fafb 	bl	8001588 <main>

08001f92 <LoopForever>:

LoopForever:
    b LoopForever
 8001f92:	e7fe      	b.n	8001f92 <LoopForever>
  ldr   r0, =_estack
 8001f94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fa0:	08008e30 	.word	0x08008e30
  ldr r2, =_sbss
 8001fa4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fa8:	20000424 	.word	0x20000424

08001fac <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fac:	e7fe      	b.n	8001fac <COMP1_2_3_IRQHandler>

08001fae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f002 f83b 	bl	8004034 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f80e 	bl	8001fe0 <HAL_InitTick>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	e001      	b.n	8001fd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd0:	f7ff fc72 	bl	80018b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd4:	79fb      	ldrb	r3, [r7, #7]

}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <HAL_InitTick+0x68>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d022      	beq.n	800203a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_InitTick+0x6c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_InitTick+0x68>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002000:	fbb1 f3f3 	udiv	r3, r1, r3
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f002 f846 	bl	800409a <HAL_SYSTICK_Config>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	d809      	bhi.n	800202e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201a:	2200      	movs	r2, #0
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	f04f 30ff 	mov.w	r0, #4294967295
 8002022:	f002 f812 	bl	800404a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_InitTick+0x70>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e007      	b.n	800203e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e004      	b.n	800203e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e001      	b.n	800203e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000008 	.word	0x20000008
 800204c:	20000000 	.word	0x20000000
 8002050:	20000004 	.word	0x20000004

08002054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_IncTick+0x1c>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_IncTick+0x20>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4413      	add	r3, r2
 8002062:	4a03      	ldr	r2, [pc, #12]	; (8002070 <HAL_IncTick+0x1c>)
 8002064:	6013      	str	r3, [r2, #0]
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	20000420 	.word	0x20000420
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000420 	.word	0x20000420

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff ffee 	bl	8002078 <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d004      	beq.n	80020b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_Delay+0x40>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4413      	add	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b4:	bf00      	nop
 80020b6:	f7ff ffdf 	bl	8002078 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d8f7      	bhi.n	80020b6 <HAL_Delay+0x26>
  {
  }
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000008 	.word	0x20000008

080020d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	609a      	str	r2, [r3, #8]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 031f 	and.w	r3, r3, #31
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800218e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6093      	str	r3, [r2, #8]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021b6:	d101      	bne.n	80021bc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002206:	d101      	bne.n	800220c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800222a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002252:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002256:	f043 0202 	orr.w	r2, r3, #2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <LL_ADC_IsEnabled+0x18>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_ADC_IsEnabled+0x1a>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d101      	bne.n	80022a8 <LL_ADC_IsDisableOngoing+0x18>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <LL_ADC_IsDisableOngoing+0x1a>
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d101      	bne.n	80022f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b08      	cmp	r3, #8
 800233e:	d101      	bne.n	8002344 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e16b      	b.n	8002646 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fe fdfd 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff04 	bl	80021a2 <LL_ADC_IsDeepPowerDownEnabled>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff feea 	bl	800217e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff1f 	bl	80021f2 <LL_ADC_IsInternalRegulatorEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d113      	bne.n	80023e2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff03 	bl	80021ca <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80023c4:	4ba2      	ldr	r3, [pc, #648]	; (8002650 <HAL_ADC_Init+0x2fc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	4aa2      	ldr	r2, [pc, #648]	; (8002654 <HAL_ADC_Init+0x300>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023d4:	e002      	b.n	80023dc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3b01      	subs	r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f9      	bne.n	80023d6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ff03 	bl	80021f2 <LL_ADC_IsInternalRegulatorEnabled>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff63 	bl	80022de <LL_ADC_REG_IsConversionOngoing>
 8002418:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 8106 	bne.w	8002634 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 8102 	bne.w	8002634 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002438:	f043 0202 	orr.w	r2, r3, #2
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff10 	bl	800226a <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d111      	bne.n	8002474 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002450:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002454:	f7ff ff09 	bl	800226a <LL_ADC_IsEnabled>
 8002458:	4604      	mov	r4, r0
 800245a:	487f      	ldr	r0, [pc, #508]	; (8002658 <HAL_ADC_Init+0x304>)
 800245c:	f7ff ff05 	bl	800226a <LL_ADC_IsEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	4323      	orrs	r3, r4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4619      	mov	r1, r3
 800246e:	487b      	ldr	r0, [pc, #492]	; (800265c <HAL_ADC_Init+0x308>)
 8002470:	f7ff fe30 	bl	80020d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7f5b      	ldrb	r3, [r3, #29]
 8002478:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800247e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002484:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800248a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002492:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	045b      	lsls	r3, r3, #17
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_ADC_Init+0x30c>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	430b      	orrs	r3, r1
 80024de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff feef 	bl	80022de <LL_ADC_REG_IsConversionOngoing>
 8002500:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff10 	bl	800232c <LL_ADC_INJ_IsConversionOngoing>
 800250c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d16d      	bne.n	80025f0 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d16a      	bne.n	80025f0 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800251e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002526:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002536:	f023 0302 	bic.w	r3, r3, #2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	69b9      	ldr	r1, [r7, #24]
 8002540:	430b      	orrs	r3, r1
 8002542:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d017      	beq.n	800257c <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800255a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002564:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6911      	ldr	r1, [r2, #16]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800257a:	e013      	b.n	80025a4 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800258a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800259c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d118      	bne.n	80025e0 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025d0:	430a      	orrs	r2, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	e007      	b.n	80025f0 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10c      	bne.n	8002612 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f023 010f 	bic.w	r1, r3, #15
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
 8002610:	e007      	b.n	8002622 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 020f 	bic.w	r2, r2, #15
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	65da      	str	r2, [r3, #92]	; 0x5c
 8002632:	e007      	b.n	8002644 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	f043 0210 	orr.w	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002644:	7ffb      	ldrb	r3, [r7, #31]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	bf00      	nop
 8002650:	20000000 	.word	0x20000000
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	50000100 	.word	0x50000100
 800265c:	50000300 	.word	0x50000300
 8002660:	fff04007 	.word	0xfff04007

08002664 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002680:	4883      	ldr	r0, [pc, #524]	; (8002890 <HAL_ADC_IRQHandler+0x22c>)
 8002682:	f7ff fd60 	bl	8002146 <LL_ADC_GetMultimode>
 8002686:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d017      	beq.n	80026c2 <HAL_ADC_IRQHandler+0x5e>
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d012      	beq.n	80026c2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 feeb 	bl	8003490 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2202      	movs	r2, #2
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x72>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8085 	beq.w	80027ec <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d07f      	beq.n	80027ec <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d105      	bne.n	8002704 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fcf6 	bl	80020fa <LL_ADC_REG_IsTriggerSourceSWStart>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d064      	beq.n	80027de <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5e      	ldr	r2, [pc, #376]	; (8002894 <HAL_ADC_IRQHandler+0x230>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d002      	beq.n	8002724 <HAL_ADC_IRQHandler+0xc0>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	e001      	b.n	8002728 <HAL_ADC_IRQHandler+0xc4>
 8002724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	4293      	cmp	r3, r2
 800272e:	d008      	beq.n	8002742 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d002      	beq.n	8002742 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b09      	cmp	r3, #9
 8002740:	d104      	bne.n	800274c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	e00d      	b.n	8002768 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a50      	ldr	r2, [pc, #320]	; (8002894 <HAL_ADC_IRQHandler+0x230>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d002      	beq.n	800275c <HAL_ADC_IRQHandler+0xf8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	e001      	b.n	8002760 <HAL_ADC_IRQHandler+0xfc>
 800275c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002760:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d135      	bne.n	80027de <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d12e      	bne.n	80027de <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fdaa 	bl	80022de <LL_ADC_REG_IsConversionOngoing>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d11a      	bne.n	80027c6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 020c 	bic.w	r2, r2, #12
 800279e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d112      	bne.n	80027de <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80027c4:	e00b      	b.n	80027de <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	f043 0210 	orr.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f95a 	bl	8002a98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	220c      	movs	r2, #12
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_IRQHandler+0x19c>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 809e 	beq.w	8002948 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8098 	beq.w	8002948 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc73 	bl	8002120 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800283a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fc5a 	bl	80020fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002846:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <HAL_ADC_IRQHandler+0x230>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d002      	beq.n	8002858 <HAL_ADC_IRQHandler+0x1f4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e001      	b.n	800285c <HAL_ADC_IRQHandler+0x1f8>
 8002858:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	4293      	cmp	r3, r2
 8002862:	d008      	beq.n	8002876 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b06      	cmp	r3, #6
 800286e:	d002      	beq.n	8002876 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b07      	cmp	r3, #7
 8002874:	d104      	bne.n	8002880 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	623b      	str	r3, [r7, #32]
 800287e:	e011      	b.n	80028a4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a03      	ldr	r2, [pc, #12]	; (8002894 <HAL_ADC_IRQHandler+0x230>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d006      	beq.n	8002898 <HAL_ADC_IRQHandler+0x234>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	e005      	b.n	800289c <HAL_ADC_IRQHandler+0x238>
 8002890:	50000300 	.word	0x50000300
 8002894:	50000100 	.word	0x50000100
 8002898:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800289c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d142      	bne.n	800293a <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d03f      	beq.n	800293a <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d13a      	bne.n	800293a <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d133      	bne.n	800293a <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d12e      	bne.n	800293a <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fd23 	bl	800232c <LL_ADC_INJ_IsConversionOngoing>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11a      	bne.n	8002922 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028fa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d112      	bne.n	800293a <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002920:	e00b      	b.n	800293a <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	f043 0210 	orr.w	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fca4 	bl	8001288 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2260      	movs	r2, #96	; 0x60
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b00      	cmp	r3, #0
 8002950:	d011      	beq.n	8002976 <HAL_ADC_IRQHandler+0x312>
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002960:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f89f 	bl	8002aac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d012      	beq.n	80029a6 <HAL_ADC_IRQHandler+0x342>
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fd66 	bl	8003468 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d012      	beq.n	80029d6 <HAL_ADC_IRQHandler+0x372>
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fd58 	bl	800347c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d036      	beq.n	8002a4e <HAL_ADC_IRQHandler+0x3ea>
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d031      	beq.n	8002a4e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80029f2:	2301      	movs	r3, #1
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	e014      	b.n	8002a22 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029fe:	4825      	ldr	r0, [pc, #148]	; (8002a94 <HAL_ADC_IRQHandler+0x430>)
 8002a00:	f7ff fbaf 	bl	8002162 <LL_ADC_GetMultiDMATransfer>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0e:	e008      	b.n	8002a22 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10e      	bne.n	8002a46 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a38:	f043 0202 	orr.w	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f83d 	bl	8002ac0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d018      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x426>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d013      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a82:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fce5 	bl	8003454 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	50000300 	.word	0x50000300

08002a98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fbf7 	bl	80022de <LL_ADC_REG_IsConversionOngoing>
 8002af0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fc18 	bl	800232c <LL_ADC_INJ_IsConversionOngoing>
 8002afc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d103      	bne.n	8002b0c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8090 	beq.w	8002c2c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02a      	beq.n	8002b70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7f5b      	ldrb	r3, [r3, #29]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d126      	bne.n	8002b70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7f1b      	ldrb	r3, [r3, #28]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d122      	bne.n	8002b70 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b2e:	e014      	b.n	8002b5a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	4a41      	ldr	r2, [pc, #260]	; (8002c38 <ADC_ConversionStop+0x164>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d90d      	bls.n	8002b54 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	f043 0210 	orr.w	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e06c      	b.n	8002c2e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	3301      	adds	r3, #1
 8002b58:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d1e3      	bne.n	8002b30 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2240      	movs	r2, #64	; 0x40
 8002b6e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d014      	beq.n	8002ba0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fbaf 	bl	80022de <LL_ADC_REG_IsConversionOngoing>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00c      	beq.n	8002ba0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fb80 	bl	8002290 <LL_ADC_IsDisableOngoing>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fb8b 	bl	80022b6 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d014      	beq.n	8002bd0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fbbe 	bl	800232c <LL_ADC_INJ_IsConversionOngoing>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fb68 	bl	8002290 <LL_ADC_IsDisableOngoing>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d104      	bne.n	8002bd0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fb9a 	bl	8002304 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d004      	beq.n	8002be0 <ADC_ConversionStop+0x10c>
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d105      	bne.n	8002be6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002bda:	230c      	movs	r3, #12
 8002bdc:	617b      	str	r3, [r7, #20]
        break;
 8002bde:	e005      	b.n	8002bec <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002be0:	2308      	movs	r3, #8
 8002be2:	617b      	str	r3, [r7, #20]
        break;
 8002be4:	e002      	b.n	8002bec <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002be6:	2304      	movs	r3, #4
 8002be8:	617b      	str	r3, [r7, #20]
        break;
 8002bea:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002bec:	f7ff fa44 	bl	8002078 <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bf2:	e014      	b.n	8002c1e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bf4:	f7ff fa40 	bl	8002078 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d90d      	bls.n	8002c1e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e007      	b.n	8002c2e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e3      	bne.n	8002bf4 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	a33fffff 	.word	0xa33fffff

08002c3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fb0e 	bl	800226a <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d146      	bne.n	8002ce2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <ADC_Enable+0xb0>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00d      	beq.n	8002c7e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	f043 0210 	orr.w	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e032      	b.n	8002ce4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fac9 	bl	800221a <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c88:	f7ff f9f6 	bl	8002078 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c8e:	e021      	b.n	8002cd4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fae8 	bl	800226a <LL_ADC_IsEnabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d104      	bne.n	8002caa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fab8 	bl	800221a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002caa:	f7ff f9e5 	bl	8002078 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d90d      	bls.n	8002cd4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	f043 0210 	orr.w	r2, r3, #16
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e007      	b.n	8002ce4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d1d6      	bne.n	8002c90 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	8000003f 	.word	0x8000003f

08002cf0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fac7 	bl	8002290 <LL_ADC_IsDisableOngoing>
 8002d02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff faae 	bl	800226a <LL_ADC_IsEnabled>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d040      	beq.n	8002d96 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d13d      	bne.n	8002d96 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030d 	and.w	r3, r3, #13
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10c      	bne.n	8002d42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fa88 	bl	8002242 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2203      	movs	r2, #3
 8002d38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d3a:	f7ff f99d 	bl	8002078 <HAL_GetTick>
 8002d3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d40:	e022      	b.n	8002d88 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	f043 0210 	orr.w	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e01c      	b.n	8002d98 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d5e:	f7ff f98b 	bl	8002078 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d90d      	bls.n	8002d88 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	f043 0210 	orr.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7c:	f043 0201 	orr.w	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e007      	b.n	8002d98 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e3      	bne.n	8002d5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <LL_ADC_SetCommonPathInternalCh>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_GetCommonPathInternalCh>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <LL_ADC_SetOffset>:
{
 8002de4:	b490      	push	{r4, r7}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3360      	adds	r3, #96	; 0x60
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002e00:	6822      	ldr	r2, [r4, #0]
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <LL_ADC_SetOffset+0x40>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e16:	6023      	str	r3, [r4, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc90      	pop	{r4, r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	03fff000 	.word	0x03fff000

08002e28 <LL_ADC_GetOffsetChannel>:
{
 8002e28:	b490      	push	{r4, r7}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3360      	adds	r3, #96	; 0x60
 8002e36:	461a      	mov	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc90      	pop	{r4, r7}
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_SetOffsetState>:
{
 8002e50:	b490      	push	{r4, r7}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3360      	adds	r3, #96	; 0x60
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	6023      	str	r3, [r4, #0]
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc90      	pop	{r4, r7}
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_SetOffsetSign>:
{
 8002e80:	b490      	push	{r4, r7}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3360      	adds	r3, #96	; 0x60
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	6023      	str	r3, [r4, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc90      	pop	{r4, r7}
 8002eae:	4770      	bx	lr

08002eb0 <LL_ADC_SetOffsetSaturation>:
{
 8002eb0:	b490      	push	{r4, r7}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3360      	adds	r3, #96	; 0x60
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	6023      	str	r3, [r4, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc90      	pop	{r4, r7}
 8002ede:	4770      	bx	lr

08002ee0 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	615a      	str	r2, [r3, #20]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_ADC_INJ_GetTrigAuto>:
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_ADC_SetChannelSamplingTime>:
{
 8002f22:	b490      	push	{r4, r7}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3314      	adds	r3, #20
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	0e5b      	lsrs	r3, r3, #25
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	4413      	add	r3, r2
 8002f40:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	0d1b      	lsrs	r3, r3, #20
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2107      	movs	r1, #7
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	401a      	ands	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	0d1b      	lsrs	r3, r3, #20
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	4313      	orrs	r3, r2
 8002f66:	6023      	str	r3, [r4, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc90      	pop	{r4, r7}
 8002f70:	4770      	bx	lr
	...

08002f74 <LL_ADC_SetChannelSingleDiff>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	401a      	ands	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0318 	and.w	r3, r3, #24
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f98:	40d9      	lsrs	r1, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	0007ffff 	.word	0x0007ffff

08002fbc <LL_ADC_GetMultimode>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_IsEnabled>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <LL_ADC_IsEnabled+0x18>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_ADC_IsEnabled+0x1a>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_ADC_StartCalibration>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800301a:	4313      	orrs	r3, r2
 800301c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	609a      	str	r2, [r3, #8]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_ADC_IsCalibrationOnGoing>:
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003044:	d101      	bne.n	800304a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_ADC_REG_IsConversionOngoing>:
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d101      	bne.n	8003070 <LL_ADC_REG_IsConversionOngoing+0x18>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_ADC_INJ_StartConversion>:
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800308e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003092:	f043 0208 	orr.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_ADC_INJ_IsConversionOngoing>:
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d101      	bne.n	80030be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_ADCEx_Calibration_Start+0x1c>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e04d      	b.n	8003184 <HAL_ADCEx_Calibration_Start+0xb8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff fdfd 	bl	8002cf0 <ADC_Disable>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d136      	bne.n	800316e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003108:	f023 0302 	bic.w	r3, r3, #2
 800310c:	f043 0202 	orr.w	r2, r3, #2
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6839      	ldr	r1, [r7, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff6f 	bl	8002ffe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003120:	e014      	b.n	800314c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	3301      	adds	r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_ADCEx_Calibration_Start+0xc0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d90d      	bls.n	800314c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	f023 0312 	bic.w	r3, r3, #18
 8003138:	f043 0210 	orr.w	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e01b      	b.n	8003184 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff6d 	bl	8003030 <LL_ADC_IsCalibrationOnGoing>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e2      	bne.n	8003122 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	f023 0303 	bic.w	r3, r3, #3
 8003164:	f043 0201 	orr.w	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	; 0x5c
 800316c:	e005      	b.n	800317a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	f043 0210 	orr.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003182:	7bfb      	ldrb	r3, [r7, #15]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	0004de01 	.word	0x0004de01

08003190 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003198:	486e      	ldr	r0, [pc, #440]	; (8003354 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800319a:	f7ff ff0f 	bl	8002fbc <LL_ADC_GetMultimode>
 800319e:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff7e 	bl	80030a6 <LL_ADC_INJ_IsConversionOngoing>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	e0ca      	b.n	800334a <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031be:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0b2      	b.n	800334a <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADCEx_InjectedStart_IT+0x62>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e0ab      	b.n	800334a <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fd1e 	bl	8002c3c <ADC_Enable>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 809a 	bne.w	8003340 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321c:	f023 0208 	bic.w	r2, r3, #8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	661a      	str	r2, [r3, #96]	; 0x60
 8003224:	e002      	b.n	800322c <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a44      	ldr	r2, [pc, #272]	; (8003358 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d002      	beq.n	8003250 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	e001      	b.n	8003254 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8003250:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	4293      	cmp	r3, r2
 800325a:	d002      	beq.n	8003262 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2260      	movs	r2, #96	; 0x60
 8003274:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800329a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d110      	bne.n	80032c6 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0220 	bic.w	r2, r2, #32
 80032b2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c2:	605a      	str	r2, [r3, #4]
          break;
 80032c4:	e010      	b.n	80032e8 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d4:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0220 	orr.w	r2, r2, #32
 80032e4:	605a      	str	r2, [r3, #4]
          break;
 80032e6:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d002      	beq.n	80032f8 <HAL_ADCEx_InjectedStart_IT+0x168>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	e001      	b.n	80032fc <HAL_ADCEx_InjectedStart_IT+0x16c>
 80032f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	4293      	cmp	r3, r2
 8003302:	d008      	beq.n	8003316 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b06      	cmp	r3, #6
 800330e:	d002      	beq.n	8003316 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b07      	cmp	r3, #7
 8003314:	d10d      	bne.n	8003332 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fdf3 	bl	8002f06 <LL_ADC_INJ_GetTrigAuto>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d110      	bne.n	8003348 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fea7 	bl	800307e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003330:	e00a      	b.n	8003348 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	65da      	str	r2, [r3, #92]	; 0x5c
 800333e:	e003      	b.n	8003348 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	50000300 	.word	0x50000300
 8003358:	50000100 	.word	0x50000100

0800335c <HAL_ADCEx_InjectedStop_IT>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop() must be used.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef *hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_ADCEx_InjectedStop_IT+0x16>
 800336e:	2302      	movs	r3, #2
 8003370:	e03a      	b.n	80033e8 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going on injected group only. */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 800337a:	2102      	movs	r1, #2
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fba9 	bl	8002ad4 <ADC_ConversionStop>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if injected conversions are effectively stopped   */
  /* and if no conversion on the other group (regular group) is intended to   */
  /* continue.                                                                */
  if (tmp_hal_status == HAL_OK)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d128      	bne.n	80033de <HAL_ADCEx_InjectedStop_IT+0x82>
  {
    /* Disable ADC end of conversion interrupt for injected channels */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_FLAG_JQOVF));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 628c 	bic.w	r2, r2, #1120	; 0x460
 800339a:	605a      	str	r2, [r3, #4]

    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fe59 	bl	8003058 <LL_ADC_REG_IsConversionOngoing>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d112      	bne.n	80033d2 <HAL_ADCEx_InjectedStop_IT+0x76>
    {
      /* 2. Disable the ADC peripheral */
      tmp_hal_status = ADC_Disable(hadc);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff fc9f 	bl	8002cf0 <ADC_Disable>
 80033b2:	4603      	mov	r3, r0
 80033b4:	73fb      	strb	r3, [r7, #15]

      /* Check if ADC is effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d110      	bne.n	80033de <HAL_ADCEx_InjectedStop_IT+0x82>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80033d0:	e005      	b.n	80033de <HAL_ADCEx_InjectedStop_IT+0x82>
    /* Conversion on injected group is stopped, but ADC not disabled since    */
    /* conversion on regular group is still running.                          */
    else
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f240 2215 	movw	r2, #533	; 0x215
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_ADCEx_InjectedGetValue+0x32>
 8003404:	f240 321b 	movw	r2, #795	; 0x31b
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_ADCEx_InjectedGetValue+0x26>
 800340c:	f240 120f 	movw	r2, #271	; 0x10f
 8003410:	4293      	cmp	r3, r2
 8003412:	d00c      	beq.n	800342e <HAL_ADCEx_InjectedGetValue+0x3e>
 8003414:	e011      	b.n	800343a <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800341e:	60fb      	str	r3, [r7, #12]
      break;
 8003420:	e011      	b.n	8003446 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	60fb      	str	r3, [r7, #12]
      break;
 800342c:	e00b      	b.n	8003446 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003436:	60fb      	str	r3, [r7, #12]
      break;
 8003438:	e005      	b.n	8003446 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003442:	60fb      	str	r3, [r7, #12]
      break;
 8003444:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b0a8      	sub	sp, #160	; 0xa0
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d102      	bne.n	80034ce <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80034c8:	2302      	movs	r3, #2
 80034ca:	f000 bc39 	b.w	8003d40 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d130      	bne.n	8003548 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b09      	cmp	r3, #9
 80034ec:	d179      	bne.n	80035e2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0e9b      	lsrs	r3, r3, #26
 80034fc:	025b      	lsls	r3, r3, #9
 80034fe:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800350a:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003516:	e007      	b.n	8003528 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	025b      	lsls	r3, r3, #9
 8003520:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800352e:	4ba3      	ldr	r3, [pc, #652]	; (80037bc <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003530:	4013      	ands	r3, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800353a:	430b      	orrs	r3, r1
 800353c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003544:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003546:	e04c      	b.n	80035e2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800354c:	2b00      	cmp	r3, #0
 800354e:	d11d      	bne.n	800358c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003574:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003580:	e004      	b.n	800358c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	3b01      	subs	r3, #1
 8003588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0e9b      	lsrs	r3, r3, #26
 8003592:	f003 021f 	and.w	r2, r3, #31
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b0:	1e5a      	subs	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035d2:	4b7a      	ldr	r3, [pc, #488]	; (80037bc <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	430b      	orrs	r3, r1
 80035e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fd5d 	bl	80030a6 <LL_ADC_INJ_IsConversionOngoing>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d124      	bne.n	800363c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d112      	bne.n	8003622 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800360c:	055a      	lsls	r2, r3, #21
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003614:	051b      	lsls	r3, r3, #20
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	60da      	str	r2, [r3, #12]
 8003620:	e00c      	b.n	800363c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003632:	055a      	lsls	r2, r3, #21
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fd09 	bl	8003058 <LL_ADC_REG_IsConversionOngoing>
 8003646:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fd29 	bl	80030a6 <LL_ADC_INJ_IsConversionOngoing>
 8003654:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003658:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800365c:	2b00      	cmp	r3, #0
 800365e:	f040 81d4 	bne.w	8003a0a <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 81cf 	bne.w	8003a0a <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d116      	bne.n	80036aa <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003682:	2b01      	cmp	r3, #1
 8003684:	d108      	bne.n	8003698 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003694:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003696:	e01f      	b.n	80036d8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80036a6:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80036a8:	e016      	b.n	80036d8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d109      	bne.n	80036c8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80036c6:	e007      	b.n	80036d8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80036d6:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d110      	bne.n	8003704 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	430b      	orrs	r3, r1
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0202 	orr.w	r2, r2, #2
 8003700:	611a      	str	r2, [r3, #16]
 8003702:	e007      	b.n	8003714 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0202 	bic.w	r2, r2, #2
 8003712:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800371c:	d10f      	bne.n	800373e <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	4619      	mov	r1, r3
 800372a:	f7ff fbfa 	bl	8002f22 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fbd2 	bl	8002ee0 <LL_ADC_SetSamplingTimeCommonConfig>
 800373c:	e00e      	b.n	800375c <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	461a      	mov	r2, r3
 800374c:	f7ff fbe9 	bl	8002f22 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fbc2 	bl	8002ee0 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b04      	cmp	r3, #4
 800377c:	d025      	beq.n	80037ca <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6919      	ldr	r1, [r3, #16]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800378e:	f7ff fb29 	bl	8002de4 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6919      	ldr	r1, [r3, #16]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	461a      	mov	r2, r3
 80037a0:	f7ff fb6e 	bl	8002e80 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80037b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b8:	e003      	b.n	80037c2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80037ba:	bf00      	nop
 80037bc:	04104000 	.word	0x04104000
 80037c0:	2300      	movs	r3, #0
 80037c2:	461a      	mov	r2, r3
 80037c4:	f7ff fb74 	bl	8002eb0 <LL_ADC_SetOffsetSaturation>
 80037c8:	e11f      	b.n	8003a0a <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fb29 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fb1e 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 80037ec:	4603      	mov	r3, r0
 80037ee:	0e9b      	lsrs	r3, r3, #26
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	e014      	b.n	8003820 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fb13 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 8003802:	4603      	mov	r3, r0
 8003804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003828:	2b00      	cmp	r3, #0
 800382a:	d105      	bne.n	8003838 <HAL_ADCEx_InjectedConfigChannel+0x394>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	e00a      	b.n	800384e <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	429a      	cmp	r2, r3
 8003850:	d106      	bne.n	8003860 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff faf8 	bl	8002e50 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fade 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 800386c:	4603      	mov	r3, r0
 800386e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2101      	movs	r1, #1
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fad3 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 8003882:	4603      	mov	r3, r0
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	f003 021f 	and.w	r2, r3, #31
 800388a:	e010      	b.n	80038ae <HAL_ADCEx_InjectedConfigChannel+0x40a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2101      	movs	r1, #1
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fac8 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80038a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d105      	bne.n	80038c6 <HAL_ADCEx_InjectedConfigChannel+0x422>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	0e9b      	lsrs	r3, r3, #26
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	e00a      	b.n	80038dc <HAL_ADCEx_InjectedConfigChannel+0x438>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 80038d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	429a      	cmp	r2, r3
 80038de:	d106      	bne.n	80038ee <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2101      	movs	r1, #1
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fab1 	bl	8002e50 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2102      	movs	r1, #2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fa97 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <HAL_ADCEx_InjectedConfigChannel+0x476>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2102      	movs	r1, #2
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fa8c 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 8003910:	4603      	mov	r3, r0
 8003912:	0e9b      	lsrs	r3, r3, #26
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	e010      	b.n	800393c <HAL_ADCEx_InjectedConfigChannel+0x498>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2102      	movs	r1, #2
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fa81 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 8003926:	4603      	mov	r3, r0
 8003928:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003934:	fab3 f383 	clz	r3, r3
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	0e9b      	lsrs	r3, r3, #26
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	e00a      	b.n	800396a <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	429a      	cmp	r2, r3
 800396c:	d106      	bne.n	800397c <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	2102      	movs	r1, #2
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fa6a 	bl	8002e50 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2103      	movs	r1, #3
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fa50 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 8003988:	4603      	mov	r3, r0
 800398a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_ADCEx_InjectedConfigChannel+0x504>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2103      	movs	r1, #3
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fa45 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	f003 021f 	and.w	r2, r3, #31
 80039a6:	e010      	b.n	80039ca <HAL_ADCEx_InjectedConfigChannel+0x526>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2103      	movs	r1, #3
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fa3a 	bl	8002e28 <LL_ADC_GetOffsetChannel>
 80039b4:	4603      	mov	r3, r0
 80039b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 80039c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d105      	bne.n	80039e2 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0e9b      	lsrs	r3, r3, #26
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	e00a      	b.n	80039f8 <HAL_ADCEx_InjectedConfigChannel+0x554>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d106      	bne.n	8003a0a <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2103      	movs	r1, #3
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fa23 	bl	8002e50 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fae2 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 810c 	bne.w	8003c34 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f7ff faa3 	bl	8002f74 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4aab      	ldr	r2, [pc, #684]	; (8003ce0 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	f040 80fd 	bne.w	8003c34 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10b      	bne.n	8003a62 <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	0e9b      	lsrs	r3, r3, #26
 8003a50:	3301      	adds	r3, #1
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2b09      	cmp	r3, #9
 8003a58:	bf94      	ite	ls
 8003a5a:	2301      	movls	r3, #1
 8003a5c:	2300      	movhi	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	e012      	b.n	8003a88 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2b09      	cmp	r3, #9
 8003a80:	bf94      	ite	ls
 8003a82:	2301      	movls	r3, #1
 8003a84:	2300      	movhi	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d064      	beq.n	8003b56 <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	0e9b      	lsrs	r3, r3, #26
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	069b      	lsls	r3, r3, #26
 8003aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa6:	e00e      	b.n	8003ac6 <HAL_ADCEx_InjectedConfigChannel+0x622>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	069b      	lsls	r3, r3, #26
 8003ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_ADCEx_InjectedConfigChannel+0x642>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	0e9b      	lsrs	r3, r3, #26
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	2101      	movs	r1, #1
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	e010      	b.n	8003b08 <HAL_ADCEx_InjectedConfigChannel+0x664>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	ea42 0103 	orr.w	r1, r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <HAL_ADCEx_InjectedConfigChannel+0x68a>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0e9b      	lsrs	r3, r3, #26
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f003 021f 	and.w	r2, r3, #31
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	051b      	lsls	r3, r3, #20
 8003b2c:	e011      	b.n	8003b52 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	3301      	adds	r3, #1
 8003b46:	f003 021f 	and.w	r2, r3, #31
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	051b      	lsls	r3, r3, #20
 8003b52:	430b      	orrs	r3, r1
 8003b54:	e069      	b.n	8003c2a <HAL_ADCEx_InjectedConfigChannel+0x786>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	0e9b      	lsrs	r3, r3, #26
 8003b68:	3301      	adds	r3, #1
 8003b6a:	069b      	lsls	r3, r3, #26
 8003b6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b70:	e00e      	b.n	8003b90 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	623b      	str	r3, [r7, #32]
  return result;
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	069b      	lsls	r3, r3, #26
 8003b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0e9b      	lsrs	r3, r3, #26
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	e010      	b.n	8003bd2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	61bb      	str	r3, [r7, #24]
  return result;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	ea42 0103 	orr.w	r1, r2, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <HAL_ADCEx_InjectedConfigChannel+0x75a>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	0e9b      	lsrs	r3, r3, #26
 8003be8:	3301      	adds	r3, #1
 8003bea:	f003 021f 	and.w	r2, r3, #31
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3b1e      	subs	r3, #30
 8003bf6:	051b      	lsls	r3, r3, #20
 8003bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	e014      	b.n	8003c28 <HAL_ADCEx_InjectedConfigChannel+0x784>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	613b      	str	r3, [r7, #16]
  return result;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	f003 021f 	and.w	r2, r3, #31
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	3b1e      	subs	r3, #30
 8003c22:	051b      	lsls	r3, r3, #20
 8003c24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	6892      	ldr	r2, [r2, #8]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f7ff f977 	bl	8002f22 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d079      	beq.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c40:	4829      	ldr	r0, [pc, #164]	; (8003ce8 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003c42:	f7ff f8c0 	bl	8002dc6 <LL_ADC_GetCommonPathInternalCh>
 8003c46:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a27      	ldr	r2, [pc, #156]	; (8003cec <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d126      	bne.n	8003cac <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d120      	bne.n	8003cac <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c72:	d15f      	bne.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	481a      	ldr	r0, [pc, #104]	; (8003ce8 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003c80:	f7ff f88e 	bl	8002da0 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	099a      	lsrs	r2, r3, #6
 8003c92:	4613      	mov	r3, r2
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003c9c:	e002      	b.n	8003ca4 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f9      	bne.n	8003c9e <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003caa:	e043      	b.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d126      	bne.n	8003d04 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d120      	bne.n	8003d04 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a0e      	ldr	r2, [pc, #56]	; (8003d00 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d033      	beq.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003cd8:	f7ff f862 	bl	8002da0 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cdc:	e02a      	b.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x890>
 8003cde:	bf00      	nop
 8003ce0:	407f0000 	.word	0x407f0000
 8003ce4:	80080000 	.word	0x80080000
 8003ce8:	50000300 	.word	0x50000300
 8003cec:	c3210000 	.word	0xc3210000
 8003cf0:	90c00010 	.word	0x90c00010
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	053e2d63 	.word	0x053e2d63
 8003cfc:	c7520000 	.word	0xc7520000
 8003d00:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0f      	ldr	r2, [pc, #60]	; (8003d48 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d112      	bne.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10c      	bne.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4808      	ldr	r0, [pc, #32]	; (8003d50 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 8003d30:	f7ff f836 	bl	8002da0 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d3c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	37a0      	adds	r7, #160	; 0xa0
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	cb840000 	.word	0xcb840000
 8003d4c:	50000100 	.word	0x50000100
 8003d50:	50000300 	.word	0x50000300

08003d54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b0a1      	sub	sp, #132	; 0x84
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e087      	b.n	8003e82 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d82:	d102      	bne.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003d84:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	e001      	b.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e06a      	b.n	8003e82 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff f952 	bl	8003058 <LL_ADC_REG_IsConversionOngoing>
 8003db4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f94c 	bl	8003058 <LL_ADC_REG_IsConversionOngoing>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d14c      	bne.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d149      	bne.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dcc:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003dce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d028      	beq.n	8003e2a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dea:	035b      	lsls	r3, r3, #13
 8003dec:	430b      	orrs	r3, r1
 8003dee:	431a      	orrs	r2, r3
 8003df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003df8:	f7ff f8ee 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	4823      	ldr	r0, [pc, #140]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003e00:	f7ff f8ea 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4323      	orrs	r3, r4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d133      	bne.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e14:	f023 030f 	bic.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	6811      	ldr	r1, [r2, #0]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	6892      	ldr	r2, [r2, #8]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	431a      	orrs	r2, r3
 8003e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e28:	e024      	b.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e36:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e3a:	f7ff f8cd 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4812      	ldr	r0, [pc, #72]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003e42:	f7ff f8c9 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003e46:	4603      	mov	r3, r0
 8003e48:	4323      	orrs	r3, r4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d112      	bne.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e56:	f023 030f 	bic.w	r3, r3, #15
 8003e5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5e:	e009      	b.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e72:	e000      	b.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3784      	adds	r7, #132	; 0x84
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd90      	pop	{r4, r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	50000100 	.word	0x50000100
 8003e90:	50000300 	.word	0x50000300

08003e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	60d3      	str	r3, [r2, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	f003 0307 	and.w	r3, r3, #7
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db0b      	blt.n	8003f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <__NVIC_EnableIRQ+0x38>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2001      	movs	r0, #1
 8003f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e100 	.word	0xe000e100

08003f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	db0a      	blt.n	8003f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	490c      	ldr	r1, [pc, #48]	; (8003f80 <__NVIC_SetPriority+0x4c>)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	0112      	lsls	r2, r2, #4
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	440b      	add	r3, r1
 8003f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f5c:	e00a      	b.n	8003f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4908      	ldr	r1, [pc, #32]	; (8003f84 <__NVIC_SetPriority+0x50>)
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	3b04      	subs	r3, #4
 8003f6c:	0112      	lsls	r2, r2, #4
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	440b      	add	r3, r1
 8003f72:	761a      	strb	r2, [r3, #24]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000e100 	.word	0xe000e100
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f1c3 0307 	rsb	r3, r3, #7
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	bf28      	it	cs
 8003fa6:	2304      	movcs	r3, #4
 8003fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3304      	adds	r3, #4
 8003fae:	2b06      	cmp	r3, #6
 8003fb0:	d902      	bls.n	8003fb8 <NVIC_EncodePriority+0x30>
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3b03      	subs	r3, #3
 8003fb6:	e000      	b.n	8003fba <NVIC_EncodePriority+0x32>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	401a      	ands	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	43d9      	mvns	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe0:	4313      	orrs	r3, r2
         );
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3724      	adds	r7, #36	; 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004000:	d301      	bcc.n	8004006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004002:	2301      	movs	r3, #1
 8004004:	e00f      	b.n	8004026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004006:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <SysTick_Config+0x40>)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3b01      	subs	r3, #1
 800400c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800400e:	210f      	movs	r1, #15
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	f7ff ff8e 	bl	8003f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <SysTick_Config+0x40>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800401e:	4b04      	ldr	r3, [pc, #16]	; (8004030 <SysTick_Config+0x40>)
 8004020:	2207      	movs	r2, #7
 8004022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	e000e010 	.word	0xe000e010

08004034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff ff29 	bl	8003e94 <__NVIC_SetPriorityGrouping>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b086      	sub	sp, #24
 800404e:	af00      	add	r7, sp, #0
 8004050:	4603      	mov	r3, r0
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004058:	f7ff ff40 	bl	8003edc <__NVIC_GetPriorityGrouping>
 800405c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	6978      	ldr	r0, [r7, #20]
 8004064:	f7ff ff90 	bl	8003f88 <NVIC_EncodePriority>
 8004068:	4602      	mov	r2, r0
 800406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff5f 	bl	8003f34 <__NVIC_SetPriority>
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff33 	bl	8003ef8 <__NVIC_EnableIRQ>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffa4 	bl	8003ff0 <SysTick_Config>
 80040a8:	4603      	mov	r3, r0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d00d      	beq.n	80040e6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2204      	movs	r2, #4
 80040ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	e047      	b.n	8004176 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 020e 	bic.w	r2, r2, #14
 80040f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004114:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f003 021f 	and.w	r2, r3, #31
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2101      	movs	r1, #1
 8004124:	fa01 f202 	lsl.w	r2, r1, r2
 8004128:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004132:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004154:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
    }
  }
  return status;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800418e:	e15a      	b.n	8004446 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	2101      	movs	r1, #1
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	4013      	ands	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 814c 	beq.w	8004440 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d00b      	beq.n	80041c8 <HAL_GPIO_Init+0x48>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d007      	beq.n	80041c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041bc:	2b11      	cmp	r3, #17
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d130      	bne.n	800422a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	2203      	movs	r2, #3
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041fe:	2201      	movs	r2, #1
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 0201 	and.w	r2, r3, #1
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0xea>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b12      	cmp	r3, #18
 8004268:	d123      	bne.n	80042b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	08da      	lsrs	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3208      	adds	r2, #8
 8004272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	08da      	lsrs	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3208      	adds	r2, #8
 80042ac:	6939      	ldr	r1, [r7, #16]
 80042ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	2203      	movs	r2, #3
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 0203 	and.w	r2, r3, #3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80a6 	beq.w	8004440 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f4:	4b5b      	ldr	r3, [pc, #364]	; (8004464 <HAL_GPIO_Init+0x2e4>)
 80042f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f8:	4a5a      	ldr	r2, [pc, #360]	; (8004464 <HAL_GPIO_Init+0x2e4>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6613      	str	r3, [r2, #96]	; 0x60
 8004300:	4b58      	ldr	r3, [pc, #352]	; (8004464 <HAL_GPIO_Init+0x2e4>)
 8004302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800430c:	4a56      	ldr	r2, [pc, #344]	; (8004468 <HAL_GPIO_Init+0x2e8>)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	3302      	adds	r3, #2
 8004314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	220f      	movs	r2, #15
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4013      	ands	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004336:	d01f      	beq.n	8004378 <HAL_GPIO_Init+0x1f8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a4c      	ldr	r2, [pc, #304]	; (800446c <HAL_GPIO_Init+0x2ec>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d019      	beq.n	8004374 <HAL_GPIO_Init+0x1f4>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a4b      	ldr	r2, [pc, #300]	; (8004470 <HAL_GPIO_Init+0x2f0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d013      	beq.n	8004370 <HAL_GPIO_Init+0x1f0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a4a      	ldr	r2, [pc, #296]	; (8004474 <HAL_GPIO_Init+0x2f4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00d      	beq.n	800436c <HAL_GPIO_Init+0x1ec>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a49      	ldr	r2, [pc, #292]	; (8004478 <HAL_GPIO_Init+0x2f8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <HAL_GPIO_Init+0x1e8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a48      	ldr	r2, [pc, #288]	; (800447c <HAL_GPIO_Init+0x2fc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d101      	bne.n	8004364 <HAL_GPIO_Init+0x1e4>
 8004360:	2305      	movs	r3, #5
 8004362:	e00a      	b.n	800437a <HAL_GPIO_Init+0x1fa>
 8004364:	2306      	movs	r3, #6
 8004366:	e008      	b.n	800437a <HAL_GPIO_Init+0x1fa>
 8004368:	2304      	movs	r3, #4
 800436a:	e006      	b.n	800437a <HAL_GPIO_Init+0x1fa>
 800436c:	2303      	movs	r3, #3
 800436e:	e004      	b.n	800437a <HAL_GPIO_Init+0x1fa>
 8004370:	2302      	movs	r3, #2
 8004372:	e002      	b.n	800437a <HAL_GPIO_Init+0x1fa>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_GPIO_Init+0x1fa>
 8004378:	2300      	movs	r3, #0
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	f002 0203 	and.w	r2, r2, #3
 8004380:	0092      	lsls	r2, r2, #2
 8004382:	4093      	lsls	r3, r2
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800438a:	4937      	ldr	r1, [pc, #220]	; (8004468 <HAL_GPIO_Init+0x2e8>)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	3302      	adds	r3, #2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004398:	4b39      	ldr	r3, [pc, #228]	; (8004480 <HAL_GPIO_Init+0x300>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043bc:	4a30      	ldr	r2, [pc, #192]	; (8004480 <HAL_GPIO_Init+0x300>)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80043c2:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <HAL_GPIO_Init+0x300>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4013      	ands	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043e6:	4a26      	ldr	r2, [pc, #152]	; (8004480 <HAL_GPIO_Init+0x300>)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043ec:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_GPIO_Init+0x300>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <HAL_GPIO_Init+0x300>)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_GPIO_Init+0x300>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	43db      	mvns	r3, r3
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800443a:	4a11      	ldr	r2, [pc, #68]	; (8004480 <HAL_GPIO_Init+0x300>)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	3301      	adds	r3, #1
 8004444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	f47f ae9d 	bne.w	8004190 <HAL_GPIO_Init+0x10>
  }
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	40010000 	.word	0x40010000
 800446c:	48000400 	.word	0x48000400
 8004470:	48000800 	.word	0x48000800
 8004474:	48000c00 	.word	0x48000c00
 8004478:	48001000 	.word	0x48001000
 800447c:	48001400 	.word	0x48001400
 8004480:	40010400 	.word	0x40010400

08004484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800449a:	4a05      	ldr	r2, [pc, #20]	; (80044b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc ffec 	bl	8001480 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40010400 	.word	0x40010400

080044b4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e0bb      	b.n	8004642 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d101      	bne.n	80044da <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0b3      	b.n	8004642 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d101      	bne.n	80044ea <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e0ab      	b.n	8004642 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ea:	4b58      	ldr	r3, [pc, #352]	; (800464c <HAL_OPAMP_Init+0x198>)
 80044ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ee:	4a57      	ldr	r2, [pc, #348]	; (800464c <HAL_OPAMP_Init+0x198>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6613      	str	r3, [r2, #96]	; 0x60
 80044f6:	4b55      	ldr	r3, [pc, #340]	; (800464c <HAL_OPAMP_Init+0x198>)
 80044f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fd f948 	bl	80017ac <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d003      	beq.n	800452c <HAL_OPAMP_Init+0x78>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b60      	cmp	r3, #96	; 0x60
 800452a:	d133      	bne.n	8004594 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 0110 	bic.w	r1, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_OPAMP_Init+0x19c>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6851      	ldr	r1, [r2, #4]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6892      	ldr	r2, [r2, #8]
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6912      	ldr	r2, [r2, #16]
 800455a:	430a      	orrs	r2, r1
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	7d09      	ldrb	r1, [r1, #20]
 8004560:	2901      	cmp	r1, #1
 8004562:	d102      	bne.n	800456a <HAL_OPAMP_Init+0xb6>
 8004564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004568:	e000      	b.n	800456c <HAL_OPAMP_Init+0xb8>
 800456a:	2100      	movs	r1, #0
 800456c:	4311      	orrs	r1, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004572:	4311      	orrs	r1, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004578:	4311      	orrs	r1, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800457e:	04d2      	lsls	r2, r2, #19
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004586:	0612      	lsls	r2, r2, #24
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	430b      	orrs	r3, r1
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e035      	b.n	8004600 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 0110 	bic.w	r1, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_OPAMP_Init+0x19c>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6851      	ldr	r1, [r2, #4]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6892      	ldr	r2, [r2, #8]
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	4311      	orrs	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6912      	ldr	r2, [r2, #16]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	7d09      	ldrb	r1, [r1, #20]
 80045ce:	2901      	cmp	r1, #1
 80045d0:	d102      	bne.n	80045d8 <HAL_OPAMP_Init+0x124>
 80045d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045d6:	e000      	b.n	80045da <HAL_OPAMP_Init+0x126>
 80045d8:	2100      	movs	r1, #0
 80045da:	4311      	orrs	r1, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045e0:	4311      	orrs	r1, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045e6:	4311      	orrs	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045ec:	04d2      	lsls	r2, r2, #19
 80045ee:	4311      	orrs	r1, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f4:	0612      	lsls	r2, r2, #24
 80045f6:	4311      	orrs	r1, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	db10      	blt.n	800462c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004640:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	e0003e11 	.word	0xe0003e11

08004654 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	e01d      	b.n	80046a8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b05      	cmp	r3, #5
 8004676:	d102      	bne.n	800467e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e014      	b.n	80046a8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10c      	bne.n	80046a4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2204      	movs	r2, #4
 800469e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80046a2:	e001      	b.n	80046a8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08c      	sub	sp, #48	; 0x30
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e2df      	b.n	8004c98 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d001      	beq.n	80046e8 <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e2d7      	b.n	8004c98 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d001      	beq.n	80046f8 <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e2cf      	b.n	8004c98 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d001      	beq.n	8004708 <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e2c7      	b.n	8004c98 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0202 	orr.w	r2, r2, #2
 8004716:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0202 	orr.w	r2, r2, #2
 8004726:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0202 	orr.w	r2, r2, #2
 8004736:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0210 	orr.w	r2, r2, #16
 8004746:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0210 	orr.w	r2, r2, #16
 8004756:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0210 	orr.w	r2, r2, #16
 8004766:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004776:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004786:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004796:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80047a6:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80047b6:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80047c6:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 80047f8:	2310      	movs	r3, #16
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 80047fc:	2310      	movs	r3, #16
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 8004800:	2310      	movs	r3, #16
 8004802:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 8004804:	2308      	movs	r3, #8
 8004806:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8004808:	e056      	b.n	80048b8 <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	061a      	lsls	r2, r3, #24
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	061a      	lsls	r2, r3, #24
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	061a      	lsls	r2, r3, #24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800484c:	2002      	movs	r0, #2
 800484e:	f7fd fc1f 	bl	8002090 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	4413      	add	r3, r2
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004868:	e003      	b.n	8004872 <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 800486a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8004880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	4413      	add	r3, r2
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
 8004888:	e003      	b.n	8004892 <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 800488a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	4413      	add	r3, r2
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	e003      	b.n	80048b2 <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1a5      	bne.n	800480a <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	061a      	lsls	r2, r3, #24
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	061a      	lsls	r2, r3, #24
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	061a      	lsls	r2, r3, #24
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8004900:	2002      	movs	r0, #2
 8004902:	f7fd fbc5 	bl	8002090 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	3301      	adds	r3, #1
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	061a      	lsls	r2, r3, #24
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	3301      	adds	r3, #1
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	061a      	lsls	r2, r3, #24
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00d      	beq.n	8004984 <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	3301      	adds	r3, #1
 800496c:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	061a      	lsls	r2, r3, #24
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004996:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049aa:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049be:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 80049c0:	2310      	movs	r3, #16
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 80049c4:	2310      	movs	r3, #16
 80049c6:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 80049c8:	2310      	movs	r3, #16
 80049ca:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 80049cc:	2308      	movs	r3, #8
 80049ce:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 80049d0:	e056      	b.n	8004a80 <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	04da      	lsls	r2, r3, #19
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	04da      	lsls	r2, r3, #19
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	04da      	lsls	r2, r3, #19
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8004a14:	2002      	movs	r0, #2
 8004a16:	f7fd fb3b 	bl	8002090 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d004      	beq.n	8004a32 <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 8004a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a30:	e003      	b.n	8004a3a <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 8004a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 8004a48:	6a3a      	ldr	r2, [r7, #32]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	e003      	b.n	8004a5a <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	e003      	b.n	8004a7a <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1a5      	bne.n	80049d2 <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	04da      	lsls	r2, r3, #19
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	04da      	lsls	r2, r3, #19
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	04da      	lsls	r2, r3, #19
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8004ac8:	2002      	movs	r0, #2
 8004aca:	f7fd fae1 	bl	8002090 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	3301      	adds	r3, #1
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	04da      	lsls	r2, r3, #19
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00d      	beq.n	8004b22 <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	04da      	lsls	r2, r3, #19
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	3301      	adds	r3, #1
 8004b34:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	04da      	lsls	r2, r3, #19
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b7a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0202 	bic.w	r2, r2, #2
 8004bba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0202 	bic.w	r2, r2, #2
 8004bca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0202 	bic.w	r2, r2, #2
 8004bda:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be6:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6a3a      	ldr	r2, [r7, #32]
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2210      	movs	r2, #16
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2210      	movs	r2, #16
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2210      	movs	r2, #16
 8004c10:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	061a      	lsls	r2, r3, #24
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	061a      	lsls	r2, r3, #24
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	061a      	lsls	r2, r3, #24
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	04da      	lsls	r2, r3, #19
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	04da      	lsls	r2, r3, #19
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	04da      	lsls	r2, r3, #19
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3730      	adds	r7, #48	; 0x30
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d141      	bne.n	8004d32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cae:	4b4b      	ldr	r3, [pc, #300]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cba:	d131      	bne.n	8004d20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cbc:	4b47      	ldr	r3, [pc, #284]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc2:	4a46      	ldr	r2, [pc, #280]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ccc:	4b43      	ldr	r3, [pc, #268]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cd4:	4a41      	ldr	r2, [pc, #260]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cdc:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2232      	movs	r2, #50	; 0x32
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	4a3f      	ldr	r2, [pc, #252]	; (8004de4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	0c9b      	lsrs	r3, r3, #18
 8004cee:	3301      	adds	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cf2:	e002      	b.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cfa:	4b38      	ldr	r3, [pc, #224]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d102      	bne.n	8004d0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f2      	bne.n	8004cf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d0e:	4b33      	ldr	r3, [pc, #204]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1a:	d158      	bne.n	8004dce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e057      	b.n	8004dd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d20:	4b2e      	ldr	r3, [pc, #184]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d26:	4a2d      	ldr	r2, [pc, #180]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d30:	e04d      	b.n	8004dce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d38:	d141      	bne.n	8004dbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d3a:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d46:	d131      	bne.n	8004dac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d48:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d4e:	4a23      	ldr	r2, [pc, #140]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d58:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d60:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d68:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2232      	movs	r2, #50	; 0x32
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	4a1c      	ldr	r2, [pc, #112]	; (8004de4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	0c9b      	lsrs	r3, r3, #18
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d7e:	e002      	b.n	8004d86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d92:	d102      	bne.n	8004d9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f2      	bne.n	8004d80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d9a:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da6:	d112      	bne.n	8004dce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e011      	b.n	8004dd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db2:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004dbc:	e007      	b.n	8004dce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004dbe:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dc6:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dcc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40007000 	.word	0x40007000
 8004de0:	20000000 	.word	0x20000000
 8004de4:	431bde83 	.word	0x431bde83

08004de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e308      	b.n	800540c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d075      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e06:	4ba3      	ldr	r3, [pc, #652]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e10:	4ba0      	ldr	r3, [pc, #640]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b0c      	cmp	r3, #12
 8004e1e:	d102      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3e>
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d002      	beq.n	8004e2c <HAL_RCC_OscConfig+0x44>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d10b      	bne.n	8004e44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2c:	4b99      	ldr	r3, [pc, #612]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05b      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x108>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d157      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e2e3      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d106      	bne.n	8004e5c <HAL_RCC_OscConfig+0x74>
 8004e4e:	4b91      	ldr	r3, [pc, #580]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a90      	ldr	r2, [pc, #576]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e01d      	b.n	8004e98 <HAL_RCC_OscConfig+0xb0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x98>
 8004e66:	4b8b      	ldr	r3, [pc, #556]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a8a      	ldr	r2, [pc, #552]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b88      	ldr	r3, [pc, #544]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a87      	ldr	r2, [pc, #540]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCC_OscConfig+0xb0>
 8004e80:	4b84      	ldr	r3, [pc, #528]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a83      	ldr	r2, [pc, #524]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b81      	ldr	r3, [pc, #516]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a80      	ldr	r2, [pc, #512]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fd f8ea 	bl	8002078 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea8:	f7fd f8e6 	bl	8002078 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e2a8      	b.n	800540c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eba:	4b76      	ldr	r3, [pc, #472]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0xc0>
 8004ec6:	e014      	b.n	8004ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fd f8d6 	bl	8002078 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fd f8d2 	bl	8002078 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e294      	b.n	800540c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ee2:	4b6c      	ldr	r3, [pc, #432]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xe8>
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d075      	beq.n	8004fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004efe:	4b65      	ldr	r3, [pc, #404]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f08:	4b62      	ldr	r3, [pc, #392]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b0c      	cmp	r3, #12
 8004f16:	d102      	bne.n	8004f1e <HAL_RCC_OscConfig+0x136>
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d002      	beq.n	8004f24 <HAL_RCC_OscConfig+0x13c>
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d11f      	bne.n	8004f64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f24:	4b5b      	ldr	r3, [pc, #364]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_OscConfig+0x154>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e267      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3c:	4b55      	ldr	r3, [pc, #340]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	061b      	lsls	r3, r3, #24
 8004f4a:	4952      	ldr	r1, [pc, #328]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f50:	4b51      	ldr	r3, [pc, #324]	; (8005098 <HAL_RCC_OscConfig+0x2b0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fd f843 	bl	8001fe0 <HAL_InitTick>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d043      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e253      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d023      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f6c:	4b49      	ldr	r3, [pc, #292]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a48      	ldr	r2, [pc, #288]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fd f87e 	bl	8002078 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f80:	f7fd f87a 	bl	8002078 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e23c      	b.n	800540c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f92:	4b40      	ldr	r3, [pc, #256]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9e:	4b3d      	ldr	r3, [pc, #244]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	061b      	lsls	r3, r3, #24
 8004fac:	4939      	ldr	r1, [pc, #228]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	604b      	str	r3, [r1, #4]
 8004fb2:	e01a      	b.n	8004fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb4:	4b37      	ldr	r3, [pc, #220]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a36      	ldr	r2, [pc, #216]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fd f85a 	bl	8002078 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc8:	f7fd f856 	bl	8002078 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e218      	b.n	800540c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fda:	4b2e      	ldr	r3, [pc, #184]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x1e0>
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fe8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d03c      	beq.n	8005070 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d01c      	beq.n	8005038 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffe:	4b25      	ldr	r3, [pc, #148]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005004:	4a23      	ldr	r2, [pc, #140]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fd f833 	bl	8002078 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005016:	f7fd f82f 	bl	8002078 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e1f1      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005028:	4b1a      	ldr	r3, [pc, #104]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 800502a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0ef      	beq.n	8005016 <HAL_RCC_OscConfig+0x22e>
 8005036:	e01b      	b.n	8005070 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005038:	4b16      	ldr	r3, [pc, #88]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 800503a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800503e:	4a15      	ldr	r2, [pc, #84]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fd f816 	bl	8002078 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005050:	f7fd f812 	bl	8002078 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1d4      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ef      	bne.n	8005050 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80ab 	beq.w	80051d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005082:	4b04      	ldr	r3, [pc, #16]	; (8005094 <HAL_RCC_OscConfig+0x2ac>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_RCC_OscConfig+0x2b4>
 800508e:	2301      	movs	r3, #1
 8005090:	e005      	b.n	800509e <HAL_RCC_OscConfig+0x2b6>
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	20000004 	.word	0x20000004
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00d      	beq.n	80050be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a2:	4baf      	ldr	r3, [pc, #700]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	4aae      	ldr	r2, [pc, #696]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6593      	str	r3, [r2, #88]	; 0x58
 80050ae:	4bac      	ldr	r3, [pc, #688]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80050ba:	2301      	movs	r3, #1
 80050bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050be:	4ba9      	ldr	r3, [pc, #676]	; (8005364 <HAL_RCC_OscConfig+0x57c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d118      	bne.n	80050fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ca:	4ba6      	ldr	r3, [pc, #664]	; (8005364 <HAL_RCC_OscConfig+0x57c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4aa5      	ldr	r2, [pc, #660]	; (8005364 <HAL_RCC_OscConfig+0x57c>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050d6:	f7fc ffcf 	bl	8002078 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050de:	f7fc ffcb 	bl	8002078 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e18d      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f0:	4b9c      	ldr	r3, [pc, #624]	; (8005364 <HAL_RCC_OscConfig+0x57c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d108      	bne.n	8005116 <HAL_RCC_OscConfig+0x32e>
 8005104:	4b96      	ldr	r3, [pc, #600]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	4a95      	ldr	r2, [pc, #596]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005114:	e024      	b.n	8005160 <HAL_RCC_OscConfig+0x378>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b05      	cmp	r3, #5
 800511c:	d110      	bne.n	8005140 <HAL_RCC_OscConfig+0x358>
 800511e:	4b90      	ldr	r3, [pc, #576]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	4a8e      	ldr	r2, [pc, #568]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005126:	f043 0304 	orr.w	r3, r3, #4
 800512a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800512e:	4b8c      	ldr	r3, [pc, #560]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005134:	4a8a      	ldr	r2, [pc, #552]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800513e:	e00f      	b.n	8005160 <HAL_RCC_OscConfig+0x378>
 8005140:	4b87      	ldr	r3, [pc, #540]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	4a86      	ldr	r2, [pc, #536]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005150:	4b83      	ldr	r3, [pc, #524]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005156:	4a82      	ldr	r2, [pc, #520]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d016      	beq.n	8005196 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005168:	f7fc ff86 	bl	8002078 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800516e:	e00a      	b.n	8005186 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005170:	f7fc ff82 	bl	8002078 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	; 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e142      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005186:	4b76      	ldr	r3, [pc, #472]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ed      	beq.n	8005170 <HAL_RCC_OscConfig+0x388>
 8005194:	e015      	b.n	80051c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005196:	f7fc ff6f 	bl	8002078 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fc ff6b 	bl	8002078 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e12b      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051b4:	4b6a      	ldr	r3, [pc, #424]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ed      	bne.n	800519e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051c2:	7ffb      	ldrb	r3, [r7, #31]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d105      	bne.n	80051d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c8:	4b65      	ldr	r3, [pc, #404]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80051ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051cc:	4a64      	ldr	r2, [pc, #400]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80051ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d03c      	beq.n	800525a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01c      	beq.n	8005222 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051e8:	4b5d      	ldr	r3, [pc, #372]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80051ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051ee:	4a5c      	ldr	r2, [pc, #368]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80051f0:	f043 0301 	orr.w	r3, r3, #1
 80051f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fc ff3e 	bl	8002078 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005200:	f7fc ff3a 	bl	8002078 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e0fc      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005212:	4b53      	ldr	r3, [pc, #332]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0ef      	beq.n	8005200 <HAL_RCC_OscConfig+0x418>
 8005220:	e01b      	b.n	800525a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005222:	4b4f      	ldr	r3, [pc, #316]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005228:	4a4d      	ldr	r2, [pc, #308]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005232:	f7fc ff21 	bl	8002078 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800523a:	f7fc ff1d 	bl	8002078 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e0df      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800524c:	4b44      	ldr	r3, [pc, #272]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 800524e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1ef      	bne.n	800523a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80d3 	beq.w	800540a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005264:	4b3e      	ldr	r3, [pc, #248]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b0c      	cmp	r3, #12
 800526e:	f000 808d 	beq.w	800538c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d15a      	bne.n	8005330 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527a:	4b39      	ldr	r3, [pc, #228]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a38      	ldr	r2, [pc, #224]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005280:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fc fef7 	bl	8002078 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528e:	f7fc fef3 	bl	8002078 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e0b5      	b.n	800540c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a0:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f0      	bne.n	800528e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052ac:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <HAL_RCC_OscConfig+0x580>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6a11      	ldr	r1, [r2, #32]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052bc:	3a01      	subs	r2, #1
 80052be:	0112      	lsls	r2, r2, #4
 80052c0:	4311      	orrs	r1, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80052c6:	0212      	lsls	r2, r2, #8
 80052c8:	4311      	orrs	r1, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052ce:	0852      	lsrs	r2, r2, #1
 80052d0:	3a01      	subs	r2, #1
 80052d2:	0552      	lsls	r2, r2, #21
 80052d4:	4311      	orrs	r1, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052da:	0852      	lsrs	r2, r2, #1
 80052dc:	3a01      	subs	r2, #1
 80052de:	0652      	lsls	r2, r2, #25
 80052e0:	4311      	orrs	r1, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052e6:	06d2      	lsls	r2, r2, #27
 80052e8:	430a      	orrs	r2, r1
 80052ea:	491d      	ldr	r1, [pc, #116]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80052f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052fc:	4b18      	ldr	r3, [pc, #96]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a17      	ldr	r2, [pc, #92]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005306:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fc feb6 	bl	8002078 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fc feb2 	bl	8002078 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e074      	b.n	800540c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x528>
 800532e:	e06c      	b.n	800540a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a07      	ldr	r2, [pc, #28]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4a04      	ldr	r2, [pc, #16]	; (8005360 <HAL_RCC_OscConfig+0x578>)
 800534e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005356:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fc fe8e 	bl	8002078 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800535e:	e00e      	b.n	800537e <HAL_RCC_OscConfig+0x596>
 8005360:	40021000 	.word	0x40021000
 8005364:	40007000 	.word	0x40007000
 8005368:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536c:	f7fc fe84 	bl	8002078 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e046      	b.n	800540c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800537e:	4b25      	ldr	r3, [pc, #148]	; (8005414 <HAL_RCC_OscConfig+0x62c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x584>
 800538a:	e03e      	b.n	800540a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e039      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005398:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCC_OscConfig+0x62c>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f003 0203 	and.w	r2, r3, #3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d12c      	bne.n	8005406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	3b01      	subs	r3, #1
 80053b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d123      	bne.n	8005406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d11b      	bne.n	8005406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d113      	bne.n	8005406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	3b01      	subs	r3, #1
 80053ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d109      	bne.n	8005406 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	3b01      	subs	r3, #1
 8005400:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005402:	429a      	cmp	r2, r3
 8005404:	d001      	beq.n	800540a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3720      	adds	r7, #32
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40021000 	.word	0x40021000

08005418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e11e      	b.n	800566e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005430:	4b91      	ldr	r3, [pc, #580]	; (8005678 <HAL_RCC_ClockConfig+0x260>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d910      	bls.n	8005460 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543e:	4b8e      	ldr	r3, [pc, #568]	; (8005678 <HAL_RCC_ClockConfig+0x260>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f023 020f 	bic.w	r2, r3, #15
 8005446:	498c      	ldr	r1, [pc, #560]	; (8005678 <HAL_RCC_ClockConfig+0x260>)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b8a      	ldr	r3, [pc, #552]	; (8005678 <HAL_RCC_ClockConfig+0x260>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e106      	b.n	800566e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d073      	beq.n	8005554 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d129      	bne.n	80054c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005474:	4b81      	ldr	r3, [pc, #516]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0f4      	b.n	800566e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005484:	f000 f99e 	bl	80057c4 <RCC_GetSysClockFreqFromPLLSource>
 8005488:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4a7c      	ldr	r2, [pc, #496]	; (8005680 <HAL_RCC_ClockConfig+0x268>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d93f      	bls.n	8005512 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005492:	4b7a      	ldr	r3, [pc, #488]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d033      	beq.n	8005512 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d12f      	bne.n	8005512 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054b2:	4b72      	ldr	r3, [pc, #456]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ba:	4a70      	ldr	r2, [pc, #448]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 80054bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e024      	b.n	8005512 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d107      	bne.n	80054e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054d0:	4b6a      	ldr	r3, [pc, #424]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0c6      	b.n	800566e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054e0:	4b66      	ldr	r3, [pc, #408]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0be      	b.n	800566e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80054f0:	f000 f8ce 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 80054f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4a61      	ldr	r2, [pc, #388]	; (8005680 <HAL_RCC_ClockConfig+0x268>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d909      	bls.n	8005512 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054fe:	4b5f      	ldr	r3, [pc, #380]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005506:	4a5d      	ldr	r2, [pc, #372]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005512:	4b5a      	ldr	r3, [pc, #360]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f023 0203 	bic.w	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4957      	ldr	r1, [pc, #348]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005520:	4313      	orrs	r3, r2
 8005522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005524:	f7fc fda8 	bl	8002078 <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552a:	e00a      	b.n	8005542 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800552c:	f7fc fda4 	bl	8002078 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	; 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e095      	b.n	800566e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005542:	4b4e      	ldr	r3, [pc, #312]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 020c 	and.w	r2, r3, #12
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	429a      	cmp	r2, r3
 8005552:	d1eb      	bne.n	800552c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d023      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800556c:	4b43      	ldr	r3, [pc, #268]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a42      	ldr	r2, [pc, #264]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005572:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005576:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005584:	4b3d      	ldr	r3, [pc, #244]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800558c:	4a3b      	ldr	r2, [pc, #236]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 800558e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005592:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005594:	4b39      	ldr	r3, [pc, #228]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	4936      	ldr	r1, [pc, #216]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	608b      	str	r3, [r1, #8]
 80055a6:	e008      	b.n	80055ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2b80      	cmp	r3, #128	; 0x80
 80055ac:	d105      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055ae:	4b33      	ldr	r3, [pc, #204]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	4a32      	ldr	r2, [pc, #200]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 80055b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055ba:	4b2f      	ldr	r3, [pc, #188]	; (8005678 <HAL_RCC_ClockConfig+0x260>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d21d      	bcs.n	8005604 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c8:	4b2b      	ldr	r3, [pc, #172]	; (8005678 <HAL_RCC_ClockConfig+0x260>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f023 020f 	bic.w	r2, r3, #15
 80055d0:	4929      	ldr	r1, [pc, #164]	; (8005678 <HAL_RCC_ClockConfig+0x260>)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055d8:	f7fc fd4e 	bl	8002078 <HAL_GetTick>
 80055dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055de:	e00a      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e0:	f7fc fd4a 	bl	8002078 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e03b      	b.n	800566e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_RCC_ClockConfig+0x260>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d1ed      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005610:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4917      	ldr	r1, [pc, #92]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	490f      	ldr	r1, [pc, #60]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 800563e:	4313      	orrs	r3, r2
 8005640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005642:	f000 f825 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 8005646:	4601      	mov	r1, r0
 8005648:	4b0c      	ldr	r3, [pc, #48]	; (800567c <HAL_RCC_ClockConfig+0x264>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <HAL_RCC_ClockConfig+0x26c>)
 8005654:	5cd3      	ldrb	r3, [r2, r3]
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	fa21 f303 	lsr.w	r3, r1, r3
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <HAL_RCC_ClockConfig+0x270>)
 8005660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <HAL_RCC_ClockConfig+0x274>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fc fcba 	bl	8001fe0 <HAL_InitTick>
 800566c:	4603      	mov	r3, r0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40022000 	.word	0x40022000
 800567c:	40021000 	.word	0x40021000
 8005680:	04c4b400 	.word	0x04c4b400
 8005684:	08008e08 	.word	0x08008e08
 8005688:	20000000 	.word	0x20000000
 800568c:	20000004 	.word	0x20000004

08005690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005696:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d102      	bne.n	80056a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056a2:	4b2a      	ldr	r3, [pc, #168]	; (800574c <HAL_RCC_GetSysClockFreq+0xbc>)
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	e047      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 030c 	and.w	r3, r3, #12
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d102      	bne.n	80056ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056b4:	4b26      	ldr	r3, [pc, #152]	; (8005750 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	e03e      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b0c      	cmp	r3, #12
 80056c4:	d136      	bne.n	8005734 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056c6:	4b20      	ldr	r3, [pc, #128]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056d0:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	3301      	adds	r3, #1
 80056dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d10c      	bne.n	80056fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056e4:	4a1a      	ldr	r2, [pc, #104]	; (8005750 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	4a16      	ldr	r2, [pc, #88]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ee:	68d2      	ldr	r2, [r2, #12]
 80056f0:	0a12      	lsrs	r2, r2, #8
 80056f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	617b      	str	r3, [r7, #20]
      break;
 80056fc:	e00c      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056fe:	4a13      	ldr	r2, [pc, #76]	; (800574c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	fbb2 f3f3 	udiv	r3, r2, r3
 8005706:	4a10      	ldr	r2, [pc, #64]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005708:	68d2      	ldr	r2, [r2, #12]
 800570a:	0a12      	lsrs	r2, r2, #8
 800570c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005710:	fb02 f303 	mul.w	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]
      break;
 8005716:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb8>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	0e5b      	lsrs	r3, r3, #25
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	3301      	adds	r3, #1
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	e001      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005738:	693b      	ldr	r3, [r7, #16]
}
 800573a:	4618      	mov	r0, r3
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40021000 	.word	0x40021000
 800574c:	00f42400 	.word	0x00f42400
 8005750:	007a1200 	.word	0x007a1200

08005754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <HAL_RCC_GetHCLKFreq+0x14>)
 800575a:	681b      	ldr	r3, [r3, #0]
}
 800575c:	4618      	mov	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	20000000 	.word	0x20000000

0800576c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005770:	f7ff fff0 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 8005774:	4601      	mov	r1, r0
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	4a04      	ldr	r2, [pc, #16]	; (8005794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005782:	5cd3      	ldrb	r3, [r2, r3]
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	fa21 f303 	lsr.w	r3, r1, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40021000 	.word	0x40021000
 8005794:	08008e18 	.word	0x08008e18

08005798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800579c:	f7ff ffda 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 80057a0:	4601      	mov	r1, r0
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	0adb      	lsrs	r3, r3, #11
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057ae:	5cd3      	ldrb	r3, [r2, r3]
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000
 80057c0:	08008e18 	.word	0x08008e18

080057c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ca:	4b1e      	ldr	r3, [pc, #120]	; (8005844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057d4:	4b1b      	ldr	r3, [pc, #108]	; (8005844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d10c      	bne.n	8005802 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057e8:	4a17      	ldr	r2, [pc, #92]	; (8005848 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	4a14      	ldr	r2, [pc, #80]	; (8005844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057f2:	68d2      	ldr	r2, [r2, #12]
 80057f4:	0a12      	lsrs	r2, r2, #8
 80057f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	617b      	str	r3, [r7, #20]
    break;
 8005800:	e00c      	b.n	800581c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005802:	4a12      	ldr	r2, [pc, #72]	; (800584c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	4a0e      	ldr	r2, [pc, #56]	; (8005844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800580c:	68d2      	ldr	r2, [r2, #12]
 800580e:	0a12      	lsrs	r2, r2, #8
 8005810:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
    break;
 800581a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800581c:	4b09      	ldr	r3, [pc, #36]	; (8005844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	0e5b      	lsrs	r3, r3, #25
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	3301      	adds	r3, #1
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	fbb2 f3f3 	udiv	r3, r2, r3
 8005834:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005836:	687b      	ldr	r3, [r7, #4]
}
 8005838:	4618      	mov	r0, r3
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	40021000 	.word	0x40021000
 8005848:	007a1200 	.word	0x007a1200
 800584c:	00f42400 	.word	0x00f42400

08005850 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005858:	2300      	movs	r3, #0
 800585a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800585c:	2300      	movs	r3, #0
 800585e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8098 	beq.w	800599e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800586e:	2300      	movs	r3, #0
 8005870:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005872:	4b43      	ldr	r3, [pc, #268]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10d      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800587e:	4b40      	ldr	r3, [pc, #256]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	4a3f      	ldr	r2, [pc, #252]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005888:	6593      	str	r3, [r2, #88]	; 0x58
 800588a:	4b3d      	ldr	r3, [pc, #244]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005896:	2301      	movs	r3, #1
 8005898:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800589a:	4b3a      	ldr	r3, [pc, #232]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a39      	ldr	r2, [pc, #228]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058a6:	f7fc fbe7 	bl	8002078 <HAL_GetTick>
 80058aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058ac:	e009      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ae:	f7fc fbe3 	bl	8002078 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d902      	bls.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	74fb      	strb	r3, [r7, #19]
        break;
 80058c0:	e005      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058c2:	4b30      	ldr	r3, [pc, #192]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0ef      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80058ce:	7cfb      	ldrb	r3, [r7, #19]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d159      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058d4:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01e      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d019      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058f0:	4b23      	ldr	r3, [pc, #140]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058fc:	4b20      	ldr	r3, [pc, #128]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	4a1f      	ldr	r2, [pc, #124]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800590c:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800591c:	4a18      	ldr	r2, [pc, #96]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d016      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592e:	f7fc fba3 	bl	8002078 <HAL_GetTick>
 8005932:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005934:	e00b      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005936:	f7fc fb9f 	bl	8002078 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	f241 3288 	movw	r2, #5000	; 0x1388
 8005944:	4293      	cmp	r3, r2
 8005946:	d902      	bls.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	74fb      	strb	r3, [r7, #19]
            break;
 800594c:	e006      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ec      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800595c:	7cfb      	ldrb	r3, [r7, #19]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10b      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005962:	4b07      	ldr	r3, [pc, #28]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	4903      	ldr	r1, [pc, #12]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005978:	e008      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800597a:	7cfb      	ldrb	r3, [r7, #19]
 800597c:	74bb      	strb	r3, [r7, #18]
 800597e:	e005      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005980:	40021000 	.word	0x40021000
 8005984:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800598c:	7c7b      	ldrb	r3, [r7, #17]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d105      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005992:	4ba6      	ldr	r3, [pc, #664]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005996:	4aa5      	ldr	r2, [pc, #660]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059aa:	4ba0      	ldr	r3, [pc, #640]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f023 0203 	bic.w	r2, r3, #3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	499c      	ldr	r1, [pc, #624]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059cc:	4b97      	ldr	r3, [pc, #604]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f023 020c 	bic.w	r2, r3, #12
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	4994      	ldr	r1, [pc, #592]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ee:	4b8f      	ldr	r3, [pc, #572]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	498b      	ldr	r1, [pc, #556]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a10:	4b86      	ldr	r3, [pc, #536]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	4983      	ldr	r1, [pc, #524]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a32:	4b7e      	ldr	r3, [pc, #504]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	497a      	ldr	r1, [pc, #488]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a54:	4b75      	ldr	r3, [pc, #468]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	4972      	ldr	r1, [pc, #456]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a76:	4b6d      	ldr	r3, [pc, #436]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	4969      	ldr	r1, [pc, #420]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a98:	4b64      	ldr	r3, [pc, #400]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	4961      	ldr	r1, [pc, #388]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aba:	4b5c      	ldr	r3, [pc, #368]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	4958      	ldr	r1, [pc, #352]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d015      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005adc:	4b53      	ldr	r3, [pc, #332]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	4950      	ldr	r1, [pc, #320]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afa:	d105      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005afc:	4b4b      	ldr	r3, [pc, #300]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4a4a      	ldr	r2, [pc, #296]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d015      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b14:	4b45      	ldr	r3, [pc, #276]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	4942      	ldr	r1, [pc, #264]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b32:	d105      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b34:	4b3d      	ldr	r3, [pc, #244]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	4a3c      	ldr	r2, [pc, #240]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b3e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d015      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b4c:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	4934      	ldr	r1, [pc, #208]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b6a:	d105      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b6c:	4b2f      	ldr	r3, [pc, #188]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4a2e      	ldr	r2, [pc, #184]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d015      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b84:	4b29      	ldr	r3, [pc, #164]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	4926      	ldr	r1, [pc, #152]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba2:	d105      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba4:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d015      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bbc:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	4918      	ldr	r1, [pc, #96]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bda:	d105      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d015      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bf4:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	490a      	ldr	r1, [pc, #40]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c12:	d105      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c20:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000

08005c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e049      	b.n	8005cd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fb ffec 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f000 fc34 	bl	80064dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d001      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e021      	b.n	8005d3c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <HAL_TIM_Base_Start_IT+0x68>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b06      	cmp	r3, #6
 8005d20:	d00b      	beq.n	8005d3a <HAL_TIM_Base_Start_IT+0x5a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d28:	d007      	beq.n	8005d3a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0201 	orr.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	00010007 	.word	0x00010007

08005d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e049      	b.n	8005df2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f841 	bl	8005dfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f000 fba6 	bl	80064dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <HAL_TIM_PWM_Start+0x24>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	bf14      	ite	ne
 8005e2c:	2301      	movne	r3, #1
 8005e2e:	2300      	moveq	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	e03c      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d109      	bne.n	8005e4e <HAL_TIM_PWM_Start+0x3e>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	bf14      	ite	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	2300      	moveq	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e02f      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d109      	bne.n	8005e68 <HAL_TIM_PWM_Start+0x58>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	bf14      	ite	ne
 8005e60:	2301      	movne	r3, #1
 8005e62:	2300      	moveq	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e022      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b0c      	cmp	r3, #12
 8005e6c:	d109      	bne.n	8005e82 <HAL_TIM_PWM_Start+0x72>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	bf14      	ite	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	2300      	moveq	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	e015      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d109      	bne.n	8005e9c <HAL_TIM_PWM_Start+0x8c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	bf14      	ite	ne
 8005e94:	2301      	movne	r3, #1
 8005e96:	2300      	moveq	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e008      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e06e      	b.n	8005f94 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0xb6>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec4:	e023      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d104      	bne.n	8005ed6 <HAL_TIM_PWM_Start+0xc6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed4:	e01b      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d104      	bne.n	8005ee6 <HAL_TIM_PWM_Start+0xd6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee4:	e013      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_PWM_Start+0xe6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef4:	e00b      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_PWM_Start+0xf6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f04:	e003      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 ff02 	bl	8006d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <HAL_TIM_PWM_Start+0x18c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x13e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1d      	ldr	r2, [pc, #116]	; (8005fa0 <HAL_TIM_PWM_Start+0x190>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00e      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x13e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <HAL_TIM_PWM_Start+0x194>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d009      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x13e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1a      	ldr	r2, [pc, #104]	; (8005fa8 <HAL_TIM_PWM_Start+0x198>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d004      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x13e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a18      	ldr	r2, [pc, #96]	; (8005fac <HAL_TIM_PWM_Start+0x19c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_PWM_Start+0x142>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <HAL_TIM_PWM_Start+0x144>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <HAL_TIM_PWM_Start+0x1a0>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b06      	cmp	r3, #6
 8005f78:	d00b      	beq.n	8005f92 <HAL_TIM_PWM_Start+0x182>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f80:	d007      	beq.n	8005f92 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0201 	orr.w	r2, r2, #1
 8005f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40013400 	.word	0x40013400
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40014400 	.word	0x40014400
 8005fac:	40014800 	.word	0x40014800
 8005fb0:	00010007 	.word	0x00010007

08005fb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e097      	b.n	80060f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fb fe49 	bl	8001c74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005ff8:	f023 0307 	bic.w	r3, r3, #7
 8005ffc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	4619      	mov	r1, r3
 8006008:	4610      	mov	r0, r2
 800600a:	f000 fa67 	bl	80064dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	4313      	orrs	r3, r2
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006054:	f023 030c 	bic.w	r3, r3, #12
 8006058:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	4313      	orrs	r3, r2
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	011a      	lsls	r2, r3, #4
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	031b      	lsls	r3, r3, #12
 8006084:	4313      	orrs	r3, r2
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006092:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	4313      	orrs	r3, r2
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006116:	2302      	movs	r3, #2
 8006118:	e0fd      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x216>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b14      	cmp	r3, #20
 8006126:	f200 80f0 	bhi.w	800630a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006185 	.word	0x08006185
 8006134:	0800630b 	.word	0x0800630b
 8006138:	0800630b 	.word	0x0800630b
 800613c:	0800630b 	.word	0x0800630b
 8006140:	080061c5 	.word	0x080061c5
 8006144:	0800630b 	.word	0x0800630b
 8006148:	0800630b 	.word	0x0800630b
 800614c:	0800630b 	.word	0x0800630b
 8006150:	08006207 	.word	0x08006207
 8006154:	0800630b 	.word	0x0800630b
 8006158:	0800630b 	.word	0x0800630b
 800615c:	0800630b 	.word	0x0800630b
 8006160:	08006247 	.word	0x08006247
 8006164:	0800630b 	.word	0x0800630b
 8006168:	0800630b 	.word	0x0800630b
 800616c:	0800630b 	.word	0x0800630b
 8006170:	08006289 	.word	0x08006289
 8006174:	0800630b 	.word	0x0800630b
 8006178:	0800630b 	.word	0x0800630b
 800617c:	0800630b 	.word	0x0800630b
 8006180:	080062c9 	.word	0x080062c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fa36 	bl	80065fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0208 	orr.w	r2, r2, #8
 800619e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0204 	bic.w	r2, r2, #4
 80061ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6999      	ldr	r1, [r3, #24]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	619a      	str	r2, [r3, #24]
      break;
 80061c2:	e0a3      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 faa6 	bl	800671c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6999      	ldr	r1, [r3, #24]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	619a      	str	r2, [r3, #24]
      break;
 8006204:	e082      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fb0f 	bl	8006830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0208 	orr.w	r2, r2, #8
 8006220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0204 	bic.w	r2, r2, #4
 8006230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69d9      	ldr	r1, [r3, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	61da      	str	r2, [r3, #28]
      break;
 8006244:	e062      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fb77 	bl	8006940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	021a      	lsls	r2, r3, #8
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	61da      	str	r2, [r3, #28]
      break;
 8006286:	e041      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fbe0 	bl	8006a54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0208 	orr.w	r2, r2, #8
 80062a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0204 	bic.w	r2, r2, #4
 80062b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062c6:	e021      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fc24 	bl	8006b1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006308:	e000      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800630a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop

08006320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIM_ConfigClockSource+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e0c3      	b.n	80064c0 <HAL_TIM_ConfigClockSource+0x1a0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006356:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800635a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006362:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b70      	cmp	r3, #112	; 0x70
 8006372:	d038      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0xc6>
 8006374:	2b70      	cmp	r3, #112	; 0x70
 8006376:	d815      	bhi.n	80063a4 <HAL_TIM_ConfigClockSource+0x84>
 8006378:	2b30      	cmp	r3, #48	; 0x30
 800637a:	f000 808e 	beq.w	800649a <HAL_TIM_ConfigClockSource+0x17a>
 800637e:	2b30      	cmp	r3, #48	; 0x30
 8006380:	d809      	bhi.n	8006396 <HAL_TIM_ConfigClockSource+0x76>
 8006382:	2b10      	cmp	r3, #16
 8006384:	f000 8089 	beq.w	800649a <HAL_TIM_ConfigClockSource+0x17a>
 8006388:	2b20      	cmp	r3, #32
 800638a:	f000 8086 	beq.w	800649a <HAL_TIM_ConfigClockSource+0x17a>
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8083 	beq.w	800649a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006394:	e08b      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006396:	2b50      	cmp	r3, #80	; 0x50
 8006398:	d04f      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x11a>
 800639a:	2b60      	cmp	r3, #96	; 0x60
 800639c:	d05d      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x13a>
 800639e:	2b40      	cmp	r3, #64	; 0x40
 80063a0:	d06b      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80063a2:	e084      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80063a4:	4a48      	ldr	r2, [pc, #288]	; (80064c8 <HAL_TIM_ConfigClockSource+0x1a8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d077      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x17a>
 80063aa:	4a47      	ldr	r2, [pc, #284]	; (80064c8 <HAL_TIM_ConfigClockSource+0x1a8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d809      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0xa4>
 80063b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b4:	d02e      	beq.n	8006414 <HAL_TIM_ConfigClockSource+0xf4>
 80063b6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063ba:	d06e      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x17a>
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c0:	d074      	beq.n	80064ac <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80063c2:	e074      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80063c4:	4a41      	ldr	r2, [pc, #260]	; (80064cc <HAL_TIM_ConfigClockSource+0x1ac>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d067      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x17a>
 80063ca:	4a40      	ldr	r2, [pc, #256]	; (80064cc <HAL_TIM_ConfigClockSource+0x1ac>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d803      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0xb8>
 80063d0:	4a3f      	ldr	r2, [pc, #252]	; (80064d0 <HAL_TIM_ConfigClockSource+0x1b0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d061      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80063d6:	e06a      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80063d8:	4a3e      	ldr	r2, [pc, #248]	; (80064d4 <HAL_TIM_ConfigClockSource+0x1b4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d05d      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x17a>
 80063de:	4a3e      	ldr	r2, [pc, #248]	; (80064d8 <HAL_TIM_ConfigClockSource+0x1b8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d05a      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80063e4:	e063      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6899      	ldr	r1, [r3, #8]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f000 fc73 	bl	8006ce0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006408:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	609a      	str	r2, [r3, #8]
      break;
 8006412:	e04c      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	6899      	ldr	r1, [r3, #8]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f000 fc5c 	bl	8006ce0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006436:	609a      	str	r2, [r3, #8]
      break;
 8006438:	e039      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6859      	ldr	r1, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	461a      	mov	r2, r3
 8006448:	f000 fbce 	bl	8006be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2150      	movs	r1, #80	; 0x50
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fc27 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006458:	e029      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	461a      	mov	r2, r3
 8006468:	f000 fbed 	bl	8006c46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2160      	movs	r1, #96	; 0x60
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fc17 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006478:	e019      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6859      	ldr	r1, [r3, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	461a      	mov	r2, r3
 8006488:	f000 fbae 	bl	8006be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2140      	movs	r1, #64	; 0x40
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fc07 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006498:	e009      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f000 fbfe 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 80064aa:	e000      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80064ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	00100020 	.word	0x00100020
 80064cc:	00100040 	.word	0x00100040
 80064d0:	00100030 	.word	0x00100030
 80064d4:	00100060 	.word	0x00100060
 80064d8:	00100070 	.word	0x00100070

080064dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a3c      	ldr	r2, [pc, #240]	; (80065e0 <TIM_Base_SetConfig+0x104>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00f      	beq.n	8006514 <TIM_Base_SetConfig+0x38>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fa:	d00b      	beq.n	8006514 <TIM_Base_SetConfig+0x38>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a39      	ldr	r2, [pc, #228]	; (80065e4 <TIM_Base_SetConfig+0x108>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_Base_SetConfig+0x38>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a38      	ldr	r2, [pc, #224]	; (80065e8 <TIM_Base_SetConfig+0x10c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0x38>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a37      	ldr	r2, [pc, #220]	; (80065ec <TIM_Base_SetConfig+0x110>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d108      	bne.n	8006526 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2d      	ldr	r2, [pc, #180]	; (80065e0 <TIM_Base_SetConfig+0x104>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01b      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006534:	d017      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2a      	ldr	r2, [pc, #168]	; (80065e4 <TIM_Base_SetConfig+0x108>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a29      	ldr	r2, [pc, #164]	; (80065e8 <TIM_Base_SetConfig+0x10c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00f      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a28      	ldr	r2, [pc, #160]	; (80065ec <TIM_Base_SetConfig+0x110>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00b      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a27      	ldr	r2, [pc, #156]	; (80065f0 <TIM_Base_SetConfig+0x114>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <TIM_Base_SetConfig+0x118>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <TIM_Base_SetConfig+0x11c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d108      	bne.n	8006578 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a10      	ldr	r2, [pc, #64]	; (80065e0 <TIM_Base_SetConfig+0x104>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00f      	beq.n	80065c4 <TIM_Base_SetConfig+0xe8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a11      	ldr	r2, [pc, #68]	; (80065ec <TIM_Base_SetConfig+0x110>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_Base_SetConfig+0xe8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a10      	ldr	r2, [pc, #64]	; (80065f0 <TIM_Base_SetConfig+0x114>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d007      	beq.n	80065c4 <TIM_Base_SetConfig+0xe8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a0f      	ldr	r2, [pc, #60]	; (80065f4 <TIM_Base_SetConfig+0x118>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0xe8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a0e      	ldr	r2, [pc, #56]	; (80065f8 <TIM_Base_SetConfig+0x11c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d103      	bne.n	80065cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	615a      	str	r2, [r3, #20]
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800

080065fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0201 	bic.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 0302 	bic.w	r3, r3, #2
 8006648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a2c      	ldr	r2, [pc, #176]	; (8006708 <TIM_OC1_SetConfig+0x10c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00f      	beq.n	800667c <TIM_OC1_SetConfig+0x80>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a2b      	ldr	r2, [pc, #172]	; (800670c <TIM_OC1_SetConfig+0x110>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00b      	beq.n	800667c <TIM_OC1_SetConfig+0x80>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a2a      	ldr	r2, [pc, #168]	; (8006710 <TIM_OC1_SetConfig+0x114>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d007      	beq.n	800667c <TIM_OC1_SetConfig+0x80>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a29      	ldr	r2, [pc, #164]	; (8006714 <TIM_OC1_SetConfig+0x118>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC1_SetConfig+0x80>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a28      	ldr	r2, [pc, #160]	; (8006718 <TIM_OC1_SetConfig+0x11c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d10c      	bne.n	8006696 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0308 	bic.w	r3, r3, #8
 8006682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f023 0304 	bic.w	r3, r3, #4
 8006694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1b      	ldr	r2, [pc, #108]	; (8006708 <TIM_OC1_SetConfig+0x10c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00f      	beq.n	80066be <TIM_OC1_SetConfig+0xc2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a1a      	ldr	r2, [pc, #104]	; (800670c <TIM_OC1_SetConfig+0x110>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00b      	beq.n	80066be <TIM_OC1_SetConfig+0xc2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a19      	ldr	r2, [pc, #100]	; (8006710 <TIM_OC1_SetConfig+0x114>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <TIM_OC1_SetConfig+0xc2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a18      	ldr	r2, [pc, #96]	; (8006714 <TIM_OC1_SetConfig+0x118>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_OC1_SetConfig+0xc2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a17      	ldr	r2, [pc, #92]	; (8006718 <TIM_OC1_SetConfig+0x11c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d111      	bne.n	80066e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	621a      	str	r2, [r3, #32]
}
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800

0800671c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0210 	bic.w	r2, r3, #16
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0320 	bic.w	r3, r3, #32
 800676a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a28      	ldr	r2, [pc, #160]	; (800681c <TIM_OC2_SetConfig+0x100>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC2_SetConfig+0x6c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a27      	ldr	r2, [pc, #156]	; (8006820 <TIM_OC2_SetConfig+0x104>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d10d      	bne.n	80067a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800678e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1d      	ldr	r2, [pc, #116]	; (800681c <TIM_OC2_SetConfig+0x100>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00f      	beq.n	80067cc <TIM_OC2_SetConfig+0xb0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1c      	ldr	r2, [pc, #112]	; (8006820 <TIM_OC2_SetConfig+0x104>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_OC2_SetConfig+0xb0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1b      	ldr	r2, [pc, #108]	; (8006824 <TIM_OC2_SetConfig+0x108>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_OC2_SetConfig+0xb0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a1a      	ldr	r2, [pc, #104]	; (8006828 <TIM_OC2_SetConfig+0x10c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_OC2_SetConfig+0xb0>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a19      	ldr	r2, [pc, #100]	; (800682c <TIM_OC2_SetConfig+0x110>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d113      	bne.n	80067f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40013400 	.word	0x40013400
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800

08006830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a27      	ldr	r2, [pc, #156]	; (800692c <TIM_OC3_SetConfig+0xfc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_OC3_SetConfig+0x6a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a26      	ldr	r2, [pc, #152]	; (8006930 <TIM_OC3_SetConfig+0x100>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d10d      	bne.n	80068b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a1c      	ldr	r2, [pc, #112]	; (800692c <TIM_OC3_SetConfig+0xfc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00f      	beq.n	80068de <TIM_OC3_SetConfig+0xae>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <TIM_OC3_SetConfig+0x100>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00b      	beq.n	80068de <TIM_OC3_SetConfig+0xae>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <TIM_OC3_SetConfig+0x104>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <TIM_OC3_SetConfig+0xae>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a19      	ldr	r2, [pc, #100]	; (8006938 <TIM_OC3_SetConfig+0x108>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <TIM_OC3_SetConfig+0xae>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a18      	ldr	r2, [pc, #96]	; (800693c <TIM_OC3_SetConfig+0x10c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d113      	bne.n	8006906 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40013400 	.word	0x40013400
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400
 800693c:	40014800 	.word	0x40014800

08006940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800698e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	031b      	lsls	r3, r3, #12
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a28      	ldr	r2, [pc, #160]	; (8006a40 <TIM_OC4_SetConfig+0x100>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC4_SetConfig+0x6c>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a27      	ldr	r2, [pc, #156]	; (8006a44 <TIM_OC4_SetConfig+0x104>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10d      	bne.n	80069c8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a1d      	ldr	r2, [pc, #116]	; (8006a40 <TIM_OC4_SetConfig+0x100>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00f      	beq.n	80069f0 <TIM_OC4_SetConfig+0xb0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a1c      	ldr	r2, [pc, #112]	; (8006a44 <TIM_OC4_SetConfig+0x104>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00b      	beq.n	80069f0 <TIM_OC4_SetConfig+0xb0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <TIM_OC4_SetConfig+0x108>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d007      	beq.n	80069f0 <TIM_OC4_SetConfig+0xb0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <TIM_OC4_SetConfig+0x10c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_OC4_SetConfig+0xb0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <TIM_OC4_SetConfig+0x110>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d113      	bne.n	8006a18 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	019b      	lsls	r3, r3, #6
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	019b      	lsls	r3, r3, #6
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	621a      	str	r2, [r3, #32]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40012c00 	.word	0x40012c00
 8006a44:	40013400 	.word	0x40013400
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40014400 	.word	0x40014400
 8006a50:	40014800 	.word	0x40014800

08006a54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a17      	ldr	r2, [pc, #92]	; (8006b08 <TIM_OC5_SetConfig+0xb4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00f      	beq.n	8006ace <TIM_OC5_SetConfig+0x7a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a16      	ldr	r2, [pc, #88]	; (8006b0c <TIM_OC5_SetConfig+0xb8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_OC5_SetConfig+0x7a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <TIM_OC5_SetConfig+0xbc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d007      	beq.n	8006ace <TIM_OC5_SetConfig+0x7a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a14      	ldr	r2, [pc, #80]	; (8006b14 <TIM_OC5_SetConfig+0xc0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_OC5_SetConfig+0x7a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a13      	ldr	r2, [pc, #76]	; (8006b18 <TIM_OC5_SetConfig+0xc4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d109      	bne.n	8006ae2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	621a      	str	r2, [r3, #32]
}
 8006afc:	bf00      	nop
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	40012c00 	.word	0x40012c00
 8006b0c:	40013400 	.word	0x40013400
 8006b10:	40014000 	.word	0x40014000
 8006b14:	40014400 	.word	0x40014400
 8006b18:	40014800 	.word	0x40014800

08006b1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	051b      	lsls	r3, r3, #20
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a18      	ldr	r2, [pc, #96]	; (8006bd4 <TIM_OC6_SetConfig+0xb8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00f      	beq.n	8006b98 <TIM_OC6_SetConfig+0x7c>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <TIM_OC6_SetConfig+0xbc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <TIM_OC6_SetConfig+0x7c>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <TIM_OC6_SetConfig+0xc0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <TIM_OC6_SetConfig+0x7c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <TIM_OC6_SetConfig+0xc4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC6_SetConfig+0x7c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <TIM_OC6_SetConfig+0xc8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d109      	bne.n	8006bac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	029b      	lsls	r3, r3, #10
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40012c00 	.word	0x40012c00
 8006bd8:	40013400 	.word	0x40013400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800

08006be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f023 0201 	bic.w	r2, r3, #1
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f023 030a 	bic.w	r3, r3, #10
 8006c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b087      	sub	sp, #28
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f023 0210 	bic.w	r2, r3, #16
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	031b      	lsls	r3, r3, #12
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f043 0307 	orr.w	r3, r3, #7
 8006ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	021a      	lsls	r2, r3, #8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	2201      	movs	r2, #1
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1a      	ldr	r2, [r3, #32]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	401a      	ands	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a1a      	ldr	r2, [r3, #32]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	621a      	str	r2, [r3, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
	...

08006d6c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <HAL_TIMEx_PWMN_Start+0x24>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	bf14      	ite	ne
 8006d88:	2301      	movne	r3, #1
 8006d8a:	2300      	moveq	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	e022      	b.n	8006dd6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d109      	bne.n	8006daa <HAL_TIMEx_PWMN_Start+0x3e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	bf14      	ite	ne
 8006da2:	2301      	movne	r3, #1
 8006da4:	2300      	moveq	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	e015      	b.n	8006dd6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	d109      	bne.n	8006dc4 <HAL_TIMEx_PWMN_Start+0x58>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	bf14      	ite	ne
 8006dbc:	2301      	movne	r3, #1
 8006dbe:	2300      	moveq	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	e008      	b.n	8006dd6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	bf14      	ite	ne
 8006dd0:	2301      	movne	r3, #1
 8006dd2:	2300      	moveq	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e040      	b.n	8006e60 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <HAL_TIMEx_PWMN_Start+0x82>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dec:	e013      	b.n	8006e16 <HAL_TIMEx_PWMN_Start+0xaa>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d104      	bne.n	8006dfe <HAL_TIMEx_PWMN_Start+0x92>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dfc:	e00b      	b.n	8006e16 <HAL_TIMEx_PWMN_Start+0xaa>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d104      	bne.n	8006e0e <HAL_TIMEx_PWMN_Start+0xa2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e0c:	e003      	b.n	8006e16 <HAL_TIMEx_PWMN_Start+0xaa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2202      	movs	r2, #2
 8006e12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f946 	bl	80070b0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_TIMEx_PWMN_Start+0xfc>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b06      	cmp	r3, #6
 8006e44:	d00b      	beq.n	8006e5e <HAL_TIMEx_PWMN_Start+0xf2>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e4c:	d007      	beq.n	8006e5e <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0201 	orr.w	r2, r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	00010007 	.word	0x00010007

08006e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e065      	b.n	8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d004      	beq.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d108      	bne.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ebe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d018      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efa:	d013      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a12      	ldr	r2, [pc, #72]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10c      	bne.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40012c00 	.word	0x40012c00
 8006f60:	40013400 	.word	0x40013400
 8006f64:	40000400 	.word	0x40000400
 8006f68:	40000800 	.word	0x40000800
 8006f6c:	40014000 	.word	0x40014000

08006f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e087      	b.n	800709c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	041b      	lsls	r3, r3, #16
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a27      	ldr	r2, [pc, #156]	; (80070a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a25      	ldr	r2, [pc, #148]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d106      	bne.n	8007028 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d004      	beq.n	800703c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1d      	ldr	r2, [pc, #116]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d126      	bne.n	800708a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	051b      	lsls	r3, r3, #20
 8007048:	4313      	orrs	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a0e      	ldr	r2, [pc, #56]	; (80070a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a0d      	ldr	r2, [pc, #52]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d106      	bne.n	800708a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40013400 	.word	0x40013400

080070b0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2204      	movs	r2, #4
 80070c4:	fa02 f303 	lsl.w	r3, r2, r3
 80070c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	401a      	ands	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a1a      	ldr	r2, [r3, #32]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	fa01 f303 	lsl.w	r3, r1, r3
 80070e8:	431a      	orrs	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e042      	b.n	8007192 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fa fed0 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2224      	movs	r2, #36	; 0x24
 8007128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0201 	bic.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f9a7 	bl	8007490 <UART_SetConfig>
 8007142:	4603      	mov	r3, r0
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e022      	b.n	8007192 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fb55 	bl	8008804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007168:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007178:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fbdc 	bl	8008948 <UART_CheckIdleState>
 8007190:	4603      	mov	r3, r0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d118      	bne.n	80071fc <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d013      	beq.n	80071fc <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d104      	bne.n	80071e8 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d009      	beq.n	80071fc <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 812e 	beq.w	800744e <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
      }
      return;
 80071fa:	e128      	b.n	800744e <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 80d1 	beq.w	80073a6 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4b96      	ldr	r3, [pc, #600]	; (8007460 <HAL_UART_IRQHandler+0x2c4>)
 8007208:	4013      	ands	r3, r2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80c6 	beq.w	80073a6 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b00      	cmp	r3, #0
 8007222:	d010      	beq.n	8007246 <HAL_UART_IRQHandler+0xaa>
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2201      	movs	r2, #1
 8007234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723c:	f043 0201 	orr.w	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d010      	beq.n	8007272 <HAL_UART_IRQHandler+0xd6>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2202      	movs	r2, #2
 8007260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007268:	f043 0204 	orr.w	r2, r3, #4
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d010      	beq.n	800729e <HAL_UART_IRQHandler+0x102>
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2204      	movs	r2, #4
 800728c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007294:	f043 0202 	orr.w	r2, r3, #2
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d015      	beq.n	80072d4 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d104      	bne.n	80072bc <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	4b6a      	ldr	r3, [pc, #424]	; (8007460 <HAL_UART_IRQHandler+0x2c4>)
 80072b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2208      	movs	r2, #8
 80072c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ca:	f043 0208 	orr.w	r2, r3, #8
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80b9 	beq.w	8007452 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d011      	beq.n	800730e <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007314:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b40      	cmp	r3, #64	; 0x40
 8007322:	d004      	beq.n	800732e <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800732a:	2b00      	cmp	r3, #0
 800732c:	d031      	beq.n	8007392 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 fb9c 	bl	8008a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d123      	bne.n	800738a <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007350:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007356:	2b00      	cmp	r3, #0
 8007358:	d013      	beq.n	8007382 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800735e:	4a41      	ldr	r2, [pc, #260]	; (8007464 <HAL_UART_IRQHandler+0x2c8>)
 8007360:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007366:	4618      	mov	r0, r3
 8007368:	f7fc fea3 	bl	80040b2 <HAL_DMA_Abort_IT>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d017      	beq.n	80073a2 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800737c:	4610      	mov	r0, r2
 800737e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	e00f      	b.n	80073a2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f87a 	bl	800747c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	e00b      	b.n	80073a2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f876 	bl	800747c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007390:	e007      	b.n	80073a2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f872 	bl	800747c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80073a0:	e057      	b.n	8007452 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a2:	bf00      	nop
    return;
 80073a4:	e055      	b.n	8007452 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00d      	beq.n	80073cc <HAL_UART_IRQHandler+0x230>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d008      	beq.n	80073cc <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80073c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 fba4 	bl	8008b12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073ca:	e045      	b.n	8007458 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d012      	beq.n	80073fc <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d008      	beq.n	80073fc <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d031      	beq.n	8007456 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
    }
    return;
 80073fa:	e02c      	b.n	8007456 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007402:	2b00      	cmp	r3, #0
 8007404:	d008      	beq.n	8007418 <HAL_UART_IRQHandler+0x27c>
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fb64 	bl	8008ade <UART_EndTransmit_IT>
    return;
 8007416:	e01f      	b.n	8007458 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d008      	beq.n	8007434 <HAL_UART_IRQHandler+0x298>
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 fb84 	bl	8008b3a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007432:	e011      	b.n	8007458 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00c      	beq.n	8007458 <HAL_UART_IRQHandler+0x2bc>
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2b00      	cmp	r3, #0
 8007442:	da09      	bge.n	8007458 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 fb6e 	bl	8008b26 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800744a:	bf00      	nop
 800744c:	e004      	b.n	8007458 <HAL_UART_IRQHandler+0x2bc>
      return;
 800744e:	bf00      	nop
 8007450:	e002      	b.n	8007458 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007452:	bf00      	nop
 8007454:	e000      	b.n	8007458 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007456:	bf00      	nop
  }
}
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	10000001 	.word	0x10000001
 8007464:	08008ab3 	.word	0x08008ab3

08007468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007490:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007494:	b08a      	sub	sp, #40	; 0x28
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800749a:	2300      	movs	r3, #0
 800749c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c4:	4313      	orrs	r3, r2
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	4ba4      	ldr	r3, [pc, #656]	; (8007760 <UART_SetConfig+0x2d0>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6812      	ldr	r2, [r2, #0]
 80074d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074d8:	430b      	orrs	r3, r1
 80074da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a99      	ldr	r2, [pc, #612]	; (8007764 <UART_SetConfig+0x2d4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d004      	beq.n	800750c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007508:	4313      	orrs	r3, r2
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007516:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6812      	ldr	r2, [r2, #0]
 800751e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007520:	430b      	orrs	r3, r1
 8007522:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752a:	f023 010f 	bic.w	r1, r3, #15
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a8a      	ldr	r2, [pc, #552]	; (8007768 <UART_SetConfig+0x2d8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d126      	bne.n	8007592 <UART_SetConfig+0x102>
 8007544:	4b89      	ldr	r3, [pc, #548]	; (800776c <UART_SetConfig+0x2dc>)
 8007546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	2b03      	cmp	r3, #3
 8007550:	d81a      	bhi.n	8007588 <UART_SetConfig+0xf8>
 8007552:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <UART_SetConfig+0xc8>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	08007569 	.word	0x08007569
 800755c:	08007579 	.word	0x08007579
 8007560:	08007571 	.word	0x08007571
 8007564:	08007581 	.word	0x08007581
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756e:	e0d6      	b.n	800771e <UART_SetConfig+0x28e>
 8007570:	2302      	movs	r3, #2
 8007572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007576:	e0d2      	b.n	800771e <UART_SetConfig+0x28e>
 8007578:	2304      	movs	r3, #4
 800757a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757e:	e0ce      	b.n	800771e <UART_SetConfig+0x28e>
 8007580:	2308      	movs	r3, #8
 8007582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007586:	e0ca      	b.n	800771e <UART_SetConfig+0x28e>
 8007588:	2310      	movs	r3, #16
 800758a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800758e:	bf00      	nop
 8007590:	e0c5      	b.n	800771e <UART_SetConfig+0x28e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a76      	ldr	r2, [pc, #472]	; (8007770 <UART_SetConfig+0x2e0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d138      	bne.n	800760e <UART_SetConfig+0x17e>
 800759c:	4b73      	ldr	r3, [pc, #460]	; (800776c <UART_SetConfig+0x2dc>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	f003 030c 	and.w	r3, r3, #12
 80075a6:	2b0c      	cmp	r3, #12
 80075a8:	d82c      	bhi.n	8007604 <UART_SetConfig+0x174>
 80075aa:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <UART_SetConfig+0x120>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075e5 	.word	0x080075e5
 80075b4:	08007605 	.word	0x08007605
 80075b8:	08007605 	.word	0x08007605
 80075bc:	08007605 	.word	0x08007605
 80075c0:	080075f5 	.word	0x080075f5
 80075c4:	08007605 	.word	0x08007605
 80075c8:	08007605 	.word	0x08007605
 80075cc:	08007605 	.word	0x08007605
 80075d0:	080075ed 	.word	0x080075ed
 80075d4:	08007605 	.word	0x08007605
 80075d8:	08007605 	.word	0x08007605
 80075dc:	08007605 	.word	0x08007605
 80075e0:	080075fd 	.word	0x080075fd
 80075e4:	2300      	movs	r3, #0
 80075e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ea:	e098      	b.n	800771e <UART_SetConfig+0x28e>
 80075ec:	2302      	movs	r3, #2
 80075ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075f2:	e094      	b.n	800771e <UART_SetConfig+0x28e>
 80075f4:	2304      	movs	r3, #4
 80075f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075fa:	e090      	b.n	800771e <UART_SetConfig+0x28e>
 80075fc:	2308      	movs	r3, #8
 80075fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007602:	e08c      	b.n	800771e <UART_SetConfig+0x28e>
 8007604:	2310      	movs	r3, #16
 8007606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800760a:	bf00      	nop
 800760c:	e087      	b.n	800771e <UART_SetConfig+0x28e>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a58      	ldr	r2, [pc, #352]	; (8007774 <UART_SetConfig+0x2e4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d125      	bne.n	8007664 <UART_SetConfig+0x1d4>
 8007618:	4b54      	ldr	r3, [pc, #336]	; (800776c <UART_SetConfig+0x2dc>)
 800761a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007622:	2b10      	cmp	r3, #16
 8007624:	d011      	beq.n	800764a <UART_SetConfig+0x1ba>
 8007626:	2b10      	cmp	r3, #16
 8007628:	d802      	bhi.n	8007630 <UART_SetConfig+0x1a0>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <UART_SetConfig+0x1aa>
 800762e:	e014      	b.n	800765a <UART_SetConfig+0x1ca>
 8007630:	2b20      	cmp	r3, #32
 8007632:	d006      	beq.n	8007642 <UART_SetConfig+0x1b2>
 8007634:	2b30      	cmp	r3, #48	; 0x30
 8007636:	d00c      	beq.n	8007652 <UART_SetConfig+0x1c2>
 8007638:	e00f      	b.n	800765a <UART_SetConfig+0x1ca>
 800763a:	2300      	movs	r3, #0
 800763c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007640:	e06d      	b.n	800771e <UART_SetConfig+0x28e>
 8007642:	2302      	movs	r3, #2
 8007644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007648:	e069      	b.n	800771e <UART_SetConfig+0x28e>
 800764a:	2304      	movs	r3, #4
 800764c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007650:	e065      	b.n	800771e <UART_SetConfig+0x28e>
 8007652:	2308      	movs	r3, #8
 8007654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007658:	e061      	b.n	800771e <UART_SetConfig+0x28e>
 800765a:	2310      	movs	r3, #16
 800765c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007660:	bf00      	nop
 8007662:	e05c      	b.n	800771e <UART_SetConfig+0x28e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a43      	ldr	r2, [pc, #268]	; (8007778 <UART_SetConfig+0x2e8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d125      	bne.n	80076ba <UART_SetConfig+0x22a>
 800766e:	4b3f      	ldr	r3, [pc, #252]	; (800776c <UART_SetConfig+0x2dc>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007678:	2b40      	cmp	r3, #64	; 0x40
 800767a:	d011      	beq.n	80076a0 <UART_SetConfig+0x210>
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d802      	bhi.n	8007686 <UART_SetConfig+0x1f6>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <UART_SetConfig+0x200>
 8007684:	e014      	b.n	80076b0 <UART_SetConfig+0x220>
 8007686:	2b80      	cmp	r3, #128	; 0x80
 8007688:	d006      	beq.n	8007698 <UART_SetConfig+0x208>
 800768a:	2bc0      	cmp	r3, #192	; 0xc0
 800768c:	d00c      	beq.n	80076a8 <UART_SetConfig+0x218>
 800768e:	e00f      	b.n	80076b0 <UART_SetConfig+0x220>
 8007690:	2300      	movs	r3, #0
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007696:	e042      	b.n	800771e <UART_SetConfig+0x28e>
 8007698:	2302      	movs	r3, #2
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800769e:	e03e      	b.n	800771e <UART_SetConfig+0x28e>
 80076a0:	2304      	movs	r3, #4
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a6:	e03a      	b.n	800771e <UART_SetConfig+0x28e>
 80076a8:	2308      	movs	r3, #8
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ae:	e036      	b.n	800771e <UART_SetConfig+0x28e>
 80076b0:	2310      	movs	r3, #16
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b6:	bf00      	nop
 80076b8:	e031      	b.n	800771e <UART_SetConfig+0x28e>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a29      	ldr	r2, [pc, #164]	; (8007764 <UART_SetConfig+0x2d4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d129      	bne.n	8007718 <UART_SetConfig+0x288>
 80076c4:	4b29      	ldr	r3, [pc, #164]	; (800776c <UART_SetConfig+0x2dc>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d2:	d014      	beq.n	80076fe <UART_SetConfig+0x26e>
 80076d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d8:	d802      	bhi.n	80076e0 <UART_SetConfig+0x250>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d007      	beq.n	80076ee <UART_SetConfig+0x25e>
 80076de:	e016      	b.n	800770e <UART_SetConfig+0x27e>
 80076e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e4:	d007      	beq.n	80076f6 <UART_SetConfig+0x266>
 80076e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076ea:	d00c      	beq.n	8007706 <UART_SetConfig+0x276>
 80076ec:	e00f      	b.n	800770e <UART_SetConfig+0x27e>
 80076ee:	2300      	movs	r3, #0
 80076f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076f4:	e013      	b.n	800771e <UART_SetConfig+0x28e>
 80076f6:	2302      	movs	r3, #2
 80076f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fc:	e00f      	b.n	800771e <UART_SetConfig+0x28e>
 80076fe:	2304      	movs	r3, #4
 8007700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007704:	e00b      	b.n	800771e <UART_SetConfig+0x28e>
 8007706:	2308      	movs	r3, #8
 8007708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770c:	e007      	b.n	800771e <UART_SetConfig+0x28e>
 800770e:	2310      	movs	r3, #16
 8007710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007714:	bf00      	nop
 8007716:	e002      	b.n	800771e <UART_SetConfig+0x28e>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a10      	ldr	r2, [pc, #64]	; (8007764 <UART_SetConfig+0x2d4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	f040 842e 	bne.w	8007f86 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800772a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800772e:	2b08      	cmp	r3, #8
 8007730:	f200 8169 	bhi.w	8007a06 <UART_SetConfig+0x576>
 8007734:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0x2ac>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	0800777d 	.word	0x0800777d
 8007740:	08007a07 	.word	0x08007a07
 8007744:	0800781f 	.word	0x0800781f
 8007748:	08007a07 	.word	0x08007a07
 800774c:	080078b7 	.word	0x080078b7
 8007750:	08007a07 	.word	0x08007a07
 8007754:	08007a07 	.word	0x08007a07
 8007758:	08007a07 	.word	0x08007a07
 800775c:	08007959 	.word	0x08007959
 8007760:	cfff69f3 	.word	0xcfff69f3
 8007764:	40008000 	.word	0x40008000
 8007768:	40013800 	.word	0x40013800
 800776c:	40021000 	.word	0x40021000
 8007770:	40004400 	.word	0x40004400
 8007774:	40004800 	.word	0x40004800
 8007778:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800777c:	f7fd fff6 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8007780:	4602      	mov	r2, r0
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d044      	beq.n	8007814 <UART_SetConfig+0x384>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	2b01      	cmp	r3, #1
 8007790:	d03e      	beq.n	8007810 <UART_SetConfig+0x380>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b02      	cmp	r3, #2
 8007798:	d038      	beq.n	800780c <UART_SetConfig+0x37c>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d032      	beq.n	8007808 <UART_SetConfig+0x378>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d02c      	beq.n	8007804 <UART_SetConfig+0x374>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d026      	beq.n	8007800 <UART_SetConfig+0x370>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	2b06      	cmp	r3, #6
 80077b8:	d020      	beq.n	80077fc <UART_SetConfig+0x36c>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	2b07      	cmp	r3, #7
 80077c0:	d01a      	beq.n	80077f8 <UART_SetConfig+0x368>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d014      	beq.n	80077f4 <UART_SetConfig+0x364>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2b09      	cmp	r3, #9
 80077d0:	d00e      	beq.n	80077f0 <UART_SetConfig+0x360>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b0a      	cmp	r3, #10
 80077d8:	d008      	beq.n	80077ec <UART_SetConfig+0x35c>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b0b      	cmp	r3, #11
 80077e0:	d102      	bne.n	80077e8 <UART_SetConfig+0x358>
 80077e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077e6:	e016      	b.n	8007816 <UART_SetConfig+0x386>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e014      	b.n	8007816 <UART_SetConfig+0x386>
 80077ec:	2380      	movs	r3, #128	; 0x80
 80077ee:	e012      	b.n	8007816 <UART_SetConfig+0x386>
 80077f0:	2340      	movs	r3, #64	; 0x40
 80077f2:	e010      	b.n	8007816 <UART_SetConfig+0x386>
 80077f4:	2320      	movs	r3, #32
 80077f6:	e00e      	b.n	8007816 <UART_SetConfig+0x386>
 80077f8:	2310      	movs	r3, #16
 80077fa:	e00c      	b.n	8007816 <UART_SetConfig+0x386>
 80077fc:	230c      	movs	r3, #12
 80077fe:	e00a      	b.n	8007816 <UART_SetConfig+0x386>
 8007800:	230a      	movs	r3, #10
 8007802:	e008      	b.n	8007816 <UART_SetConfig+0x386>
 8007804:	2308      	movs	r3, #8
 8007806:	e006      	b.n	8007816 <UART_SetConfig+0x386>
 8007808:	2306      	movs	r3, #6
 800780a:	e004      	b.n	8007816 <UART_SetConfig+0x386>
 800780c:	2304      	movs	r3, #4
 800780e:	e002      	b.n	8007816 <UART_SetConfig+0x386>
 8007810:	2302      	movs	r3, #2
 8007812:	e000      	b.n	8007816 <UART_SetConfig+0x386>
 8007814:	2301      	movs	r3, #1
 8007816:	fbb2 f3f3 	udiv	r3, r2, r3
 800781a:	617b      	str	r3, [r7, #20]
        break;
 800781c:	e0f6      	b.n	8007a0c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d044      	beq.n	80078b0 <UART_SetConfig+0x420>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b01      	cmp	r3, #1
 800782c:	d03e      	beq.n	80078ac <UART_SetConfig+0x41c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	2b02      	cmp	r3, #2
 8007834:	d038      	beq.n	80078a8 <UART_SetConfig+0x418>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	2b03      	cmp	r3, #3
 800783c:	d032      	beq.n	80078a4 <UART_SetConfig+0x414>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	2b04      	cmp	r3, #4
 8007844:	d02c      	beq.n	80078a0 <UART_SetConfig+0x410>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	2b05      	cmp	r3, #5
 800784c:	d026      	beq.n	800789c <UART_SetConfig+0x40c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	2b06      	cmp	r3, #6
 8007854:	d020      	beq.n	8007898 <UART_SetConfig+0x408>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	2b07      	cmp	r3, #7
 800785c:	d01a      	beq.n	8007894 <UART_SetConfig+0x404>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	2b08      	cmp	r3, #8
 8007864:	d014      	beq.n	8007890 <UART_SetConfig+0x400>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	2b09      	cmp	r3, #9
 800786c:	d00e      	beq.n	800788c <UART_SetConfig+0x3fc>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b0a      	cmp	r3, #10
 8007874:	d008      	beq.n	8007888 <UART_SetConfig+0x3f8>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	2b0b      	cmp	r3, #11
 800787c:	d102      	bne.n	8007884 <UART_SetConfig+0x3f4>
 800787e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007882:	e016      	b.n	80078b2 <UART_SetConfig+0x422>
 8007884:	4ba1      	ldr	r3, [pc, #644]	; (8007b0c <UART_SetConfig+0x67c>)
 8007886:	e014      	b.n	80078b2 <UART_SetConfig+0x422>
 8007888:	4ba1      	ldr	r3, [pc, #644]	; (8007b10 <UART_SetConfig+0x680>)
 800788a:	e012      	b.n	80078b2 <UART_SetConfig+0x422>
 800788c:	4ba1      	ldr	r3, [pc, #644]	; (8007b14 <UART_SetConfig+0x684>)
 800788e:	e010      	b.n	80078b2 <UART_SetConfig+0x422>
 8007890:	4ba1      	ldr	r3, [pc, #644]	; (8007b18 <UART_SetConfig+0x688>)
 8007892:	e00e      	b.n	80078b2 <UART_SetConfig+0x422>
 8007894:	4ba1      	ldr	r3, [pc, #644]	; (8007b1c <UART_SetConfig+0x68c>)
 8007896:	e00c      	b.n	80078b2 <UART_SetConfig+0x422>
 8007898:	4ba1      	ldr	r3, [pc, #644]	; (8007b20 <UART_SetConfig+0x690>)
 800789a:	e00a      	b.n	80078b2 <UART_SetConfig+0x422>
 800789c:	4ba1      	ldr	r3, [pc, #644]	; (8007b24 <UART_SetConfig+0x694>)
 800789e:	e008      	b.n	80078b2 <UART_SetConfig+0x422>
 80078a0:	4ba1      	ldr	r3, [pc, #644]	; (8007b28 <UART_SetConfig+0x698>)
 80078a2:	e006      	b.n	80078b2 <UART_SetConfig+0x422>
 80078a4:	4ba1      	ldr	r3, [pc, #644]	; (8007b2c <UART_SetConfig+0x69c>)
 80078a6:	e004      	b.n	80078b2 <UART_SetConfig+0x422>
 80078a8:	4ba1      	ldr	r3, [pc, #644]	; (8007b30 <UART_SetConfig+0x6a0>)
 80078aa:	e002      	b.n	80078b2 <UART_SetConfig+0x422>
 80078ac:	4ba1      	ldr	r3, [pc, #644]	; (8007b34 <UART_SetConfig+0x6a4>)
 80078ae:	e000      	b.n	80078b2 <UART_SetConfig+0x422>
 80078b0:	4b96      	ldr	r3, [pc, #600]	; (8007b0c <UART_SetConfig+0x67c>)
 80078b2:	617b      	str	r3, [r7, #20]
        break;
 80078b4:	e0aa      	b.n	8007a0c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078b6:	f7fd feeb 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 80078ba:	4602      	mov	r2, r0
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d044      	beq.n	800794e <UART_SetConfig+0x4be>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d03e      	beq.n	800794a <UART_SetConfig+0x4ba>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d038      	beq.n	8007946 <UART_SetConfig+0x4b6>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d032      	beq.n	8007942 <UART_SetConfig+0x4b2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d02c      	beq.n	800793e <UART_SetConfig+0x4ae>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	2b05      	cmp	r3, #5
 80078ea:	d026      	beq.n	800793a <UART_SetConfig+0x4aa>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b06      	cmp	r3, #6
 80078f2:	d020      	beq.n	8007936 <UART_SetConfig+0x4a6>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	2b07      	cmp	r3, #7
 80078fa:	d01a      	beq.n	8007932 <UART_SetConfig+0x4a2>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	2b08      	cmp	r3, #8
 8007902:	d014      	beq.n	800792e <UART_SetConfig+0x49e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b09      	cmp	r3, #9
 800790a:	d00e      	beq.n	800792a <UART_SetConfig+0x49a>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	2b0a      	cmp	r3, #10
 8007912:	d008      	beq.n	8007926 <UART_SetConfig+0x496>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b0b      	cmp	r3, #11
 800791a:	d102      	bne.n	8007922 <UART_SetConfig+0x492>
 800791c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007920:	e016      	b.n	8007950 <UART_SetConfig+0x4c0>
 8007922:	2301      	movs	r3, #1
 8007924:	e014      	b.n	8007950 <UART_SetConfig+0x4c0>
 8007926:	2380      	movs	r3, #128	; 0x80
 8007928:	e012      	b.n	8007950 <UART_SetConfig+0x4c0>
 800792a:	2340      	movs	r3, #64	; 0x40
 800792c:	e010      	b.n	8007950 <UART_SetConfig+0x4c0>
 800792e:	2320      	movs	r3, #32
 8007930:	e00e      	b.n	8007950 <UART_SetConfig+0x4c0>
 8007932:	2310      	movs	r3, #16
 8007934:	e00c      	b.n	8007950 <UART_SetConfig+0x4c0>
 8007936:	230c      	movs	r3, #12
 8007938:	e00a      	b.n	8007950 <UART_SetConfig+0x4c0>
 800793a:	230a      	movs	r3, #10
 800793c:	e008      	b.n	8007950 <UART_SetConfig+0x4c0>
 800793e:	2308      	movs	r3, #8
 8007940:	e006      	b.n	8007950 <UART_SetConfig+0x4c0>
 8007942:	2306      	movs	r3, #6
 8007944:	e004      	b.n	8007950 <UART_SetConfig+0x4c0>
 8007946:	2304      	movs	r3, #4
 8007948:	e002      	b.n	8007950 <UART_SetConfig+0x4c0>
 800794a:	2302      	movs	r3, #2
 800794c:	e000      	b.n	8007950 <UART_SetConfig+0x4c0>
 800794e:	2301      	movs	r3, #1
 8007950:	fbb2 f3f3 	udiv	r3, r2, r3
 8007954:	617b      	str	r3, [r7, #20]
        break;
 8007956:	e059      	b.n	8007a0c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	d04e      	beq.n	80079fe <UART_SetConfig+0x56e>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	2b01      	cmp	r3, #1
 8007966:	d047      	beq.n	80079f8 <UART_SetConfig+0x568>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	2b02      	cmp	r3, #2
 800796e:	d040      	beq.n	80079f2 <UART_SetConfig+0x562>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2b03      	cmp	r3, #3
 8007976:	d039      	beq.n	80079ec <UART_SetConfig+0x55c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	2b04      	cmp	r3, #4
 800797e:	d032      	beq.n	80079e6 <UART_SetConfig+0x556>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b05      	cmp	r3, #5
 8007986:	d02b      	beq.n	80079e0 <UART_SetConfig+0x550>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b06      	cmp	r3, #6
 800798e:	d024      	beq.n	80079da <UART_SetConfig+0x54a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	2b07      	cmp	r3, #7
 8007996:	d01d      	beq.n	80079d4 <UART_SetConfig+0x544>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	2b08      	cmp	r3, #8
 800799e:	d016      	beq.n	80079ce <UART_SetConfig+0x53e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b09      	cmp	r3, #9
 80079a6:	d00f      	beq.n	80079c8 <UART_SetConfig+0x538>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b0a      	cmp	r3, #10
 80079ae:	d008      	beq.n	80079c2 <UART_SetConfig+0x532>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	2b0b      	cmp	r3, #11
 80079b6:	d101      	bne.n	80079bc <UART_SetConfig+0x52c>
 80079b8:	2380      	movs	r3, #128	; 0x80
 80079ba:	e022      	b.n	8007a02 <UART_SetConfig+0x572>
 80079bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c0:	e01f      	b.n	8007a02 <UART_SetConfig+0x572>
 80079c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079c6:	e01c      	b.n	8007a02 <UART_SetConfig+0x572>
 80079c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079cc:	e019      	b.n	8007a02 <UART_SetConfig+0x572>
 80079ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079d2:	e016      	b.n	8007a02 <UART_SetConfig+0x572>
 80079d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079d8:	e013      	b.n	8007a02 <UART_SetConfig+0x572>
 80079da:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80079de:	e010      	b.n	8007a02 <UART_SetConfig+0x572>
 80079e0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80079e4:	e00d      	b.n	8007a02 <UART_SetConfig+0x572>
 80079e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079ea:	e00a      	b.n	8007a02 <UART_SetConfig+0x572>
 80079ec:	f241 5355 	movw	r3, #5461	; 0x1555
 80079f0:	e007      	b.n	8007a02 <UART_SetConfig+0x572>
 80079f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079f6:	e004      	b.n	8007a02 <UART_SetConfig+0x572>
 80079f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079fc:	e001      	b.n	8007a02 <UART_SetConfig+0x572>
 80079fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a02:	617b      	str	r3, [r7, #20]
        break;
 8007a04:	e002      	b.n	8007a0c <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	76fb      	strb	r3, [r7, #27]
        break;
 8007a0a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 86cd 	beq.w	80087ae <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	4413      	add	r3, r2
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d305      	bcc.n	8007a30 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d903      	bls.n	8007a38 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	76fb      	strb	r3, [r7, #27]
 8007a34:	f000 bebb 	b.w	80087ae <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8007a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	f200 828d 	bhi.w	8007f5c <UART_SetConfig+0xacc>
 8007a42:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <UART_SetConfig+0x5b8>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a6d 	.word	0x08007a6d
 8007a4c:	08007f5d 	.word	0x08007f5d
 8007a50:	08007bd7 	.word	0x08007bd7
 8007a54:	08007f5d 	.word	0x08007f5d
 8007a58:	08007ccd 	.word	0x08007ccd
 8007a5c:	08007f5d 	.word	0x08007f5d
 8007a60:	08007f5d 	.word	0x08007f5d
 8007a64:	08007f5d 	.word	0x08007f5d
 8007a68:	08007e0b 	.word	0x08007e0b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007a6c:	f7fd fe7e 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8007a70:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d07d      	beq.n	8007b7e <UART_SetConfig+0x6ee>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d074      	beq.n	8007b74 <UART_SetConfig+0x6e4>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d06b      	beq.n	8007b6a <UART_SetConfig+0x6da>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d062      	beq.n	8007b60 <UART_SetConfig+0x6d0>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d059      	beq.n	8007b56 <UART_SetConfig+0x6c6>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	d050      	beq.n	8007b4c <UART_SetConfig+0x6bc>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b06      	cmp	r3, #6
 8007ab0:	d047      	beq.n	8007b42 <UART_SetConfig+0x6b2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b07      	cmp	r3, #7
 8007ab8:	d03e      	beq.n	8007b38 <UART_SetConfig+0x6a8>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b08      	cmp	r3, #8
 8007ac0:	d01f      	beq.n	8007b02 <UART_SetConfig+0x672>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d016      	beq.n	8007af8 <UART_SetConfig+0x668>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b0a      	cmp	r3, #10
 8007ad0:	d00d      	beq.n	8007aee <UART_SetConfig+0x65e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b0b      	cmp	r3, #11
 8007ad8:	d104      	bne.n	8007ae4 <UART_SetConfig+0x654>
 8007ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ade:	f04f 0400 	mov.w	r4, #0
 8007ae2:	e050      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007ae4:	f04f 0301 	mov.w	r3, #1
 8007ae8:	f04f 0400 	mov.w	r4, #0
 8007aec:	e04b      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007aee:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007af2:	f04f 0400 	mov.w	r4, #0
 8007af6:	e046      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007af8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007afc:	f04f 0400 	mov.w	r4, #0
 8007b00:	e041      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007b02:	f04f 0320 	mov.w	r3, #32
 8007b06:	f04f 0400 	mov.w	r4, #0
 8007b0a:	e03c      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007b0c:	00f42400 	.word	0x00f42400
 8007b10:	0001e848 	.word	0x0001e848
 8007b14:	0003d090 	.word	0x0003d090
 8007b18:	0007a120 	.word	0x0007a120
 8007b1c:	000f4240 	.word	0x000f4240
 8007b20:	00145855 	.word	0x00145855
 8007b24:	00186a00 	.word	0x00186a00
 8007b28:	001e8480 	.word	0x001e8480
 8007b2c:	0028b0aa 	.word	0x0028b0aa
 8007b30:	003d0900 	.word	0x003d0900
 8007b34:	007a1200 	.word	0x007a1200
 8007b38:	f04f 0310 	mov.w	r3, #16
 8007b3c:	f04f 0400 	mov.w	r4, #0
 8007b40:	e021      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007b42:	f04f 030c 	mov.w	r3, #12
 8007b46:	f04f 0400 	mov.w	r4, #0
 8007b4a:	e01c      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007b4c:	f04f 030a 	mov.w	r3, #10
 8007b50:	f04f 0400 	mov.w	r4, #0
 8007b54:	e017      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007b56:	f04f 0308 	mov.w	r3, #8
 8007b5a:	f04f 0400 	mov.w	r4, #0
 8007b5e:	e012      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007b60:	f04f 0306 	mov.w	r3, #6
 8007b64:	f04f 0400 	mov.w	r4, #0
 8007b68:	e00d      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007b6a:	f04f 0304 	mov.w	r3, #4
 8007b6e:	f04f 0400 	mov.w	r4, #0
 8007b72:	e008      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007b74:	f04f 0302 	mov.w	r3, #2
 8007b78:	f04f 0400 	mov.w	r4, #0
 8007b7c:	e003      	b.n	8007b86 <UART_SetConfig+0x6f6>
 8007b7e:	f04f 0301 	mov.w	r3, #1
 8007b82:	f04f 0400 	mov.w	r4, #0
 8007b86:	461a      	mov	r2, r3
 8007b88:	4623      	mov	r3, r4
 8007b8a:	f7f8 ff63 	bl	8000a54 <__aeabi_uldivmod>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	460c      	mov	r4, r1
 8007b92:	4619      	mov	r1, r3
 8007b94:	4622      	mov	r2, r4
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	f04f 0400 	mov.w	r4, #0
 8007b9e:	0214      	lsls	r4, r2, #8
 8007ba0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007ba4:	020b      	lsls	r3, r1, #8
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6852      	ldr	r2, [r2, #4]
 8007baa:	0852      	lsrs	r2, r2, #1
 8007bac:	4611      	mov	r1, r2
 8007bae:	f04f 0200 	mov.w	r2, #0
 8007bb2:	eb13 0b01 	adds.w	fp, r3, r1
 8007bb6:	eb44 0c02 	adc.w	ip, r4, r2
 8007bba:	4658      	mov	r0, fp
 8007bbc:	4661      	mov	r1, ip
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f04f 0400 	mov.w	r4, #0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	4623      	mov	r3, r4
 8007bca:	f7f8 ff43 	bl	8000a54 <__aeabi_uldivmod>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	61fb      	str	r3, [r7, #28]
            break;
 8007bd4:	e1c5      	b.n	8007f62 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d05b      	beq.n	8007c96 <UART_SetConfig+0x806>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d053      	beq.n	8007c8e <UART_SetConfig+0x7fe>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d04b      	beq.n	8007c86 <UART_SetConfig+0x7f6>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d043      	beq.n	8007c7e <UART_SetConfig+0x7ee>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d03b      	beq.n	8007c76 <UART_SetConfig+0x7e6>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	2b05      	cmp	r3, #5
 8007c04:	d033      	beq.n	8007c6e <UART_SetConfig+0x7de>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	2b06      	cmp	r3, #6
 8007c0c:	d02b      	beq.n	8007c66 <UART_SetConfig+0x7d6>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	2b07      	cmp	r3, #7
 8007c14:	d023      	beq.n	8007c5e <UART_SetConfig+0x7ce>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	2b08      	cmp	r3, #8
 8007c1c:	d01b      	beq.n	8007c56 <UART_SetConfig+0x7c6>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	d013      	beq.n	8007c4e <UART_SetConfig+0x7be>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	2b0a      	cmp	r3, #10
 8007c2c:	d00b      	beq.n	8007c46 <UART_SetConfig+0x7b6>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b0b      	cmp	r3, #11
 8007c34:	d103      	bne.n	8007c3e <UART_SetConfig+0x7ae>
 8007c36:	4bae      	ldr	r3, [pc, #696]	; (8007ef0 <UART_SetConfig+0xa60>)
 8007c38:	f04f 0400 	mov.w	r4, #0
 8007c3c:	e02e      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c3e:	4bad      	ldr	r3, [pc, #692]	; (8007ef4 <UART_SetConfig+0xa64>)
 8007c40:	f04f 0400 	mov.w	r4, #0
 8007c44:	e02a      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c46:	4bac      	ldr	r3, [pc, #688]	; (8007ef8 <UART_SetConfig+0xa68>)
 8007c48:	f04f 0400 	mov.w	r4, #0
 8007c4c:	e026      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c4e:	4bab      	ldr	r3, [pc, #684]	; (8007efc <UART_SetConfig+0xa6c>)
 8007c50:	f04f 0400 	mov.w	r4, #0
 8007c54:	e022      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c56:	4baa      	ldr	r3, [pc, #680]	; (8007f00 <UART_SetConfig+0xa70>)
 8007c58:	f04f 0400 	mov.w	r4, #0
 8007c5c:	e01e      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c5e:	4ba9      	ldr	r3, [pc, #676]	; (8007f04 <UART_SetConfig+0xa74>)
 8007c60:	f04f 0400 	mov.w	r4, #0
 8007c64:	e01a      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c66:	a49e      	add	r4, pc, #632	; (adr r4, 8007ee0 <UART_SetConfig+0xa50>)
 8007c68:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c6c:	e016      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c6e:	4ba6      	ldr	r3, [pc, #664]	; (8007f08 <UART_SetConfig+0xa78>)
 8007c70:	f04f 0400 	mov.w	r4, #0
 8007c74:	e012      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c76:	4ba5      	ldr	r3, [pc, #660]	; (8007f0c <UART_SetConfig+0xa7c>)
 8007c78:	f04f 0400 	mov.w	r4, #0
 8007c7c:	e00e      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c7e:	a49a      	add	r4, pc, #616	; (adr r4, 8007ee8 <UART_SetConfig+0xa58>)
 8007c80:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c84:	e00a      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c86:	4ba2      	ldr	r3, [pc, #648]	; (8007f10 <UART_SetConfig+0xa80>)
 8007c88:	f04f 0400 	mov.w	r4, #0
 8007c8c:	e006      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c8e:	4ba1      	ldr	r3, [pc, #644]	; (8007f14 <UART_SetConfig+0xa84>)
 8007c90:	f04f 0400 	mov.w	r4, #0
 8007c94:	e002      	b.n	8007c9c <UART_SetConfig+0x80c>
 8007c96:	4b97      	ldr	r3, [pc, #604]	; (8007ef4 <UART_SetConfig+0xa64>)
 8007c98:	f04f 0400 	mov.w	r4, #0
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6852      	ldr	r2, [r2, #4]
 8007ca0:	0852      	lsrs	r2, r2, #1
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	eb13 0b01 	adds.w	fp, r3, r1
 8007cac:	eb44 0c02 	adc.w	ip, r4, r2
 8007cb0:	4658      	mov	r0, fp
 8007cb2:	4661      	mov	r1, ip
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f04f 0400 	mov.w	r4, #0
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4623      	mov	r3, r4
 8007cc0:	f7f8 fec8 	bl	8000a54 <__aeabi_uldivmod>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	61fb      	str	r3, [r7, #28]
            break;
 8007cca:	e14a      	b.n	8007f62 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007ccc:	f7fd fce0 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 8007cd0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f04f 0100 	mov.w	r1, #0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d067      	beq.n	8007db2 <UART_SetConfig+0x922>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d05e      	beq.n	8007da8 <UART_SetConfig+0x918>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d055      	beq.n	8007d9e <UART_SetConfig+0x90e>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d04c      	beq.n	8007d94 <UART_SetConfig+0x904>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d043      	beq.n	8007d8a <UART_SetConfig+0x8fa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	2b05      	cmp	r3, #5
 8007d08:	d03a      	beq.n	8007d80 <UART_SetConfig+0x8f0>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2b06      	cmp	r3, #6
 8007d10:	d031      	beq.n	8007d76 <UART_SetConfig+0x8e6>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	2b07      	cmp	r3, #7
 8007d18:	d028      	beq.n	8007d6c <UART_SetConfig+0x8dc>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	2b08      	cmp	r3, #8
 8007d20:	d01f      	beq.n	8007d62 <UART_SetConfig+0x8d2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	d016      	beq.n	8007d58 <UART_SetConfig+0x8c8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	2b0a      	cmp	r3, #10
 8007d30:	d00d      	beq.n	8007d4e <UART_SetConfig+0x8be>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	2b0b      	cmp	r3, #11
 8007d38:	d104      	bne.n	8007d44 <UART_SetConfig+0x8b4>
 8007d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d3e:	f04f 0400 	mov.w	r4, #0
 8007d42:	e03a      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d44:	f04f 0301 	mov.w	r3, #1
 8007d48:	f04f 0400 	mov.w	r4, #0
 8007d4c:	e035      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d4e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007d52:	f04f 0400 	mov.w	r4, #0
 8007d56:	e030      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d58:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007d5c:	f04f 0400 	mov.w	r4, #0
 8007d60:	e02b      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d62:	f04f 0320 	mov.w	r3, #32
 8007d66:	f04f 0400 	mov.w	r4, #0
 8007d6a:	e026      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d6c:	f04f 0310 	mov.w	r3, #16
 8007d70:	f04f 0400 	mov.w	r4, #0
 8007d74:	e021      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d76:	f04f 030c 	mov.w	r3, #12
 8007d7a:	f04f 0400 	mov.w	r4, #0
 8007d7e:	e01c      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d80:	f04f 030a 	mov.w	r3, #10
 8007d84:	f04f 0400 	mov.w	r4, #0
 8007d88:	e017      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d8a:	f04f 0308 	mov.w	r3, #8
 8007d8e:	f04f 0400 	mov.w	r4, #0
 8007d92:	e012      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d94:	f04f 0306 	mov.w	r3, #6
 8007d98:	f04f 0400 	mov.w	r4, #0
 8007d9c:	e00d      	b.n	8007dba <UART_SetConfig+0x92a>
 8007d9e:	f04f 0304 	mov.w	r3, #4
 8007da2:	f04f 0400 	mov.w	r4, #0
 8007da6:	e008      	b.n	8007dba <UART_SetConfig+0x92a>
 8007da8:	f04f 0302 	mov.w	r3, #2
 8007dac:	f04f 0400 	mov.w	r4, #0
 8007db0:	e003      	b.n	8007dba <UART_SetConfig+0x92a>
 8007db2:	f04f 0301 	mov.w	r3, #1
 8007db6:	f04f 0400 	mov.w	r4, #0
 8007dba:	461a      	mov	r2, r3
 8007dbc:	4623      	mov	r3, r4
 8007dbe:	f7f8 fe49 	bl	8000a54 <__aeabi_uldivmod>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4622      	mov	r2, r4
 8007dca:	f04f 0300 	mov.w	r3, #0
 8007dce:	f04f 0400 	mov.w	r4, #0
 8007dd2:	0214      	lsls	r4, r2, #8
 8007dd4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007dd8:	020b      	lsls	r3, r1, #8
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	6852      	ldr	r2, [r2, #4]
 8007dde:	0852      	lsrs	r2, r2, #1
 8007de0:	4611      	mov	r1, r2
 8007de2:	f04f 0200 	mov.w	r2, #0
 8007de6:	eb13 0b01 	adds.w	fp, r3, r1
 8007dea:	eb44 0c02 	adc.w	ip, r4, r2
 8007dee:	4658      	mov	r0, fp
 8007df0:	4661      	mov	r1, ip
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f04f 0400 	mov.w	r4, #0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4623      	mov	r3, r4
 8007dfe:	f7f8 fe29 	bl	8000a54 <__aeabi_uldivmod>
 8007e02:	4603      	mov	r3, r0
 8007e04:	460c      	mov	r4, r1
 8007e06:	61fb      	str	r3, [r7, #28]
            break;
 8007e08:	e0ab      	b.n	8007f62 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 8088 	beq.w	8007f24 <UART_SetConfig+0xa94>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d05b      	beq.n	8007ed4 <UART_SetConfig+0xa44>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d052      	beq.n	8007eca <UART_SetConfig+0xa3a>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d04a      	beq.n	8007ec2 <UART_SetConfig+0xa32>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d041      	beq.n	8007eb8 <UART_SetConfig+0xa28>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	2b05      	cmp	r3, #5
 8007e3a:	d039      	beq.n	8007eb0 <UART_SetConfig+0xa20>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	2b06      	cmp	r3, #6
 8007e42:	d031      	beq.n	8007ea8 <UART_SetConfig+0xa18>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	2b07      	cmp	r3, #7
 8007e4a:	d028      	beq.n	8007e9e <UART_SetConfig+0xa0e>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d01f      	beq.n	8007e94 <UART_SetConfig+0xa04>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	2b09      	cmp	r3, #9
 8007e5a:	d016      	beq.n	8007e8a <UART_SetConfig+0x9fa>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b0a      	cmp	r3, #10
 8007e62:	d00d      	beq.n	8007e80 <UART_SetConfig+0x9f0>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b0b      	cmp	r3, #11
 8007e6a:	d104      	bne.n	8007e76 <UART_SetConfig+0x9e6>
 8007e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e70:	f04f 0400 	mov.w	r4, #0
 8007e74:	e05a      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007e76:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e7a:	f04f 0400 	mov.w	r4, #0
 8007e7e:	e055      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e84:	f04f 0400 	mov.w	r4, #0
 8007e88:	e050      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e8e:	f04f 0400 	mov.w	r4, #0
 8007e92:	e04b      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007e94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e98:	f04f 0400 	mov.w	r4, #0
 8007e9c:	e046      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007e9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ea2:	f04f 0400 	mov.w	r4, #0
 8007ea6:	e041      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007ea8:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <UART_SetConfig+0xa88>)
 8007eaa:	f04f 0400 	mov.w	r4, #0
 8007eae:	e03d      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <UART_SetConfig+0xa8c>)
 8007eb2:	f04f 0400 	mov.w	r4, #0
 8007eb6:	e039      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007eb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ebc:	f04f 0400 	mov.w	r4, #0
 8007ec0:	e034      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007ec2:	4b17      	ldr	r3, [pc, #92]	; (8007f20 <UART_SetConfig+0xa90>)
 8007ec4:	f04f 0400 	mov.w	r4, #0
 8007ec8:	e030      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007eca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ece:	f04f 0400 	mov.w	r4, #0
 8007ed2:	e02b      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007ed4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ed8:	f04f 0400 	mov.w	r4, #0
 8007edc:	e026      	b.n	8007f2c <UART_SetConfig+0xa9c>
 8007ede:	bf00      	nop
 8007ee0:	14585500 	.word	0x14585500
 8007ee4:	00000000 	.word	0x00000000
 8007ee8:	28b0aa00 	.word	0x28b0aa00
 8007eec:	00000000 	.word	0x00000000
 8007ef0:	00f42400 	.word	0x00f42400
 8007ef4:	f4240000 	.word	0xf4240000
 8007ef8:	01e84800 	.word	0x01e84800
 8007efc:	03d09000 	.word	0x03d09000
 8007f00:	07a12000 	.word	0x07a12000
 8007f04:	0f424000 	.word	0x0f424000
 8007f08:	186a0000 	.word	0x186a0000
 8007f0c:	1e848000 	.word	0x1e848000
 8007f10:	3d090000 	.word	0x3d090000
 8007f14:	7a120000 	.word	0x7a120000
 8007f18:	000aaa00 	.word	0x000aaa00
 8007f1c:	000ccc00 	.word	0x000ccc00
 8007f20:	00155500 	.word	0x00155500
 8007f24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007f28:	f04f 0400 	mov.w	r4, #0
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	6852      	ldr	r2, [r2, #4]
 8007f30:	0852      	lsrs	r2, r2, #1
 8007f32:	4611      	mov	r1, r2
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	eb13 0b01 	adds.w	fp, r3, r1
 8007f3c:	eb44 0c02 	adc.w	ip, r4, r2
 8007f40:	4658      	mov	r0, fp
 8007f42:	4661      	mov	r1, ip
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f04f 0400 	mov.w	r4, #0
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4623      	mov	r3, r4
 8007f50:	f7f8 fd80 	bl	8000a54 <__aeabi_uldivmod>
 8007f54:	4603      	mov	r3, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	61fb      	str	r3, [r7, #28]
            break;
 8007f5a:	e002      	b.n	8007f62 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	76fb      	strb	r3, [r7, #27]
            break;
 8007f60:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f68:	d309      	bcc.n	8007f7e <UART_SetConfig+0xaee>
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f70:	d205      	bcs.n	8007f7e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	60da      	str	r2, [r3, #12]
 8007f7a:	f000 bc18 	b.w	80087ae <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	76fb      	strb	r3, [r7, #27]
 8007f82:	f000 bc14 	b.w	80087ae <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8e:	f040 8204 	bne.w	800839a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8007f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	f200 81df 	bhi.w	800835a <UART_SetConfig+0xeca>
 8007f9c:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <UART_SetConfig+0xb14>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08007fc9 	.word	0x08007fc9
 8007fa8:	08008081 	.word	0x08008081
 8007fac:	08008139 	.word	0x08008139
 8007fb0:	0800835b 	.word	0x0800835b
 8007fb4:	080081e1 	.word	0x080081e1
 8007fb8:	0800835b 	.word	0x0800835b
 8007fbc:	0800835b 	.word	0x0800835b
 8007fc0:	0800835b 	.word	0x0800835b
 8007fc4:	08008299 	.word	0x08008299
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fc8:	f7fd fbd0 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8007fcc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d044      	beq.n	8008060 <UART_SetConfig+0xbd0>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d03e      	beq.n	800805c <UART_SetConfig+0xbcc>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d038      	beq.n	8008058 <UART_SetConfig+0xbc8>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d032      	beq.n	8008054 <UART_SetConfig+0xbc4>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d02c      	beq.n	8008050 <UART_SetConfig+0xbc0>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	2b05      	cmp	r3, #5
 8007ffc:	d026      	beq.n	800804c <UART_SetConfig+0xbbc>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	2b06      	cmp	r3, #6
 8008004:	d020      	beq.n	8008048 <UART_SetConfig+0xbb8>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	2b07      	cmp	r3, #7
 800800c:	d01a      	beq.n	8008044 <UART_SetConfig+0xbb4>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	2b08      	cmp	r3, #8
 8008014:	d014      	beq.n	8008040 <UART_SetConfig+0xbb0>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	2b09      	cmp	r3, #9
 800801c:	d00e      	beq.n	800803c <UART_SetConfig+0xbac>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	2b0a      	cmp	r3, #10
 8008024:	d008      	beq.n	8008038 <UART_SetConfig+0xba8>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	2b0b      	cmp	r3, #11
 800802c:	d102      	bne.n	8008034 <UART_SetConfig+0xba4>
 800802e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008032:	e016      	b.n	8008062 <UART_SetConfig+0xbd2>
 8008034:	2301      	movs	r3, #1
 8008036:	e014      	b.n	8008062 <UART_SetConfig+0xbd2>
 8008038:	2380      	movs	r3, #128	; 0x80
 800803a:	e012      	b.n	8008062 <UART_SetConfig+0xbd2>
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	e010      	b.n	8008062 <UART_SetConfig+0xbd2>
 8008040:	2320      	movs	r3, #32
 8008042:	e00e      	b.n	8008062 <UART_SetConfig+0xbd2>
 8008044:	2310      	movs	r3, #16
 8008046:	e00c      	b.n	8008062 <UART_SetConfig+0xbd2>
 8008048:	230c      	movs	r3, #12
 800804a:	e00a      	b.n	8008062 <UART_SetConfig+0xbd2>
 800804c:	230a      	movs	r3, #10
 800804e:	e008      	b.n	8008062 <UART_SetConfig+0xbd2>
 8008050:	2308      	movs	r3, #8
 8008052:	e006      	b.n	8008062 <UART_SetConfig+0xbd2>
 8008054:	2306      	movs	r3, #6
 8008056:	e004      	b.n	8008062 <UART_SetConfig+0xbd2>
 8008058:	2304      	movs	r3, #4
 800805a:	e002      	b.n	8008062 <UART_SetConfig+0xbd2>
 800805c:	2302      	movs	r3, #2
 800805e:	e000      	b.n	8008062 <UART_SetConfig+0xbd2>
 8008060:	2301      	movs	r3, #1
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	fbb2 f3f3 	udiv	r3, r2, r3
 8008068:	005a      	lsls	r2, r3, #1
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	085b      	lsrs	r3, r3, #1
 8008070:	441a      	add	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	fbb2 f3f3 	udiv	r3, r2, r3
 800807a:	b29b      	uxth	r3, r3
 800807c:	61fb      	str	r3, [r7, #28]
        break;
 800807e:	e16f      	b.n	8008360 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008080:	f7fd fb8a 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 8008084:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	2b00      	cmp	r3, #0
 800808c:	d044      	beq.n	8008118 <UART_SetConfig+0xc88>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	2b01      	cmp	r3, #1
 8008094:	d03e      	beq.n	8008114 <UART_SetConfig+0xc84>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	2b02      	cmp	r3, #2
 800809c:	d038      	beq.n	8008110 <UART_SetConfig+0xc80>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d032      	beq.n	800810c <UART_SetConfig+0xc7c>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d02c      	beq.n	8008108 <UART_SetConfig+0xc78>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	2b05      	cmp	r3, #5
 80080b4:	d026      	beq.n	8008104 <UART_SetConfig+0xc74>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	2b06      	cmp	r3, #6
 80080bc:	d020      	beq.n	8008100 <UART_SetConfig+0xc70>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	2b07      	cmp	r3, #7
 80080c4:	d01a      	beq.n	80080fc <UART_SetConfig+0xc6c>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d014      	beq.n	80080f8 <UART_SetConfig+0xc68>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b09      	cmp	r3, #9
 80080d4:	d00e      	beq.n	80080f4 <UART_SetConfig+0xc64>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	2b0a      	cmp	r3, #10
 80080dc:	d008      	beq.n	80080f0 <UART_SetConfig+0xc60>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	2b0b      	cmp	r3, #11
 80080e4:	d102      	bne.n	80080ec <UART_SetConfig+0xc5c>
 80080e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080ea:	e016      	b.n	800811a <UART_SetConfig+0xc8a>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e014      	b.n	800811a <UART_SetConfig+0xc8a>
 80080f0:	2380      	movs	r3, #128	; 0x80
 80080f2:	e012      	b.n	800811a <UART_SetConfig+0xc8a>
 80080f4:	2340      	movs	r3, #64	; 0x40
 80080f6:	e010      	b.n	800811a <UART_SetConfig+0xc8a>
 80080f8:	2320      	movs	r3, #32
 80080fa:	e00e      	b.n	800811a <UART_SetConfig+0xc8a>
 80080fc:	2310      	movs	r3, #16
 80080fe:	e00c      	b.n	800811a <UART_SetConfig+0xc8a>
 8008100:	230c      	movs	r3, #12
 8008102:	e00a      	b.n	800811a <UART_SetConfig+0xc8a>
 8008104:	230a      	movs	r3, #10
 8008106:	e008      	b.n	800811a <UART_SetConfig+0xc8a>
 8008108:	2308      	movs	r3, #8
 800810a:	e006      	b.n	800811a <UART_SetConfig+0xc8a>
 800810c:	2306      	movs	r3, #6
 800810e:	e004      	b.n	800811a <UART_SetConfig+0xc8a>
 8008110:	2304      	movs	r3, #4
 8008112:	e002      	b.n	800811a <UART_SetConfig+0xc8a>
 8008114:	2302      	movs	r3, #2
 8008116:	e000      	b.n	800811a <UART_SetConfig+0xc8a>
 8008118:	2301      	movs	r3, #1
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008120:	005a      	lsls	r2, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	085b      	lsrs	r3, r3, #1
 8008128:	441a      	add	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008132:	b29b      	uxth	r3, r3
 8008134:	61fb      	str	r3, [r7, #28]
        break;
 8008136:	e113      	b.n	8008360 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	d043      	beq.n	80081c8 <UART_SetConfig+0xd38>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	2b01      	cmp	r3, #1
 8008146:	d03d      	beq.n	80081c4 <UART_SetConfig+0xd34>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	2b02      	cmp	r3, #2
 800814e:	d037      	beq.n	80081c0 <UART_SetConfig+0xd30>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	2b03      	cmp	r3, #3
 8008156:	d031      	beq.n	80081bc <UART_SetConfig+0xd2c>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	2b04      	cmp	r3, #4
 800815e:	d02b      	beq.n	80081b8 <UART_SetConfig+0xd28>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	2b05      	cmp	r3, #5
 8008166:	d025      	beq.n	80081b4 <UART_SetConfig+0xd24>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	2b06      	cmp	r3, #6
 800816e:	d01f      	beq.n	80081b0 <UART_SetConfig+0xd20>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	2b07      	cmp	r3, #7
 8008176:	d019      	beq.n	80081ac <UART_SetConfig+0xd1c>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	2b08      	cmp	r3, #8
 800817e:	d013      	beq.n	80081a8 <UART_SetConfig+0xd18>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	2b09      	cmp	r3, #9
 8008186:	d00d      	beq.n	80081a4 <UART_SetConfig+0xd14>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2b0a      	cmp	r3, #10
 800818e:	d007      	beq.n	80081a0 <UART_SetConfig+0xd10>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	2b0b      	cmp	r3, #11
 8008196:	d101      	bne.n	800819c <UART_SetConfig+0xd0c>
 8008198:	4b8d      	ldr	r3, [pc, #564]	; (80083d0 <UART_SetConfig+0xf40>)
 800819a:	e016      	b.n	80081ca <UART_SetConfig+0xd3a>
 800819c:	4b8d      	ldr	r3, [pc, #564]	; (80083d4 <UART_SetConfig+0xf44>)
 800819e:	e014      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081a0:	4b8d      	ldr	r3, [pc, #564]	; (80083d8 <UART_SetConfig+0xf48>)
 80081a2:	e012      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081a4:	4b8d      	ldr	r3, [pc, #564]	; (80083dc <UART_SetConfig+0xf4c>)
 80081a6:	e010      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081a8:	4b8d      	ldr	r3, [pc, #564]	; (80083e0 <UART_SetConfig+0xf50>)
 80081aa:	e00e      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081ac:	4b8d      	ldr	r3, [pc, #564]	; (80083e4 <UART_SetConfig+0xf54>)
 80081ae:	e00c      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081b0:	4b8d      	ldr	r3, [pc, #564]	; (80083e8 <UART_SetConfig+0xf58>)
 80081b2:	e00a      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081b4:	4b8d      	ldr	r3, [pc, #564]	; (80083ec <UART_SetConfig+0xf5c>)
 80081b6:	e008      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081b8:	4b8d      	ldr	r3, [pc, #564]	; (80083f0 <UART_SetConfig+0xf60>)
 80081ba:	e006      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081bc:	4b8d      	ldr	r3, [pc, #564]	; (80083f4 <UART_SetConfig+0xf64>)
 80081be:	e004      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081c0:	4b8d      	ldr	r3, [pc, #564]	; (80083f8 <UART_SetConfig+0xf68>)
 80081c2:	e002      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081c4:	4b8d      	ldr	r3, [pc, #564]	; (80083fc <UART_SetConfig+0xf6c>)
 80081c6:	e000      	b.n	80081ca <UART_SetConfig+0xd3a>
 80081c8:	4b82      	ldr	r3, [pc, #520]	; (80083d4 <UART_SetConfig+0xf44>)
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6852      	ldr	r2, [r2, #4]
 80081ce:	0852      	lsrs	r2, r2, #1
 80081d0:	441a      	add	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081da:	b29b      	uxth	r3, r3
 80081dc:	61fb      	str	r3, [r7, #28]
        break;
 80081de:	e0bf      	b.n	8008360 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081e0:	f7fd fa56 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 80081e4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d044      	beq.n	8008278 <UART_SetConfig+0xde8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d03e      	beq.n	8008274 <UART_SetConfig+0xde4>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d038      	beq.n	8008270 <UART_SetConfig+0xde0>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	2b03      	cmp	r3, #3
 8008204:	d032      	beq.n	800826c <UART_SetConfig+0xddc>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2b04      	cmp	r3, #4
 800820c:	d02c      	beq.n	8008268 <UART_SetConfig+0xdd8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	2b05      	cmp	r3, #5
 8008214:	d026      	beq.n	8008264 <UART_SetConfig+0xdd4>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	2b06      	cmp	r3, #6
 800821c:	d020      	beq.n	8008260 <UART_SetConfig+0xdd0>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	2b07      	cmp	r3, #7
 8008224:	d01a      	beq.n	800825c <UART_SetConfig+0xdcc>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	2b08      	cmp	r3, #8
 800822c:	d014      	beq.n	8008258 <UART_SetConfig+0xdc8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	2b09      	cmp	r3, #9
 8008234:	d00e      	beq.n	8008254 <UART_SetConfig+0xdc4>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b0a      	cmp	r3, #10
 800823c:	d008      	beq.n	8008250 <UART_SetConfig+0xdc0>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	2b0b      	cmp	r3, #11
 8008244:	d102      	bne.n	800824c <UART_SetConfig+0xdbc>
 8008246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800824a:	e016      	b.n	800827a <UART_SetConfig+0xdea>
 800824c:	2301      	movs	r3, #1
 800824e:	e014      	b.n	800827a <UART_SetConfig+0xdea>
 8008250:	2380      	movs	r3, #128	; 0x80
 8008252:	e012      	b.n	800827a <UART_SetConfig+0xdea>
 8008254:	2340      	movs	r3, #64	; 0x40
 8008256:	e010      	b.n	800827a <UART_SetConfig+0xdea>
 8008258:	2320      	movs	r3, #32
 800825a:	e00e      	b.n	800827a <UART_SetConfig+0xdea>
 800825c:	2310      	movs	r3, #16
 800825e:	e00c      	b.n	800827a <UART_SetConfig+0xdea>
 8008260:	230c      	movs	r3, #12
 8008262:	e00a      	b.n	800827a <UART_SetConfig+0xdea>
 8008264:	230a      	movs	r3, #10
 8008266:	e008      	b.n	800827a <UART_SetConfig+0xdea>
 8008268:	2308      	movs	r3, #8
 800826a:	e006      	b.n	800827a <UART_SetConfig+0xdea>
 800826c:	2306      	movs	r3, #6
 800826e:	e004      	b.n	800827a <UART_SetConfig+0xdea>
 8008270:	2304      	movs	r3, #4
 8008272:	e002      	b.n	800827a <UART_SetConfig+0xdea>
 8008274:	2302      	movs	r3, #2
 8008276:	e000      	b.n	800827a <UART_SetConfig+0xdea>
 8008278:	2301      	movs	r3, #1
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008280:	005a      	lsls	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	085b      	lsrs	r3, r3, #1
 8008288:	441a      	add	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008292:	b29b      	uxth	r3, r3
 8008294:	61fb      	str	r3, [r7, #28]
        break;
 8008296:	e063      	b.n	8008360 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	2b00      	cmp	r3, #0
 800829e:	d04f      	beq.n	8008340 <UART_SetConfig+0xeb0>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d048      	beq.n	800833a <UART_SetConfig+0xeaa>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d041      	beq.n	8008334 <UART_SetConfig+0xea4>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d03a      	beq.n	800832e <UART_SetConfig+0xe9e>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d033      	beq.n	8008328 <UART_SetConfig+0xe98>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	2b05      	cmp	r3, #5
 80082c6:	d02c      	beq.n	8008322 <UART_SetConfig+0xe92>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	2b06      	cmp	r3, #6
 80082ce:	d025      	beq.n	800831c <UART_SetConfig+0xe8c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	2b07      	cmp	r3, #7
 80082d6:	d01e      	beq.n	8008316 <UART_SetConfig+0xe86>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d017      	beq.n	8008310 <UART_SetConfig+0xe80>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b09      	cmp	r3, #9
 80082e6:	d010      	beq.n	800830a <UART_SetConfig+0xe7a>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	2b0a      	cmp	r3, #10
 80082ee:	d009      	beq.n	8008304 <UART_SetConfig+0xe74>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b0b      	cmp	r3, #11
 80082f6:	d102      	bne.n	80082fe <UART_SetConfig+0xe6e>
 80082f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082fc:	e022      	b.n	8008344 <UART_SetConfig+0xeb4>
 80082fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008302:	e01f      	b.n	8008344 <UART_SetConfig+0xeb4>
 8008304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008308:	e01c      	b.n	8008344 <UART_SetConfig+0xeb4>
 800830a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800830e:	e019      	b.n	8008344 <UART_SetConfig+0xeb4>
 8008310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008314:	e016      	b.n	8008344 <UART_SetConfig+0xeb4>
 8008316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800831a:	e013      	b.n	8008344 <UART_SetConfig+0xeb4>
 800831c:	f241 5354 	movw	r3, #5460	; 0x1554
 8008320:	e010      	b.n	8008344 <UART_SetConfig+0xeb4>
 8008322:	f641 1398 	movw	r3, #6552	; 0x1998
 8008326:	e00d      	b.n	8008344 <UART_SetConfig+0xeb4>
 8008328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800832c:	e00a      	b.n	8008344 <UART_SetConfig+0xeb4>
 800832e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008332:	e007      	b.n	8008344 <UART_SetConfig+0xeb4>
 8008334:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008338:	e004      	b.n	8008344 <UART_SetConfig+0xeb4>
 800833a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800833e:	e001      	b.n	8008344 <UART_SetConfig+0xeb4>
 8008340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6852      	ldr	r2, [r2, #4]
 8008348:	0852      	lsrs	r2, r2, #1
 800834a:	441a      	add	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	fbb2 f3f3 	udiv	r3, r2, r3
 8008354:	b29b      	uxth	r3, r3
 8008356:	61fb      	str	r3, [r7, #28]
        break;
 8008358:	e002      	b.n	8008360 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	76fb      	strb	r3, [r7, #27]
        break;
 800835e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	2b0f      	cmp	r3, #15
 8008364:	d916      	bls.n	8008394 <UART_SetConfig+0xf04>
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836c:	d212      	bcs.n	8008394 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	b29b      	uxth	r3, r3
 8008372:	f023 030f 	bic.w	r3, r3, #15
 8008376:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	085b      	lsrs	r3, r3, #1
 800837c:	b29b      	uxth	r3, r3
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	b29a      	uxth	r2, r3
 8008384:	89fb      	ldrh	r3, [r7, #14]
 8008386:	4313      	orrs	r3, r2
 8008388:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	89fa      	ldrh	r2, [r7, #14]
 8008390:	60da      	str	r2, [r3, #12]
 8008392:	e20c      	b.n	80087ae <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	76fb      	strb	r3, [r7, #27]
 8008398:	e209      	b.n	80087ae <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 800839a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800839e:	2b08      	cmp	r3, #8
 80083a0:	f200 81f4 	bhi.w	800878c <UART_SetConfig+0x12fc>
 80083a4:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <UART_SetConfig+0xf1c>)
 80083a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083aa:	bf00      	nop
 80083ac:	08008401 	.word	0x08008401
 80083b0:	080084b7 	.word	0x080084b7
 80083b4:	0800856d 	.word	0x0800856d
 80083b8:	0800878d 	.word	0x0800878d
 80083bc:	08008617 	.word	0x08008617
 80083c0:	0800878d 	.word	0x0800878d
 80083c4:	0800878d 	.word	0x0800878d
 80083c8:	0800878d 	.word	0x0800878d
 80083cc:	080086cd 	.word	0x080086cd
 80083d0:	0001e848 	.word	0x0001e848
 80083d4:	01e84800 	.word	0x01e84800
 80083d8:	0003d090 	.word	0x0003d090
 80083dc:	0007a120 	.word	0x0007a120
 80083e0:	000f4240 	.word	0x000f4240
 80083e4:	001e8480 	.word	0x001e8480
 80083e8:	0028b0aa 	.word	0x0028b0aa
 80083ec:	0030d400 	.word	0x0030d400
 80083f0:	003d0900 	.word	0x003d0900
 80083f4:	00516154 	.word	0x00516154
 80083f8:	007a1200 	.word	0x007a1200
 80083fc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008400:	f7fd f9b4 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8008404:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	2b00      	cmp	r3, #0
 800840c:	d044      	beq.n	8008498 <UART_SetConfig+0x1008>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	2b01      	cmp	r3, #1
 8008414:	d03e      	beq.n	8008494 <UART_SetConfig+0x1004>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	2b02      	cmp	r3, #2
 800841c:	d038      	beq.n	8008490 <UART_SetConfig+0x1000>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	2b03      	cmp	r3, #3
 8008424:	d032      	beq.n	800848c <UART_SetConfig+0xffc>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	2b04      	cmp	r3, #4
 800842c:	d02c      	beq.n	8008488 <UART_SetConfig+0xff8>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	2b05      	cmp	r3, #5
 8008434:	d026      	beq.n	8008484 <UART_SetConfig+0xff4>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	2b06      	cmp	r3, #6
 800843c:	d020      	beq.n	8008480 <UART_SetConfig+0xff0>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	2b07      	cmp	r3, #7
 8008444:	d01a      	beq.n	800847c <UART_SetConfig+0xfec>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	2b08      	cmp	r3, #8
 800844c:	d014      	beq.n	8008478 <UART_SetConfig+0xfe8>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008452:	2b09      	cmp	r3, #9
 8008454:	d00e      	beq.n	8008474 <UART_SetConfig+0xfe4>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	2b0a      	cmp	r3, #10
 800845c:	d008      	beq.n	8008470 <UART_SetConfig+0xfe0>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	2b0b      	cmp	r3, #11
 8008464:	d102      	bne.n	800846c <UART_SetConfig+0xfdc>
 8008466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800846a:	e016      	b.n	800849a <UART_SetConfig+0x100a>
 800846c:	2301      	movs	r3, #1
 800846e:	e014      	b.n	800849a <UART_SetConfig+0x100a>
 8008470:	2380      	movs	r3, #128	; 0x80
 8008472:	e012      	b.n	800849a <UART_SetConfig+0x100a>
 8008474:	2340      	movs	r3, #64	; 0x40
 8008476:	e010      	b.n	800849a <UART_SetConfig+0x100a>
 8008478:	2320      	movs	r3, #32
 800847a:	e00e      	b.n	800849a <UART_SetConfig+0x100a>
 800847c:	2310      	movs	r3, #16
 800847e:	e00c      	b.n	800849a <UART_SetConfig+0x100a>
 8008480:	230c      	movs	r3, #12
 8008482:	e00a      	b.n	800849a <UART_SetConfig+0x100a>
 8008484:	230a      	movs	r3, #10
 8008486:	e008      	b.n	800849a <UART_SetConfig+0x100a>
 8008488:	2308      	movs	r3, #8
 800848a:	e006      	b.n	800849a <UART_SetConfig+0x100a>
 800848c:	2306      	movs	r3, #6
 800848e:	e004      	b.n	800849a <UART_SetConfig+0x100a>
 8008490:	2304      	movs	r3, #4
 8008492:	e002      	b.n	800849a <UART_SetConfig+0x100a>
 8008494:	2302      	movs	r3, #2
 8008496:	e000      	b.n	800849a <UART_SetConfig+0x100a>
 8008498:	2301      	movs	r3, #1
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	fbb2 f2f3 	udiv	r2, r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	085b      	lsrs	r3, r3, #1
 80084a6:	441a      	add	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	61fb      	str	r3, [r7, #28]
        break;
 80084b4:	e16d      	b.n	8008792 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084b6:	f7fd f96f 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 80084ba:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d044      	beq.n	800854e <UART_SetConfig+0x10be>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d03e      	beq.n	800854a <UART_SetConfig+0x10ba>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d038      	beq.n	8008546 <UART_SetConfig+0x10b6>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d032      	beq.n	8008542 <UART_SetConfig+0x10b2>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d02c      	beq.n	800853e <UART_SetConfig+0x10ae>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	2b05      	cmp	r3, #5
 80084ea:	d026      	beq.n	800853a <UART_SetConfig+0x10aa>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	2b06      	cmp	r3, #6
 80084f2:	d020      	beq.n	8008536 <UART_SetConfig+0x10a6>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	2b07      	cmp	r3, #7
 80084fa:	d01a      	beq.n	8008532 <UART_SetConfig+0x10a2>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	2b08      	cmp	r3, #8
 8008502:	d014      	beq.n	800852e <UART_SetConfig+0x109e>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	2b09      	cmp	r3, #9
 800850a:	d00e      	beq.n	800852a <UART_SetConfig+0x109a>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	2b0a      	cmp	r3, #10
 8008512:	d008      	beq.n	8008526 <UART_SetConfig+0x1096>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	2b0b      	cmp	r3, #11
 800851a:	d102      	bne.n	8008522 <UART_SetConfig+0x1092>
 800851c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008520:	e016      	b.n	8008550 <UART_SetConfig+0x10c0>
 8008522:	2301      	movs	r3, #1
 8008524:	e014      	b.n	8008550 <UART_SetConfig+0x10c0>
 8008526:	2380      	movs	r3, #128	; 0x80
 8008528:	e012      	b.n	8008550 <UART_SetConfig+0x10c0>
 800852a:	2340      	movs	r3, #64	; 0x40
 800852c:	e010      	b.n	8008550 <UART_SetConfig+0x10c0>
 800852e:	2320      	movs	r3, #32
 8008530:	e00e      	b.n	8008550 <UART_SetConfig+0x10c0>
 8008532:	2310      	movs	r3, #16
 8008534:	e00c      	b.n	8008550 <UART_SetConfig+0x10c0>
 8008536:	230c      	movs	r3, #12
 8008538:	e00a      	b.n	8008550 <UART_SetConfig+0x10c0>
 800853a:	230a      	movs	r3, #10
 800853c:	e008      	b.n	8008550 <UART_SetConfig+0x10c0>
 800853e:	2308      	movs	r3, #8
 8008540:	e006      	b.n	8008550 <UART_SetConfig+0x10c0>
 8008542:	2306      	movs	r3, #6
 8008544:	e004      	b.n	8008550 <UART_SetConfig+0x10c0>
 8008546:	2304      	movs	r3, #4
 8008548:	e002      	b.n	8008550 <UART_SetConfig+0x10c0>
 800854a:	2302      	movs	r3, #2
 800854c:	e000      	b.n	8008550 <UART_SetConfig+0x10c0>
 800854e:	2301      	movs	r3, #1
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	fbb2 f2f3 	udiv	r2, r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	085b      	lsrs	r3, r3, #1
 800855c:	441a      	add	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	fbb2 f3f3 	udiv	r3, r2, r3
 8008566:	b29b      	uxth	r3, r3
 8008568:	61fb      	str	r3, [r7, #28]
        break;
 800856a:	e112      	b.n	8008792 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	d044      	beq.n	80085fe <UART_SetConfig+0x116e>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b01      	cmp	r3, #1
 800857a:	d03e      	beq.n	80085fa <UART_SetConfig+0x116a>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b02      	cmp	r3, #2
 8008582:	d038      	beq.n	80085f6 <UART_SetConfig+0x1166>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	2b03      	cmp	r3, #3
 800858a:	d032      	beq.n	80085f2 <UART_SetConfig+0x1162>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	2b04      	cmp	r3, #4
 8008592:	d02c      	beq.n	80085ee <UART_SetConfig+0x115e>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b05      	cmp	r3, #5
 800859a:	d026      	beq.n	80085ea <UART_SetConfig+0x115a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b06      	cmp	r3, #6
 80085a2:	d020      	beq.n	80085e6 <UART_SetConfig+0x1156>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b07      	cmp	r3, #7
 80085aa:	d01a      	beq.n	80085e2 <UART_SetConfig+0x1152>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d014      	beq.n	80085de <UART_SetConfig+0x114e>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b09      	cmp	r3, #9
 80085ba:	d00e      	beq.n	80085da <UART_SetConfig+0x114a>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b0a      	cmp	r3, #10
 80085c2:	d008      	beq.n	80085d6 <UART_SetConfig+0x1146>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b0b      	cmp	r3, #11
 80085ca:	d102      	bne.n	80085d2 <UART_SetConfig+0x1142>
 80085cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80085d0:	e016      	b.n	8008600 <UART_SetConfig+0x1170>
 80085d2:	4b81      	ldr	r3, [pc, #516]	; (80087d8 <UART_SetConfig+0x1348>)
 80085d4:	e014      	b.n	8008600 <UART_SetConfig+0x1170>
 80085d6:	4b81      	ldr	r3, [pc, #516]	; (80087dc <UART_SetConfig+0x134c>)
 80085d8:	e012      	b.n	8008600 <UART_SetConfig+0x1170>
 80085da:	4b81      	ldr	r3, [pc, #516]	; (80087e0 <UART_SetConfig+0x1350>)
 80085dc:	e010      	b.n	8008600 <UART_SetConfig+0x1170>
 80085de:	4b81      	ldr	r3, [pc, #516]	; (80087e4 <UART_SetConfig+0x1354>)
 80085e0:	e00e      	b.n	8008600 <UART_SetConfig+0x1170>
 80085e2:	4b81      	ldr	r3, [pc, #516]	; (80087e8 <UART_SetConfig+0x1358>)
 80085e4:	e00c      	b.n	8008600 <UART_SetConfig+0x1170>
 80085e6:	4b81      	ldr	r3, [pc, #516]	; (80087ec <UART_SetConfig+0x135c>)
 80085e8:	e00a      	b.n	8008600 <UART_SetConfig+0x1170>
 80085ea:	4b81      	ldr	r3, [pc, #516]	; (80087f0 <UART_SetConfig+0x1360>)
 80085ec:	e008      	b.n	8008600 <UART_SetConfig+0x1170>
 80085ee:	4b81      	ldr	r3, [pc, #516]	; (80087f4 <UART_SetConfig+0x1364>)
 80085f0:	e006      	b.n	8008600 <UART_SetConfig+0x1170>
 80085f2:	4b81      	ldr	r3, [pc, #516]	; (80087f8 <UART_SetConfig+0x1368>)
 80085f4:	e004      	b.n	8008600 <UART_SetConfig+0x1170>
 80085f6:	4b81      	ldr	r3, [pc, #516]	; (80087fc <UART_SetConfig+0x136c>)
 80085f8:	e002      	b.n	8008600 <UART_SetConfig+0x1170>
 80085fa:	4b81      	ldr	r3, [pc, #516]	; (8008800 <UART_SetConfig+0x1370>)
 80085fc:	e000      	b.n	8008600 <UART_SetConfig+0x1170>
 80085fe:	4b76      	ldr	r3, [pc, #472]	; (80087d8 <UART_SetConfig+0x1348>)
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6852      	ldr	r2, [r2, #4]
 8008604:	0852      	lsrs	r2, r2, #1
 8008606:	441a      	add	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008610:	b29b      	uxth	r3, r3
 8008612:	61fb      	str	r3, [r7, #28]
        break;
 8008614:	e0bd      	b.n	8008792 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008616:	f7fd f83b 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 800861a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d044      	beq.n	80086ae <UART_SetConfig+0x121e>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	2b01      	cmp	r3, #1
 800862a:	d03e      	beq.n	80086aa <UART_SetConfig+0x121a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b02      	cmp	r3, #2
 8008632:	d038      	beq.n	80086a6 <UART_SetConfig+0x1216>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	2b03      	cmp	r3, #3
 800863a:	d032      	beq.n	80086a2 <UART_SetConfig+0x1212>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	2b04      	cmp	r3, #4
 8008642:	d02c      	beq.n	800869e <UART_SetConfig+0x120e>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	2b05      	cmp	r3, #5
 800864a:	d026      	beq.n	800869a <UART_SetConfig+0x120a>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	2b06      	cmp	r3, #6
 8008652:	d020      	beq.n	8008696 <UART_SetConfig+0x1206>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b07      	cmp	r3, #7
 800865a:	d01a      	beq.n	8008692 <UART_SetConfig+0x1202>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	2b08      	cmp	r3, #8
 8008662:	d014      	beq.n	800868e <UART_SetConfig+0x11fe>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008668:	2b09      	cmp	r3, #9
 800866a:	d00e      	beq.n	800868a <UART_SetConfig+0x11fa>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	2b0a      	cmp	r3, #10
 8008672:	d008      	beq.n	8008686 <UART_SetConfig+0x11f6>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	2b0b      	cmp	r3, #11
 800867a:	d102      	bne.n	8008682 <UART_SetConfig+0x11f2>
 800867c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008680:	e016      	b.n	80086b0 <UART_SetConfig+0x1220>
 8008682:	2301      	movs	r3, #1
 8008684:	e014      	b.n	80086b0 <UART_SetConfig+0x1220>
 8008686:	2380      	movs	r3, #128	; 0x80
 8008688:	e012      	b.n	80086b0 <UART_SetConfig+0x1220>
 800868a:	2340      	movs	r3, #64	; 0x40
 800868c:	e010      	b.n	80086b0 <UART_SetConfig+0x1220>
 800868e:	2320      	movs	r3, #32
 8008690:	e00e      	b.n	80086b0 <UART_SetConfig+0x1220>
 8008692:	2310      	movs	r3, #16
 8008694:	e00c      	b.n	80086b0 <UART_SetConfig+0x1220>
 8008696:	230c      	movs	r3, #12
 8008698:	e00a      	b.n	80086b0 <UART_SetConfig+0x1220>
 800869a:	230a      	movs	r3, #10
 800869c:	e008      	b.n	80086b0 <UART_SetConfig+0x1220>
 800869e:	2308      	movs	r3, #8
 80086a0:	e006      	b.n	80086b0 <UART_SetConfig+0x1220>
 80086a2:	2306      	movs	r3, #6
 80086a4:	e004      	b.n	80086b0 <UART_SetConfig+0x1220>
 80086a6:	2304      	movs	r3, #4
 80086a8:	e002      	b.n	80086b0 <UART_SetConfig+0x1220>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e000      	b.n	80086b0 <UART_SetConfig+0x1220>
 80086ae:	2301      	movs	r3, #1
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	441a      	add	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	61fb      	str	r3, [r7, #28]
        break;
 80086ca:	e062      	b.n	8008792 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d04e      	beq.n	8008772 <UART_SetConfig+0x12e2>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d047      	beq.n	800876c <UART_SetConfig+0x12dc>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d040      	beq.n	8008766 <UART_SetConfig+0x12d6>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d039      	beq.n	8008760 <UART_SetConfig+0x12d0>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d032      	beq.n	800875a <UART_SetConfig+0x12ca>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	2b05      	cmp	r3, #5
 80086fa:	d02b      	beq.n	8008754 <UART_SetConfig+0x12c4>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	2b06      	cmp	r3, #6
 8008702:	d024      	beq.n	800874e <UART_SetConfig+0x12be>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	2b07      	cmp	r3, #7
 800870a:	d01d      	beq.n	8008748 <UART_SetConfig+0x12b8>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b08      	cmp	r3, #8
 8008712:	d016      	beq.n	8008742 <UART_SetConfig+0x12b2>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	2b09      	cmp	r3, #9
 800871a:	d00f      	beq.n	800873c <UART_SetConfig+0x12ac>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b0a      	cmp	r3, #10
 8008722:	d008      	beq.n	8008736 <UART_SetConfig+0x12a6>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	2b0b      	cmp	r3, #11
 800872a:	d101      	bne.n	8008730 <UART_SetConfig+0x12a0>
 800872c:	2380      	movs	r3, #128	; 0x80
 800872e:	e022      	b.n	8008776 <UART_SetConfig+0x12e6>
 8008730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008734:	e01f      	b.n	8008776 <UART_SetConfig+0x12e6>
 8008736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800873a:	e01c      	b.n	8008776 <UART_SetConfig+0x12e6>
 800873c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008740:	e019      	b.n	8008776 <UART_SetConfig+0x12e6>
 8008742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008746:	e016      	b.n	8008776 <UART_SetConfig+0x12e6>
 8008748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800874c:	e013      	b.n	8008776 <UART_SetConfig+0x12e6>
 800874e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008752:	e010      	b.n	8008776 <UART_SetConfig+0x12e6>
 8008754:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008758:	e00d      	b.n	8008776 <UART_SetConfig+0x12e6>
 800875a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800875e:	e00a      	b.n	8008776 <UART_SetConfig+0x12e6>
 8008760:	f241 5355 	movw	r3, #5461	; 0x1555
 8008764:	e007      	b.n	8008776 <UART_SetConfig+0x12e6>
 8008766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800876a:	e004      	b.n	8008776 <UART_SetConfig+0x12e6>
 800876c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008770:	e001      	b.n	8008776 <UART_SetConfig+0x12e6>
 8008772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6852      	ldr	r2, [r2, #4]
 800877a:	0852      	lsrs	r2, r2, #1
 800877c:	441a      	add	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	b29b      	uxth	r3, r3
 8008788:	61fb      	str	r3, [r7, #28]
        break;
 800878a:	e002      	b.n	8008792 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	76fb      	strb	r3, [r7, #27]
        break;
 8008790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d908      	bls.n	80087aa <UART_SetConfig+0x131a>
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879e:	d204      	bcs.n	80087aa <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	60da      	str	r2, [r3, #12]
 80087a8:	e001      	b.n	80087ae <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80087ca:	7efb      	ldrb	r3, [r7, #27]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3728      	adds	r7, #40	; 0x28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80087d6:	bf00      	nop
 80087d8:	00f42400 	.word	0x00f42400
 80087dc:	0001e848 	.word	0x0001e848
 80087e0:	0003d090 	.word	0x0003d090
 80087e4:	0007a120 	.word	0x0007a120
 80087e8:	000f4240 	.word	0x000f4240
 80087ec:	00145855 	.word	0x00145855
 80087f0:	00186a00 	.word	0x00186a00
 80087f4:	001e8480 	.word	0x001e8480
 80087f8:	0028b0aa 	.word	0x0028b0aa
 80087fc:	003d0900 	.word	0x003d0900
 8008800:	007a1200 	.word	0x007a1200

08008804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00a      	beq.n	800882e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	f003 0310 	and.w	r3, r3, #16
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00a      	beq.n	80088b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d01a      	beq.n	800891a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008902:	d10a      	bne.n	800891a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	605a      	str	r2, [r3, #4]
  }
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af02      	add	r7, sp, #8
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008958:	f7f9 fb8e 	bl	8002078 <HAL_GetTick>
 800895c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	2b08      	cmp	r3, #8
 800896a:	d10e      	bne.n	800898a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800896c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f82c 	bl	80089d8 <UART_WaitOnFlagUntilTimeout>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e022      	b.n	80089d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b04      	cmp	r3, #4
 8008996:	d10e      	bne.n	80089b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f816 	bl	80089d8 <UART_WaitOnFlagUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e00c      	b.n	80089d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	4613      	mov	r3, r2
 80089e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e8:	e02c      	b.n	8008a44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f0:	d028      	beq.n	8008a44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089f2:	f7f9 fb41 	bl	8002078 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d302      	bcc.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d11d      	bne.n	8008a44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689a      	ldr	r2, [r3, #8]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0201 	bic.w	r2, r2, #1
 8008a26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e00f      	b.n	8008a64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	69da      	ldr	r2, [r3, #28]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	bf0c      	ite	eq
 8008a54:	2301      	moveq	r3, #1
 8008a56:	2300      	movne	r3, #0
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	79fb      	ldrb	r3, [r7, #7]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d0c3      	beq.n	80089ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a82:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a92:	f023 0301 	bic.w	r3, r3, #1
 8008a96:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7fe fcd3 	bl	800747c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7fe fcaf 	bl	8007468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b2e:	bf00      	nop
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b60:	2302      	movs	r3, #2
 8008b62:	e027      	b.n	8008bb4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2224      	movs	r2, #36	; 0x24
 8008b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0201 	bic.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d101      	bne.n	8008bd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e02d      	b.n	8008c34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2224      	movs	r2, #36	; 0x24
 8008be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 0201 	bic.w	r2, r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f84f 	bl	8008cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e02d      	b.n	8008cb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2224      	movs	r2, #36	; 0x24
 8008c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0201 	bic.w	r2, r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f811 	bl	8008cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b089      	sub	sp, #36	; 0x24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008cc0:	4a2f      	ldr	r2, [pc, #188]	; (8008d80 <UARTEx_SetNbDataToProcess+0xc8>)
 8008cc2:	f107 0314 	add.w	r3, r7, #20
 8008cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008cce:	4a2d      	ldr	r2, [pc, #180]	; (8008d84 <UARTEx_SetNbDataToProcess+0xcc>)
 8008cd0:	f107 030c 	add.w	r3, r7, #12
 8008cd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cd8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d108      	bne.n	8008cf6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cf4:	e03d      	b.n	8008d72 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cf6:	2308      	movs	r3, #8
 8008cf8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	0e5b      	lsrs	r3, r3, #25
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	0f5b      	lsrs	r3, r3, #29
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f003 0307 	and.w	r3, r3, #7
 8008d1c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008d1e:	7fbb      	ldrb	r3, [r7, #30]
 8008d20:	7f3a      	ldrb	r2, [r7, #28]
 8008d22:	f107 0120 	add.w	r1, r7, #32
 8008d26:	440a      	add	r2, r1
 8008d28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d2c:	fb02 f303 	mul.w	r3, r2, r3
 8008d30:	7f3a      	ldrb	r2, [r7, #28]
 8008d32:	f107 0120 	add.w	r1, r7, #32
 8008d36:	440a      	add	r2, r1
 8008d38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008d48:	7ffb      	ldrb	r3, [r7, #31]
 8008d4a:	7f7a      	ldrb	r2, [r7, #29]
 8008d4c:	f107 0120 	add.w	r1, r7, #32
 8008d50:	440a      	add	r2, r1
 8008d52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	7f7a      	ldrb	r2, [r7, #29]
 8008d5c:	f107 0120 	add.w	r1, r7, #32
 8008d60:	440a      	add	r2, r1
 8008d62:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d66:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d72:	bf00      	nop
 8008d74:	3724      	adds	r7, #36	; 0x24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	08008df8 	.word	0x08008df8
 8008d84:	08008e00 	.word	0x08008e00

08008d88 <__libc_init_array>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	4e0d      	ldr	r6, [pc, #52]	; (8008dc0 <__libc_init_array+0x38>)
 8008d8c:	4c0d      	ldr	r4, [pc, #52]	; (8008dc4 <__libc_init_array+0x3c>)
 8008d8e:	1ba4      	subs	r4, r4, r6
 8008d90:	10a4      	asrs	r4, r4, #2
 8008d92:	2500      	movs	r5, #0
 8008d94:	42a5      	cmp	r5, r4
 8008d96:	d109      	bne.n	8008dac <__libc_init_array+0x24>
 8008d98:	4e0b      	ldr	r6, [pc, #44]	; (8008dc8 <__libc_init_array+0x40>)
 8008d9a:	4c0c      	ldr	r4, [pc, #48]	; (8008dcc <__libc_init_array+0x44>)
 8008d9c:	f000 f820 	bl	8008de0 <_init>
 8008da0:	1ba4      	subs	r4, r4, r6
 8008da2:	10a4      	asrs	r4, r4, #2
 8008da4:	2500      	movs	r5, #0
 8008da6:	42a5      	cmp	r5, r4
 8008da8:	d105      	bne.n	8008db6 <__libc_init_array+0x2e>
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008db0:	4798      	blx	r3
 8008db2:	3501      	adds	r5, #1
 8008db4:	e7ee      	b.n	8008d94 <__libc_init_array+0xc>
 8008db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dba:	4798      	blx	r3
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	e7f2      	b.n	8008da6 <__libc_init_array+0x1e>
 8008dc0:	08008e28 	.word	0x08008e28
 8008dc4:	08008e28 	.word	0x08008e28
 8008dc8:	08008e28 	.word	0x08008e28
 8008dcc:	08008e2c 	.word	0x08008e2c

08008dd0 <memset>:
 8008dd0:	4402      	add	r2, r0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d100      	bne.n	8008dda <memset+0xa>
 8008dd8:	4770      	bx	lr
 8008dda:	f803 1b01 	strb.w	r1, [r3], #1
 8008dde:	e7f9      	b.n	8008dd4 <memset+0x4>

08008de0 <_init>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr

08008dec <_fini>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr
