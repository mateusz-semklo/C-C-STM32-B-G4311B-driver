
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf0  08008bf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf0  08008bf0  00018bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf8  08008bf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bfc  08008bfc  00018bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  2000000c  08008c0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08008c0c  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001914e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e3c  00000000  00000000  0003918a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0003bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  0003d570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219fc  00000000  00000000  0003e990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000130b1  00000000  00000000  0006038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de0d8  00000000  00000000  0007343d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc0  00000000  00000000  00151590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008bb0 	.word	0x08008bb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008bb0 	.word	0x08008bb0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b092      	sub	sp, #72	; 0x48
 800051c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800051e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	223c      	movs	r2, #60	; 0x3c
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f008 fb35 	bl	8008ba0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000536:	4b43      	ldr	r3, [pc, #268]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800053c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800053e:	4b41      	ldr	r3, [pc, #260]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000540:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000544:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000546:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054c:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <MX_ADC1_Init+0x12c>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000552:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000558:	4b3a      	ldr	r3, [pc, #232]	; (8000644 <MX_ADC1_Init+0x12c>)
 800055a:	2201      	movs	r2, #1
 800055c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b39      	ldr	r3, [pc, #228]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000560:	2204      	movs	r2, #4
 8000562:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000564:	4b37      	ldr	r3, [pc, #220]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000566:	2200      	movs	r2, #0
 8000568:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056a:	4b36      	ldr	r3, [pc, #216]	; (8000644 <MX_ADC1_Init+0x12c>)
 800056c:	2200      	movs	r2, #0
 800056e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000570:	4b34      	ldr	r3, [pc, #208]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000572:	2201      	movs	r2, #1
 8000574:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b33      	ldr	r3, [pc, #204]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057e:	4b31      	ldr	r3, [pc, #196]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000588:	2200      	movs	r2, #0
 800058a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800058c:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <MX_ADC1_Init+0x12c>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	482b      	ldr	r0, [pc, #172]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000596:	f001 fbc9 	bl	8001d2c <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005a0:	f000 fc90 	bl	8000ec4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ac:	4619      	mov	r1, r3
 80005ae:	4825      	ldr	r0, [pc, #148]	; (8000644 <MX_ADC1_Init+0x12c>)
 80005b0:	f003 f8bc 	bl	800372c <HAL_ADCEx_MultiModeConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005ba:	f000 fc83 	bl	8000ec4 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <MX_ADC1_Init+0x130>)
 80005c0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80005ca:	237f      	movs	r3, #127	; 0x7f
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80005ce:	2304      	movs	r3, #4
 80005d0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T2_TRGO;
 80005ec:	2388      	movs	r3, #136	; 0x88
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000600:	f002 fc3c 	bl	8002e7c <HAL_ADCEx_InjectedConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800060a:	f000 fc5b 	bl	8000ec4 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x134>)
 8000610:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000612:	f240 130f 	movw	r3, #271	; 0x10f
 8000616:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 800061c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000620:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8000622:	2301      	movs	r3, #1
 8000624:	773b      	strb	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	4619      	mov	r1, r3
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <MX_ADC1_Init+0x12c>)
 800062c:	f002 fc26 	bl	8002e7c <HAL_ADCEx_InjectedConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000636:	f000 fc45 	bl	8000ec4 <Error_Handler>
  }

}
 800063a:	bf00      	nop
 800063c:	3748      	adds	r7, #72	; 0x48
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000098 	.word	0x20000098
 8000648:	0c900008 	.word	0x0c900008
 800064c:	32601000 	.word	0x32601000

08000650 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b090      	sub	sp, #64	; 0x40
 8000654:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	223c      	movs	r2, #60	; 0x3c
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f008 fa9f 	bl	8008ba0 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000664:	4a34      	ldr	r2, [pc, #208]	; (8000738 <MX_ADC2_Init+0xe8>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <MX_ADC2_Init+0xe4>)
 800066a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800066e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_ADC2_Init+0xe4>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_ADC2_Init+0xe4>)
 800068a:	2204      	movs	r2, #4
 800068c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000690:	2200      	movs	r2, #0
 8000692:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000696:	2200      	movs	r2, #0
 8000698:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <MX_ADC2_Init+0xe4>)
 800069c:	2201      	movs	r2, #1
 800069e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006be:	481d      	ldr	r0, [pc, #116]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006c0:	f001 fb34 	bl	8001d2c <HAL_ADC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80006ca:	f000 fbfb 	bl	8000ec4 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC2_Init+0xec>)
 80006d0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006d2:	2309      	movs	r3, #9
 80006d4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006da:	237f      	movs	r3, #127	; 0x7f
 80006dc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 80006e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ea:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T2_TRGO;
 8000708:	2388      	movs	r3, #136	; 0x88
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_ADC2_Init+0xe4>)
 800071c:	f002 fbae 	bl	8002e7c <HAL_ADCEx_InjectedConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8000726:	f000 fbcd 	bl	8000ec4 <Error_Handler>
  }

}
 800072a:	bf00      	nop
 800072c:	3740      	adds	r7, #64	; 0x40
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000002c 	.word	0x2000002c
 8000738:	50000100 	.word	0x50000100
 800073c:	0c900008 	.word	0x0c900008

08000740 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000760:	d14e      	bne.n	8000800 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000762:	4b47      	ldr	r3, [pc, #284]	; (8000880 <HAL_ADC_MspInit+0x140>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	4a45      	ldr	r2, [pc, #276]	; (8000880 <HAL_ADC_MspInit+0x140>)
 800076a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800076c:	4b44      	ldr	r3, [pc, #272]	; (8000880 <HAL_ADC_MspInit+0x140>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10b      	bne.n	800078c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000774:	4b43      	ldr	r3, [pc, #268]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000778:	4a42      	ldr	r2, [pc, #264]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800077a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800077e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000780:	4b40      	ldr	r3, [pc, #256]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800078e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000790:	4a3c      	ldr	r2, [pc, #240]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000798:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_ADC_MspInit+0x144>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	4a36      	ldr	r2, [pc, #216]	; (8000884 <HAL_ADC_MspInit+0x144>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b0:	4b34      	ldr	r3, [pc, #208]	; (8000884 <HAL_ADC_MspInit+0x144>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80007bc:	2305      	movs	r3, #5
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c0:	2303      	movs	r3, #3
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f003 f9c1 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4827      	ldr	r0, [pc, #156]	; (8000888 <HAL_ADC_MspInit+0x148>)
 80007ea:	f003 f9b5 	bl	8003b58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2101      	movs	r1, #1
 80007f2:	2012      	movs	r0, #18
 80007f4:	f003 f915 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007f8:	2012      	movs	r0, #18
 80007fa:	f003 f92c 	bl	8003a56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007fe:	e03a      	b.n	8000876 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <HAL_ADC_MspInit+0x14c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d135      	bne.n	8000876 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <HAL_ADC_MspInit+0x140>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <HAL_ADC_MspInit+0x140>)
 8000812:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <HAL_ADC_MspInit+0x140>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d10b      	bne.n	8000834 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	4a18      	ldr	r2, [pc, #96]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800084c:	2340      	movs	r3, #64	; 0x40
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000850:	2303      	movs	r3, #3
 8000852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f003 f979 	bl	8003b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2101      	movs	r1, #1
 800086a:	2012      	movs	r0, #18
 800086c:	f003 f8d9 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000870:	2012      	movs	r0, #18
 8000872:	f003 f8f0 	bl	8003a56 <HAL_NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3730      	adds	r7, #48	; 0x30
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000028 	.word	0x20000028
 8000884:	40021000 	.word	0x40021000
 8000888:	48000400 	.word	0x48000400
 800088c:	50000100 	.word	0x50000100

08000890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_GPIO_Init+0xac>)
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_GPIO_Init+0xb0>)
 800091c:	f003 f91c 	bl	8003b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	210f      	movs	r1, #15
 8000924:	2028      	movs	r0, #40	; 0x28
 8000926:	f003 f87c 	bl	8003a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092a:	2028      	movs	r0, #40	; 0x28
 800092c:	f003 f893 	bl	8003a56 <HAL_NVIC_EnableIRQ>

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	10110000 	.word	0x10110000
 8000940:	48000800 	.word	0x48000800

08000944 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	; 0x40
 8000948:	af00      	add	r7, sp, #0


	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 800094a:	217f      	movs	r1, #127	; 0x7f
 800094c:	4830      	ldr	r0, [pc, #192]	; (8000a10 <start_up+0xcc>)
 800094e:	f002 f8a9 	bl	8002aa4 <HAL_ADCEx_Calibration_Start>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d008      	beq.n	800096a <start_up+0x26>
 8000958:	217f      	movs	r1, #127	; 0x7f
 800095a:	482e      	ldr	r0, [pc, #184]	; (8000a14 <start_up+0xd0>)
 800095c:	f002 f8a2 	bl	8002aa4 <HAL_ADCEx_Calibration_Start>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <start_up+0x26>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <start_up+0x28>
 800096a:	2300      	movs	r3, #0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d14b      	bne.n	8000a08 <start_up+0xc4>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)));
 8000970:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <start_up+0xd4>)
 8000972:	492a      	ldr	r1, [pc, #168]	; (8000a1c <start_up+0xd8>)
 8000974:	482a      	ldr	r0, [pc, #168]	; (8000a20 <start_up+0xdc>)
 8000976:	f003 fba2 	bl	80040be <HAL_OPAMPEx_SelfCalibrateAll>
		{
			ADC_InjectionConfTypeDef sConfigInjected;

			//////// start OPAMP 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 800097a:	4829      	ldr	r0, [pc, #164]	; (8000a20 <start_up+0xdc>)
 800097c:	f003 fb6e 	bl	800405c <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 8000980:	4826      	ldr	r0, [pc, #152]	; (8000a1c <start_up+0xd8>)
 8000982:	f003 fb6b 	bl	800405c <HAL_OPAMP_Start>

			//////// start ADC 1 2 ///////////////////////////////////



			HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000986:	4822      	ldr	r0, [pc, #136]	; (8000a10 <start_up+0xcc>)
 8000988:	f002 f8ee 	bl	8002b68 <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <start_up+0xd0>)
 800098e:	f002 f8eb 	bl	8002b68 <HAL_ADCEx_InjectedStart_IT>





			TIM2->ARR= TIM2_ARR;
 8000992:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000996:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->PSC= TIM2_PSC;
 800099c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28

			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <start_up+0xe0>)
 80009a8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <start_up+0xe0>)
 80009b0:	2214      	movs	r2, #20
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR4=(TIM1->ARR-2);
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <start_up+0xe0>)
 80009b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <start_up+0xe0>)
 80009ba:	3b02      	subs	r3, #2
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40

			TIM1->CCR1=0;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <start_up+0xe0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34
			//TIM1->CCR1=30000;

			HAL_TIM_Base_Start_IT(&htim2);
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <start_up+0xe4>)
 80009c6:	f004 fe8f 	bl	80056e8 <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009ca:	2100      	movs	r1, #0
 80009cc:	4816      	ldr	r0, [pc, #88]	; (8000a28 <start_up+0xe4>)
 80009ce:	f004 ff23 	bl	8005818 <HAL_TIM_PWM_Start>

			HAL_TIM_Base_Start_IT(&htim1);
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <start_up+0xe8>)
 80009d4:	f004 fe88 	bl	80056e8 <HAL_TIM_Base_Start_IT>

				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009d8:	2100      	movs	r1, #0
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <start_up+0xe8>)
 80009dc:	f004 ff1c 	bl	8005818 <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80009e0:	2100      	movs	r1, #0
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <start_up+0xe8>)
 80009e4:	f006 f864 	bl	8006ab0 <HAL_TIMEx_PWMN_Start>
			   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009e8:	2104      	movs	r1, #4
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <start_up+0xe8>)
 80009ec:	f004 ff14 	bl	8005818 <HAL_TIM_PWM_Start>
			   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80009f0:	2104      	movs	r1, #4
 80009f2:	480e      	ldr	r0, [pc, #56]	; (8000a2c <start_up+0xe8>)
 80009f4:	f006 f85c 	bl	8006ab0 <HAL_TIMEx_PWMN_Start>
			    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009f8:	2108      	movs	r1, #8
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <start_up+0xe8>)
 80009fc:	f004 ff0c 	bl	8005818 <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000a00:	2108      	movs	r1, #8
 8000a02:	480a      	ldr	r0, [pc, #40]	; (8000a2c <start_up+0xe8>)
 8000a04:	f006 f854 	bl	8006ab0 <HAL_TIMEx_PWMN_Start>
		}


	   }

}
 8000a08:	bf00      	nop
 8000a0a:	3740      	adds	r7, #64	; 0x40
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000098 	.word	0x20000098
 8000a14:	2000002c 	.word	0x2000002c
 8000a18:	20000258 	.word	0x20000258
 8000a1c:	2000021c 	.word	0x2000021c
 8000a20:	20000294 	.word	0x20000294
 8000a24:	40012c00 	.word	0x40012c00
 8000a28:	20000368 	.word	0x20000368
 8000a2c:	2000031c 	.word	0x2000031c

08000a30 <HAL_ADCEx_InjectedConvCpltCallback>:
	else{}
}


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b092      	sub	sp, #72	; 0x48
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	ADC_InjectionConfTypeDef sConfigInjected;


	index_event_adc++;
 8000a38:	4b43      	ldr	r3, [pc, #268]	; (8000b48 <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a42      	ldr	r2, [pc, #264]	; (8000b48 <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8000a40:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000a42:	2109      	movs	r1, #9
 8000a44:	4841      	ldr	r0, [pc, #260]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a46:	f002 f9bf 	bl	8002dc8 <HAL_ADCEx_InjectedGetValue>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000a4e:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8000a50:	bf00      	nop
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a3c      	ldr	r2, [pc, #240]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a5a:	6812      	ldr	r2, [r2, #0]
 8000a5c:	f003 0320 	and.w	r3, r3, #32
 8000a60:	6013      	str	r3, [r2, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f5      	bne.n	8000a52 <HAL_ADCEx_InjectedConvCpltCallback+0x22>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8000a66:	f240 110f 	movw	r1, #271	; 0x10f
 8000a6a:	4838      	ldr	r0, [pc, #224]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a6c:	f002 f9ac 	bl	8002dc8 <HAL_ADCEx_InjectedGetValue>
 8000a70:	4602      	mov	r2, r0
 8000a72:	4b38      	ldr	r3, [pc, #224]	; (8000b54 <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 8000a74:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8000a76:	bf00      	nop
 8000a78:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a33      	ldr	r2, [pc, #204]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	f003 0320 	and.w	r3, r3, #32
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1f5      	bne.n	8000a78 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
    adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8000a8c:	2109      	movs	r1, #9
 8000a8e:	4832      	ldr	r0, [pc, #200]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000a90:	f002 f99a 	bl	8002dc8 <HAL_ADCEx_InjectedGetValue>
 8000a94:	4602      	mov	r2, r0
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8000a98:	601a      	str	r2, [r3, #0]
    while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8000a9a:	bf00      	nop
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	f003 0320 	and.w	r3, r3, #32
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f5      	bne.n	8000a9c <HAL_ADCEx_InjectedConvCpltCallback+0x6c>


	if(index_event_adc<500)
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ab8:	d206      	bcs.n	8000ac8 <HAL_ADCEx_InjectedConvCpltCallback+0x98>
	{


	    HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000aba:	4824      	ldr	r0, [pc, #144]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000abc:	f002 f854 	bl	8002b68 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000ac0:	4825      	ldr	r0, [pc, #148]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000ac2:	f002 f851 	bl	8002b68 <HAL_ADCEx_InjectedStart_IT>


	// HAL_ADCEx_InjectedStart_IT(&hadc1);
	// HAL_ADCEx_InjectedStart_IT(&hadc2);

}
 8000ac6:	e03b      	b.n	8000b40 <HAL_ADCEx_InjectedConvCpltCallback+0x110>
	else if(index_event_adc == 500)
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ad0:	d130      	bne.n	8000b34 <HAL_ADCEx_InjectedConvCpltCallback+0x104>
		       HAL_ADCEx_InjectedStop_IT(&hadc1);
 8000ad2:	481e      	ldr	r0, [pc, #120]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000ad4:	f002 f92e 	bl	8002d34 <HAL_ADCEx_InjectedStop_IT>
			   HAL_ADCEx_InjectedStop_IT(&hadc2);
 8000ad8:	481f      	ldr	r0, [pc, #124]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000ada:	f002 f92b 	bl	8002d34 <HAL_ADCEx_InjectedStop_IT>
			    offset1=adc_Ia-adc_Ic;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8000aea:	6013      	str	r3, [r2, #0]
			    offset2=adc_Ia-adc_Ib;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8000af8:	6013      	str	r3, [r2, #0]
			    ADC1->OFR1=ADC1->OFR1 | (adc_Ia-adc_Ic);
 8000afa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000afe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	1acb      	subs	r3, r1, r3
 8000b0a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	660b      	str	r3, [r1, #96]	; 0x60
			    ADC2->OFR1=ADC2->OFR1 | (adc_Ia-adc_Ib);
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8000b14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000b18:	6819      	ldr	r1, [r3, #0]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1acb      	subs	r3, r1, r3
 8000b20:	4911      	ldr	r1, [pc, #68]	; (8000b68 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8000b22:	4313      	orrs	r3, r2
 8000b24:	660b      	str	r3, [r1, #96]	; 0x60
			    HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000b28:	f002 f81e 	bl	8002b68 <HAL_ADCEx_InjectedStart_IT>
			    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000b2c:	480a      	ldr	r0, [pc, #40]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000b2e:	f002 f81b 	bl	8002b68 <HAL_ADCEx_InjectedStart_IT>
}
 8000b32:	e005      	b.n	8000b40 <HAL_ADCEx_InjectedConvCpltCallback+0x110>
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000b36:	f002 f817 	bl	8002b68 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000b3c:	f002 f814 	bl	8002b68 <HAL_ADCEx_InjectedStart_IT>
}
 8000b40:	bf00      	nop
 8000b42:	3748      	adds	r7, #72	; 0x48
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200001f4 	.word	0x200001f4
 8000b4c:	20000098 	.word	0x20000098
 8000b50:	20000190 	.word	0x20000190
 8000b54:	20000200 	.word	0x20000200
 8000b58:	2000002c 	.word	0x2000002c
 8000b5c:	2000012c 	.word	0x2000012c
 8000b60:	20000124 	.word	0x20000124
 8000b64:	20000164 	.word	0x20000164
 8000b68:	50000100 	.word	0x50000100

08000b6c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7c:	d16f      	bne.n	8000c5e <HAL_GPIO_EXTI_Callback+0xf2>
	{
		switch (licznik)
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x100>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d85f      	bhi.n	8000c46 <HAL_GPIO_EXTI_Callback+0xda>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_EXTI_Callback+0x20>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000c33 	.word	0x08000c33
 8000b90:	08000c1d 	.word	0x08000c1d
 8000b94:	08000ba9 	.word	0x08000ba9
 8000b98:	08000bc1 	.word	0x08000bc1
 8000b9c:	08000bd7 	.word	0x08000bd7
 8000ba0:	08000bef 	.word	0x08000bef
 8000ba4:	08000c05 	.word	0x08000c05
								{
								case 2:
									TIM1->CCR1=duty;
 8000ba8:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000baa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bb2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	63da      	str	r2, [r3, #60]	; 0x3c



							    break;
 8000bbe:	e042      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0xda>

								case 3:
									TIM1->CCR1=0;
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bc8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000bcc:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 8000bce:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8000bd4:	e037      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0xda>

								case 4:
									TIM1->CCR1=0;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bde:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000be2:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=duty;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000be6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000bea:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8000bec:	e02b      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0xda>

							    case 5:
							    	TIM1->CCR1=0;
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=duty;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bfc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c00:	63da      	str	r2, [r3, #60]	; 0x3c


								break;
 8000c02:	e020      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0xda>

							    case 6:
							    	TIM1->CCR1=duty;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c06:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=duty;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c14:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c18:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8000c1a:	e014      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0xda>

							    case 1:
							    TIM1->CCR1=duty;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c1e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c22:	635a      	str	r2, [r3, #52]	; 0x34
							    TIM1->CCR2=0;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
							    TIM1->CCR3=0;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	63da      	str	r2, [r3, #60]	; 0x3c
							    break;
 8000c30:	e009      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0xda>

							    case 0:
							   							    TIM1->CCR1=0;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
							   							    TIM1->CCR2=0;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38
							   							    TIM1->CCR3=0;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
							   							    break;
 8000c44:	bf00      	nop
								}

								licznik++;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x100>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x100>)
 8000c4e:	6013      	str	r3, [r2, #0]



								if(licznik>6)
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x100>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b06      	cmp	r3, #6
 8000c56:	d902      	bls.n	8000c5e <HAL_GPIO_EXTI_Callback+0xf2>
								licznik=0;
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x100>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]




	}
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200001e8 	.word	0x200001e8
 8000c70:	40012c00 	.word	0x40012c00

08000c74 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d103      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		if(TIM1->CNT >= ((TIM1->ARR)-10))
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	}



}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40012c00 	.word	0x40012c00

08000ca0 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000


		}
	}

}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc0:	f000 fe61 	bl	8001986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc4:	f000 f898 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc8:	f7ff fde2 	bl	8000890 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ccc:	f000 faae 	bl	800122c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000cd0:	f000 fc02 	bl	80014d8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000cd4:	f000 fd96 	bl	8001804 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cd8:	f000 fb88 	bl	80013ec <MX_TIM2_Init>
  MX_ADC1_Init();
 8000cdc:	f7ff fc1c 	bl	8000518 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ce0:	f7ff fcb6 	bl	8000650 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8000ce4:	f000 f8f6 	bl	8000ed4 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000ce8:	f000 f922 	bl	8000f30 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000cec:	f000 f94e 	bl	8000f8c <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


    start_up();
 8000cf0:	f7ff fe28 	bl	8000944 <start_up>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfc:	f003 f8ae 	bl	8003e5c <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <main+0x52>
	 	 		  tim1_ch1=1;
 8000d06:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <main+0x118>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e002      	b.n	8000d14 <main+0x58>
	 	 	  else
	 	 		  tim1_ch1=0;
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <main+0x118>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d18:	482f      	ldr	r0, [pc, #188]	; (8000dd8 <main+0x11c>)
 8000d1a:	f003 f89f 	bl	8003e5c <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <main+0x70>
	 	 		  tim1_ch1n=1;
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <main+0x120>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e002      	b.n	8000d32 <main+0x76>
	 	 	  else
	 	 		  tim1_ch1n=0;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <main+0x120>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8000d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f003 f88f 	bl	8003e5c <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <main+0x90>
	 	 		  tim1_ch2=1;
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <main+0x124>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e002      	b.n	8000d52 <main+0x96>
	 	 	  else
	 	 		  tim1_ch2=0;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <main+0x124>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]

	  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8000d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f003 f87f 	bl	8003e5c <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <main+0xb0>
	 	 		  tim1_ch2n=1;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <main+0x128>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e002      	b.n	8000d72 <main+0xb6>
	 	 	  else
	 	 		  tim1_ch2n=0;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <main+0x128>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f003 f86f 	bl	8003e5c <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <main+0xd0>
	 	 		  tim1_ch3=1;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <main+0x12c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e002      	b.n	8000d92 <main+0xd6>
	 	 	  else
	 	 		  tim1_ch3=0;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <main+0x12c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 8000d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d96:	4815      	ldr	r0, [pc, #84]	; (8000dec <main+0x130>)
 8000d98:	f003 f860 	bl	8003e5c <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <main+0xee>
	 	 		  tim1_ch3n=1;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <main+0x134>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	e002      	b.n	8000db0 <main+0xf4>
	 	 	  else
	 	 		  tim1_ch3n=0;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <main+0x134>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]

	 	 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f003 f850 	bl	8003e5c <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <main+0x10e>
	 	 		  tim1_ch4=1;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <main+0x138>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e794      	b.n	8000cf4 <main+0x38>
	 	 	  else
	 	 		  tim1_ch4=0;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <main+0x138>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
	  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000dd0:	e790      	b.n	8000cf4 <main+0x38>
 8000dd2:	bf00      	nop
 8000dd4:	20000181 	.word	0x20000181
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	200001f8 	.word	0x200001f8
 8000de0:	200001fa 	.word	0x200001fa
 8000de4:	200001d0 	.word	0x200001d0
 8000de8:	200001dc 	.word	0x200001dc
 8000dec:	48000400 	.word	0x48000400
 8000df0:	20000180 	.word	0x20000180
 8000df4:	20000218 	.word	0x20000218

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0a4      	sub	sp, #144	; 0x90
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e02:	2238      	movs	r2, #56	; 0x38
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f007 feca 	bl	8008ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2244      	movs	r2, #68	; 0x44
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f007 febc 	bl	8008ba0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f003 fc3d 	bl	80046a8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e36:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000e44:	2350      	movs	r3, #80	; 0x50
 8000e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fcc5 	bl	80047f0 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e6c:	f000 f82a 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2303      	movs	r3, #3
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e88:	2107      	movs	r1, #7
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 ffc8 	bl	8004e20 <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e96:	f000 f815 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000e9a:	f248 0302 	movw	r3, #32770	; 0x8002
 8000e9e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ea4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 f9d3 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eb8:	f000 f804 	bl	8000ec4 <Error_Handler>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3790      	adds	r7, #144	; 0x90
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <MX_OPAMP1_Init+0x58>)
 8000edc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000efe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000f06:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_OPAMP1_Init+0x54>)
 8000f14:	f002 ffd2 	bl	8003ebc <HAL_OPAMP_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8000f1e:	f7ff ffd1 	bl	8000ec4 <Error_Handler>
  }

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000294 	.word	0x20000294
 8000f2c:	40010300 	.word	0x40010300

08000f30 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <MX_OPAMP2_Init+0x58>)
 8000f38:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f42:	2240      	movs	r2, #64	; 0x40
 8000f44:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f62:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_OPAMP2_Init+0x54>)
 8000f70:	f002 ffa4 	bl	8003ebc <HAL_OPAMP_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8000f7a:	f7ff ffa3 	bl	8000ec4 <Error_Handler>
  }

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000021c 	.word	0x2000021c
 8000f88:	40010304 	.word	0x40010304

08000f8c <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000f92:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <MX_OPAMP3_Init+0x58>)
 8000f94:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000f9e:	2240      	movs	r2, #64	; 0x40
 8000fa0:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000fbe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_OPAMP3_Init+0x54>)
 8000fcc:	f002 ff76 	bl	8003ebc <HAL_OPAMP_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8000fd6:	f7ff ff75 	bl	8000ec4 <Error_Handler>
  }

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000258 	.word	0x20000258
 8000fe4:	40010308 	.word	0x40010308

08000fe8 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <HAL_OPAMP_MspInit+0xd8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d119      	bne.n	800103e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_OPAMP_MspInit+0xdc>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <HAL_OPAMP_MspInit+0xdc>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_OPAMP_MspInit+0xdc>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001022:	230e      	movs	r3, #14
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f002 fd8e 	bl	8003b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 800103c:	e03b      	b.n	80010b6 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <HAL_OPAMP_MspInit+0xe0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d119      	bne.n	800107c <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <HAL_OPAMP_MspInit+0xdc>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <HAL_OPAMP_MspInit+0xdc>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_OPAMP_MspInit+0xdc>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001060:	23e0      	movs	r3, #224	; 0xe0
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001064:	2303      	movs	r3, #3
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f002 fd6f 	bl	8003b58 <HAL_GPIO_Init>
}
 800107a:	e01c      	b.n	80010b6 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <HAL_OPAMP_MspInit+0xe4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d117      	bne.n	80010b6 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_OPAMP_MspInit+0xdc>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <HAL_OPAMP_MspInit+0xdc>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_OPAMP_MspInit+0xdc>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800109e:	2307      	movs	r3, #7
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <HAL_OPAMP_MspInit+0xe8>)
 80010b2:	f002 fd51 	bl	8003b58 <HAL_GPIO_Init>
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40010300 	.word	0x40010300
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010304 	.word	0x40010304
 80010cc:	40010308 	.word	0x40010308
 80010d0:	48000400 	.word	0x48000400

080010d4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e2:	6093      	str	r3, [r2, #8]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40007000 	.word	0x40007000

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_MspInit+0x44>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_MspInit+0x44>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6613      	str	r3, [r2, #96]	; 0x60
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_MspInit+0x44>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_MspInit+0x44>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_MspInit+0x44>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6593      	str	r3, [r2, #88]	; 0x58
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_MspInit+0x44>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800112a:	f7ff ffd3 	bl	80010d4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 fc4c 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <ADC1_2_IRQHandler+0x14>)
 800119e:	f000 ff4d 	bl	800203c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <ADC1_2_IRQHandler+0x18>)
 80011a4:	f000 ff4a 	bl	800203c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000098 	.word	0x20000098
 80011b0:	2000002c 	.word	0x2000002c

080011b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011ba:	f004 fca5 	bl	8005b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000031c 	.word	0x2000031c

080011c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <TIM2_IRQHandler+0x10>)
 80011ce:	f004 fc9b 	bl	8005b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000368 	.word	0x20000368

080011dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <USART2_IRQHandler+0x10>)
 80011e2:	f005 fec3 	bl	8006f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200003b4 	.word	0x200003b4

080011f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80011f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011f8:	f002 fe48 	bl	8003e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <SystemInit+0x28>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <SystemInit+0x28>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SystemInit+0x28>)
 8001216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121a:	609a      	str	r2, [r3, #8]
#endif
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b09c      	sub	sp, #112	; 0x70
 8001230:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2234      	movs	r2, #52	; 0x34
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f007 fc9a 	bl	8008ba0 <memset>

  htim1.Instance = TIM1;
 800126c:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 800126e:	4a5e      	ldr	r2, [pc, #376]	; (80013e8 <MX_TIM1_Init+0x1bc>)
 8001270:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001272:	4b5c      	ldr	r3, [pc, #368]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001278:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 800127a:	2220      	movs	r2, #32
 800127c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800127e:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800128a:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001290:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001296:	4853      	ldr	r0, [pc, #332]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 8001298:	f004 f9ce 	bl	8005638 <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012a2:	f7ff fe0f 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012b0:	4619      	mov	r1, r3
 80012b2:	484c      	ldr	r0, [pc, #304]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 80012b4:	f004 feb8 	bl	8006028 <HAL_TIM_ConfigClockSource>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012be:	f7ff fe01 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c2:	4848      	ldr	r0, [pc, #288]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 80012c4:	f004 fa46 	bl	8005754 <HAL_TIM_PWM_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012ce:	f7ff fdf9 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80012d2:	2370      	movs	r3, #112	; 0x70
 80012d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e2:	4619      	mov	r1, r3
 80012e4:	483f      	ldr	r0, [pc, #252]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 80012e6:	f005 fc63 	bl	8006bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80012f0:	f7ff fde8 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001300:	2300      	movs	r3, #0
 8001302:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	4832      	ldr	r0, [pc, #200]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 800131a:	f004 fd75 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001324:	f7ff fdce 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001330:	2204      	movs	r2, #4
 8001332:	4619      	mov	r1, r3
 8001334:	482b      	ldr	r0, [pc, #172]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 8001336:	f004 fd67 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001340:	f7ff fdc0 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001348:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800134c:	2208      	movs	r2, #8
 800134e:	4619      	mov	r1, r3
 8001350:	4824      	ldr	r0, [pc, #144]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 8001352:	f004 fd59 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800135c:	f7ff fdb2 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001360:	2370      	movs	r3, #112	; 0x70
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001368:	2300      	movs	r3, #0
 800136a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800136c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001370:	220c      	movs	r2, #12
 8001372:	4619      	mov	r1, r3
 8001374:	481b      	ldr	r0, [pc, #108]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 8001376:	f004 fd47 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001380:	f7ff fda0 	bl	8000ec4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001388:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800138a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8001394:	2344      	movs	r3, #68	; 0x44
 8001396:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800139c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 80013c6:	f005 fc75 	bl	8006cb4 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 80013d0:	f7ff fd78 	bl	8000ec4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80013d4:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM1_Init+0x1b8>)
 80013d6:	f000 f969 	bl	80016ac <HAL_TIM_MspPostInit>

}
 80013da:	bf00      	nop
 80013dc:	3770      	adds	r7, #112	; 0x70
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000031c 	.word	0x2000031c
 80013e8:	40012c00 	.word	0x40012c00

080013ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001424:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_TIM2_Init+0xe8>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <MX_TIM2_Init+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001444:	4823      	ldr	r0, [pc, #140]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001446:	f004 f8f7 	bl	8005638 <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001450:	f7ff fd38 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800145a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145e:	4619      	mov	r1, r3
 8001460:	481c      	ldr	r0, [pc, #112]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001462:	f004 fde1 	bl	8006028 <HAL_TIM_ConfigClockSource>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800146c:	f7ff fd2a 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001470:	4818      	ldr	r0, [pc, #96]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001472:	f004 f96f 	bl	8005754 <HAL_TIM_PWM_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800147c:	f7ff fd22 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001480:	2320      	movs	r3, #32
 8001482:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001490:	f005 fb8e 	bl	8006bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800149a:	f7ff fd13 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149e:	2360      	movs	r3, #96	; 0x60
 80014a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_TIM2_Init+0xe8>)
 80014b6:	f004 fca7 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014c0:	f7ff fd00 	bl	8000ec4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MX_TIM2_Init+0xe8>)
 80014c6:	f000 f8f1 	bl	80016ac <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3738      	adds	r7, #56	; 0x38
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000368 	.word	0x20000368

080014d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2224      	movs	r2, #36	; 0x24
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f007 fb5a 	bl	8008ba0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <MX_TIM4_Init+0xa0>)
 80014f8:	4a20      	ldr	r2, [pc, #128]	; (800157c <MX_TIM4_Init+0xa4>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_TIM4_Init+0xa0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_TIM4_Init+0xa0>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_TIM4_Init+0xa0>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM4_Init+0xa0>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_TIM4_Init+0xa0>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_TIM4_Init+0xa8>)
 800151c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_TIM4_Init+0xa0>)
 8001546:	f004 fa39 	bl	80059bc <HAL_TIM_Encoder_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001550:	f7ff fcb8 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_TIM4_Init+0xa0>)
 8001562:	f005 fb25 	bl	8006bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800156c:	f7ff fcaa 	bl	8000ec4 <Error_Handler>
  }

}
 8001570:	bf00      	nop
 8001572:	3730      	adds	r7, #48	; 0x30
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200002d0 	.word	0x200002d0
 800157c:	40000800 	.word	0x40000800
 8001580:	00010006 	.word	0x00010006

08001584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_TIM_Base_MspInit+0x78>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d114      	bne.n	80015c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_TIM_Base_MspInit+0x7c>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_TIM_Base_MspInit+0x7c>)
 800159c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015a0:	6613      	str	r3, [r2, #96]	; 0x60
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_TIM_Base_MspInit+0x7c>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2019      	movs	r0, #25
 80015b4:	f002 fa35 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015b8:	2019      	movs	r0, #25
 80015ba:	f002 fa4c 	bl	8003a56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015be:	e018      	b.n	80015f2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c8:	d113      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_TIM_Base_MspInit+0x7c>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_TIM_Base_MspInit+0x7c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6593      	str	r3, [r2, #88]	; 0x58
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_TIM_Base_MspInit+0x7c>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2103      	movs	r1, #3
 80015e6:	201c      	movs	r0, #28
 80015e8:	f002 fa1b 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ec:	201c      	movs	r0, #28
 80015ee:	f002 fa32 	bl	8003a56 <HAL_NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40012c00 	.word	0x40012c00
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d138      	bne.n	8001698 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800165e:	2302      	movs	r3, #2
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2302      	movs	r3, #2
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001666:	2302      	movs	r3, #2
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001672:	f002 fa71 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 8001676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001684:	2302      	movs	r3, #2
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001688:	2302      	movs	r3, #2
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001694:	f002 fa60 	bl	8003b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40000800 	.word	0x40000800
 80016a4:	40021000 	.word	0x40021000
 80016a8:	48000400 	.word	0x48000400

080016ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_TIM_MspPostInit+0x148>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d16a      	bne.n	80017a4 <HAL_TIM_MspPostInit+0xf8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a49      	ldr	r2, [pc, #292]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a43      	ldr	r2, [pc, #268]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a3d      	ldr	r2, [pc, #244]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001720:	2302      	movs	r3, #2
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001728:	2304      	movs	r3, #4
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4832      	ldr	r0, [pc, #200]	; (80017fc <HAL_TIM_MspPostInit+0x150>)
 8001734:	f002 fa10 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001742:	2302      	movs	r3, #2
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800174a:	2304      	movs	r3, #4
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	482a      	ldr	r0, [pc, #168]	; (8001800 <HAL_TIM_MspPostInit+0x154>)
 8001756:	f002 f9ff 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800175a:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001764:	2302      	movs	r3, #2
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800176c:	2306      	movs	r3, #6
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177a:	f002 f9ed 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800177e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001790:	230b      	movs	r3, #11
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f002 f9db 	bl	8003b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017a2:	e022      	b.n	80017ea <HAL_TIM_MspPostInit+0x13e>
  else if(timHandle->Instance==TIM2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d11d      	bne.n	80017ea <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_TIM_MspPostInit+0x14c>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 80017c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017d0:	2302      	movs	r3, #2
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017d8:	2301      	movs	r3, #1
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e6:	f002 f9b7 	bl	8003b58 <HAL_GPIO_Init>
}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	; 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40012c00 	.word	0x40012c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	48000800 	.word	0x48000800
 8001800:	48000400 	.word	0x48000400

08001804 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <MX_USART2_UART_Init+0x90>)
 800180a:	4a23      	ldr	r2, [pc, #140]	; (8001898 <MX_USART2_UART_Init+0x94>)
 800180c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_USART2_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_USART2_UART_Init+0x90>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_USART2_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184c:	4811      	ldr	r0, [pc, #68]	; (8001894 <MX_USART2_UART_Init+0x90>)
 800184e:	f005 fb3c 	bl	8006eca <HAL_UART_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001858:	f7ff fb34 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800185c:	2100      	movs	r1, #0
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001860:	f007 f896 	bl	8008990 <HAL_UARTEx_SetTxFifoThreshold>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800186a:	f7ff fb2b 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	4808      	ldr	r0, [pc, #32]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001872:	f007 f8cb 	bl	8008a0c <HAL_UARTEx_SetRxFifoThreshold>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800187c:	f7ff fb22 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <MX_USART2_UART_Init+0x90>)
 8001882:	f007 f84c 	bl	800891e <HAL_UARTEx_DisableFifoMode>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800188c:	f7ff fb1a 	bl	8000ec4 <Error_Handler>
  }

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200003b4 	.word	0x200003b4
 8001898:	40004400 	.word	0x40004400

0800189c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_UART_MspInit+0x8c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12f      	bne.n	800191e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_UART_MspInit+0x90>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	4a1a      	ldr	r2, [pc, #104]	; (800192c <HAL_UART_MspInit+0x90>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_UART_MspInit+0x90>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_UART_MspInit+0x90>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a14      	ldr	r2, [pc, #80]	; (800192c <HAL_UART_MspInit+0x90>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_UART_MspInit+0x90>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018ee:	2318      	movs	r3, #24
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fe:	2307      	movs	r3, #7
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4809      	ldr	r0, [pc, #36]	; (8001930 <HAL_UART_MspInit+0x94>)
 800190a:	f002 f925 	bl	8003b58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2108      	movs	r1, #8
 8001912:	2026      	movs	r0, #38	; 0x26
 8001914:	f002 f885 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001918:	2026      	movs	r0, #38	; 0x26
 800191a:	f002 f89c 	bl	8003a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40004400 	.word	0x40004400
 800192c:	40021000 	.word	0x40021000
 8001930:	48000400 	.word	0x48000400

08001934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001936:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopForever+0x6>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <LoopForever+0xa>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <LoopForever+0xe>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	; (8001980 <LoopForever+0x16>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800195e:	f7ff fc4f 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f007 f8f9 	bl	8008b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001966:	f7ff f9a9 	bl	8000cbc <main>

0800196a <LoopForever>:

LoopForever:
    b LoopForever
 800196a:	e7fe      	b.n	800196a <LoopForever>
  ldr   r0, =_estack
 800196c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001978:	08008c00 	.word	0x08008c00
  ldr r2, =_sbss
 800197c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001980:	20000444 	.word	0x20000444

08001984 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <COMP1_2_3_IRQHandler>

08001986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f002 f83b 	bl	8003a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f80e 	bl	80019b8 <HAL_InitTick>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	71fb      	strb	r3, [r7, #7]
 80019a6:	e001      	b.n	80019ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019a8:	f7ff fba4 	bl	80010f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ac:	79fb      	ldrb	r3, [r7, #7]

}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_InitTick+0x68>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d022      	beq.n	8001a12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_InitTick+0x6c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_InitTick+0x68>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 f846 	bl	8003a72 <HAL_SYSTICK_Config>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10f      	bne.n	8001a0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	d809      	bhi.n	8001a06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f2:	2200      	movs	r2, #0
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	f04f 30ff 	mov.w	r0, #4294967295
 80019fa:	f002 f812 	bl	8003a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_InitTick+0x70>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e004      	b.n	8001a16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e001      	b.n	8001a16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x1c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x20>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_IncTick+0x1c>)
 8001a3c:	6013      	str	r3, [r2, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000440 	.word	0x20000440
 8001a4c:	20000008 	.word	0x20000008

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000440 	.word	0x20000440

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d004      	beq.n	8001a8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_Delay+0x40>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4413      	add	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8c:	bf00      	nop
 8001a8e:	f7ff ffdf 	bl	8001a50 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d8f7      	bhi.n	8001a8e <HAL_Delay+0x26>
  {
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008

08001aac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6093      	str	r3, [r2, #8]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b8e:	d101      	bne.n	8001b94 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bde:	d101      	bne.n	8001be4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c2e:	f043 0202 	orr.w	r2, r3, #2
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_IsEnabled+0x18>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_IsEnabled+0x1a>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_IsDisableOngoing+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_IsDisableOngoing+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d101      	bne.n	8001cce <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d101      	bne.n	8001d1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e16b      	b.n	800201e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7fe fcf3 	bl	8000740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff04 	bl	8001b7a <LL_ADC_IsDeepPowerDownEnabled>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff feea 	bl	8001b56 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff1f 	bl	8001bca <LL_ADC_IsInternalRegulatorEnabled>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d113      	bne.n	8001dba <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff03 	bl	8001ba2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d9c:	4ba2      	ldr	r3, [pc, #648]	; (8002028 <HAL_ADC_Init+0x2fc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	4aa2      	ldr	r2, [pc, #648]	; (800202c <HAL_ADC_Init+0x300>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dac:	e002      	b.n	8001db4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f9      	bne.n	8001dae <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff03 	bl	8001bca <LL_ADC_IsInternalRegulatorEnabled>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10d      	bne.n	8001de6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	f043 0210 	orr.w	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff63 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8001df0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 8106 	bne.w	800200c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 8102 	bne.w	800200c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e10:	f043 0202 	orr.w	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff10 	bl	8001c42 <LL_ADC_IsEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d111      	bne.n	8001e4c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e2c:	f7ff ff09 	bl	8001c42 <LL_ADC_IsEnabled>
 8001e30:	4604      	mov	r4, r0
 8001e32:	487f      	ldr	r0, [pc, #508]	; (8002030 <HAL_ADC_Init+0x304>)
 8001e34:	f7ff ff05 	bl	8001c42 <LL_ADC_IsEnabled>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4323      	orrs	r3, r4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4619      	mov	r1, r3
 8001e46:	487b      	ldr	r0, [pc, #492]	; (8002034 <HAL_ADC_Init+0x308>)
 8001e48:	f7ff fe30 	bl	8001aac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7f5b      	ldrb	r3, [r3, #29]
 8001e50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d106      	bne.n	8001e88 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	045b      	lsls	r3, r3, #17
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_ADC_Init+0x30c>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff feef 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8001ed8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff10 	bl	8001d04 <LL_ADC_INJ_IsConversionOngoing>
 8001ee4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d16d      	bne.n	8001fc8 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d16a      	bne.n	8001fc8 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ef6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001efe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f0e:	f023 0302 	bic.w	r3, r3, #2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	69b9      	ldr	r1, [r7, #24]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6911      	ldr	r1, [r2, #16]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f52:	e013      	b.n	8001f7c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d118      	bne.n	8001fb8 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	e007      	b.n	8001fc8 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10c      	bne.n	8001fea <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f023 010f 	bic.w	r1, r3, #15
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe8:	e007      	b.n	8001ffa <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 020f 	bic.w	r2, r2, #15
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	65da      	str	r2, [r3, #92]	; 0x5c
 800200a:	e007      	b.n	800201c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800201c:	7ffb      	ldrb	r3, [r7, #31]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop
 8002028:	20000000 	.word	0x20000000
 800202c:	053e2d63 	.word	0x053e2d63
 8002030:	50000100 	.word	0x50000100
 8002034:	50000300 	.word	0x50000300
 8002038:	fff04007 	.word	0xfff04007

0800203c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002058:	4883      	ldr	r0, [pc, #524]	; (8002268 <HAL_ADC_IRQHandler+0x22c>)
 800205a:	f7ff fd60 	bl	8001b1e <LL_ADC_GetMultimode>
 800205e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d017      	beq.n	800209a <HAL_ADC_IRQHandler+0x5e>
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d012      	beq.n	800209a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 feeb 	bl	8002e68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2202      	movs	r2, #2
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <HAL_ADC_IRQHandler+0x72>
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8085 	beq.w	80021c4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d07f      	beq.n	80021c4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fcf6 	bl	8001ad2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d064      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a5e      	ldr	r2, [pc, #376]	; (800226c <HAL_ADC_IRQHandler+0x230>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d002      	beq.n	80020fc <HAL_ADC_IRQHandler+0xc0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	e001      	b.n	8002100 <HAL_ADC_IRQHandler+0xc4>
 80020fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	4293      	cmp	r3, r2
 8002106:	d008      	beq.n	800211a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b05      	cmp	r3, #5
 8002112:	d002      	beq.n	800211a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b09      	cmp	r3, #9
 8002118:	d104      	bne.n	8002124 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	e00d      	b.n	8002140 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a50      	ldr	r2, [pc, #320]	; (800226c <HAL_ADC_IRQHandler+0x230>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d002      	beq.n	8002134 <HAL_ADC_IRQHandler+0xf8>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e001      	b.n	8002138 <HAL_ADC_IRQHandler+0xfc>
 8002134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002138:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d135      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b08      	cmp	r3, #8
 8002156:	d12e      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fdaa 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d11a      	bne.n	800219e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 020c 	bic.w	r2, r2, #12
 8002176:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d112      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	65da      	str	r2, [r3, #92]	; 0x5c
 800219c:	e00b      	b.n	80021b6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	f043 0210 	orr.w	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f95a 	bl	8002470 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	220c      	movs	r2, #12
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <HAL_ADC_IRQHandler+0x19c>
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10b      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 809e 	beq.w	8002320 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8098 	beq.w	8002320 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fc73 	bl	8001af8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002212:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fc5a 	bl	8001ad2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800221e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_ADC_IRQHandler+0x230>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d002      	beq.n	8002230 <HAL_ADC_IRQHandler+0x1f4>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	e001      	b.n	8002234 <HAL_ADC_IRQHandler+0x1f8>
 8002230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	4293      	cmp	r3, r2
 800223a:	d008      	beq.n	800224e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d002      	beq.n	800224e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b07      	cmp	r3, #7
 800224c:	d104      	bne.n	8002258 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	623b      	str	r3, [r7, #32]
 8002256:	e011      	b.n	800227c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a03      	ldr	r2, [pc, #12]	; (800226c <HAL_ADC_IRQHandler+0x230>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d006      	beq.n	8002270 <HAL_ADC_IRQHandler+0x234>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e005      	b.n	8002274 <HAL_ADC_IRQHandler+0x238>
 8002268:	50000300 	.word	0x50000300
 800226c:	50000100 	.word	0x50000100
 8002270:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002274:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002288:	2b00      	cmp	r3, #0
 800228a:	d142      	bne.n	8002312 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d03f      	beq.n	8002312 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	d13a      	bne.n	8002312 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d133      	bne.n	8002312 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d12e      	bne.n	8002312 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fd23 	bl	8001d04 <LL_ADC_INJ_IsConversionOngoing>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11a      	bne.n	80022fa <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022d2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d112      	bne.n	8002312 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80022f8:	e00b      	b.n	8002312 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fb8c 	bl	8000a30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2260      	movs	r2, #96	; 0x60
 800231e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	2b00      	cmp	r3, #0
 8002328:	d011      	beq.n	800234e <HAL_ADC_IRQHandler+0x312>
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f89f 	bl	8002484 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d012      	beq.n	800237e <HAL_ADC_IRQHandler+0x342>
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fd66 	bl	8002e40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <HAL_ADC_IRQHandler+0x372>
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fd58 	bl	8002e54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d036      	beq.n	8002426 <HAL_ADC_IRQHandler+0x3ea>
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d031      	beq.n	8002426 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80023ca:	2301      	movs	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
 80023ce:	e014      	b.n	80023fa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023d6:	4825      	ldr	r0, [pc, #148]	; (800246c <HAL_ADC_IRQHandler+0x430>)
 80023d8:	f7ff fbaf 	bl	8001b3a <LL_ADC_GetMultiDMATransfer>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80023e2:	2301      	movs	r3, #1
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	e008      	b.n	80023fa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80023f6:	2301      	movs	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10e      	bne.n	800241e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	f043 0202 	orr.w	r2, r3, #2
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f83d 	bl	8002498 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2210      	movs	r2, #16
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d018      	beq.n	8002462 <HAL_ADC_IRQHandler+0x426>
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	2b00      	cmp	r3, #0
 8002438:	d013      	beq.n	8002462 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	f043 0208 	orr.w	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800245a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fce5 	bl	8002e2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	50000300 	.word	0x50000300

08002470 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fbf7 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 80024c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fc18 	bl	8001d04 <LL_ADC_INJ_IsConversionOngoing>
 80024d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8090 	beq.w	8002604 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d02a      	beq.n	8002548 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7f5b      	ldrb	r3, [r3, #29]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d126      	bne.n	8002548 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7f1b      	ldrb	r3, [r3, #28]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d122      	bne.n	8002548 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002502:	2301      	movs	r3, #1
 8002504:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002506:	e014      	b.n	8002532 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4a41      	ldr	r2, [pc, #260]	; (8002610 <ADC_ConversionStop+0x164>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d90d      	bls.n	800252c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e06c      	b.n	8002606 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	3301      	adds	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d1e3      	bne.n	8002508 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d014      	beq.n	8002578 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fbaf 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fb80 	bl	8001c68 <LL_ADC_IsDisableOngoing>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fb8b 	bl	8001c8e <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d014      	beq.n	80025a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fbbe 	bl	8001d04 <LL_ADC_INJ_IsConversionOngoing>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fb68 	bl	8001c68 <LL_ADC_IsDisableOngoing>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d104      	bne.n	80025a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb9a 	bl	8001cdc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d004      	beq.n	80025b8 <ADC_ConversionStop+0x10c>
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d105      	bne.n	80025be <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80025b2:	230c      	movs	r3, #12
 80025b4:	617b      	str	r3, [r7, #20]
        break;
 80025b6:	e005      	b.n	80025c4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80025b8:	2308      	movs	r3, #8
 80025ba:	617b      	str	r3, [r7, #20]
        break;
 80025bc:	e002      	b.n	80025c4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80025be:	2304      	movs	r3, #4
 80025c0:	617b      	str	r3, [r7, #20]
        break;
 80025c2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80025c4:	f7ff fa44 	bl	8001a50 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025ca:	e014      	b.n	80025f6 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025cc:	f7ff fa40 	bl	8001a50 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d90d      	bls.n	80025f6 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e007      	b.n	8002606 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e3      	bne.n	80025cc <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	a33fffff 	.word	0xa33fffff

08002614 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fb0e 	bl	8001c42 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d146      	bne.n	80026ba <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <ADC_Enable+0xb0>)
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e032      	b.n	80026bc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fac9 	bl	8001bf2 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002660:	f7ff f9f6 	bl	8001a50 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002666:	e021      	b.n	80026ac <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fae8 	bl	8001c42 <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d104      	bne.n	8002682 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fab8 	bl	8001bf2 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002682:	f7ff f9e5 	bl	8001a50 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d90d      	bls.n	80026ac <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	f043 0210 	orr.w	r2, r3, #16
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e007      	b.n	80026bc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d1d6      	bne.n	8002668 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	8000003f 	.word	0x8000003f

080026c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fac7 	bl	8001c68 <LL_ADC_IsDisableOngoing>
 80026da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff faae 	bl	8001c42 <LL_ADC_IsEnabled>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d040      	beq.n	800276e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d13d      	bne.n	800276e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030d 	and.w	r3, r3, #13
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10c      	bne.n	800271a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fa88 	bl	8001c1a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2203      	movs	r2, #3
 8002710:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002712:	f7ff f99d 	bl	8001a50 <HAL_GetTick>
 8002716:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002718:	e022      	b.n	8002760 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e01c      	b.n	8002770 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002736:	f7ff f98b 	bl	8001a50 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d90d      	bls.n	8002760 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	f043 0210 	orr.w	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e007      	b.n	8002770 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1e3      	bne.n	8002736 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <LL_ADC_SetCommonPathInternalCh>:
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	609a      	str	r2, [r3, #8]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_GetCommonPathInternalCh>:
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <LL_ADC_SetOffset>:
{
 80027bc:	b490      	push	{r4, r7}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3360      	adds	r3, #96	; 0x60
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80027d8:	6822      	ldr	r2, [r4, #0]
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <LL_ADC_SetOffset+0x40>)
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ee:	6023      	str	r3, [r4, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc90      	pop	{r4, r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	03fff000 	.word	0x03fff000

08002800 <LL_ADC_GetOffsetChannel>:
{
 8002800:	b490      	push	{r4, r7}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3360      	adds	r3, #96	; 0x60
 800280e:	461a      	mov	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bc90      	pop	{r4, r7}
 8002826:	4770      	bx	lr

08002828 <LL_ADC_SetOffsetState>:
{
 8002828:	b490      	push	{r4, r7}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3360      	adds	r3, #96	; 0x60
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4313      	orrs	r3, r2
 800284c:	6023      	str	r3, [r4, #0]
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bc90      	pop	{r4, r7}
 8002856:	4770      	bx	lr

08002858 <LL_ADC_SetOffsetSign>:
{
 8002858:	b490      	push	{r4, r7}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3360      	adds	r3, #96	; 0x60
 8002868:	461a      	mov	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4313      	orrs	r3, r2
 800287c:	6023      	str	r3, [r4, #0]
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bc90      	pop	{r4, r7}
 8002886:	4770      	bx	lr

08002888 <LL_ADC_SetOffsetSaturation>:
{
 8002888:	b490      	push	{r4, r7}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3360      	adds	r3, #96	; 0x60
 8002898:	461a      	mov	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	6023      	str	r3, [r4, #0]
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc90      	pop	{r4, r7}
 80028b6:	4770      	bx	lr

080028b8 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	615a      	str	r2, [r3, #20]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_INJ_GetTrigAuto>:
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <LL_ADC_SetChannelSamplingTime>:
{
 80028fa:	b490      	push	{r4, r7}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3314      	adds	r3, #20
 800290a:	461a      	mov	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	0e5b      	lsrs	r3, r3, #25
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	4413      	add	r3, r2
 8002918:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800291a:	6822      	ldr	r2, [r4, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	0d1b      	lsrs	r3, r3, #20
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2107      	movs	r1, #7
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	401a      	ands	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	0d1b      	lsrs	r3, r3, #20
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	6023      	str	r3, [r4, #0]
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bc90      	pop	{r4, r7}
 8002948:	4770      	bx	lr
	...

0800294c <LL_ADC_SetChannelSingleDiff>:
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0318 	and.w	r3, r3, #24
 800296e:	4908      	ldr	r1, [pc, #32]	; (8002990 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002970:	40d9      	lsrs	r1, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	400b      	ands	r3, r1
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	431a      	orrs	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	0007ffff 	.word	0x0007ffff

08002994 <LL_ADC_GetMultimode>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 031f 	and.w	r3, r3, #31
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_IsEnabled>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <LL_ADC_IsEnabled+0x18>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <LL_ADC_IsEnabled+0x1a>
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_StartCalibration>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80029e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_IsCalibrationOnGoing>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a1c:	d101      	bne.n	8002a22 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d101      	bne.n	8002a48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_INJ_StartConversion>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a6a:	f043 0208 	orr.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	609a      	str	r2, [r3, #8]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_INJ_IsConversionOngoing>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d101      	bne.n	8002a96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e04d      	b.n	8002b5c <HAL_ADCEx_Calibration_Start+0xb8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fdfd 	bl	80026c8 <ADC_Disable>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d136      	bne.n	8002b46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ae0:	f023 0302 	bic.w	r3, r3, #2
 8002ae4:	f043 0202 	orr.w	r2, r3, #2
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6839      	ldr	r1, [r7, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff6f 	bl	80029d6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002af8:	e014      	b.n	8002b24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3301      	adds	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d90d      	bls.n	8002b24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f023 0312 	bic.w	r3, r3, #18
 8002b10:	f043 0210 	orr.w	r2, r3, #16
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e01b      	b.n	8002b5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff6d 	bl	8002a08 <LL_ADC_IsCalibrationOnGoing>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e2      	bne.n	8002afa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	f023 0303 	bic.w	r3, r3, #3
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b44:	e005      	b.n	8002b52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	0004de01 	.word	0x0004de01

08002b68 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b70:	486e      	ldr	r0, [pc, #440]	; (8002d2c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8002b72:	f7ff ff0f 	bl	8002994 <LL_ADC_GetMultimode>
 8002b76:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff7e 	bl	8002a7e <LL_ADC_INJ_IsConversionOngoing>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e0ca      	b.n	8002d22 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b96:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0b2      	b.n	8002d22 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADCEx_InjectedStart_IT+0x62>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0ab      	b.n	8002d22 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff fd1e 	bl	8002614 <ADC_Enable>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 809a 	bne.w	8002d18 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf4:	f023 0208 	bic.w	r2, r3, #8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	661a      	str	r2, [r3, #96]	; 0x60
 8002bfc:	e002      	b.n	8002c04 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a44      	ldr	r2, [pc, #272]	; (8002d30 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d002      	beq.n	8002c28 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	e001      	b.n	8002c2c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8002c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d002      	beq.n	8002c3a <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2260      	movs	r2, #96	; 0x60
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c72:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d110      	bne.n	8002c9e <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0220 	bic.w	r2, r2, #32
 8002c8a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9a:	605a      	str	r2, [r3, #4]
          break;
 8002c9c:	e010      	b.n	8002cc0 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cac:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0220 	orr.w	r2, r2, #32
 8002cbc:	605a      	str	r2, [r3, #4]
          break;
 8002cbe:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d002      	beq.n	8002cd0 <HAL_ADCEx_InjectedStart_IT+0x168>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e001      	b.n	8002cd4 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8002cd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d008      	beq.n	8002cee <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d002      	beq.n	8002cee <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b07      	cmp	r3, #7
 8002cec:	d10d      	bne.n	8002d0a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fdf3 	bl	80028de <LL_ADC_INJ_GetTrigAuto>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d110      	bne.n	8002d20 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fea7 	bl	8002a56 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002d08:	e00a      	b.n	8002d20 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d16:	e003      	b.n	8002d20 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	50000300 	.word	0x50000300
 8002d30:	50000100 	.word	0x50000100

08002d34 <HAL_ADCEx_InjectedStop_IT>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop() must be used.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef *hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_ADCEx_InjectedStop_IT+0x16>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e03a      	b.n	8002dc0 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going on injected group only. */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 8002d52:	2102      	movs	r1, #2
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff fba9 	bl	80024ac <ADC_ConversionStop>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if injected conversions are effectively stopped   */
  /* and if no conversion on the other group (regular group) is intended to   */
  /* continue.                                                                */
  if (tmp_hal_status == HAL_OK)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d128      	bne.n	8002db6 <HAL_ADCEx_InjectedStop_IT+0x82>
  {
    /* Disable ADC end of conversion interrupt for injected channels */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_FLAG_JQOVF));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 628c 	bic.w	r2, r2, #1120	; 0x460
 8002d72:	605a      	str	r2, [r3, #4]

    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fe59 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d112      	bne.n	8002daa <HAL_ADCEx_InjectedStop_IT+0x76>
    {
      /* 2. Disable the ADC peripheral */
      tmp_hal_status = ADC_Disable(hadc);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fc9f 	bl	80026c8 <ADC_Disable>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	73fb      	strb	r3, [r7, #15]

      /* Check if ADC is effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d110      	bne.n	8002db6 <HAL_ADCEx_InjectedStop_IT+0x82>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002da8:	e005      	b.n	8002db6 <HAL_ADCEx_InjectedStop_IT+0x82>
    /* Conversion on injected group is stopped, but ADC not disabled since    */
    /* conversion on regular group is still running.                          */
    else
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f240 2215 	movw	r2, #533	; 0x215
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_ADCEx_InjectedGetValue+0x32>
 8002ddc:	f240 321b 	movw	r2, #795	; 0x31b
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_ADCEx_InjectedGetValue+0x26>
 8002de4:	f240 120f 	movw	r2, #271	; 0x10f
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00c      	beq.n	8002e06 <HAL_ADCEx_InjectedGetValue+0x3e>
 8002dec:	e011      	b.n	8002e12 <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df6:	60fb      	str	r3, [r7, #12]
      break;
 8002df8:	e011      	b.n	8002e1e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	60fb      	str	r3, [r7, #12]
      break;
 8002e04:	e00b      	b.n	8002e1e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	60fb      	str	r3, [r7, #12]
      break;
 8002e10:	e005      	b.n	8002e1e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e1a:	60fb      	str	r3, [r7, #12]
      break;
 8002e1c:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0a8      	sub	sp, #160	; 0xa0
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d102      	bne.n	8002ea6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f000 bc39 	b.w	8003718 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d130      	bne.n	8002f20 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d179      	bne.n	8002fba <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	0e9b      	lsrs	r3, r3, #26
 8002ed4:	025b      	lsls	r3, r3, #9
 8002ed6:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002ee2:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eee:	e007      	b.n	8002f00 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	025b      	lsls	r3, r3, #9
 8002ef8:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8002efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f06:	4ba3      	ldr	r3, [pc, #652]	; (8003194 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002f12:	430b      	orrs	r3, r1
 8002f14:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002f1c:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002f1e:	e04c      	b.n	8002fba <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d11d      	bne.n	8002f64 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002f4c:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f58:	e004      	b.n	8002f64 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f88:	1e5a      	subs	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002faa:	4b7a      	ldr	r3, [pc, #488]	; (8003194 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fd5d 	bl	8002a7e <LL_ADC_INJ_IsConversionOngoing>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d124      	bne.n	8003014 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d112      	bne.n	8002ffa <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002fe4:	055a      	lsls	r2, r3, #21
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fec:	051b      	lsls	r3, r3, #20
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	60da      	str	r2, [r3, #12]
 8002ff8:	e00c      	b.n	8003014 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800300a:	055a      	lsls	r2, r3, #21
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fd09 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 800301e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fd29 	bl	8002a7e <LL_ADC_INJ_IsConversionOngoing>
 800302c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003030:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003034:	2b00      	cmp	r3, #0
 8003036:	f040 81d4 	bne.w	80033e2 <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800303a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 81cf 	bne.w	80033e2 <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d116      	bne.n	8003082 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800305a:	2b01      	cmp	r3, #1
 800305c:	d108      	bne.n	8003070 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800306c:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800306e:	e01f      	b.n	80030b0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800307e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003080:	e016      	b.n	80030b0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003088:	2b01      	cmp	r3, #1
 800308a:	d109      	bne.n	80030a0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800309e:	e007      	b.n	80030b0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80030ae:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d110      	bne.n	80030dc <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	430b      	orrs	r3, r1
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0202 	orr.w	r2, r2, #2
 80030d8:	611a      	str	r2, [r3, #16]
 80030da:	e007      	b.n	80030ec <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0202 	bic.w	r2, r2, #2
 80030ea:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f4:	d10f      	bne.n	8003116 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	4619      	mov	r1, r3
 8003102:	f7ff fbfa 	bl	80028fa <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fbd2 	bl	80028b8 <LL_ADC_SetSamplingTimeCommonConfig>
 8003114:	e00e      	b.n	8003134 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	461a      	mov	r2, r3
 8003124:	f7ff fbe9 	bl	80028fa <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fbc2 	bl	80028b8 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	08db      	lsrs	r3, r3, #3
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b04      	cmp	r3, #4
 8003154:	d025      	beq.n	80031a2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6919      	ldr	r1, [r3, #16]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003166:	f7ff fb29 	bl	80027bc <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6919      	ldr	r1, [r3, #16]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	461a      	mov	r2, r3
 8003178:	f7ff fb6e 	bl	8002858 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800318c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003190:	e003      	b.n	800319a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003192:	bf00      	nop
 8003194:	04104000 	.word	0x04104000
 8003198:	2300      	movs	r3, #0
 800319a:	461a      	mov	r2, r3
 800319c:	f7ff fb74 	bl	8002888 <LL_ADC_SetOffsetSaturation>
 80031a0:	e11f      	b.n	80033e2 <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fb29 	bl	8002800 <LL_ADC_GetOffsetChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_ADCEx_InjectedConfigChannel+0x352>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fb1e 	bl	8002800 <LL_ADC_GetOffsetChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	e014      	b.n	80031f8 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fb13 	bl	8002800 <LL_ADC_GetOffsetChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0e9b      	lsrs	r3, r3, #26
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	e00a      	b.n	8003226 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800321e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	429a      	cmp	r2, r3
 8003228:	d106      	bne.n	8003238 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff faf8 	bl	8002828 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2101      	movs	r1, #1
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fade 	bl	8002800 <LL_ADC_GetOffsetChannel>
 8003244:	4603      	mov	r3, r0
 8003246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2101      	movs	r1, #1
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fad3 	bl	8002800 <LL_ADC_GetOffsetChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	f003 021f 	and.w	r2, r3, #31
 8003262:	e010      	b.n	8003286 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fac8 	bl	8002800 <LL_ADC_GetOffsetChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800327c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328e:	2b00      	cmp	r3, #0
 8003290:	d105      	bne.n	800329e <HAL_ADCEx_InjectedConfigChannel+0x422>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	0e9b      	lsrs	r3, r3, #26
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	e00a      	b.n	80032b4 <HAL_ADCEx_InjectedConfigChannel+0x438>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 80032ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d106      	bne.n	80032c6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fab1 	bl	8002828 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2102      	movs	r1, #2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fa97 	bl	8002800 <LL_ADC_GetOffsetChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_ADCEx_InjectedConfigChannel+0x476>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fa8c 	bl	8002800 <LL_ADC_GetOffsetChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	0e9b      	lsrs	r3, r3, #26
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	e010      	b.n	8003314 <HAL_ADCEx_InjectedConfigChannel+0x498>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fa81 	bl	8002800 <LL_ADC_GetOffsetChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800330a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	0e9b      	lsrs	r3, r3, #26
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	e00a      	b.n	8003342 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	429a      	cmp	r2, r3
 8003344:	d106      	bne.n	8003354 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	2102      	movs	r1, #2
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fa6a 	bl	8002828 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2103      	movs	r1, #3
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fa50 	bl	8002800 <LL_ADC_GetOffsetChannel>
 8003360:	4603      	mov	r3, r0
 8003362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_ADCEx_InjectedConfigChannel+0x504>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2103      	movs	r1, #3
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fa45 	bl	8002800 <LL_ADC_GetOffsetChannel>
 8003376:	4603      	mov	r3, r0
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	f003 021f 	and.w	r2, r3, #31
 800337e:	e010      	b.n	80033a2 <HAL_ADCEx_InjectedConfigChannel+0x526>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2103      	movs	r1, #3
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fa3a 	bl	8002800 <LL_ADC_GetOffsetChannel>
 800338c:	4603      	mov	r3, r0
 800338e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8003398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <HAL_ADCEx_InjectedConfigChannel+0x53e>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	0e9b      	lsrs	r3, r3, #26
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	e00a      	b.n	80033d0 <HAL_ADCEx_InjectedConfigChannel+0x554>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80033c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d106      	bne.n	80033e2 <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	2103      	movs	r1, #3
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fa23 	bl	8002828 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fae2 	bl	80029b0 <LL_ADC_IsEnabled>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 810c 	bne.w	800360c <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	461a      	mov	r2, r3
 8003402:	f7ff faa3 	bl	800294c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	4aab      	ldr	r2, [pc, #684]	; (80036b8 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	f040 80fd 	bne.w	800360c <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10b      	bne.n	800343a <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	0e9b      	lsrs	r3, r3, #26
 8003428:	3301      	adds	r3, #1
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2b09      	cmp	r3, #9
 8003430:	bf94      	ite	ls
 8003432:	2301      	movls	r3, #1
 8003434:	2300      	movhi	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e012      	b.n	8003460 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2b09      	cmp	r3, #9
 8003458:	bf94      	ite	ls
 800345a:	2301      	movls	r3, #1
 800345c:	2300      	movhi	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d064      	beq.n	800352e <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346c:	2b00      	cmp	r3, #0
 800346e:	d107      	bne.n	8003480 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	3301      	adds	r3, #1
 8003478:	069b      	lsls	r3, r3, #26
 800347a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347e:	e00e      	b.n	800349e <HAL_ADCEx_InjectedConfigChannel+0x622>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	3301      	adds	r3, #1
 8003498:	069b      	lsls	r3, r3, #26
 800349a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_ADCEx_InjectedConfigChannel+0x642>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	3301      	adds	r3, #1
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	e010      	b.n	80034e0 <HAL_ADCEx_InjectedConfigChannel+0x664>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	ea42 0103 	orr.w	r1, r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0e9b      	lsrs	r3, r3, #26
 80034f6:	3301      	adds	r3, #1
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	051b      	lsls	r3, r3, #20
 8003504:	e011      	b.n	800352a <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	3301      	adds	r3, #1
 800351e:	f003 021f 	and.w	r2, r3, #31
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	051b      	lsls	r3, r3, #20
 800352a:	430b      	orrs	r3, r1
 800352c:	e069      	b.n	8003602 <HAL_ADCEx_InjectedConfigChannel+0x786>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0e9b      	lsrs	r3, r3, #26
 8003540:	3301      	adds	r3, #1
 8003542:	069b      	lsls	r3, r3, #26
 8003544:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003548:	e00e      	b.n	8003568 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	623b      	str	r3, [r7, #32]
  return result;
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3301      	adds	r3, #1
 8003562:	069b      	lsls	r3, r3, #26
 8003564:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	3301      	adds	r3, #1
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	e010      	b.n	80035aa <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	61bb      	str	r3, [r7, #24]
  return result;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	ea42 0103 	orr.w	r1, r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	3301      	adds	r3, #1
 80035c2:	f003 021f 	and.w	r2, r3, #31
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	3b1e      	subs	r3, #30
 80035ce:	051b      	lsls	r3, r3, #20
 80035d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035d4:	e014      	b.n	8003600 <HAL_ADCEx_InjectedConfigChannel+0x784>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	613b      	str	r3, [r7, #16]
  return result;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	f003 021f 	and.w	r2, r3, #31
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	3b1e      	subs	r3, #30
 80035fa:	051b      	lsls	r3, r3, #20
 80035fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003600:	430b      	orrs	r3, r1
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	4619      	mov	r1, r3
 8003608:	f7ff f977 	bl	80028fa <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d079      	beq.n	800370c <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003618:	4829      	ldr	r0, [pc, #164]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800361a:	f7ff f8c0 	bl	800279e <LL_ADC_GetCommonPathInternalCh>
 800361e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a27      	ldr	r2, [pc, #156]	; (80036c4 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d126      	bne.n	8003684 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800363a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d120      	bne.n	8003684 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800364a:	d15f      	bne.n	800370c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800364c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003650:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003654:	4619      	mov	r1, r3
 8003656:	481a      	ldr	r0, [pc, #104]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003658:	f7ff f88e 	bl	8002778 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <HAL_ADCEx_InjectedConfigChannel+0x850>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	099a      	lsrs	r2, r3, #6
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003674:	e002      	b.n	800367c <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3b01      	subs	r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f9      	bne.n	8003676 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003682:	e043      	b.n	800370c <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d126      	bne.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800368e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d120      	bne.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d033      	beq.n	800370c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ac:	4619      	mov	r1, r3
 80036ae:	4804      	ldr	r0, [pc, #16]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80036b0:	f7ff f862 	bl	8002778 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036b4:	e02a      	b.n	800370c <HAL_ADCEx_InjectedConfigChannel+0x890>
 80036b6:	bf00      	nop
 80036b8:	407f0000 	.word	0x407f0000
 80036bc:	80080000 	.word	0x80080000
 80036c0:	50000300 	.word	0x50000300
 80036c4:	c3210000 	.word	0xc3210000
 80036c8:	90c00010 	.word	0x90c00010
 80036cc:	20000000 	.word	0x20000000
 80036d0:	053e2d63 	.word	0x053e2d63
 80036d4:	c7520000 	.word	0xc7520000
 80036d8:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d112      	bne.n	800370c <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10c      	bne.n	800370c <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a0b      	ldr	r2, [pc, #44]	; (8003724 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003700:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003704:	4619      	mov	r1, r3
 8003706:	4808      	ldr	r0, [pc, #32]	; (8003728 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 8003708:	f7ff f836 	bl	8002778 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003714:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8003718:	4618      	mov	r0, r3
 800371a:	37a0      	adds	r7, #160	; 0xa0
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	cb840000 	.word	0xcb840000
 8003724:	50000100 	.word	0x50000100
 8003728:	50000300 	.word	0x50000300

0800372c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b0a1      	sub	sp, #132	; 0x84
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003746:	2302      	movs	r3, #2
 8003748:	e087      	b.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800375a:	d102      	bne.n	8003762 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800375c:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	e001      	b.n	8003766 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e06a      	b.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f952 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 800378c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff f94c 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d14c      	bne.n	8003838 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800379e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d149      	bne.n	8003838 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037a4:	4b30      	ldr	r3, [pc, #192]	; (8003868 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80037a6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d028      	beq.n	8003802 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037c2:	035b      	lsls	r3, r3, #13
 80037c4:	430b      	orrs	r3, r1
 80037c6:	431a      	orrs	r2, r3
 80037c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037d0:	f7ff f8ee 	bl	80029b0 <LL_ADC_IsEnabled>
 80037d4:	4604      	mov	r4, r0
 80037d6:	4823      	ldr	r0, [pc, #140]	; (8003864 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80037d8:	f7ff f8ea 	bl	80029b0 <LL_ADC_IsEnabled>
 80037dc:	4603      	mov	r3, r0
 80037de:	4323      	orrs	r3, r4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d133      	bne.n	800384c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037ec:	f023 030f 	bic.w	r3, r3, #15
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	6811      	ldr	r1, [r2, #0]
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	6892      	ldr	r2, [r2, #8]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	431a      	orrs	r2, r3
 80037fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003800:	e024      	b.n	800384c <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800380a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800380e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003812:	f7ff f8cd 	bl	80029b0 <LL_ADC_IsEnabled>
 8003816:	4604      	mov	r4, r0
 8003818:	4812      	ldr	r0, [pc, #72]	; (8003864 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800381a:	f7ff f8c9 	bl	80029b0 <LL_ADC_IsEnabled>
 800381e:	4603      	mov	r3, r0
 8003820:	4323      	orrs	r3, r4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d112      	bne.n	800384c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800382e:	f023 030f 	bic.w	r3, r3, #15
 8003832:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003834:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003836:	e009      	b.n	800384c <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800384a:	e000      	b.n	800384e <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800384c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003856:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800385a:	4618      	mov	r0, r3
 800385c:	3784      	adds	r7, #132	; 0x84
 800385e:	46bd      	mov	sp, r7
 8003860:	bd90      	pop	{r4, r7, pc}
 8003862:	bf00      	nop
 8003864:	50000100 	.word	0x50000100
 8003868:	50000300 	.word	0x50000300

0800386c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003888:	4013      	ands	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389e:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	60d3      	str	r3, [r2, #12]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <__NVIC_GetPriorityGrouping+0x18>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	f003 0307 	and.w	r3, r3, #7
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db0b      	blt.n	80038fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	4907      	ldr	r1, [pc, #28]	; (8003908 <__NVIC_EnableIRQ+0x38>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2001      	movs	r0, #1
 80038f2:	fa00 f202 	lsl.w	r2, r0, r2
 80038f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	e000e100 	.word	0xe000e100

0800390c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	db0a      	blt.n	8003936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	490c      	ldr	r1, [pc, #48]	; (8003958 <__NVIC_SetPriority+0x4c>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	0112      	lsls	r2, r2, #4
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	440b      	add	r3, r1
 8003930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003934:	e00a      	b.n	800394c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4908      	ldr	r1, [pc, #32]	; (800395c <__NVIC_SetPriority+0x50>)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	3b04      	subs	r3, #4
 8003944:	0112      	lsls	r2, r2, #4
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	440b      	add	r3, r1
 800394a:	761a      	strb	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f1c3 0307 	rsb	r3, r3, #7
 800397a:	2b04      	cmp	r3, #4
 800397c:	bf28      	it	cs
 800397e:	2304      	movcs	r3, #4
 8003980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3304      	adds	r3, #4
 8003986:	2b06      	cmp	r3, #6
 8003988:	d902      	bls.n	8003990 <NVIC_EncodePriority+0x30>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3b03      	subs	r3, #3
 800398e:	e000      	b.n	8003992 <NVIC_EncodePriority+0x32>
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	f04f 32ff 	mov.w	r2, #4294967295
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	401a      	ands	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43d9      	mvns	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b8:	4313      	orrs	r3, r2
         );
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d8:	d301      	bcc.n	80039de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039da:	2301      	movs	r3, #1
 80039dc:	e00f      	b.n	80039fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <SysTick_Config+0x40>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e6:	210f      	movs	r1, #15
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f7ff ff8e 	bl	800390c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <SysTick_Config+0x40>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <SysTick_Config+0x40>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	e000e010 	.word	0xe000e010

08003a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff29 	bl	800386c <__NVIC_SetPriorityGrouping>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a30:	f7ff ff40 	bl	80038b4 <__NVIC_GetPriorityGrouping>
 8003a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f7ff ff90 	bl	8003960 <NVIC_EncodePriority>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff5f 	bl	800390c <__NVIC_SetPriority>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff33 	bl	80038d0 <__NVIC_EnableIRQ>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ffa4 	bl	80039c8 <SysTick_Config>
 8003a80:	4603      	mov	r3, r0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d00d      	beq.n	8003abe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e047      	b.n	8003b4e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 020e 	bic.w	r2, r2, #14
 8003acc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f003 021f 	and.w	r2, r3, #31
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f202 	lsl.w	r2, r1, r2
 8003b00:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00c      	beq.n	8003b2e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b2c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
    }
  }
  return status;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b66:	e15a      	b.n	8003e1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 814c 	beq.w	8003e18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d00b      	beq.n	8003ba0 <HAL_GPIO_Init+0x48>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d007      	beq.n	8003ba0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b94:	2b11      	cmp	r3, #17
 8003b96:	d003      	beq.n	8003ba0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b12      	cmp	r3, #18
 8003b9e:	d130      	bne.n	8003c02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 0201 	and.w	r2, r3, #1
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0xea>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b12      	cmp	r3, #18
 8003c40:	d123      	bne.n	8003c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	08da      	lsrs	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3208      	adds	r2, #8
 8003c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	220f      	movs	r2, #15
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	08da      	lsrs	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3208      	adds	r2, #8
 8003c84:	6939      	ldr	r1, [r7, #16]
 8003c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	2203      	movs	r2, #3
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0203 	and.w	r2, r3, #3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80a6 	beq.w	8003e18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ccc:	4b5b      	ldr	r3, [pc, #364]	; (8003e3c <HAL_GPIO_Init+0x2e4>)
 8003cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd0:	4a5a      	ldr	r2, [pc, #360]	; (8003e3c <HAL_GPIO_Init+0x2e4>)
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	6613      	str	r3, [r2, #96]	; 0x60
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <HAL_GPIO_Init+0x2e4>)
 8003cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ce4:	4a56      	ldr	r2, [pc, #344]	; (8003e40 <HAL_GPIO_Init+0x2e8>)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	220f      	movs	r2, #15
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d0e:	d01f      	beq.n	8003d50 <HAL_GPIO_Init+0x1f8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a4c      	ldr	r2, [pc, #304]	; (8003e44 <HAL_GPIO_Init+0x2ec>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d019      	beq.n	8003d4c <HAL_GPIO_Init+0x1f4>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a4b      	ldr	r2, [pc, #300]	; (8003e48 <HAL_GPIO_Init+0x2f0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <HAL_GPIO_Init+0x1f0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a4a      	ldr	r2, [pc, #296]	; (8003e4c <HAL_GPIO_Init+0x2f4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00d      	beq.n	8003d44 <HAL_GPIO_Init+0x1ec>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a49      	ldr	r2, [pc, #292]	; (8003e50 <HAL_GPIO_Init+0x2f8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d007      	beq.n	8003d40 <HAL_GPIO_Init+0x1e8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a48      	ldr	r2, [pc, #288]	; (8003e54 <HAL_GPIO_Init+0x2fc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <HAL_GPIO_Init+0x1e4>
 8003d38:	2305      	movs	r3, #5
 8003d3a:	e00a      	b.n	8003d52 <HAL_GPIO_Init+0x1fa>
 8003d3c:	2306      	movs	r3, #6
 8003d3e:	e008      	b.n	8003d52 <HAL_GPIO_Init+0x1fa>
 8003d40:	2304      	movs	r3, #4
 8003d42:	e006      	b.n	8003d52 <HAL_GPIO_Init+0x1fa>
 8003d44:	2303      	movs	r3, #3
 8003d46:	e004      	b.n	8003d52 <HAL_GPIO_Init+0x1fa>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e002      	b.n	8003d52 <HAL_GPIO_Init+0x1fa>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_GPIO_Init+0x1fa>
 8003d50:	2300      	movs	r3, #0
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	f002 0203 	and.w	r2, r2, #3
 8003d58:	0092      	lsls	r2, r2, #2
 8003d5a:	4093      	lsls	r3, r2
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d62:	4937      	ldr	r1, [pc, #220]	; (8003e40 <HAL_GPIO_Init+0x2e8>)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	089b      	lsrs	r3, r3, #2
 8003d68:	3302      	adds	r3, #2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d70:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <HAL_GPIO_Init+0x300>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d94:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <HAL_GPIO_Init+0x300>)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_GPIO_Init+0x300>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4013      	ands	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <HAL_GPIO_Init+0x300>)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dc4:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <HAL_GPIO_Init+0x300>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_GPIO_Init+0x300>)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_GPIO_Init+0x300>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_GPIO_Init+0x300>)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f47f ae9d 	bne.w	8003b68 <HAL_GPIO_Init+0x10>
  }
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40010000 	.word	0x40010000
 8003e44:	48000400 	.word	0x48000400
 8003e48:	48000800 	.word	0x48000800
 8003e4c:	48000c00 	.word	0x48000c00
 8003e50:	48001000 	.word	0x48001000
 8003e54:	48001400 	.word	0x48001400
 8003e58:	40010400 	.word	0x40010400

08003e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e001      	b.n	8003e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d006      	beq.n	8003eb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ea2:	4a05      	ldr	r2, [pc, #20]	; (8003eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc fe5e 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40010400 	.word	0x40010400

08003ebc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0bb      	b.n	800404a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d101      	bne.n	8003ee2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0b3      	b.n	800404a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d101      	bne.n	8003ef2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0ab      	b.n	800404a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef2:	4b58      	ldr	r3, [pc, #352]	; (8004054 <HAL_OPAMP_Init+0x198>)
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef6:	4a57      	ldr	r2, [pc, #348]	; (8004054 <HAL_OPAMP_Init+0x198>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6613      	str	r3, [r2, #96]	; 0x60
 8003efe:	4b55      	ldr	r3, [pc, #340]	; (8004054 <HAL_OPAMP_Init+0x198>)
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd f862 	bl	8000fe8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d003      	beq.n	8003f34 <HAL_OPAMP_Init+0x78>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b60      	cmp	r3, #96	; 0x60
 8003f32:	d133      	bne.n	8003f9c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 0110 	bic.w	r1, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_OPAMP_Init+0x19c>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6851      	ldr	r1, [r2, #4]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6892      	ldr	r2, [r2, #8]
 8003f5c:	4311      	orrs	r1, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6912      	ldr	r2, [r2, #16]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	7d09      	ldrb	r1, [r1, #20]
 8003f68:	2901      	cmp	r1, #1
 8003f6a:	d102      	bne.n	8003f72 <HAL_OPAMP_Init+0xb6>
 8003f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f70:	e000      	b.n	8003f74 <HAL_OPAMP_Init+0xb8>
 8003f72:	2100      	movs	r1, #0
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f86:	04d2      	lsls	r2, r2, #19
 8003f88:	4311      	orrs	r1, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f8e:	0612      	lsls	r2, r2, #24
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e035      	b.n	8004008 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 0110 	bic.w	r1, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_OPAMP_Init+0x19c>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6851      	ldr	r1, [r2, #4]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6892      	ldr	r2, [r2, #8]
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68d2      	ldr	r2, [r2, #12]
 8003fca:	4311      	orrs	r1, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6912      	ldr	r2, [r2, #16]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	7d09      	ldrb	r1, [r1, #20]
 8003fd6:	2901      	cmp	r1, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_OPAMP_Init+0x124>
 8003fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fde:	e000      	b.n	8003fe2 <HAL_OPAMP_Init+0x126>
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe8:	4311      	orrs	r1, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ff4:	04d2      	lsls	r2, r2, #19
 8003ff6:	4311      	orrs	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ffc:	0612      	lsls	r2, r2, #24
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	430b      	orrs	r3, r1
 8004006:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	db10      	blt.n	8004034 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	e0003e11 	.word	0xe0003e11

0800405c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
 8004072:	e01d      	b.n	80040b0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b05      	cmp	r3, #5
 800407e:	d102      	bne.n	8004086 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e014      	b.n	80040b0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10c      	bne.n	80040ac <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2204      	movs	r2, #4
 80040a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80040aa:	e001      	b.n	80040b0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b08c      	sub	sp, #48	; 0x30
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e2df      	b.n	80046a0 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e2d7      	b.n	80046a0 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e2cf      	b.n	80046a0 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e2c7      	b.n	80046a0 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0202 	orr.w	r2, r2, #2
 800411e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0202 	orr.w	r2, r2, #2
 800412e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0202 	orr.w	r2, r2, #2
 800413e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0210 	orr.w	r2, r2, #16
 800414e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0210 	orr.w	r2, r2, #16
 800415e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0210 	orr.w	r2, r2, #16
 800416e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80041ae:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80041be:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80041ce:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 8004200:	2310      	movs	r3, #16
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 8004204:	2310      	movs	r3, #16
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 8004208:	2310      	movs	r3, #16
 800420a:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 800420c:	2308      	movs	r3, #8
 800420e:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8004210:	e056      	b.n	80042c0 <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	061a      	lsls	r2, r3, #24
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	061a      	lsls	r2, r3, #24
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	061a      	lsls	r2, r3, #24
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8004254:	2002      	movs	r0, #2
 8004256:	f7fd fc07 	bl	8001a68 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8004268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	4413      	add	r3, r2
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004270:	e003      	b.n	800427a <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 8004272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8004288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	4413      	add	r3, r2
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
 8004290:	e003      	b.n	800429a <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 8004292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4413      	add	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	e003      	b.n	80042ba <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1a5      	bne.n	8004212 <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	061a      	lsls	r2, r3, #24
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	061a      	lsls	r2, r3, #24
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	061a      	lsls	r2, r3, #24
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8004308:	2002      	movs	r0, #2
 800430a:	f7fd fbad 	bl	8001a68 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	3301      	adds	r3, #1
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	061a      	lsls	r2, r3, #24
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	3301      	adds	r3, #1
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	061a      	lsls	r2, r3, #24
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00d      	beq.n	800438c <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	3301      	adds	r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	061a      	lsls	r2, r3, #24
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800439e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043b2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043c6:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 80043c8:	2310      	movs	r3, #16
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 80043cc:	2310      	movs	r3, #16
 80043ce:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 80043d0:	2310      	movs	r3, #16
 80043d2:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 80043d4:	2308      	movs	r3, #8
 80043d6:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 80043d8:	e056      	b.n	8004488 <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	04da      	lsls	r2, r3, #19
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	04da      	lsls	r2, r3, #19
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	04da      	lsls	r2, r3, #19
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800441c:	2002      	movs	r0, #2
 800441e:	f7fd fb23 	bl	8001a68 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 8004430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	4413      	add	r3, r2
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28
 8004438:	e003      	b.n	8004442 <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 800443a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d004      	beq.n	800445a <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	4413      	add	r3, r2
 8004456:	623b      	str	r3, [r7, #32]
 8004458:	e003      	b.n	8004462 <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 800445a:	6a3a      	ldr	r2, [r7, #32]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	4413      	add	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e003      	b.n	8004482 <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1a5      	bne.n	80043da <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	04da      	lsls	r2, r3, #19
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	04da      	lsls	r2, r3, #19
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	04da      	lsls	r2, r3, #19
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 80044d0:	2002      	movs	r0, #2
 80044d2:	f7fd fac9 	bl	8001a68 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	3301      	adds	r3, #1
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	04da      	lsls	r2, r3, #19
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	3301      	adds	r3, #1
 8004512:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	04da      	lsls	r2, r3, #19
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00d      	beq.n	8004554 <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	3301      	adds	r3, #1
 800453c:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	04da      	lsls	r2, r3, #19
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004562:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004572:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004582:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0202 	bic.w	r2, r2, #2
 80045c2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0202 	bic.w	r2, r2, #2
 80045d2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0202 	bic.w	r2, r2, #2
 80045e2:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	6a3a      	ldr	r2, [r7, #32]
 8004600:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2210      	movs	r2, #16
 800460c:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2210      	movs	r2, #16
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2210      	movs	r2, #16
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	061a      	lsls	r2, r3, #24
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	061a      	lsls	r2, r3, #24
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	061a      	lsls	r2, r3, #24
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	04da      	lsls	r2, r3, #19
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	04da      	lsls	r2, r3, #19
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	04da      	lsls	r2, r3, #19
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3730      	adds	r7, #48	; 0x30
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d141      	bne.n	800473a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046b6:	4b4b      	ldr	r3, [pc, #300]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c2:	d131      	bne.n	8004728 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046c4:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ca:	4a46      	ldr	r2, [pc, #280]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046d4:	4b43      	ldr	r3, [pc, #268]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046dc:	4a41      	ldr	r2, [pc, #260]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046e4:	4b40      	ldr	r3, [pc, #256]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2232      	movs	r2, #50	; 0x32
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	4a3f      	ldr	r2, [pc, #252]	; (80047ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	0c9b      	lsrs	r3, r3, #18
 80046f6:	3301      	adds	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046fa:	e002      	b.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3b01      	subs	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004702:	4b38      	ldr	r3, [pc, #224]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d102      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f2      	bne.n	80046fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004716:	4b33      	ldr	r3, [pc, #204]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004722:	d158      	bne.n	80047d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e057      	b.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004728:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472e:	4a2d      	ldr	r2, [pc, #180]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004738:	e04d      	b.n	80047d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004740:	d141      	bne.n	80047c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004742:	4b28      	ldr	r3, [pc, #160]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474e:	d131      	bne.n	80047b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004750:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004756:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004760:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004768:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800476e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004770:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2232      	movs	r2, #50	; 0x32
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	0c9b      	lsrs	r3, r3, #18
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004786:	e002      	b.n	800478e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3b01      	subs	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800478e:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479a:	d102      	bne.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f2      	bne.n	8004788 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ae:	d112      	bne.n	80047d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e011      	b.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ba:	4a0a      	ldr	r2, [pc, #40]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047c4:	e007      	b.n	80047d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047c6:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047ce:	4a05      	ldr	r2, [pc, #20]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40007000 	.word	0x40007000
 80047e8:	20000000 	.word	0x20000000
 80047ec:	431bde83 	.word	0x431bde83

080047f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e308      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d075      	beq.n	80048fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480e:	4ba3      	ldr	r3, [pc, #652]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004818:	4ba0      	ldr	r3, [pc, #640]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b0c      	cmp	r3, #12
 8004826:	d102      	bne.n	800482e <HAL_RCC_OscConfig+0x3e>
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d002      	beq.n	8004834 <HAL_RCC_OscConfig+0x44>
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d10b      	bne.n	800484c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004834:	4b99      	ldr	r3, [pc, #612]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05b      	beq.n	80048f8 <HAL_RCC_OscConfig+0x108>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d157      	bne.n	80048f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e2e3      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d106      	bne.n	8004864 <HAL_RCC_OscConfig+0x74>
 8004856:	4b91      	ldr	r3, [pc, #580]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a90      	ldr	r2, [pc, #576]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800485c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e01d      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x98>
 800486e:	4b8b      	ldr	r3, [pc, #556]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a8a      	ldr	r2, [pc, #552]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	4b88      	ldr	r3, [pc, #544]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a87      	ldr	r2, [pc, #540]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004888:	4b84      	ldr	r3, [pc, #528]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a83      	ldr	r2, [pc, #524]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800488e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4b81      	ldr	r3, [pc, #516]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a80      	ldr	r2, [pc, #512]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800489a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d013      	beq.n	80048d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fd f8d2 	bl	8001a50 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fd f8ce 	bl	8001a50 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e2a8      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c2:	4b76      	ldr	r3, [pc, #472]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0xc0>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd f8be 	bl	8001a50 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fd f8ba 	bl	8001a50 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	; 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e294      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ea:	4b6c      	ldr	r3, [pc, #432]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0xe8>
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d075      	beq.n	80049f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004906:	4b65      	ldr	r3, [pc, #404]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004910:	4b62      	ldr	r3, [pc, #392]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b0c      	cmp	r3, #12
 800491e:	d102      	bne.n	8004926 <HAL_RCC_OscConfig+0x136>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d002      	beq.n	800492c <HAL_RCC_OscConfig+0x13c>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b04      	cmp	r3, #4
 800492a:	d11f      	bne.n	800496c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800492c:	4b5b      	ldr	r3, [pc, #364]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_OscConfig+0x154>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e267      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004944:	4b55      	ldr	r3, [pc, #340]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	061b      	lsls	r3, r3, #24
 8004952:	4952      	ldr	r1, [pc, #328]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004954:	4313      	orrs	r3, r2
 8004956:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004958:	4b51      	ldr	r3, [pc, #324]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f7fd f82b 	bl	80019b8 <HAL_InitTick>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d043      	beq.n	80049f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e253      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d023      	beq.n	80049bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004974:	4b49      	ldr	r3, [pc, #292]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a48      	ldr	r2, [pc, #288]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800497a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd f866 	bl	8001a50 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004988:	f7fd f862 	bl	8001a50 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e23c      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800499a:	4b40      	ldr	r3, [pc, #256]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a6:	4b3d      	ldr	r3, [pc, #244]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	061b      	lsls	r3, r3, #24
 80049b4:	4939      	ldr	r1, [pc, #228]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
 80049ba:	e01a      	b.n	80049f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049bc:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a36      	ldr	r2, [pc, #216]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fd f842 	bl	8001a50 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d0:	f7fd f83e 	bl	8001a50 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e218      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049e2:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x1e0>
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d03c      	beq.n	8004a78 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01c      	beq.n	8004a40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a06:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0c:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fd f81b 	bl	8001a50 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fd f817 	bl	8001a50 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e1f1      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ef      	beq.n	8004a1e <HAL_RCC_OscConfig+0x22e>
 8004a3e:	e01b      	b.n	8004a78 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a40:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a46:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	f023 0301 	bic.w	r3, r3, #1
 8004a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a50:	f7fc fffe 	bl	8001a50 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a58:	f7fc fffa 	bl	8001a50 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e1d4      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ef      	bne.n	8004a58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80ab 	beq.w	8004bdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a8a:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x2b4>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e005      	b.n	8004aa6 <HAL_RCC_OscConfig+0x2b6>
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	20000004 	.word	0x20000004
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aaa:	4baf      	ldr	r3, [pc, #700]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aae:	4aae      	ldr	r2, [pc, #696]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ab6:	4bac      	ldr	r3, [pc, #688]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac6:	4ba9      	ldr	r3, [pc, #676]	; (8004d6c <HAL_RCC_OscConfig+0x57c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d118      	bne.n	8004b04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad2:	4ba6      	ldr	r3, [pc, #664]	; (8004d6c <HAL_RCC_OscConfig+0x57c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4aa5      	ldr	r2, [pc, #660]	; (8004d6c <HAL_RCC_OscConfig+0x57c>)
 8004ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ade:	f7fc ffb7 	bl	8001a50 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae6:	f7fc ffb3 	bl	8001a50 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e18d      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af8:	4b9c      	ldr	r3, [pc, #624]	; (8004d6c <HAL_RCC_OscConfig+0x57c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d108      	bne.n	8004b1e <HAL_RCC_OscConfig+0x32e>
 8004b0c:	4b96      	ldr	r3, [pc, #600]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	4a95      	ldr	r2, [pc, #596]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b1c:	e024      	b.n	8004b68 <HAL_RCC_OscConfig+0x378>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	d110      	bne.n	8004b48 <HAL_RCC_OscConfig+0x358>
 8004b26:	4b90      	ldr	r3, [pc, #576]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2c:	4a8e      	ldr	r2, [pc, #568]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b36:	4b8c      	ldr	r3, [pc, #560]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	4a8a      	ldr	r2, [pc, #552]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b46:	e00f      	b.n	8004b68 <HAL_RCC_OscConfig+0x378>
 8004b48:	4b87      	ldr	r3, [pc, #540]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	4a86      	ldr	r2, [pc, #536]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b50:	f023 0301 	bic.w	r3, r3, #1
 8004b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b58:	4b83      	ldr	r3, [pc, #524]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	4a82      	ldr	r2, [pc, #520]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d016      	beq.n	8004b9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b70:	f7fc ff6e 	bl	8001a50 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b78:	f7fc ff6a 	bl	8001a50 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e142      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b8e:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ed      	beq.n	8004b78 <HAL_RCC_OscConfig+0x388>
 8004b9c:	e015      	b.n	8004bca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9e:	f7fc ff57 	bl	8001a50 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba6:	f7fc ff53 	bl	8001a50 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e12b      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bbc:	4b6a      	ldr	r3, [pc, #424]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1ed      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d105      	bne.n	8004bdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd0:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	4a64      	ldr	r2, [pc, #400]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d03c      	beq.n	8004c62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01c      	beq.n	8004c2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bf0:	4b5d      	ldr	r3, [pc, #372]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf6:	4a5c      	ldr	r2, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c00:	f7fc ff26 	bl	8001a50 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c08:	f7fc ff22 	bl	8001a50 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e0fc      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c1a:	4b53      	ldr	r3, [pc, #332]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0ef      	beq.n	8004c08 <HAL_RCC_OscConfig+0x418>
 8004c28:	e01b      	b.n	8004c62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c2a:	4b4f      	ldr	r3, [pc, #316]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c30:	4a4d      	ldr	r2, [pc, #308]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3a:	f7fc ff09 	bl	8001a50 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c42:	f7fc ff05 	bl	8001a50 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0df      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c54:	4b44      	ldr	r3, [pc, #272]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1ef      	bne.n	8004c42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 80d3 	beq.w	8004e12 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c6c:	4b3e      	ldr	r3, [pc, #248]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	f000 808d 	beq.w	8004d94 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d15a      	bne.n	8004d38 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c82:	4b39      	ldr	r3, [pc, #228]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a38      	ldr	r2, [pc, #224]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fc fedf 	bl	8001a50 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c96:	f7fc fedb 	bl	8001a50 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e0b5      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca8:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cb4:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <HAL_RCC_OscConfig+0x580>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6a11      	ldr	r1, [r2, #32]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cc4:	3a01      	subs	r2, #1
 8004cc6:	0112      	lsls	r2, r2, #4
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004cce:	0212      	lsls	r2, r2, #8
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cd6:	0852      	lsrs	r2, r2, #1
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0552      	lsls	r2, r2, #21
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ce2:	0852      	lsrs	r2, r2, #1
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	0652      	lsls	r2, r2, #25
 8004ce8:	4311      	orrs	r1, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cee:	06d2      	lsls	r2, r2, #27
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	491d      	ldr	r1, [pc, #116]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1a      	ldr	r2, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fc fe9e 	bl	8001a50 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fc fe9a 	bl	8001a50 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e074      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x528>
 8004d36:	e06c      	b.n	8004e12 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d42:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d44:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4a07      	ldr	r2, [pc, #28]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004d4a:	f023 0303 	bic.w	r3, r3, #3
 8004d4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <HAL_RCC_OscConfig+0x578>)
 8004d56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fc fe76 	bl	8001a50 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d66:	e00e      	b.n	8004d86 <HAL_RCC_OscConfig+0x596>
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40007000 	.word	0x40007000
 8004d70:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fc fe6c 	bl	8001a50 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e046      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d86:	4b25      	ldr	r3, [pc, #148]	; (8004e1c <HAL_RCC_OscConfig+0x62c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x584>
 8004d92:	e03e      	b.n	8004e12 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e039      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004da0:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <HAL_RCC_OscConfig+0x62c>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 0203 	and.w	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d12c      	bne.n	8004e0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d123      	bne.n	8004e0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d11b      	bne.n	8004e0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d113      	bne.n	8004e0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	3b01      	subs	r3, #1
 8004df4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d109      	bne.n	8004e0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	3b01      	subs	r3, #1
 8004e08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d001      	beq.n	8004e12 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000

08004e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e11e      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e38:	4b91      	ldr	r3, [pc, #580]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d910      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b8e      	ldr	r3, [pc, #568]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 020f 	bic.w	r2, r3, #15
 8004e4e:	498c      	ldr	r1, [pc, #560]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b8a      	ldr	r3, [pc, #552]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e106      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d073      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d129      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7c:	4b81      	ldr	r3, [pc, #516]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0f4      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e8c:	f000 f99e 	bl	80051cc <RCC_GetSysClockFreqFromPLLSource>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4a7c      	ldr	r2, [pc, #496]	; (8005088 <HAL_RCC_ClockConfig+0x268>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d93f      	bls.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e9a:	4b7a      	ldr	r3, [pc, #488]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d033      	beq.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12f      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eba:	4b72      	ldr	r3, [pc, #456]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec2:	4a70      	ldr	r2, [pc, #448]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e024      	b.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0c6      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee8:	4b66      	ldr	r3, [pc, #408]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0be      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ef8:	f000 f8ce 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4a61      	ldr	r2, [pc, #388]	; (8005088 <HAL_RCC_ClockConfig+0x268>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d909      	bls.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f06:	4b5f      	ldr	r3, [pc, #380]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f0e:	4a5d      	ldr	r2, [pc, #372]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f16:	2380      	movs	r3, #128	; 0x80
 8004f18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f1a:	4b5a      	ldr	r3, [pc, #360]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 0203 	bic.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4957      	ldr	r1, [pc, #348]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2c:	f7fc fd90 	bl	8001a50 <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f34:	f7fc fd8c 	bl	8001a50 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e095      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	4b4e      	ldr	r3, [pc, #312]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 020c 	and.w	r2, r3, #12
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1eb      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f74:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a42      	ldr	r2, [pc, #264]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f8c:	4b3d      	ldr	r3, [pc, #244]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f94:	4a3b      	ldr	r2, [pc, #236]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f9c:	4b39      	ldr	r3, [pc, #228]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4936      	ldr	r1, [pc, #216]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fb6:	4b33      	ldr	r3, [pc, #204]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4a32      	ldr	r2, [pc, #200]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d21d      	bcs.n	800500c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 020f 	bic.w	r2, r3, #15
 8004fd8:	4929      	ldr	r1, [pc, #164]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fe0:	f7fc fd36 	bl	8001a50 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe8:	f7fc fd32 	bl	8001a50 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e03b      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b20      	ldr	r3, [pc, #128]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d1ed      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005018:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4917      	ldr	r1, [pc, #92]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	490f      	ldr	r1, [pc, #60]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800504a:	f000 f825 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800504e:	4601      	mov	r1, r0
 8005050:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	4a0c      	ldr	r2, [pc, #48]	; (800508c <HAL_RCC_ClockConfig+0x26c>)
 800505c:	5cd3      	ldrb	r3, [r2, r3]
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	fa21 f303 	lsr.w	r3, r1, r3
 8005066:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <HAL_RCC_ClockConfig+0x270>)
 8005068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <HAL_RCC_ClockConfig+0x274>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fc fca2 	bl	80019b8 <HAL_InitTick>
 8005074:	4603      	mov	r3, r0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40022000 	.word	0x40022000
 8005084:	40021000 	.word	0x40021000
 8005088:	04c4b400 	.word	0x04c4b400
 800508c:	08008bd8 	.word	0x08008bd8
 8005090:	20000000 	.word	0x20000000
 8005094:	20000004 	.word	0x20000004

08005098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800509e:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d102      	bne.n	80050b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050aa:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e047      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d102      	bne.n	80050c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050bc:	4b26      	ldr	r3, [pc, #152]	; (8005158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e03e      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050c2:	4b23      	ldr	r3, [pc, #140]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b0c      	cmp	r3, #12
 80050cc:	d136      	bne.n	800513c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ce:	4b20      	ldr	r3, [pc, #128]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050d8:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3301      	adds	r3, #1
 80050e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d10c      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ec:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	4a16      	ldr	r2, [pc, #88]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f6:	68d2      	ldr	r2, [r2, #12]
 80050f8:	0a12      	lsrs	r2, r2, #8
 80050fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	617b      	str	r3, [r7, #20]
      break;
 8005104:	e00c      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005106:	4a13      	ldr	r2, [pc, #76]	; (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	4a10      	ldr	r2, [pc, #64]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	0a12      	lsrs	r2, r2, #8
 8005114:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
      break;
 800511e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	0e5b      	lsrs	r3, r3, #25
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	3301      	adds	r3, #1
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e001      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005140:	693b      	ldr	r3, [r7, #16]
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	00f42400 	.word	0x00f42400
 8005158:	007a1200 	.word	0x007a1200

0800515c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005160:	4b03      	ldr	r3, [pc, #12]	; (8005170 <HAL_RCC_GetHCLKFreq+0x14>)
 8005162:	681b      	ldr	r3, [r3, #0]
}
 8005164:	4618      	mov	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000000 	.word	0x20000000

08005174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005178:	f7ff fff0 	bl	800515c <HAL_RCC_GetHCLKFreq>
 800517c:	4601      	mov	r1, r0
 800517e:	4b06      	ldr	r3, [pc, #24]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	4a04      	ldr	r2, [pc, #16]	; (800519c <HAL_RCC_GetPCLK1Freq+0x28>)
 800518a:	5cd3      	ldrb	r3, [r2, r3]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	08008be8 	.word	0x08008be8

080051a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051a4:	f7ff ffda 	bl	800515c <HAL_RCC_GetHCLKFreq>
 80051a8:	4601      	mov	r1, r0
 80051aa:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0adb      	lsrs	r3, r3, #11
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4a04      	ldr	r2, [pc, #16]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051b6:	5cd3      	ldrb	r3, [r2, r3]
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	08008be8 	.word	0x08008be8

080051cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051d2:	4b1e      	ldr	r3, [pc, #120]	; (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d10c      	bne.n	800520a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051f0:	4a17      	ldr	r2, [pc, #92]	; (8005250 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	4a14      	ldr	r2, [pc, #80]	; (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051fa:	68d2      	ldr	r2, [r2, #12]
 80051fc:	0a12      	lsrs	r2, r2, #8
 80051fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	617b      	str	r3, [r7, #20]
    break;
 8005208:	e00c      	b.n	8005224 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800520a:	4a12      	ldr	r2, [pc, #72]	; (8005254 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	4a0e      	ldr	r2, [pc, #56]	; (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005214:	68d2      	ldr	r2, [r2, #12]
 8005216:	0a12      	lsrs	r2, r2, #8
 8005218:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	617b      	str	r3, [r7, #20]
    break;
 8005222:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005224:	4b09      	ldr	r3, [pc, #36]	; (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	0e5b      	lsrs	r3, r3, #25
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	3301      	adds	r3, #1
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800523e:	687b      	ldr	r3, [r7, #4]
}
 8005240:	4618      	mov	r0, r3
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40021000 	.word	0x40021000
 8005250:	007a1200 	.word	0x007a1200
 8005254:	00f42400 	.word	0x00f42400

08005258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005260:	2300      	movs	r3, #0
 8005262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005264:	2300      	movs	r3, #0
 8005266:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8098 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b43      	ldr	r3, [pc, #268]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	4b40      	ldr	r3, [pc, #256]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	4a3f      	ldr	r2, [pc, #252]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005290:	6593      	str	r3, [r2, #88]	; 0x58
 8005292:	4b3d      	ldr	r3, [pc, #244]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529e:	2301      	movs	r3, #1
 80052a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a2:	4b3a      	ldr	r3, [pc, #232]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a39      	ldr	r2, [pc, #228]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ae:	f7fc fbcf 	bl	8001a50 <HAL_GetTick>
 80052b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b4:	e009      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b6:	f7fc fbcb 	bl	8001a50 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d902      	bls.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	74fb      	strb	r3, [r7, #19]
        break;
 80052c8:	e005      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ca:	4b30      	ldr	r3, [pc, #192]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ef      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d159      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052dc:	4b2a      	ldr	r3, [pc, #168]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01e      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d019      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052f8:	4b23      	ldr	r3, [pc, #140]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005304:	4b20      	ldr	r3, [pc, #128]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005314:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005324:	4a18      	ldr	r2, [pc, #96]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fc fb8b 	bl	8001a50 <HAL_GetTick>
 800533a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533c:	e00b      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533e:	f7fc fb87 	bl	8001a50 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f241 3288 	movw	r2, #5000	; 0x1388
 800534c:	4293      	cmp	r3, r2
 800534e:	d902      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	74fb      	strb	r3, [r7, #19]
            break;
 8005354:	e006      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ec      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	4903      	ldr	r1, [pc, #12]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005380:	e008      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	74bb      	strb	r3, [r7, #18]
 8005386:	e005      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005394:	7c7b      	ldrb	r3, [r7, #17]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539a:	4ba6      	ldr	r3, [pc, #664]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	4aa5      	ldr	r2, [pc, #660]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053b2:	4ba0      	ldr	r3, [pc, #640]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	f023 0203 	bic.w	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	499c      	ldr	r1, [pc, #624]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053d4:	4b97      	ldr	r3, [pc, #604]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	f023 020c 	bic.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	4994      	ldr	r1, [pc, #592]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053f6:	4b8f      	ldr	r3, [pc, #572]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	498b      	ldr	r1, [pc, #556]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005418:	4b86      	ldr	r3, [pc, #536]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	4983      	ldr	r1, [pc, #524]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800543a:	4b7e      	ldr	r3, [pc, #504]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	497a      	ldr	r1, [pc, #488]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800545c:	4b75      	ldr	r3, [pc, #468]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	4972      	ldr	r1, [pc, #456]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800547e:	4b6d      	ldr	r3, [pc, #436]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	4969      	ldr	r1, [pc, #420]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054a0:	4b64      	ldr	r3, [pc, #400]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	4961      	ldr	r1, [pc, #388]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054c2:	4b5c      	ldr	r3, [pc, #368]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	4958      	ldr	r1, [pc, #352]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d015      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054e4:	4b53      	ldr	r3, [pc, #332]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	4950      	ldr	r1, [pc, #320]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005502:	d105      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005504:	4b4b      	ldr	r3, [pc, #300]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4a4a      	ldr	r2, [pc, #296]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800550e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005518:	2b00      	cmp	r3, #0
 800551a:	d015      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800551c:	4b45      	ldr	r3, [pc, #276]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	4942      	ldr	r1, [pc, #264]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800553a:	d105      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800553c:	4b3d      	ldr	r3, [pc, #244]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a3c      	ldr	r2, [pc, #240]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005546:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d015      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005554:	4b37      	ldr	r3, [pc, #220]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	4934      	ldr	r1, [pc, #208]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005572:	d105      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005574:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4a2e      	ldr	r2, [pc, #184]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d015      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800558c:	4b29      	ldr	r3, [pc, #164]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	4926      	ldr	r1, [pc, #152]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055aa:	d105      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ac:	4b21      	ldr	r3, [pc, #132]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	4a20      	ldr	r2, [pc, #128]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d015      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	4918      	ldr	r1, [pc, #96]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e2:	d105      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e4:	4b13      	ldr	r3, [pc, #76]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	4a12      	ldr	r2, [pc, #72]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d015      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	490a      	ldr	r1, [pc, #40]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800561a:	d105      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a04      	ldr	r2, [pc, #16]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005626:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005628:	7cbb      	ldrb	r3, [r7, #18]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000

08005638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e049      	b.n	80056de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fb ff90 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f000 fdd2 	bl	8006220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d001      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e021      	b.n	8005744 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <HAL_TIM_Base_Start_IT+0x68>)
 8005720:	4013      	ands	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b06      	cmp	r3, #6
 8005728:	d00b      	beq.n	8005742 <HAL_TIM_Base_Start_IT+0x5a>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005730:	d007      	beq.n	8005742 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	00010007 	.word	0x00010007

08005754 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e049      	b.n	80057fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f841 	bl	8005802 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3304      	adds	r3, #4
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	f000 fd44 	bl	8006220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_TIM_PWM_Start+0x24>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	bf14      	ite	ne
 8005834:	2301      	movne	r3, #1
 8005836:	2300      	moveq	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	e03c      	b.n	80058b6 <HAL_TIM_PWM_Start+0x9e>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b04      	cmp	r3, #4
 8005840:	d109      	bne.n	8005856 <HAL_TIM_PWM_Start+0x3e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e02f      	b.n	80058b6 <HAL_TIM_PWM_Start+0x9e>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d109      	bne.n	8005870 <HAL_TIM_PWM_Start+0x58>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e022      	b.n	80058b6 <HAL_TIM_PWM_Start+0x9e>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b0c      	cmp	r3, #12
 8005874:	d109      	bne.n	800588a <HAL_TIM_PWM_Start+0x72>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	bf14      	ite	ne
 8005882:	2301      	movne	r3, #1
 8005884:	2300      	moveq	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e015      	b.n	80058b6 <HAL_TIM_PWM_Start+0x9e>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b10      	cmp	r3, #16
 800588e:	d109      	bne.n	80058a4 <HAL_TIM_PWM_Start+0x8c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e008      	b.n	80058b6 <HAL_TIM_PWM_Start+0x9e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	bf14      	ite	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	2300      	moveq	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e06e      	b.n	800599c <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_PWM_Start+0xb6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058cc:	e023      	b.n	8005916 <HAL_TIM_PWM_Start+0xfe>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start+0xc6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058dc:	e01b      	b.n	8005916 <HAL_TIM_PWM_Start+0xfe>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_PWM_Start+0xd6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ec:	e013      	b.n	8005916 <HAL_TIM_PWM_Start+0xfe>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_PWM_Start+0xe6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058fc:	e00b      	b.n	8005916 <HAL_TIM_PWM_Start+0xfe>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b10      	cmp	r3, #16
 8005902:	d104      	bne.n	800590e <HAL_TIM_PWM_Start+0xf6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800590c:	e003      	b.n	8005916 <HAL_TIM_PWM_Start+0xfe>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2201      	movs	r2, #1
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f001 f8a0 	bl	8006a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1e      	ldr	r2, [pc, #120]	; (80059a4 <HAL_TIM_PWM_Start+0x18c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <HAL_TIM_PWM_Start+0x13e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1d      	ldr	r2, [pc, #116]	; (80059a8 <HAL_TIM_PWM_Start+0x190>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00e      	beq.n	8005956 <HAL_TIM_PWM_Start+0x13e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1b      	ldr	r2, [pc, #108]	; (80059ac <HAL_TIM_PWM_Start+0x194>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d009      	beq.n	8005956 <HAL_TIM_PWM_Start+0x13e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1a      	ldr	r2, [pc, #104]	; (80059b0 <HAL_TIM_PWM_Start+0x198>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <HAL_TIM_PWM_Start+0x13e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <HAL_TIM_PWM_Start+0x19c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d101      	bne.n	800595a <HAL_TIM_PWM_Start+0x142>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <HAL_TIM_PWM_Start+0x144>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800596e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_TIM_PWM_Start+0x1a0>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b06      	cmp	r3, #6
 8005980:	d00b      	beq.n	800599a <HAL_TIM_PWM_Start+0x182>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d007      	beq.n	800599a <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40013400 	.word	0x40013400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800
 80059b8:	00010007 	.word	0x00010007

080059bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e097      	b.n	8005b00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fb fe0d 	bl	8001604 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005a00:	f023 0307 	bic.w	r3, r3, #7
 8005a04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f000 fc05 	bl	8006220 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a5c:	f023 030c 	bic.w	r3, r3, #12
 8005a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	011a      	lsls	r2, r3, #4
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	031b      	lsls	r3, r3, #12
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d122      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d11b      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0202 	mvn.w	r2, #2
 8005b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fb f8a8 	bl	8000ca0 <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fb46 	bl	80061e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fb4d 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d122      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0204 	mvn.w	r2, #4
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb f87e 	bl	8000ca0 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fb1c 	bl	80061e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fb23 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0208 	mvn.w	r2, #8
 8005bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2204      	movs	r2, #4
 8005be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fb f854 	bl	8000ca0 <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 faf2 	bl	80061e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 faf9 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b10      	cmp	r3, #16
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0210 	mvn.w	r2, #16
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2208      	movs	r2, #8
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fb f82a 	bl	8000ca0 <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fac8 	bl	80061e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 facf 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d10e      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d107      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0201 	mvn.w	r2, #1
 8005c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fa fff4 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c96:	2b80      	cmp	r3, #128	; 0x80
 8005c98:	d10e      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca4:	2b80      	cmp	r3, #128	; 0x80
 8005ca6:	d107      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 f8a8 	bl	8006e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc6:	d10e      	bne.n	8005ce6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b80      	cmp	r3, #128	; 0x80
 8005cd4:	d107      	bne.n	8005ce6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 f89b 	bl	8006e1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	d10e      	bne.n	8005d12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d107      	bne.n	8005d12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fa7d 	bl	800620c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d10e      	bne.n	8005d3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d107      	bne.n	8005d3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f06f 0220 	mvn.w	r2, #32
 8005d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 f85b 	bl	8006df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d4c:	d10f      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d5c:	d107      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 f861 	bl	8006e30 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d7c:	d10f      	bne.n	8005d9e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d8c:	d107      	bne.n	8005d9e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 f853 	bl	8006e44 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dac:	d10f      	bne.n	8005dce <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dbc:	d107      	bne.n	8005dce <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 f845 	bl	8006e58 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ddc:	d10f      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dec:	d107      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f001 f837 	bl	8006e6c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dfe:	bf00      	nop
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e0fd      	b.n	800601e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b14      	cmp	r3, #20
 8005e2e:	f200 80f0 	bhi.w	8006012 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005e32:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e8d 	.word	0x08005e8d
 8005e3c:	08006013 	.word	0x08006013
 8005e40:	08006013 	.word	0x08006013
 8005e44:	08006013 	.word	0x08006013
 8005e48:	08005ecd 	.word	0x08005ecd
 8005e4c:	08006013 	.word	0x08006013
 8005e50:	08006013 	.word	0x08006013
 8005e54:	08006013 	.word	0x08006013
 8005e58:	08005f0f 	.word	0x08005f0f
 8005e5c:	08006013 	.word	0x08006013
 8005e60:	08006013 	.word	0x08006013
 8005e64:	08006013 	.word	0x08006013
 8005e68:	08005f4f 	.word	0x08005f4f
 8005e6c:	08006013 	.word	0x08006013
 8005e70:	08006013 	.word	0x08006013
 8005e74:	08006013 	.word	0x08006013
 8005e78:	08005f91 	.word	0x08005f91
 8005e7c:	08006013 	.word	0x08006013
 8005e80:	08006013 	.word	0x08006013
 8005e84:	08006013 	.word	0x08006013
 8005e88:	08005fd1 	.word	0x08005fd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fa54 	bl	8006340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0208 	orr.w	r2, r2, #8
 8005ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0204 	bic.w	r2, r2, #4
 8005eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6999      	ldr	r1, [r3, #24]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	619a      	str	r2, [r3, #24]
      break;
 8005eca:	e0a3      	b.n	8006014 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fac4 	bl	8006460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6999      	ldr	r1, [r3, #24]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	021a      	lsls	r2, r3, #8
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	619a      	str	r2, [r3, #24]
      break;
 8005f0c:	e082      	b.n	8006014 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fb2d 	bl	8006574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0208 	orr.w	r2, r2, #8
 8005f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0204 	bic.w	r2, r2, #4
 8005f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69d9      	ldr	r1, [r3, #28]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	61da      	str	r2, [r3, #28]
      break;
 8005f4c:	e062      	b.n	8006014 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fb95 	bl	8006684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69d9      	ldr	r1, [r3, #28]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	021a      	lsls	r2, r3, #8
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	61da      	str	r2, [r3, #28]
      break;
 8005f8e:	e041      	b.n	8006014 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fbfe 	bl	8006798 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0208 	orr.w	r2, r2, #8
 8005faa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0204 	bic.w	r2, r2, #4
 8005fba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005fce:	e021      	b.n	8006014 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fc42 	bl	8006860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	021a      	lsls	r2, r3, #8
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006010:	e000      	b.n	8006014 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006012:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop

08006028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_TIM_ConfigClockSource+0x18>
 800603c:	2302      	movs	r3, #2
 800603e:	e0c3      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x1a0>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800605e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800606a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b70      	cmp	r3, #112	; 0x70
 800607a:	d038      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0xc6>
 800607c:	2b70      	cmp	r3, #112	; 0x70
 800607e:	d815      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x84>
 8006080:	2b30      	cmp	r3, #48	; 0x30
 8006082:	f000 808e 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
 8006086:	2b30      	cmp	r3, #48	; 0x30
 8006088:	d809      	bhi.n	800609e <HAL_TIM_ConfigClockSource+0x76>
 800608a:	2b10      	cmp	r3, #16
 800608c:	f000 8089 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
 8006090:	2b20      	cmp	r3, #32
 8006092:	f000 8086 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 8083 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800609c:	e08b      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800609e:	2b50      	cmp	r3, #80	; 0x50
 80060a0:	d04f      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x11a>
 80060a2:	2b60      	cmp	r3, #96	; 0x60
 80060a4:	d05d      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x13a>
 80060a6:	2b40      	cmp	r3, #64	; 0x40
 80060a8:	d06b      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80060aa:	e084      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80060ac:	4a48      	ldr	r2, [pc, #288]	; (80061d0 <HAL_TIM_ConfigClockSource+0x1a8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d077      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
 80060b2:	4a47      	ldr	r2, [pc, #284]	; (80061d0 <HAL_TIM_ConfigClockSource+0x1a8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d809      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0xa4>
 80060b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060bc:	d02e      	beq.n	800611c <HAL_TIM_ConfigClockSource+0xf4>
 80060be:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80060c2:	d06e      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c8:	d074      	beq.n	80061b4 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80060ca:	e074      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80060cc:	4a41      	ldr	r2, [pc, #260]	; (80061d4 <HAL_TIM_ConfigClockSource+0x1ac>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d067      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
 80060d2:	4a40      	ldr	r2, [pc, #256]	; (80061d4 <HAL_TIM_ConfigClockSource+0x1ac>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d803      	bhi.n	80060e0 <HAL_TIM_ConfigClockSource+0xb8>
 80060d8:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <HAL_TIM_ConfigClockSource+0x1b0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d061      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80060de:	e06a      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80060e0:	4a3e      	ldr	r2, [pc, #248]	; (80061dc <HAL_TIM_ConfigClockSource+0x1b4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d05d      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
 80060e6:	4a3e      	ldr	r2, [pc, #248]	; (80061e0 <HAL_TIM_ConfigClockSource+0x1b8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d05a      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80060ec:	e063      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6899      	ldr	r1, [r3, #8]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f000 fc91 	bl	8006a24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006110:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	609a      	str	r2, [r3, #8]
      break;
 800611a:	e04c      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	6899      	ldr	r1, [r3, #8]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f000 fc7a 	bl	8006a24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800613e:	609a      	str	r2, [r3, #8]
      break;
 8006140:	e039      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	461a      	mov	r2, r3
 8006150:	f000 fbec 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2150      	movs	r1, #80	; 0x50
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fc45 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 8006160:	e029      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6859      	ldr	r1, [r3, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	461a      	mov	r2, r3
 8006170:	f000 fc0b 	bl	800698a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2160      	movs	r1, #96	; 0x60
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fc35 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 8006180:	e019      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	461a      	mov	r2, r3
 8006190:	f000 fbcc 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2140      	movs	r1, #64	; 0x40
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fc25 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 80061a0:	e009      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f000 fc1c 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 80061b2:	e000      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80061b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	00100020 	.word	0x00100020
 80061d4:	00100040 	.word	0x00100040
 80061d8:	00100030 	.word	0x00100030
 80061dc:	00100060 	.word	0x00100060
 80061e0:	00100070 	.word	0x00100070

080061e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a3c      	ldr	r2, [pc, #240]	; (8006324 <TIM_Base_SetConfig+0x104>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00f      	beq.n	8006258 <TIM_Base_SetConfig+0x38>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623e:	d00b      	beq.n	8006258 <TIM_Base_SetConfig+0x38>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a39      	ldr	r2, [pc, #228]	; (8006328 <TIM_Base_SetConfig+0x108>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_Base_SetConfig+0x38>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a38      	ldr	r2, [pc, #224]	; (800632c <TIM_Base_SetConfig+0x10c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0x38>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a37      	ldr	r2, [pc, #220]	; (8006330 <TIM_Base_SetConfig+0x110>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d108      	bne.n	800626a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2d      	ldr	r2, [pc, #180]	; (8006324 <TIM_Base_SetConfig+0x104>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01b      	beq.n	80062aa <TIM_Base_SetConfig+0x8a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006278:	d017      	beq.n	80062aa <TIM_Base_SetConfig+0x8a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2a      	ldr	r2, [pc, #168]	; (8006328 <TIM_Base_SetConfig+0x108>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <TIM_Base_SetConfig+0x8a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a29      	ldr	r2, [pc, #164]	; (800632c <TIM_Base_SetConfig+0x10c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00f      	beq.n	80062aa <TIM_Base_SetConfig+0x8a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a28      	ldr	r2, [pc, #160]	; (8006330 <TIM_Base_SetConfig+0x110>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00b      	beq.n	80062aa <TIM_Base_SetConfig+0x8a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a27      	ldr	r2, [pc, #156]	; (8006334 <TIM_Base_SetConfig+0x114>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d007      	beq.n	80062aa <TIM_Base_SetConfig+0x8a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a26      	ldr	r2, [pc, #152]	; (8006338 <TIM_Base_SetConfig+0x118>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_Base_SetConfig+0x8a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a25      	ldr	r2, [pc, #148]	; (800633c <TIM_Base_SetConfig+0x11c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d108      	bne.n	80062bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a10      	ldr	r2, [pc, #64]	; (8006324 <TIM_Base_SetConfig+0x104>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00f      	beq.n	8006308 <TIM_Base_SetConfig+0xe8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a11      	ldr	r2, [pc, #68]	; (8006330 <TIM_Base_SetConfig+0x110>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00b      	beq.n	8006308 <TIM_Base_SetConfig+0xe8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a10      	ldr	r2, [pc, #64]	; (8006334 <TIM_Base_SetConfig+0x114>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d007      	beq.n	8006308 <TIM_Base_SetConfig+0xe8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a0f      	ldr	r2, [pc, #60]	; (8006338 <TIM_Base_SetConfig+0x118>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_Base_SetConfig+0xe8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a0e      	ldr	r2, [pc, #56]	; (800633c <TIM_Base_SetConfig+0x11c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d103      	bne.n	8006310 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	615a      	str	r2, [r3, #20]
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40013400 	.word	0x40013400
 8006334:	40014000 	.word	0x40014000
 8006338:	40014400 	.word	0x40014400
 800633c:	40014800 	.word	0x40014800

08006340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0201 	bic.w	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0302 	bic.w	r3, r3, #2
 800638c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2c      	ldr	r2, [pc, #176]	; (800644c <TIM_OC1_SetConfig+0x10c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00f      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2b      	ldr	r2, [pc, #172]	; (8006450 <TIM_OC1_SetConfig+0x110>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00b      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a2a      	ldr	r2, [pc, #168]	; (8006454 <TIM_OC1_SetConfig+0x114>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d007      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a29      	ldr	r2, [pc, #164]	; (8006458 <TIM_OC1_SetConfig+0x118>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a28      	ldr	r2, [pc, #160]	; (800645c <TIM_OC1_SetConfig+0x11c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10c      	bne.n	80063da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0308 	bic.w	r3, r3, #8
 80063c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f023 0304 	bic.w	r3, r3, #4
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	; (800644c <TIM_OC1_SetConfig+0x10c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00f      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	; (8006450 <TIM_OC1_SetConfig+0x110>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00b      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a19      	ldr	r2, [pc, #100]	; (8006454 <TIM_OC1_SetConfig+0x114>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d007      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <TIM_OC1_SetConfig+0x118>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a17      	ldr	r2, [pc, #92]	; (800645c <TIM_OC1_SetConfig+0x11c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d111      	bne.n	8006426 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40013400 	.word	0x40013400
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800

08006460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0210 	bic.w	r2, r3, #16
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0320 	bic.w	r3, r3, #32
 80064ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a28      	ldr	r2, [pc, #160]	; (8006560 <TIM_OC2_SetConfig+0x100>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC2_SetConfig+0x6c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a27      	ldr	r2, [pc, #156]	; (8006564 <TIM_OC2_SetConfig+0x104>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d10d      	bne.n	80064e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <TIM_OC2_SetConfig+0x100>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a1c      	ldr	r2, [pc, #112]	; (8006564 <TIM_OC2_SetConfig+0x104>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00b      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <TIM_OC2_SetConfig+0x108>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a1a      	ldr	r2, [pc, #104]	; (800656c <TIM_OC2_SetConfig+0x10c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a19      	ldr	r2, [pc, #100]	; (8006570 <TIM_OC2_SetConfig+0x110>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d113      	bne.n	8006538 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800651e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	40014400 	.word	0x40014400
 8006570:	40014800 	.word	0x40014800

08006574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a27      	ldr	r2, [pc, #156]	; (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d003      	beq.n	80065de <TIM_OC3_SetConfig+0x6a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a26      	ldr	r2, [pc, #152]	; (8006674 <TIM_OC3_SetConfig+0x100>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d10d      	bne.n	80065fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00f      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <TIM_OC3_SetConfig+0x100>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00b      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1a      	ldr	r2, [pc, #104]	; (8006678 <TIM_OC3_SetConfig+0x104>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a19      	ldr	r2, [pc, #100]	; (800667c <TIM_OC3_SetConfig+0x108>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a18      	ldr	r2, [pc, #96]	; (8006680 <TIM_OC3_SetConfig+0x10c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d113      	bne.n	800664a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40013400 	.word	0x40013400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	031b      	lsls	r3, r3, #12
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a28      	ldr	r2, [pc, #160]	; (8006784 <TIM_OC4_SetConfig+0x100>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_OC4_SetConfig+0x6c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a27      	ldr	r2, [pc, #156]	; (8006788 <TIM_OC4_SetConfig+0x104>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d10d      	bne.n	800670c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	031b      	lsls	r3, r3, #12
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800670a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <TIM_OC4_SetConfig+0x100>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00f      	beq.n	8006734 <TIM_OC4_SetConfig+0xb0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <TIM_OC4_SetConfig+0x104>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00b      	beq.n	8006734 <TIM_OC4_SetConfig+0xb0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a1b      	ldr	r2, [pc, #108]	; (800678c <TIM_OC4_SetConfig+0x108>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d007      	beq.n	8006734 <TIM_OC4_SetConfig+0xb0>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a1a      	ldr	r2, [pc, #104]	; (8006790 <TIM_OC4_SetConfig+0x10c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_OC4_SetConfig+0xb0>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a19      	ldr	r2, [pc, #100]	; (8006794 <TIM_OC4_SetConfig+0x110>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d113      	bne.n	800675c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800673a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006742:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	019b      	lsls	r3, r3, #6
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	019b      	lsls	r3, r3, #6
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	621a      	str	r2, [r3, #32]
}
 8006776:	bf00      	nop
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40013400 	.word	0x40013400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800

08006798 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	041b      	lsls	r3, r3, #16
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a17      	ldr	r2, [pc, #92]	; (800684c <TIM_OC5_SetConfig+0xb4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00f      	beq.n	8006812 <TIM_OC5_SetConfig+0x7a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a16      	ldr	r2, [pc, #88]	; (8006850 <TIM_OC5_SetConfig+0xb8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00b      	beq.n	8006812 <TIM_OC5_SetConfig+0x7a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a15      	ldr	r2, [pc, #84]	; (8006854 <TIM_OC5_SetConfig+0xbc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d007      	beq.n	8006812 <TIM_OC5_SetConfig+0x7a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a14      	ldr	r2, [pc, #80]	; (8006858 <TIM_OC5_SetConfig+0xc0>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_OC5_SetConfig+0x7a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a13      	ldr	r2, [pc, #76]	; (800685c <TIM_OC5_SetConfig+0xc4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d109      	bne.n	8006826 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006818:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40012c00 	.word	0x40012c00
 8006850:	40013400 	.word	0x40013400
 8006854:	40014000 	.word	0x40014000
 8006858:	40014400 	.word	0x40014400
 800685c:	40014800 	.word	0x40014800

08006860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	051b      	lsls	r3, r3, #20
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a18      	ldr	r2, [pc, #96]	; (8006918 <TIM_OC6_SetConfig+0xb8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00f      	beq.n	80068dc <TIM_OC6_SetConfig+0x7c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a17      	ldr	r2, [pc, #92]	; (800691c <TIM_OC6_SetConfig+0xbc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00b      	beq.n	80068dc <TIM_OC6_SetConfig+0x7c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a16      	ldr	r2, [pc, #88]	; (8006920 <TIM_OC6_SetConfig+0xc0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <TIM_OC6_SetConfig+0x7c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a15      	ldr	r2, [pc, #84]	; (8006924 <TIM_OC6_SetConfig+0xc4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC6_SetConfig+0x7c>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a14      	ldr	r2, [pc, #80]	; (8006928 <TIM_OC6_SetConfig+0xc8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d109      	bne.n	80068f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40013400 	.word	0x40013400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800

0800692c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f023 0201 	bic.w	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 030a 	bic.w	r3, r3, #10
 8006968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800698a:	b480      	push	{r7}
 800698c:	b087      	sub	sp, #28
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f023 0210 	bic.w	r2, r3, #16
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f043 0307 	orr.w	r3, r3, #7
 8006a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	021a      	lsls	r2, r3, #8
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	609a      	str	r2, [r3, #8]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	2201      	movs	r2, #1
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1a      	ldr	r2, [r3, #32]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	43db      	mvns	r3, r3
 8006a86:	401a      	ands	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <HAL_TIMEx_PWMN_Start+0x24>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	e022      	b.n	8006b1a <HAL_TIMEx_PWMN_Start+0x6a>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d109      	bne.n	8006aee <HAL_TIMEx_PWMN_Start+0x3e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	bf14      	ite	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	2300      	moveq	r3, #0
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	e015      	b.n	8006b1a <HAL_TIMEx_PWMN_Start+0x6a>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d109      	bne.n	8006b08 <HAL_TIMEx_PWMN_Start+0x58>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	bf14      	ite	ne
 8006b00:	2301      	movne	r3, #1
 8006b02:	2300      	moveq	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	e008      	b.n	8006b1a <HAL_TIMEx_PWMN_Start+0x6a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e040      	b.n	8006ba4 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <HAL_TIMEx_PWMN_Start+0x82>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b30:	e013      	b.n	8006b5a <HAL_TIMEx_PWMN_Start+0xaa>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d104      	bne.n	8006b42 <HAL_TIMEx_PWMN_Start+0x92>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b40:	e00b      	b.n	8006b5a <HAL_TIMEx_PWMN_Start+0xaa>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d104      	bne.n	8006b52 <HAL_TIMEx_PWMN_Start+0xa2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b50:	e003      	b.n	8006b5a <HAL_TIMEx_PWMN_Start+0xaa>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 f98c 	bl	8006e80 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <HAL_TIMEx_PWMN_Start+0xfc>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b06      	cmp	r3, #6
 8006b88:	d00b      	beq.n	8006ba2 <HAL_TIMEx_PWMN_Start+0xf2>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b90:	d007      	beq.n	8006ba2 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0201 	orr.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	00010007 	.word	0x00010007

08006bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e065      	b.n	8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a2c      	ldr	r2, [pc, #176]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a2b      	ldr	r2, [pc, #172]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d108      	bne.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d018      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3e:	d013      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a17      	ldr	r2, [pc, #92]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d009      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a12      	ldr	r2, [pc, #72]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a13      	ldr	r2, [pc, #76]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d10c      	bne.n	8006c82 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40013400 	.word	0x40013400
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40014000 	.word	0x40014000

08006cb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e087      	b.n	8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	041b      	lsls	r3, r3, #16
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a27      	ldr	r2, [pc, #156]	; (8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a25      	ldr	r2, [pc, #148]	; (8006df0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d106      	bne.n	8006d6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1e      	ldr	r2, [pc, #120]	; (8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1d      	ldr	r2, [pc, #116]	; (8006df0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d126      	bne.n	8006dce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	051b      	lsls	r3, r3, #20
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a0e      	ldr	r2, [pc, #56]	; (8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d004      	beq.n	8006dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d106      	bne.n	8006dce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	40012c00 	.word	0x40012c00
 8006df0:	40013400 	.word	0x40013400

08006df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f003 031f 	and.w	r3, r3, #31
 8006e92:	2204      	movs	r2, #4
 8006e94:	fa02 f303 	lsl.w	r3, r2, r3
 8006e98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a1a      	ldr	r2, [r3, #32]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	43db      	mvns	r3, r3
 8006ea2:	401a      	ands	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a1a      	ldr	r2, [r3, #32]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 031f 	and.w	r3, r3, #31
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]
}
 8006ebe:	bf00      	nop
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e042      	b.n	8006f62 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fa fcd4 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2224      	movs	r2, #36	; 0x24
 8006ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0201 	bic.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9a7 	bl	8007260 <UART_SetConfig>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e022      	b.n	8006f62 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fb55 	bl	80085d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0201 	orr.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 fbdc 	bl	8008718 <UART_CheckIdleState>
 8006f60:	4603      	mov	r3, r0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b088      	sub	sp, #32
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d118      	bne.n	8006fcc <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d013      	beq.n	8006fcc <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d009      	beq.n	8006fcc <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 812e 	beq.w	800721e <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
      }
      return;
 8006fca:	e128      	b.n	800721e <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 80d1 	beq.w	8007176 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4b96      	ldr	r3, [pc, #600]	; (8007230 <HAL_UART_IRQHandler+0x2c4>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d105      	bne.n	8006fea <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80c6 	beq.w	8007176 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d010      	beq.n	8007016 <HAL_UART_IRQHandler+0xaa>
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2201      	movs	r2, #1
 8007004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700c:	f043 0201 	orr.w	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d010      	beq.n	8007042 <HAL_UART_IRQHandler+0xd6>
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2202      	movs	r2, #2
 8007030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007038:	f043 0204 	orr.w	r2, r3, #4
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d010      	beq.n	800706e <HAL_UART_IRQHandler+0x102>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2204      	movs	r2, #4
 800705c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007064:	f043 0202 	orr.w	r2, r3, #2
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d104      	bne.n	800708c <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4b6a      	ldr	r3, [pc, #424]	; (8007230 <HAL_UART_IRQHandler+0x2c4>)
 8007086:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2208      	movs	r2, #8
 8007092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709a:	f043 0208 	orr.w	r2, r3, #8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 80b9 	beq.w	8007222 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d011      	beq.n	80070de <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d007      	beq.n	80070de <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f0:	2b40      	cmp	r3, #64	; 0x40
 80070f2:	d004      	beq.n	80070fe <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d031      	beq.n	8007162 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 fb9c 	bl	800883c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d123      	bne.n	800715a <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007120:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007126:	2b00      	cmp	r3, #0
 8007128:	d013      	beq.n	8007152 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800712e:	4a41      	ldr	r2, [pc, #260]	; (8007234 <HAL_UART_IRQHandler+0x2c8>)
 8007130:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007136:	4618      	mov	r0, r3
 8007138:	f7fc fca7 	bl	8003a8a <HAL_DMA_Abort_IT>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d017      	beq.n	8007172 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007150:	e00f      	b.n	8007172 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f87a 	bl	800724c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007158:	e00b      	b.n	8007172 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f876 	bl	800724c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007160:	e007      	b.n	8007172 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f872 	bl	800724c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007170:	e057      	b.n	8007222 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007172:	bf00      	nop
    return;
 8007174:	e055      	b.n	8007222 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00d      	beq.n	800719c <HAL_UART_IRQHandler+0x230>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d008      	beq.n	800719c <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007192:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fba4 	bl	80088e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800719a:	e045      	b.n	8007228 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d012      	beq.n	80071cc <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d008      	beq.n	80071cc <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d031      	beq.n	8007226 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
    }
    return;
 80071ca:	e02c      	b.n	8007226 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d008      	beq.n	80071e8 <HAL_UART_IRQHandler+0x27c>
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fb64 	bl	80088ae <UART_EndTransmit_IT>
    return;
 80071e6:	e01f      	b.n	8007228 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d008      	beq.n	8007204 <HAL_UART_IRQHandler+0x298>
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 fb84 	bl	800890a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007202:	e011      	b.n	8007228 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00c      	beq.n	8007228 <HAL_UART_IRQHandler+0x2bc>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	da09      	bge.n	8007228 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fb6e 	bl	80088f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800721a:	bf00      	nop
 800721c:	e004      	b.n	8007228 <HAL_UART_IRQHandler+0x2bc>
      return;
 800721e:	bf00      	nop
 8007220:	e002      	b.n	8007228 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007222:	bf00      	nop
 8007224:	e000      	b.n	8007228 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007226:	bf00      	nop
  }
}
 8007228:	3720      	adds	r7, #32
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	10000001 	.word	0x10000001
 8007234:	08008883 	.word	0x08008883

08007238 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007260:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007264:	b08a      	sub	sp, #40	; 0x28
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	4313      	orrs	r3, r2
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007294:	4313      	orrs	r3, r2
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4ba4      	ldr	r3, [pc, #656]	; (8007530 <UART_SetConfig+0x2d0>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6812      	ldr	r2, [r2, #0]
 80072a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a99      	ldr	r2, [pc, #612]	; (8007534 <UART_SetConfig+0x2d4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d004      	beq.n	80072dc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d8:	4313      	orrs	r3, r2
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80072e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6812      	ldr	r2, [r2, #0]
 80072ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072f0:	430b      	orrs	r3, r1
 80072f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	f023 010f 	bic.w	r1, r3, #15
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a8a      	ldr	r2, [pc, #552]	; (8007538 <UART_SetConfig+0x2d8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d126      	bne.n	8007362 <UART_SetConfig+0x102>
 8007314:	4b89      	ldr	r3, [pc, #548]	; (800753c <UART_SetConfig+0x2dc>)
 8007316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d81a      	bhi.n	8007358 <UART_SetConfig+0xf8>
 8007322:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <UART_SetConfig+0xc8>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	08007339 	.word	0x08007339
 800732c:	08007349 	.word	0x08007349
 8007330:	08007341 	.word	0x08007341
 8007334:	08007351 	.word	0x08007351
 8007338:	2301      	movs	r3, #1
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733e:	e0d6      	b.n	80074ee <UART_SetConfig+0x28e>
 8007340:	2302      	movs	r3, #2
 8007342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007346:	e0d2      	b.n	80074ee <UART_SetConfig+0x28e>
 8007348:	2304      	movs	r3, #4
 800734a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800734e:	e0ce      	b.n	80074ee <UART_SetConfig+0x28e>
 8007350:	2308      	movs	r3, #8
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007356:	e0ca      	b.n	80074ee <UART_SetConfig+0x28e>
 8007358:	2310      	movs	r3, #16
 800735a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800735e:	bf00      	nop
 8007360:	e0c5      	b.n	80074ee <UART_SetConfig+0x28e>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a76      	ldr	r2, [pc, #472]	; (8007540 <UART_SetConfig+0x2e0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d138      	bne.n	80073de <UART_SetConfig+0x17e>
 800736c:	4b73      	ldr	r3, [pc, #460]	; (800753c <UART_SetConfig+0x2dc>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	f003 030c 	and.w	r3, r3, #12
 8007376:	2b0c      	cmp	r3, #12
 8007378:	d82c      	bhi.n	80073d4 <UART_SetConfig+0x174>
 800737a:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <UART_SetConfig+0x120>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	080073b5 	.word	0x080073b5
 8007384:	080073d5 	.word	0x080073d5
 8007388:	080073d5 	.word	0x080073d5
 800738c:	080073d5 	.word	0x080073d5
 8007390:	080073c5 	.word	0x080073c5
 8007394:	080073d5 	.word	0x080073d5
 8007398:	080073d5 	.word	0x080073d5
 800739c:	080073d5 	.word	0x080073d5
 80073a0:	080073bd 	.word	0x080073bd
 80073a4:	080073d5 	.word	0x080073d5
 80073a8:	080073d5 	.word	0x080073d5
 80073ac:	080073d5 	.word	0x080073d5
 80073b0:	080073cd 	.word	0x080073cd
 80073b4:	2300      	movs	r3, #0
 80073b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ba:	e098      	b.n	80074ee <UART_SetConfig+0x28e>
 80073bc:	2302      	movs	r3, #2
 80073be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c2:	e094      	b.n	80074ee <UART_SetConfig+0x28e>
 80073c4:	2304      	movs	r3, #4
 80073c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ca:	e090      	b.n	80074ee <UART_SetConfig+0x28e>
 80073cc:	2308      	movs	r3, #8
 80073ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d2:	e08c      	b.n	80074ee <UART_SetConfig+0x28e>
 80073d4:	2310      	movs	r3, #16
 80073d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073da:	bf00      	nop
 80073dc:	e087      	b.n	80074ee <UART_SetConfig+0x28e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a58      	ldr	r2, [pc, #352]	; (8007544 <UART_SetConfig+0x2e4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d125      	bne.n	8007434 <UART_SetConfig+0x1d4>
 80073e8:	4b54      	ldr	r3, [pc, #336]	; (800753c <UART_SetConfig+0x2dc>)
 80073ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073f2:	2b10      	cmp	r3, #16
 80073f4:	d011      	beq.n	800741a <UART_SetConfig+0x1ba>
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d802      	bhi.n	8007400 <UART_SetConfig+0x1a0>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <UART_SetConfig+0x1aa>
 80073fe:	e014      	b.n	800742a <UART_SetConfig+0x1ca>
 8007400:	2b20      	cmp	r3, #32
 8007402:	d006      	beq.n	8007412 <UART_SetConfig+0x1b2>
 8007404:	2b30      	cmp	r3, #48	; 0x30
 8007406:	d00c      	beq.n	8007422 <UART_SetConfig+0x1c2>
 8007408:	e00f      	b.n	800742a <UART_SetConfig+0x1ca>
 800740a:	2300      	movs	r3, #0
 800740c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007410:	e06d      	b.n	80074ee <UART_SetConfig+0x28e>
 8007412:	2302      	movs	r3, #2
 8007414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007418:	e069      	b.n	80074ee <UART_SetConfig+0x28e>
 800741a:	2304      	movs	r3, #4
 800741c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007420:	e065      	b.n	80074ee <UART_SetConfig+0x28e>
 8007422:	2308      	movs	r3, #8
 8007424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007428:	e061      	b.n	80074ee <UART_SetConfig+0x28e>
 800742a:	2310      	movs	r3, #16
 800742c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007430:	bf00      	nop
 8007432:	e05c      	b.n	80074ee <UART_SetConfig+0x28e>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a43      	ldr	r2, [pc, #268]	; (8007548 <UART_SetConfig+0x2e8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d125      	bne.n	800748a <UART_SetConfig+0x22a>
 800743e:	4b3f      	ldr	r3, [pc, #252]	; (800753c <UART_SetConfig+0x2dc>)
 8007440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007444:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	d011      	beq.n	8007470 <UART_SetConfig+0x210>
 800744c:	2b40      	cmp	r3, #64	; 0x40
 800744e:	d802      	bhi.n	8007456 <UART_SetConfig+0x1f6>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <UART_SetConfig+0x200>
 8007454:	e014      	b.n	8007480 <UART_SetConfig+0x220>
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	d006      	beq.n	8007468 <UART_SetConfig+0x208>
 800745a:	2bc0      	cmp	r3, #192	; 0xc0
 800745c:	d00c      	beq.n	8007478 <UART_SetConfig+0x218>
 800745e:	e00f      	b.n	8007480 <UART_SetConfig+0x220>
 8007460:	2300      	movs	r3, #0
 8007462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007466:	e042      	b.n	80074ee <UART_SetConfig+0x28e>
 8007468:	2302      	movs	r3, #2
 800746a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746e:	e03e      	b.n	80074ee <UART_SetConfig+0x28e>
 8007470:	2304      	movs	r3, #4
 8007472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007476:	e03a      	b.n	80074ee <UART_SetConfig+0x28e>
 8007478:	2308      	movs	r3, #8
 800747a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800747e:	e036      	b.n	80074ee <UART_SetConfig+0x28e>
 8007480:	2310      	movs	r3, #16
 8007482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007486:	bf00      	nop
 8007488:	e031      	b.n	80074ee <UART_SetConfig+0x28e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a29      	ldr	r2, [pc, #164]	; (8007534 <UART_SetConfig+0x2d4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d129      	bne.n	80074e8 <UART_SetConfig+0x288>
 8007494:	4b29      	ldr	r3, [pc, #164]	; (800753c <UART_SetConfig+0x2dc>)
 8007496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800749e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a2:	d014      	beq.n	80074ce <UART_SetConfig+0x26e>
 80074a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a8:	d802      	bhi.n	80074b0 <UART_SetConfig+0x250>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <UART_SetConfig+0x25e>
 80074ae:	e016      	b.n	80074de <UART_SetConfig+0x27e>
 80074b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b4:	d007      	beq.n	80074c6 <UART_SetConfig+0x266>
 80074b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074ba:	d00c      	beq.n	80074d6 <UART_SetConfig+0x276>
 80074bc:	e00f      	b.n	80074de <UART_SetConfig+0x27e>
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c4:	e013      	b.n	80074ee <UART_SetConfig+0x28e>
 80074c6:	2302      	movs	r3, #2
 80074c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074cc:	e00f      	b.n	80074ee <UART_SetConfig+0x28e>
 80074ce:	2304      	movs	r3, #4
 80074d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d4:	e00b      	b.n	80074ee <UART_SetConfig+0x28e>
 80074d6:	2308      	movs	r3, #8
 80074d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074dc:	e007      	b.n	80074ee <UART_SetConfig+0x28e>
 80074de:	2310      	movs	r3, #16
 80074e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e4:	bf00      	nop
 80074e6:	e002      	b.n	80074ee <UART_SetConfig+0x28e>
 80074e8:	2310      	movs	r3, #16
 80074ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a10      	ldr	r2, [pc, #64]	; (8007534 <UART_SetConfig+0x2d4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	f040 842e 	bne.w	8007d56 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074fe:	2b08      	cmp	r3, #8
 8007500:	f200 8169 	bhi.w	80077d6 <UART_SetConfig+0x576>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <UART_SetConfig+0x2ac>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	0800754d 	.word	0x0800754d
 8007510:	080077d7 	.word	0x080077d7
 8007514:	080075ef 	.word	0x080075ef
 8007518:	080077d7 	.word	0x080077d7
 800751c:	08007687 	.word	0x08007687
 8007520:	080077d7 	.word	0x080077d7
 8007524:	080077d7 	.word	0x080077d7
 8007528:	080077d7 	.word	0x080077d7
 800752c:	08007729 	.word	0x08007729
 8007530:	cfff69f3 	.word	0xcfff69f3
 8007534:	40008000 	.word	0x40008000
 8007538:	40013800 	.word	0x40013800
 800753c:	40021000 	.word	0x40021000
 8007540:	40004400 	.word	0x40004400
 8007544:	40004800 	.word	0x40004800
 8007548:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800754c:	f7fd fe12 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 8007550:	4602      	mov	r2, r0
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	d044      	beq.n	80075e4 <UART_SetConfig+0x384>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	2b01      	cmp	r3, #1
 8007560:	d03e      	beq.n	80075e0 <UART_SetConfig+0x380>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b02      	cmp	r3, #2
 8007568:	d038      	beq.n	80075dc <UART_SetConfig+0x37c>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	2b03      	cmp	r3, #3
 8007570:	d032      	beq.n	80075d8 <UART_SetConfig+0x378>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	2b04      	cmp	r3, #4
 8007578:	d02c      	beq.n	80075d4 <UART_SetConfig+0x374>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b05      	cmp	r3, #5
 8007580:	d026      	beq.n	80075d0 <UART_SetConfig+0x370>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	2b06      	cmp	r3, #6
 8007588:	d020      	beq.n	80075cc <UART_SetConfig+0x36c>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	2b07      	cmp	r3, #7
 8007590:	d01a      	beq.n	80075c8 <UART_SetConfig+0x368>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	2b08      	cmp	r3, #8
 8007598:	d014      	beq.n	80075c4 <UART_SetConfig+0x364>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	2b09      	cmp	r3, #9
 80075a0:	d00e      	beq.n	80075c0 <UART_SetConfig+0x360>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b0a      	cmp	r3, #10
 80075a8:	d008      	beq.n	80075bc <UART_SetConfig+0x35c>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	2b0b      	cmp	r3, #11
 80075b0:	d102      	bne.n	80075b8 <UART_SetConfig+0x358>
 80075b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075b6:	e016      	b.n	80075e6 <UART_SetConfig+0x386>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e014      	b.n	80075e6 <UART_SetConfig+0x386>
 80075bc:	2380      	movs	r3, #128	; 0x80
 80075be:	e012      	b.n	80075e6 <UART_SetConfig+0x386>
 80075c0:	2340      	movs	r3, #64	; 0x40
 80075c2:	e010      	b.n	80075e6 <UART_SetConfig+0x386>
 80075c4:	2320      	movs	r3, #32
 80075c6:	e00e      	b.n	80075e6 <UART_SetConfig+0x386>
 80075c8:	2310      	movs	r3, #16
 80075ca:	e00c      	b.n	80075e6 <UART_SetConfig+0x386>
 80075cc:	230c      	movs	r3, #12
 80075ce:	e00a      	b.n	80075e6 <UART_SetConfig+0x386>
 80075d0:	230a      	movs	r3, #10
 80075d2:	e008      	b.n	80075e6 <UART_SetConfig+0x386>
 80075d4:	2308      	movs	r3, #8
 80075d6:	e006      	b.n	80075e6 <UART_SetConfig+0x386>
 80075d8:	2306      	movs	r3, #6
 80075da:	e004      	b.n	80075e6 <UART_SetConfig+0x386>
 80075dc:	2304      	movs	r3, #4
 80075de:	e002      	b.n	80075e6 <UART_SetConfig+0x386>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e000      	b.n	80075e6 <UART_SetConfig+0x386>
 80075e4:	2301      	movs	r3, #1
 80075e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ea:	617b      	str	r3, [r7, #20]
        break;
 80075ec:	e0f6      	b.n	80077dc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d044      	beq.n	8007680 <UART_SetConfig+0x420>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d03e      	beq.n	800767c <UART_SetConfig+0x41c>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	2b02      	cmp	r3, #2
 8007604:	d038      	beq.n	8007678 <UART_SetConfig+0x418>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	2b03      	cmp	r3, #3
 800760c:	d032      	beq.n	8007674 <UART_SetConfig+0x414>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	2b04      	cmp	r3, #4
 8007614:	d02c      	beq.n	8007670 <UART_SetConfig+0x410>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	2b05      	cmp	r3, #5
 800761c:	d026      	beq.n	800766c <UART_SetConfig+0x40c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	2b06      	cmp	r3, #6
 8007624:	d020      	beq.n	8007668 <UART_SetConfig+0x408>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	2b07      	cmp	r3, #7
 800762c:	d01a      	beq.n	8007664 <UART_SetConfig+0x404>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	2b08      	cmp	r3, #8
 8007634:	d014      	beq.n	8007660 <UART_SetConfig+0x400>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	2b09      	cmp	r3, #9
 800763c:	d00e      	beq.n	800765c <UART_SetConfig+0x3fc>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b0a      	cmp	r3, #10
 8007644:	d008      	beq.n	8007658 <UART_SetConfig+0x3f8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	2b0b      	cmp	r3, #11
 800764c:	d102      	bne.n	8007654 <UART_SetConfig+0x3f4>
 800764e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007652:	e016      	b.n	8007682 <UART_SetConfig+0x422>
 8007654:	4ba1      	ldr	r3, [pc, #644]	; (80078dc <UART_SetConfig+0x67c>)
 8007656:	e014      	b.n	8007682 <UART_SetConfig+0x422>
 8007658:	4ba1      	ldr	r3, [pc, #644]	; (80078e0 <UART_SetConfig+0x680>)
 800765a:	e012      	b.n	8007682 <UART_SetConfig+0x422>
 800765c:	4ba1      	ldr	r3, [pc, #644]	; (80078e4 <UART_SetConfig+0x684>)
 800765e:	e010      	b.n	8007682 <UART_SetConfig+0x422>
 8007660:	4ba1      	ldr	r3, [pc, #644]	; (80078e8 <UART_SetConfig+0x688>)
 8007662:	e00e      	b.n	8007682 <UART_SetConfig+0x422>
 8007664:	4ba1      	ldr	r3, [pc, #644]	; (80078ec <UART_SetConfig+0x68c>)
 8007666:	e00c      	b.n	8007682 <UART_SetConfig+0x422>
 8007668:	4ba1      	ldr	r3, [pc, #644]	; (80078f0 <UART_SetConfig+0x690>)
 800766a:	e00a      	b.n	8007682 <UART_SetConfig+0x422>
 800766c:	4ba1      	ldr	r3, [pc, #644]	; (80078f4 <UART_SetConfig+0x694>)
 800766e:	e008      	b.n	8007682 <UART_SetConfig+0x422>
 8007670:	4ba1      	ldr	r3, [pc, #644]	; (80078f8 <UART_SetConfig+0x698>)
 8007672:	e006      	b.n	8007682 <UART_SetConfig+0x422>
 8007674:	4ba1      	ldr	r3, [pc, #644]	; (80078fc <UART_SetConfig+0x69c>)
 8007676:	e004      	b.n	8007682 <UART_SetConfig+0x422>
 8007678:	4ba1      	ldr	r3, [pc, #644]	; (8007900 <UART_SetConfig+0x6a0>)
 800767a:	e002      	b.n	8007682 <UART_SetConfig+0x422>
 800767c:	4ba1      	ldr	r3, [pc, #644]	; (8007904 <UART_SetConfig+0x6a4>)
 800767e:	e000      	b.n	8007682 <UART_SetConfig+0x422>
 8007680:	4b96      	ldr	r3, [pc, #600]	; (80078dc <UART_SetConfig+0x67c>)
 8007682:	617b      	str	r3, [r7, #20]
        break;
 8007684:	e0aa      	b.n	80077dc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007686:	f7fd fd07 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800768a:	4602      	mov	r2, r0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d044      	beq.n	800771e <UART_SetConfig+0x4be>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	2b01      	cmp	r3, #1
 800769a:	d03e      	beq.n	800771a <UART_SetConfig+0x4ba>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d038      	beq.n	8007716 <UART_SetConfig+0x4b6>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d032      	beq.n	8007712 <UART_SetConfig+0x4b2>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d02c      	beq.n	800770e <UART_SetConfig+0x4ae>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	2b05      	cmp	r3, #5
 80076ba:	d026      	beq.n	800770a <UART_SetConfig+0x4aa>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	2b06      	cmp	r3, #6
 80076c2:	d020      	beq.n	8007706 <UART_SetConfig+0x4a6>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	2b07      	cmp	r3, #7
 80076ca:	d01a      	beq.n	8007702 <UART_SetConfig+0x4a2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d014      	beq.n	80076fe <UART_SetConfig+0x49e>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	2b09      	cmp	r3, #9
 80076da:	d00e      	beq.n	80076fa <UART_SetConfig+0x49a>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	2b0a      	cmp	r3, #10
 80076e2:	d008      	beq.n	80076f6 <UART_SetConfig+0x496>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	2b0b      	cmp	r3, #11
 80076ea:	d102      	bne.n	80076f2 <UART_SetConfig+0x492>
 80076ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076f0:	e016      	b.n	8007720 <UART_SetConfig+0x4c0>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e014      	b.n	8007720 <UART_SetConfig+0x4c0>
 80076f6:	2380      	movs	r3, #128	; 0x80
 80076f8:	e012      	b.n	8007720 <UART_SetConfig+0x4c0>
 80076fa:	2340      	movs	r3, #64	; 0x40
 80076fc:	e010      	b.n	8007720 <UART_SetConfig+0x4c0>
 80076fe:	2320      	movs	r3, #32
 8007700:	e00e      	b.n	8007720 <UART_SetConfig+0x4c0>
 8007702:	2310      	movs	r3, #16
 8007704:	e00c      	b.n	8007720 <UART_SetConfig+0x4c0>
 8007706:	230c      	movs	r3, #12
 8007708:	e00a      	b.n	8007720 <UART_SetConfig+0x4c0>
 800770a:	230a      	movs	r3, #10
 800770c:	e008      	b.n	8007720 <UART_SetConfig+0x4c0>
 800770e:	2308      	movs	r3, #8
 8007710:	e006      	b.n	8007720 <UART_SetConfig+0x4c0>
 8007712:	2306      	movs	r3, #6
 8007714:	e004      	b.n	8007720 <UART_SetConfig+0x4c0>
 8007716:	2304      	movs	r3, #4
 8007718:	e002      	b.n	8007720 <UART_SetConfig+0x4c0>
 800771a:	2302      	movs	r3, #2
 800771c:	e000      	b.n	8007720 <UART_SetConfig+0x4c0>
 800771e:	2301      	movs	r3, #1
 8007720:	fbb2 f3f3 	udiv	r3, r2, r3
 8007724:	617b      	str	r3, [r7, #20]
        break;
 8007726:	e059      	b.n	80077dc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	2b00      	cmp	r3, #0
 800772e:	d04e      	beq.n	80077ce <UART_SetConfig+0x56e>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	2b01      	cmp	r3, #1
 8007736:	d047      	beq.n	80077c8 <UART_SetConfig+0x568>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	2b02      	cmp	r3, #2
 800773e:	d040      	beq.n	80077c2 <UART_SetConfig+0x562>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	2b03      	cmp	r3, #3
 8007746:	d039      	beq.n	80077bc <UART_SetConfig+0x55c>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b04      	cmp	r3, #4
 800774e:	d032      	beq.n	80077b6 <UART_SetConfig+0x556>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	2b05      	cmp	r3, #5
 8007756:	d02b      	beq.n	80077b0 <UART_SetConfig+0x550>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	2b06      	cmp	r3, #6
 800775e:	d024      	beq.n	80077aa <UART_SetConfig+0x54a>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	2b07      	cmp	r3, #7
 8007766:	d01d      	beq.n	80077a4 <UART_SetConfig+0x544>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	2b08      	cmp	r3, #8
 800776e:	d016      	beq.n	800779e <UART_SetConfig+0x53e>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	2b09      	cmp	r3, #9
 8007776:	d00f      	beq.n	8007798 <UART_SetConfig+0x538>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2b0a      	cmp	r3, #10
 800777e:	d008      	beq.n	8007792 <UART_SetConfig+0x532>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	2b0b      	cmp	r3, #11
 8007786:	d101      	bne.n	800778c <UART_SetConfig+0x52c>
 8007788:	2380      	movs	r3, #128	; 0x80
 800778a:	e022      	b.n	80077d2 <UART_SetConfig+0x572>
 800778c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007790:	e01f      	b.n	80077d2 <UART_SetConfig+0x572>
 8007792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007796:	e01c      	b.n	80077d2 <UART_SetConfig+0x572>
 8007798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800779c:	e019      	b.n	80077d2 <UART_SetConfig+0x572>
 800779e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a2:	e016      	b.n	80077d2 <UART_SetConfig+0x572>
 80077a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077a8:	e013      	b.n	80077d2 <UART_SetConfig+0x572>
 80077aa:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80077ae:	e010      	b.n	80077d2 <UART_SetConfig+0x572>
 80077b0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80077b4:	e00d      	b.n	80077d2 <UART_SetConfig+0x572>
 80077b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077ba:	e00a      	b.n	80077d2 <UART_SetConfig+0x572>
 80077bc:	f241 5355 	movw	r3, #5461	; 0x1555
 80077c0:	e007      	b.n	80077d2 <UART_SetConfig+0x572>
 80077c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077c6:	e004      	b.n	80077d2 <UART_SetConfig+0x572>
 80077c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077cc:	e001      	b.n	80077d2 <UART_SetConfig+0x572>
 80077ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d2:	617b      	str	r3, [r7, #20]
        break;
 80077d4:	e002      	b.n	80077dc <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	76fb      	strb	r3, [r7, #27]
        break;
 80077da:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 86cd 	beq.w	800857e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	4613      	mov	r3, r2
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	4413      	add	r3, r2
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d305      	bcc.n	8007800 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d903      	bls.n	8007808 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	76fb      	strb	r3, [r7, #27]
 8007804:	f000 bebb 	b.w	800857e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8007808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800780c:	2b08      	cmp	r3, #8
 800780e:	f200 828d 	bhi.w	8007d2c <UART_SetConfig+0xacc>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0x5b8>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	0800783d 	.word	0x0800783d
 800781c:	08007d2d 	.word	0x08007d2d
 8007820:	080079a7 	.word	0x080079a7
 8007824:	08007d2d 	.word	0x08007d2d
 8007828:	08007a9d 	.word	0x08007a9d
 800782c:	08007d2d 	.word	0x08007d2d
 8007830:	08007d2d 	.word	0x08007d2d
 8007834:	08007d2d 	.word	0x08007d2d
 8007838:	08007bdb 	.word	0x08007bdb
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800783c:	f7fd fc9a 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 8007840:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	4618      	mov	r0, r3
 8007846:	f04f 0100 	mov.w	r1, #0
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d07d      	beq.n	800794e <UART_SetConfig+0x6ee>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	2b01      	cmp	r3, #1
 8007858:	d074      	beq.n	8007944 <UART_SetConfig+0x6e4>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b02      	cmp	r3, #2
 8007860:	d06b      	beq.n	800793a <UART_SetConfig+0x6da>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	2b03      	cmp	r3, #3
 8007868:	d062      	beq.n	8007930 <UART_SetConfig+0x6d0>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	2b04      	cmp	r3, #4
 8007870:	d059      	beq.n	8007926 <UART_SetConfig+0x6c6>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	2b05      	cmp	r3, #5
 8007878:	d050      	beq.n	800791c <UART_SetConfig+0x6bc>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	2b06      	cmp	r3, #6
 8007880:	d047      	beq.n	8007912 <UART_SetConfig+0x6b2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	2b07      	cmp	r3, #7
 8007888:	d03e      	beq.n	8007908 <UART_SetConfig+0x6a8>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	2b08      	cmp	r3, #8
 8007890:	d01f      	beq.n	80078d2 <UART_SetConfig+0x672>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b09      	cmp	r3, #9
 8007898:	d016      	beq.n	80078c8 <UART_SetConfig+0x668>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	2b0a      	cmp	r3, #10
 80078a0:	d00d      	beq.n	80078be <UART_SetConfig+0x65e>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	2b0b      	cmp	r3, #11
 80078a8:	d104      	bne.n	80078b4 <UART_SetConfig+0x654>
 80078aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ae:	f04f 0400 	mov.w	r4, #0
 80078b2:	e050      	b.n	8007956 <UART_SetConfig+0x6f6>
 80078b4:	f04f 0301 	mov.w	r3, #1
 80078b8:	f04f 0400 	mov.w	r4, #0
 80078bc:	e04b      	b.n	8007956 <UART_SetConfig+0x6f6>
 80078be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80078c2:	f04f 0400 	mov.w	r4, #0
 80078c6:	e046      	b.n	8007956 <UART_SetConfig+0x6f6>
 80078c8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80078cc:	f04f 0400 	mov.w	r4, #0
 80078d0:	e041      	b.n	8007956 <UART_SetConfig+0x6f6>
 80078d2:	f04f 0320 	mov.w	r3, #32
 80078d6:	f04f 0400 	mov.w	r4, #0
 80078da:	e03c      	b.n	8007956 <UART_SetConfig+0x6f6>
 80078dc:	00f42400 	.word	0x00f42400
 80078e0:	0001e848 	.word	0x0001e848
 80078e4:	0003d090 	.word	0x0003d090
 80078e8:	0007a120 	.word	0x0007a120
 80078ec:	000f4240 	.word	0x000f4240
 80078f0:	00145855 	.word	0x00145855
 80078f4:	00186a00 	.word	0x00186a00
 80078f8:	001e8480 	.word	0x001e8480
 80078fc:	0028b0aa 	.word	0x0028b0aa
 8007900:	003d0900 	.word	0x003d0900
 8007904:	007a1200 	.word	0x007a1200
 8007908:	f04f 0310 	mov.w	r3, #16
 800790c:	f04f 0400 	mov.w	r4, #0
 8007910:	e021      	b.n	8007956 <UART_SetConfig+0x6f6>
 8007912:	f04f 030c 	mov.w	r3, #12
 8007916:	f04f 0400 	mov.w	r4, #0
 800791a:	e01c      	b.n	8007956 <UART_SetConfig+0x6f6>
 800791c:	f04f 030a 	mov.w	r3, #10
 8007920:	f04f 0400 	mov.w	r4, #0
 8007924:	e017      	b.n	8007956 <UART_SetConfig+0x6f6>
 8007926:	f04f 0308 	mov.w	r3, #8
 800792a:	f04f 0400 	mov.w	r4, #0
 800792e:	e012      	b.n	8007956 <UART_SetConfig+0x6f6>
 8007930:	f04f 0306 	mov.w	r3, #6
 8007934:	f04f 0400 	mov.w	r4, #0
 8007938:	e00d      	b.n	8007956 <UART_SetConfig+0x6f6>
 800793a:	f04f 0304 	mov.w	r3, #4
 800793e:	f04f 0400 	mov.w	r4, #0
 8007942:	e008      	b.n	8007956 <UART_SetConfig+0x6f6>
 8007944:	f04f 0302 	mov.w	r3, #2
 8007948:	f04f 0400 	mov.w	r4, #0
 800794c:	e003      	b.n	8007956 <UART_SetConfig+0x6f6>
 800794e:	f04f 0301 	mov.w	r3, #1
 8007952:	f04f 0400 	mov.w	r4, #0
 8007956:	461a      	mov	r2, r3
 8007958:	4623      	mov	r3, r4
 800795a:	f7f8 fc5d 	bl	8000218 <__aeabi_uldivmod>
 800795e:	4603      	mov	r3, r0
 8007960:	460c      	mov	r4, r1
 8007962:	4619      	mov	r1, r3
 8007964:	4622      	mov	r2, r4
 8007966:	f04f 0300 	mov.w	r3, #0
 800796a:	f04f 0400 	mov.w	r4, #0
 800796e:	0214      	lsls	r4, r2, #8
 8007970:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007974:	020b      	lsls	r3, r1, #8
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6852      	ldr	r2, [r2, #4]
 800797a:	0852      	lsrs	r2, r2, #1
 800797c:	4611      	mov	r1, r2
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	eb13 0b01 	adds.w	fp, r3, r1
 8007986:	eb44 0c02 	adc.w	ip, r4, r2
 800798a:	4658      	mov	r0, fp
 800798c:	4661      	mov	r1, ip
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f04f 0400 	mov.w	r4, #0
 8007996:	461a      	mov	r2, r3
 8007998:	4623      	mov	r3, r4
 800799a:	f7f8 fc3d 	bl	8000218 <__aeabi_uldivmod>
 800799e:	4603      	mov	r3, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	61fb      	str	r3, [r7, #28]
            break;
 80079a4:	e1c5      	b.n	8007d32 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d05b      	beq.n	8007a66 <UART_SetConfig+0x806>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d053      	beq.n	8007a5e <UART_SetConfig+0x7fe>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d04b      	beq.n	8007a56 <UART_SetConfig+0x7f6>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d043      	beq.n	8007a4e <UART_SetConfig+0x7ee>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d03b      	beq.n	8007a46 <UART_SetConfig+0x7e6>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	d033      	beq.n	8007a3e <UART_SetConfig+0x7de>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	2b06      	cmp	r3, #6
 80079dc:	d02b      	beq.n	8007a36 <UART_SetConfig+0x7d6>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	2b07      	cmp	r3, #7
 80079e4:	d023      	beq.n	8007a2e <UART_SetConfig+0x7ce>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	2b08      	cmp	r3, #8
 80079ec:	d01b      	beq.n	8007a26 <UART_SetConfig+0x7c6>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	2b09      	cmp	r3, #9
 80079f4:	d013      	beq.n	8007a1e <UART_SetConfig+0x7be>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	2b0a      	cmp	r3, #10
 80079fc:	d00b      	beq.n	8007a16 <UART_SetConfig+0x7b6>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	2b0b      	cmp	r3, #11
 8007a04:	d103      	bne.n	8007a0e <UART_SetConfig+0x7ae>
 8007a06:	4bae      	ldr	r3, [pc, #696]	; (8007cc0 <UART_SetConfig+0xa60>)
 8007a08:	f04f 0400 	mov.w	r4, #0
 8007a0c:	e02e      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a0e:	4bad      	ldr	r3, [pc, #692]	; (8007cc4 <UART_SetConfig+0xa64>)
 8007a10:	f04f 0400 	mov.w	r4, #0
 8007a14:	e02a      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a16:	4bac      	ldr	r3, [pc, #688]	; (8007cc8 <UART_SetConfig+0xa68>)
 8007a18:	f04f 0400 	mov.w	r4, #0
 8007a1c:	e026      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a1e:	4bab      	ldr	r3, [pc, #684]	; (8007ccc <UART_SetConfig+0xa6c>)
 8007a20:	f04f 0400 	mov.w	r4, #0
 8007a24:	e022      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a26:	4baa      	ldr	r3, [pc, #680]	; (8007cd0 <UART_SetConfig+0xa70>)
 8007a28:	f04f 0400 	mov.w	r4, #0
 8007a2c:	e01e      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a2e:	4ba9      	ldr	r3, [pc, #676]	; (8007cd4 <UART_SetConfig+0xa74>)
 8007a30:	f04f 0400 	mov.w	r4, #0
 8007a34:	e01a      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a36:	a49e      	add	r4, pc, #632	; (adr r4, 8007cb0 <UART_SetConfig+0xa50>)
 8007a38:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a3c:	e016      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a3e:	4ba6      	ldr	r3, [pc, #664]	; (8007cd8 <UART_SetConfig+0xa78>)
 8007a40:	f04f 0400 	mov.w	r4, #0
 8007a44:	e012      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a46:	4ba5      	ldr	r3, [pc, #660]	; (8007cdc <UART_SetConfig+0xa7c>)
 8007a48:	f04f 0400 	mov.w	r4, #0
 8007a4c:	e00e      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a4e:	a49a      	add	r4, pc, #616	; (adr r4, 8007cb8 <UART_SetConfig+0xa58>)
 8007a50:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a54:	e00a      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a56:	4ba2      	ldr	r3, [pc, #648]	; (8007ce0 <UART_SetConfig+0xa80>)
 8007a58:	f04f 0400 	mov.w	r4, #0
 8007a5c:	e006      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a5e:	4ba1      	ldr	r3, [pc, #644]	; (8007ce4 <UART_SetConfig+0xa84>)
 8007a60:	f04f 0400 	mov.w	r4, #0
 8007a64:	e002      	b.n	8007a6c <UART_SetConfig+0x80c>
 8007a66:	4b97      	ldr	r3, [pc, #604]	; (8007cc4 <UART_SetConfig+0xa64>)
 8007a68:	f04f 0400 	mov.w	r4, #0
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6852      	ldr	r2, [r2, #4]
 8007a70:	0852      	lsrs	r2, r2, #1
 8007a72:	4611      	mov	r1, r2
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	eb13 0b01 	adds.w	fp, r3, r1
 8007a7c:	eb44 0c02 	adc.w	ip, r4, r2
 8007a80:	4658      	mov	r0, fp
 8007a82:	4661      	mov	r1, ip
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f04f 0400 	mov.w	r4, #0
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	4623      	mov	r3, r4
 8007a90:	f7f8 fbc2 	bl	8000218 <__aeabi_uldivmod>
 8007a94:	4603      	mov	r3, r0
 8007a96:	460c      	mov	r4, r1
 8007a98:	61fb      	str	r3, [r7, #28]
            break;
 8007a9a:	e14a      	b.n	8007d32 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007a9c:	f7fd fafc 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8007aa0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f04f 0100 	mov.w	r1, #0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d067      	beq.n	8007b82 <UART_SetConfig+0x922>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d05e      	beq.n	8007b78 <UART_SetConfig+0x918>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d055      	beq.n	8007b6e <UART_SetConfig+0x90e>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d04c      	beq.n	8007b64 <UART_SetConfig+0x904>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d043      	beq.n	8007b5a <UART_SetConfig+0x8fa>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b05      	cmp	r3, #5
 8007ad8:	d03a      	beq.n	8007b50 <UART_SetConfig+0x8f0>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b06      	cmp	r3, #6
 8007ae0:	d031      	beq.n	8007b46 <UART_SetConfig+0x8e6>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b07      	cmp	r3, #7
 8007ae8:	d028      	beq.n	8007b3c <UART_SetConfig+0x8dc>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d01f      	beq.n	8007b32 <UART_SetConfig+0x8d2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	d016      	beq.n	8007b28 <UART_SetConfig+0x8c8>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b0a      	cmp	r3, #10
 8007b00:	d00d      	beq.n	8007b1e <UART_SetConfig+0x8be>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b0b      	cmp	r3, #11
 8007b08:	d104      	bne.n	8007b14 <UART_SetConfig+0x8b4>
 8007b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b0e:	f04f 0400 	mov.w	r4, #0
 8007b12:	e03a      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b14:	f04f 0301 	mov.w	r3, #1
 8007b18:	f04f 0400 	mov.w	r4, #0
 8007b1c:	e035      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b1e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007b22:	f04f 0400 	mov.w	r4, #0
 8007b26:	e030      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b28:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007b2c:	f04f 0400 	mov.w	r4, #0
 8007b30:	e02b      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b32:	f04f 0320 	mov.w	r3, #32
 8007b36:	f04f 0400 	mov.w	r4, #0
 8007b3a:	e026      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b3c:	f04f 0310 	mov.w	r3, #16
 8007b40:	f04f 0400 	mov.w	r4, #0
 8007b44:	e021      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b46:	f04f 030c 	mov.w	r3, #12
 8007b4a:	f04f 0400 	mov.w	r4, #0
 8007b4e:	e01c      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b50:	f04f 030a 	mov.w	r3, #10
 8007b54:	f04f 0400 	mov.w	r4, #0
 8007b58:	e017      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b5a:	f04f 0308 	mov.w	r3, #8
 8007b5e:	f04f 0400 	mov.w	r4, #0
 8007b62:	e012      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b64:	f04f 0306 	mov.w	r3, #6
 8007b68:	f04f 0400 	mov.w	r4, #0
 8007b6c:	e00d      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b6e:	f04f 0304 	mov.w	r3, #4
 8007b72:	f04f 0400 	mov.w	r4, #0
 8007b76:	e008      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b78:	f04f 0302 	mov.w	r3, #2
 8007b7c:	f04f 0400 	mov.w	r4, #0
 8007b80:	e003      	b.n	8007b8a <UART_SetConfig+0x92a>
 8007b82:	f04f 0301 	mov.w	r3, #1
 8007b86:	f04f 0400 	mov.w	r4, #0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	f7f8 fb43 	bl	8000218 <__aeabi_uldivmod>
 8007b92:	4603      	mov	r3, r0
 8007b94:	460c      	mov	r4, r1
 8007b96:	4619      	mov	r1, r3
 8007b98:	4622      	mov	r2, r4
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	f04f 0400 	mov.w	r4, #0
 8007ba2:	0214      	lsls	r4, r2, #8
 8007ba4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007ba8:	020b      	lsls	r3, r1, #8
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6852      	ldr	r2, [r2, #4]
 8007bae:	0852      	lsrs	r2, r2, #1
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	eb13 0b01 	adds.w	fp, r3, r1
 8007bba:	eb44 0c02 	adc.w	ip, r4, r2
 8007bbe:	4658      	mov	r0, fp
 8007bc0:	4661      	mov	r1, ip
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f04f 0400 	mov.w	r4, #0
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4623      	mov	r3, r4
 8007bce:	f7f8 fb23 	bl	8000218 <__aeabi_uldivmod>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	61fb      	str	r3, [r7, #28]
            break;
 8007bd8:	e0ab      	b.n	8007d32 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8088 	beq.w	8007cf4 <UART_SetConfig+0xa94>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d05b      	beq.n	8007ca4 <UART_SetConfig+0xa44>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d052      	beq.n	8007c9a <UART_SetConfig+0xa3a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d04a      	beq.n	8007c92 <UART_SetConfig+0xa32>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d041      	beq.n	8007c88 <UART_SetConfig+0xa28>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	2b05      	cmp	r3, #5
 8007c0a:	d039      	beq.n	8007c80 <UART_SetConfig+0xa20>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	2b06      	cmp	r3, #6
 8007c12:	d031      	beq.n	8007c78 <UART_SetConfig+0xa18>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	2b07      	cmp	r3, #7
 8007c1a:	d028      	beq.n	8007c6e <UART_SetConfig+0xa0e>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d01f      	beq.n	8007c64 <UART_SetConfig+0xa04>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	d016      	beq.n	8007c5a <UART_SetConfig+0x9fa>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	2b0a      	cmp	r3, #10
 8007c32:	d00d      	beq.n	8007c50 <UART_SetConfig+0x9f0>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	2b0b      	cmp	r3, #11
 8007c3a:	d104      	bne.n	8007c46 <UART_SetConfig+0x9e6>
 8007c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c40:	f04f 0400 	mov.w	r4, #0
 8007c44:	e05a      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c4a:	f04f 0400 	mov.w	r4, #0
 8007c4e:	e055      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c54:	f04f 0400 	mov.w	r4, #0
 8007c58:	e050      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c5e:	f04f 0400 	mov.w	r4, #0
 8007c62:	e04b      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c68:	f04f 0400 	mov.w	r4, #0
 8007c6c:	e046      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c72:	f04f 0400 	mov.w	r4, #0
 8007c76:	e041      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c78:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <UART_SetConfig+0xa88>)
 8007c7a:	f04f 0400 	mov.w	r4, #0
 8007c7e:	e03d      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c80:	4b1a      	ldr	r3, [pc, #104]	; (8007cec <UART_SetConfig+0xa8c>)
 8007c82:	f04f 0400 	mov.w	r4, #0
 8007c86:	e039      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c8c:	f04f 0400 	mov.w	r4, #0
 8007c90:	e034      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c92:	4b17      	ldr	r3, [pc, #92]	; (8007cf0 <UART_SetConfig+0xa90>)
 8007c94:	f04f 0400 	mov.w	r4, #0
 8007c98:	e030      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007c9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c9e:	f04f 0400 	mov.w	r4, #0
 8007ca2:	e02b      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ca8:	f04f 0400 	mov.w	r4, #0
 8007cac:	e026      	b.n	8007cfc <UART_SetConfig+0xa9c>
 8007cae:	bf00      	nop
 8007cb0:	14585500 	.word	0x14585500
 8007cb4:	00000000 	.word	0x00000000
 8007cb8:	28b0aa00 	.word	0x28b0aa00
 8007cbc:	00000000 	.word	0x00000000
 8007cc0:	00f42400 	.word	0x00f42400
 8007cc4:	f4240000 	.word	0xf4240000
 8007cc8:	01e84800 	.word	0x01e84800
 8007ccc:	03d09000 	.word	0x03d09000
 8007cd0:	07a12000 	.word	0x07a12000
 8007cd4:	0f424000 	.word	0x0f424000
 8007cd8:	186a0000 	.word	0x186a0000
 8007cdc:	1e848000 	.word	0x1e848000
 8007ce0:	3d090000 	.word	0x3d090000
 8007ce4:	7a120000 	.word	0x7a120000
 8007ce8:	000aaa00 	.word	0x000aaa00
 8007cec:	000ccc00 	.word	0x000ccc00
 8007cf0:	00155500 	.word	0x00155500
 8007cf4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007cf8:	f04f 0400 	mov.w	r4, #0
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6852      	ldr	r2, [r2, #4]
 8007d00:	0852      	lsrs	r2, r2, #1
 8007d02:	4611      	mov	r1, r2
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	eb13 0b01 	adds.w	fp, r3, r1
 8007d0c:	eb44 0c02 	adc.w	ip, r4, r2
 8007d10:	4658      	mov	r0, fp
 8007d12:	4661      	mov	r1, ip
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f04f 0400 	mov.w	r4, #0
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4623      	mov	r3, r4
 8007d20:	f7f8 fa7a 	bl	8000218 <__aeabi_uldivmod>
 8007d24:	4603      	mov	r3, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	61fb      	str	r3, [r7, #28]
            break;
 8007d2a:	e002      	b.n	8007d32 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	76fb      	strb	r3, [r7, #27]
            break;
 8007d30:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d38:	d309      	bcc.n	8007d4e <UART_SetConfig+0xaee>
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d40:	d205      	bcs.n	8007d4e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	60da      	str	r2, [r3, #12]
 8007d4a:	f000 bc18 	b.w	800857e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	76fb      	strb	r3, [r7, #27]
 8007d52:	f000 bc14 	b.w	800857e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d5e:	f040 8204 	bne.w	800816a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8007d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	f200 81df 	bhi.w	800812a <UART_SetConfig+0xeca>
 8007d6c:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <UART_SetConfig+0xb14>)
 8007d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d72:	bf00      	nop
 8007d74:	08007d99 	.word	0x08007d99
 8007d78:	08007e51 	.word	0x08007e51
 8007d7c:	08007f09 	.word	0x08007f09
 8007d80:	0800812b 	.word	0x0800812b
 8007d84:	08007fb1 	.word	0x08007fb1
 8007d88:	0800812b 	.word	0x0800812b
 8007d8c:	0800812b 	.word	0x0800812b
 8007d90:	0800812b 	.word	0x0800812b
 8007d94:	08008069 	.word	0x08008069
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d98:	f7fd f9ec 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 8007d9c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d044      	beq.n	8007e30 <UART_SetConfig+0xbd0>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d03e      	beq.n	8007e2c <UART_SetConfig+0xbcc>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d038      	beq.n	8007e28 <UART_SetConfig+0xbc8>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d032      	beq.n	8007e24 <UART_SetConfig+0xbc4>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d02c      	beq.n	8007e20 <UART_SetConfig+0xbc0>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	2b05      	cmp	r3, #5
 8007dcc:	d026      	beq.n	8007e1c <UART_SetConfig+0xbbc>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b06      	cmp	r3, #6
 8007dd4:	d020      	beq.n	8007e18 <UART_SetConfig+0xbb8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	2b07      	cmp	r3, #7
 8007ddc:	d01a      	beq.n	8007e14 <UART_SetConfig+0xbb4>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d014      	beq.n	8007e10 <UART_SetConfig+0xbb0>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	2b09      	cmp	r3, #9
 8007dec:	d00e      	beq.n	8007e0c <UART_SetConfig+0xbac>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	2b0a      	cmp	r3, #10
 8007df4:	d008      	beq.n	8007e08 <UART_SetConfig+0xba8>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	2b0b      	cmp	r3, #11
 8007dfc:	d102      	bne.n	8007e04 <UART_SetConfig+0xba4>
 8007dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e02:	e016      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e04:	2301      	movs	r3, #1
 8007e06:	e014      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e08:	2380      	movs	r3, #128	; 0x80
 8007e0a:	e012      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e0c:	2340      	movs	r3, #64	; 0x40
 8007e0e:	e010      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e10:	2320      	movs	r3, #32
 8007e12:	e00e      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e14:	2310      	movs	r3, #16
 8007e16:	e00c      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e18:	230c      	movs	r3, #12
 8007e1a:	e00a      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e1c:	230a      	movs	r3, #10
 8007e1e:	e008      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e20:	2308      	movs	r3, #8
 8007e22:	e006      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e24:	2306      	movs	r3, #6
 8007e26:	e004      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	e002      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e000      	b.n	8007e32 <UART_SetConfig+0xbd2>
 8007e30:	2301      	movs	r3, #1
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e38:	005a      	lsls	r2, r3, #1
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	441a      	add	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	61fb      	str	r3, [r7, #28]
        break;
 8007e4e:	e16f      	b.n	8008130 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e50:	f7fd f9a6 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8007e54:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d044      	beq.n	8007ee8 <UART_SetConfig+0xc88>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d03e      	beq.n	8007ee4 <UART_SetConfig+0xc84>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d038      	beq.n	8007ee0 <UART_SetConfig+0xc80>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d032      	beq.n	8007edc <UART_SetConfig+0xc7c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d02c      	beq.n	8007ed8 <UART_SetConfig+0xc78>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	d026      	beq.n	8007ed4 <UART_SetConfig+0xc74>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b06      	cmp	r3, #6
 8007e8c:	d020      	beq.n	8007ed0 <UART_SetConfig+0xc70>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b07      	cmp	r3, #7
 8007e94:	d01a      	beq.n	8007ecc <UART_SetConfig+0xc6c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d014      	beq.n	8007ec8 <UART_SetConfig+0xc68>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b09      	cmp	r3, #9
 8007ea4:	d00e      	beq.n	8007ec4 <UART_SetConfig+0xc64>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b0a      	cmp	r3, #10
 8007eac:	d008      	beq.n	8007ec0 <UART_SetConfig+0xc60>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b0b      	cmp	r3, #11
 8007eb4:	d102      	bne.n	8007ebc <UART_SetConfig+0xc5c>
 8007eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eba:	e016      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e014      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ec0:	2380      	movs	r3, #128	; 0x80
 8007ec2:	e012      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ec4:	2340      	movs	r3, #64	; 0x40
 8007ec6:	e010      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ec8:	2320      	movs	r3, #32
 8007eca:	e00e      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ecc:	2310      	movs	r3, #16
 8007ece:	e00c      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	e00a      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ed4:	230a      	movs	r3, #10
 8007ed6:	e008      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	e006      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007edc:	2306      	movs	r3, #6
 8007ede:	e004      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	e002      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e000      	b.n	8007eea <UART_SetConfig+0xc8a>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef0:	005a      	lsls	r2, r3, #1
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	085b      	lsrs	r3, r3, #1
 8007ef8:	441a      	add	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	61fb      	str	r3, [r7, #28]
        break;
 8007f06:	e113      	b.n	8008130 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d043      	beq.n	8007f98 <UART_SetConfig+0xd38>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d03d      	beq.n	8007f94 <UART_SetConfig+0xd34>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d037      	beq.n	8007f90 <UART_SetConfig+0xd30>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d031      	beq.n	8007f8c <UART_SetConfig+0xd2c>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d02b      	beq.n	8007f88 <UART_SetConfig+0xd28>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	2b05      	cmp	r3, #5
 8007f36:	d025      	beq.n	8007f84 <UART_SetConfig+0xd24>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b06      	cmp	r3, #6
 8007f3e:	d01f      	beq.n	8007f80 <UART_SetConfig+0xd20>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b07      	cmp	r3, #7
 8007f46:	d019      	beq.n	8007f7c <UART_SetConfig+0xd1c>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d013      	beq.n	8007f78 <UART_SetConfig+0xd18>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b09      	cmp	r3, #9
 8007f56:	d00d      	beq.n	8007f74 <UART_SetConfig+0xd14>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	2b0a      	cmp	r3, #10
 8007f5e:	d007      	beq.n	8007f70 <UART_SetConfig+0xd10>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	2b0b      	cmp	r3, #11
 8007f66:	d101      	bne.n	8007f6c <UART_SetConfig+0xd0c>
 8007f68:	4b8d      	ldr	r3, [pc, #564]	; (80081a0 <UART_SetConfig+0xf40>)
 8007f6a:	e016      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f6c:	4b8d      	ldr	r3, [pc, #564]	; (80081a4 <UART_SetConfig+0xf44>)
 8007f6e:	e014      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f70:	4b8d      	ldr	r3, [pc, #564]	; (80081a8 <UART_SetConfig+0xf48>)
 8007f72:	e012      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f74:	4b8d      	ldr	r3, [pc, #564]	; (80081ac <UART_SetConfig+0xf4c>)
 8007f76:	e010      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f78:	4b8d      	ldr	r3, [pc, #564]	; (80081b0 <UART_SetConfig+0xf50>)
 8007f7a:	e00e      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f7c:	4b8d      	ldr	r3, [pc, #564]	; (80081b4 <UART_SetConfig+0xf54>)
 8007f7e:	e00c      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f80:	4b8d      	ldr	r3, [pc, #564]	; (80081b8 <UART_SetConfig+0xf58>)
 8007f82:	e00a      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f84:	4b8d      	ldr	r3, [pc, #564]	; (80081bc <UART_SetConfig+0xf5c>)
 8007f86:	e008      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f88:	4b8d      	ldr	r3, [pc, #564]	; (80081c0 <UART_SetConfig+0xf60>)
 8007f8a:	e006      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f8c:	4b8d      	ldr	r3, [pc, #564]	; (80081c4 <UART_SetConfig+0xf64>)
 8007f8e:	e004      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f90:	4b8d      	ldr	r3, [pc, #564]	; (80081c8 <UART_SetConfig+0xf68>)
 8007f92:	e002      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f94:	4b8d      	ldr	r3, [pc, #564]	; (80081cc <UART_SetConfig+0xf6c>)
 8007f96:	e000      	b.n	8007f9a <UART_SetConfig+0xd3a>
 8007f98:	4b82      	ldr	r3, [pc, #520]	; (80081a4 <UART_SetConfig+0xf44>)
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6852      	ldr	r2, [r2, #4]
 8007f9e:	0852      	lsrs	r2, r2, #1
 8007fa0:	441a      	add	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	61fb      	str	r3, [r7, #28]
        break;
 8007fae:	e0bf      	b.n	8008130 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb0:	f7fd f872 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8007fb4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d044      	beq.n	8008048 <UART_SetConfig+0xde8>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d03e      	beq.n	8008044 <UART_SetConfig+0xde4>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d038      	beq.n	8008040 <UART_SetConfig+0xde0>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d032      	beq.n	800803c <UART_SetConfig+0xddc>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d02c      	beq.n	8008038 <UART_SetConfig+0xdd8>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	2b05      	cmp	r3, #5
 8007fe4:	d026      	beq.n	8008034 <UART_SetConfig+0xdd4>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2b06      	cmp	r3, #6
 8007fec:	d020      	beq.n	8008030 <UART_SetConfig+0xdd0>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	2b07      	cmp	r3, #7
 8007ff4:	d01a      	beq.n	800802c <UART_SetConfig+0xdcc>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d014      	beq.n	8008028 <UART_SetConfig+0xdc8>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	2b09      	cmp	r3, #9
 8008004:	d00e      	beq.n	8008024 <UART_SetConfig+0xdc4>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	2b0a      	cmp	r3, #10
 800800c:	d008      	beq.n	8008020 <UART_SetConfig+0xdc0>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	2b0b      	cmp	r3, #11
 8008014:	d102      	bne.n	800801c <UART_SetConfig+0xdbc>
 8008016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800801a:	e016      	b.n	800804a <UART_SetConfig+0xdea>
 800801c:	2301      	movs	r3, #1
 800801e:	e014      	b.n	800804a <UART_SetConfig+0xdea>
 8008020:	2380      	movs	r3, #128	; 0x80
 8008022:	e012      	b.n	800804a <UART_SetConfig+0xdea>
 8008024:	2340      	movs	r3, #64	; 0x40
 8008026:	e010      	b.n	800804a <UART_SetConfig+0xdea>
 8008028:	2320      	movs	r3, #32
 800802a:	e00e      	b.n	800804a <UART_SetConfig+0xdea>
 800802c:	2310      	movs	r3, #16
 800802e:	e00c      	b.n	800804a <UART_SetConfig+0xdea>
 8008030:	230c      	movs	r3, #12
 8008032:	e00a      	b.n	800804a <UART_SetConfig+0xdea>
 8008034:	230a      	movs	r3, #10
 8008036:	e008      	b.n	800804a <UART_SetConfig+0xdea>
 8008038:	2308      	movs	r3, #8
 800803a:	e006      	b.n	800804a <UART_SetConfig+0xdea>
 800803c:	2306      	movs	r3, #6
 800803e:	e004      	b.n	800804a <UART_SetConfig+0xdea>
 8008040:	2304      	movs	r3, #4
 8008042:	e002      	b.n	800804a <UART_SetConfig+0xdea>
 8008044:	2302      	movs	r3, #2
 8008046:	e000      	b.n	800804a <UART_SetConfig+0xdea>
 8008048:	2301      	movs	r3, #1
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008050:	005a      	lsls	r2, r3, #1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	085b      	lsrs	r3, r3, #1
 8008058:	441a      	add	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008062:	b29b      	uxth	r3, r3
 8008064:	61fb      	str	r3, [r7, #28]
        break;
 8008066:	e063      	b.n	8008130 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	2b00      	cmp	r3, #0
 800806e:	d04f      	beq.n	8008110 <UART_SetConfig+0xeb0>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b01      	cmp	r3, #1
 8008076:	d048      	beq.n	800810a <UART_SetConfig+0xeaa>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2b02      	cmp	r3, #2
 800807e:	d041      	beq.n	8008104 <UART_SetConfig+0xea4>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	2b03      	cmp	r3, #3
 8008086:	d03a      	beq.n	80080fe <UART_SetConfig+0xe9e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b04      	cmp	r3, #4
 800808e:	d033      	beq.n	80080f8 <UART_SetConfig+0xe98>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	2b05      	cmp	r3, #5
 8008096:	d02c      	beq.n	80080f2 <UART_SetConfig+0xe92>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	2b06      	cmp	r3, #6
 800809e:	d025      	beq.n	80080ec <UART_SetConfig+0xe8c>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	2b07      	cmp	r3, #7
 80080a6:	d01e      	beq.n	80080e6 <UART_SetConfig+0xe86>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d017      	beq.n	80080e0 <UART_SetConfig+0xe80>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2b09      	cmp	r3, #9
 80080b6:	d010      	beq.n	80080da <UART_SetConfig+0xe7a>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	2b0a      	cmp	r3, #10
 80080be:	d009      	beq.n	80080d4 <UART_SetConfig+0xe74>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	2b0b      	cmp	r3, #11
 80080c6:	d102      	bne.n	80080ce <UART_SetConfig+0xe6e>
 80080c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080cc:	e022      	b.n	8008114 <UART_SetConfig+0xeb4>
 80080ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080d2:	e01f      	b.n	8008114 <UART_SetConfig+0xeb4>
 80080d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080d8:	e01c      	b.n	8008114 <UART_SetConfig+0xeb4>
 80080da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080de:	e019      	b.n	8008114 <UART_SetConfig+0xeb4>
 80080e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080e4:	e016      	b.n	8008114 <UART_SetConfig+0xeb4>
 80080e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ea:	e013      	b.n	8008114 <UART_SetConfig+0xeb4>
 80080ec:	f241 5354 	movw	r3, #5460	; 0x1554
 80080f0:	e010      	b.n	8008114 <UART_SetConfig+0xeb4>
 80080f2:	f641 1398 	movw	r3, #6552	; 0x1998
 80080f6:	e00d      	b.n	8008114 <UART_SetConfig+0xeb4>
 80080f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080fc:	e00a      	b.n	8008114 <UART_SetConfig+0xeb4>
 80080fe:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008102:	e007      	b.n	8008114 <UART_SetConfig+0xeb4>
 8008104:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008108:	e004      	b.n	8008114 <UART_SetConfig+0xeb4>
 800810a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800810e:	e001      	b.n	8008114 <UART_SetConfig+0xeb4>
 8008110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6852      	ldr	r2, [r2, #4]
 8008118:	0852      	lsrs	r2, r2, #1
 800811a:	441a      	add	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	fbb2 f3f3 	udiv	r3, r2, r3
 8008124:	b29b      	uxth	r3, r3
 8008126:	61fb      	str	r3, [r7, #28]
        break;
 8008128:	e002      	b.n	8008130 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	76fb      	strb	r3, [r7, #27]
        break;
 800812e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2b0f      	cmp	r3, #15
 8008134:	d916      	bls.n	8008164 <UART_SetConfig+0xf04>
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800813c:	d212      	bcs.n	8008164 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	b29b      	uxth	r3, r3
 8008142:	f023 030f 	bic.w	r3, r3, #15
 8008146:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	085b      	lsrs	r3, r3, #1
 800814c:	b29b      	uxth	r3, r3
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	b29a      	uxth	r2, r3
 8008154:	89fb      	ldrh	r3, [r7, #14]
 8008156:	4313      	orrs	r3, r2
 8008158:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	89fa      	ldrh	r2, [r7, #14]
 8008160:	60da      	str	r2, [r3, #12]
 8008162:	e20c      	b.n	800857e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	76fb      	strb	r3, [r7, #27]
 8008168:	e209      	b.n	800857e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 800816a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800816e:	2b08      	cmp	r3, #8
 8008170:	f200 81f4 	bhi.w	800855c <UART_SetConfig+0x12fc>
 8008174:	a201      	add	r2, pc, #4	; (adr r2, 800817c <UART_SetConfig+0xf1c>)
 8008176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817a:	bf00      	nop
 800817c:	080081d1 	.word	0x080081d1
 8008180:	08008287 	.word	0x08008287
 8008184:	0800833d 	.word	0x0800833d
 8008188:	0800855d 	.word	0x0800855d
 800818c:	080083e7 	.word	0x080083e7
 8008190:	0800855d 	.word	0x0800855d
 8008194:	0800855d 	.word	0x0800855d
 8008198:	0800855d 	.word	0x0800855d
 800819c:	0800849d 	.word	0x0800849d
 80081a0:	0001e848 	.word	0x0001e848
 80081a4:	01e84800 	.word	0x01e84800
 80081a8:	0003d090 	.word	0x0003d090
 80081ac:	0007a120 	.word	0x0007a120
 80081b0:	000f4240 	.word	0x000f4240
 80081b4:	001e8480 	.word	0x001e8480
 80081b8:	0028b0aa 	.word	0x0028b0aa
 80081bc:	0030d400 	.word	0x0030d400
 80081c0:	003d0900 	.word	0x003d0900
 80081c4:	00516154 	.word	0x00516154
 80081c8:	007a1200 	.word	0x007a1200
 80081cc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081d0:	f7fc ffd0 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 80081d4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d044      	beq.n	8008268 <UART_SetConfig+0x1008>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d03e      	beq.n	8008264 <UART_SetConfig+0x1004>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d038      	beq.n	8008260 <UART_SetConfig+0x1000>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d032      	beq.n	800825c <UART_SetConfig+0xffc>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d02c      	beq.n	8008258 <UART_SetConfig+0xff8>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	2b05      	cmp	r3, #5
 8008204:	d026      	beq.n	8008254 <UART_SetConfig+0xff4>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2b06      	cmp	r3, #6
 800820c:	d020      	beq.n	8008250 <UART_SetConfig+0xff0>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	2b07      	cmp	r3, #7
 8008214:	d01a      	beq.n	800824c <UART_SetConfig+0xfec>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	2b08      	cmp	r3, #8
 800821c:	d014      	beq.n	8008248 <UART_SetConfig+0xfe8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	2b09      	cmp	r3, #9
 8008224:	d00e      	beq.n	8008244 <UART_SetConfig+0xfe4>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	2b0a      	cmp	r3, #10
 800822c:	d008      	beq.n	8008240 <UART_SetConfig+0xfe0>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	2b0b      	cmp	r3, #11
 8008234:	d102      	bne.n	800823c <UART_SetConfig+0xfdc>
 8008236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800823a:	e016      	b.n	800826a <UART_SetConfig+0x100a>
 800823c:	2301      	movs	r3, #1
 800823e:	e014      	b.n	800826a <UART_SetConfig+0x100a>
 8008240:	2380      	movs	r3, #128	; 0x80
 8008242:	e012      	b.n	800826a <UART_SetConfig+0x100a>
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	e010      	b.n	800826a <UART_SetConfig+0x100a>
 8008248:	2320      	movs	r3, #32
 800824a:	e00e      	b.n	800826a <UART_SetConfig+0x100a>
 800824c:	2310      	movs	r3, #16
 800824e:	e00c      	b.n	800826a <UART_SetConfig+0x100a>
 8008250:	230c      	movs	r3, #12
 8008252:	e00a      	b.n	800826a <UART_SetConfig+0x100a>
 8008254:	230a      	movs	r3, #10
 8008256:	e008      	b.n	800826a <UART_SetConfig+0x100a>
 8008258:	2308      	movs	r3, #8
 800825a:	e006      	b.n	800826a <UART_SetConfig+0x100a>
 800825c:	2306      	movs	r3, #6
 800825e:	e004      	b.n	800826a <UART_SetConfig+0x100a>
 8008260:	2304      	movs	r3, #4
 8008262:	e002      	b.n	800826a <UART_SetConfig+0x100a>
 8008264:	2302      	movs	r3, #2
 8008266:	e000      	b.n	800826a <UART_SetConfig+0x100a>
 8008268:	2301      	movs	r3, #1
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	085b      	lsrs	r3, r3, #1
 8008276:	441a      	add	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008280:	b29b      	uxth	r3, r3
 8008282:	61fb      	str	r3, [r7, #28]
        break;
 8008284:	e16d      	b.n	8008562 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008286:	f7fc ff8b 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 800828a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	d044      	beq.n	800831e <UART_SetConfig+0x10be>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b01      	cmp	r3, #1
 800829a:	d03e      	beq.n	800831a <UART_SetConfig+0x10ba>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d038      	beq.n	8008316 <UART_SetConfig+0x10b6>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d032      	beq.n	8008312 <UART_SetConfig+0x10b2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d02c      	beq.n	800830e <UART_SetConfig+0x10ae>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b05      	cmp	r3, #5
 80082ba:	d026      	beq.n	800830a <UART_SetConfig+0x10aa>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b06      	cmp	r3, #6
 80082c2:	d020      	beq.n	8008306 <UART_SetConfig+0x10a6>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b07      	cmp	r3, #7
 80082ca:	d01a      	beq.n	8008302 <UART_SetConfig+0x10a2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d014      	beq.n	80082fe <UART_SetConfig+0x109e>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b09      	cmp	r3, #9
 80082da:	d00e      	beq.n	80082fa <UART_SetConfig+0x109a>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b0a      	cmp	r3, #10
 80082e2:	d008      	beq.n	80082f6 <UART_SetConfig+0x1096>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b0b      	cmp	r3, #11
 80082ea:	d102      	bne.n	80082f2 <UART_SetConfig+0x1092>
 80082ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082f0:	e016      	b.n	8008320 <UART_SetConfig+0x10c0>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e014      	b.n	8008320 <UART_SetConfig+0x10c0>
 80082f6:	2380      	movs	r3, #128	; 0x80
 80082f8:	e012      	b.n	8008320 <UART_SetConfig+0x10c0>
 80082fa:	2340      	movs	r3, #64	; 0x40
 80082fc:	e010      	b.n	8008320 <UART_SetConfig+0x10c0>
 80082fe:	2320      	movs	r3, #32
 8008300:	e00e      	b.n	8008320 <UART_SetConfig+0x10c0>
 8008302:	2310      	movs	r3, #16
 8008304:	e00c      	b.n	8008320 <UART_SetConfig+0x10c0>
 8008306:	230c      	movs	r3, #12
 8008308:	e00a      	b.n	8008320 <UART_SetConfig+0x10c0>
 800830a:	230a      	movs	r3, #10
 800830c:	e008      	b.n	8008320 <UART_SetConfig+0x10c0>
 800830e:	2308      	movs	r3, #8
 8008310:	e006      	b.n	8008320 <UART_SetConfig+0x10c0>
 8008312:	2306      	movs	r3, #6
 8008314:	e004      	b.n	8008320 <UART_SetConfig+0x10c0>
 8008316:	2304      	movs	r3, #4
 8008318:	e002      	b.n	8008320 <UART_SetConfig+0x10c0>
 800831a:	2302      	movs	r3, #2
 800831c:	e000      	b.n	8008320 <UART_SetConfig+0x10c0>
 800831e:	2301      	movs	r3, #1
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	fbb2 f2f3 	udiv	r2, r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	441a      	add	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	fbb2 f3f3 	udiv	r3, r2, r3
 8008336:	b29b      	uxth	r3, r3
 8008338:	61fb      	str	r3, [r7, #28]
        break;
 800833a:	e112      	b.n	8008562 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	d044      	beq.n	80083ce <UART_SetConfig+0x116e>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b01      	cmp	r3, #1
 800834a:	d03e      	beq.n	80083ca <UART_SetConfig+0x116a>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	2b02      	cmp	r3, #2
 8008352:	d038      	beq.n	80083c6 <UART_SetConfig+0x1166>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2b03      	cmp	r3, #3
 800835a:	d032      	beq.n	80083c2 <UART_SetConfig+0x1162>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	2b04      	cmp	r3, #4
 8008362:	d02c      	beq.n	80083be <UART_SetConfig+0x115e>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b05      	cmp	r3, #5
 800836a:	d026      	beq.n	80083ba <UART_SetConfig+0x115a>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b06      	cmp	r3, #6
 8008372:	d020      	beq.n	80083b6 <UART_SetConfig+0x1156>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	2b07      	cmp	r3, #7
 800837a:	d01a      	beq.n	80083b2 <UART_SetConfig+0x1152>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	2b08      	cmp	r3, #8
 8008382:	d014      	beq.n	80083ae <UART_SetConfig+0x114e>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	2b09      	cmp	r3, #9
 800838a:	d00e      	beq.n	80083aa <UART_SetConfig+0x114a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	2b0a      	cmp	r3, #10
 8008392:	d008      	beq.n	80083a6 <UART_SetConfig+0x1146>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	2b0b      	cmp	r3, #11
 800839a:	d102      	bne.n	80083a2 <UART_SetConfig+0x1142>
 800839c:	f24f 4324 	movw	r3, #62500	; 0xf424
 80083a0:	e016      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083a2:	4b81      	ldr	r3, [pc, #516]	; (80085a8 <UART_SetConfig+0x1348>)
 80083a4:	e014      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083a6:	4b81      	ldr	r3, [pc, #516]	; (80085ac <UART_SetConfig+0x134c>)
 80083a8:	e012      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083aa:	4b81      	ldr	r3, [pc, #516]	; (80085b0 <UART_SetConfig+0x1350>)
 80083ac:	e010      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083ae:	4b81      	ldr	r3, [pc, #516]	; (80085b4 <UART_SetConfig+0x1354>)
 80083b0:	e00e      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083b2:	4b81      	ldr	r3, [pc, #516]	; (80085b8 <UART_SetConfig+0x1358>)
 80083b4:	e00c      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083b6:	4b81      	ldr	r3, [pc, #516]	; (80085bc <UART_SetConfig+0x135c>)
 80083b8:	e00a      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083ba:	4b81      	ldr	r3, [pc, #516]	; (80085c0 <UART_SetConfig+0x1360>)
 80083bc:	e008      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083be:	4b81      	ldr	r3, [pc, #516]	; (80085c4 <UART_SetConfig+0x1364>)
 80083c0:	e006      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083c2:	4b81      	ldr	r3, [pc, #516]	; (80085c8 <UART_SetConfig+0x1368>)
 80083c4:	e004      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083c6:	4b81      	ldr	r3, [pc, #516]	; (80085cc <UART_SetConfig+0x136c>)
 80083c8:	e002      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083ca:	4b81      	ldr	r3, [pc, #516]	; (80085d0 <UART_SetConfig+0x1370>)
 80083cc:	e000      	b.n	80083d0 <UART_SetConfig+0x1170>
 80083ce:	4b76      	ldr	r3, [pc, #472]	; (80085a8 <UART_SetConfig+0x1348>)
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6852      	ldr	r2, [r2, #4]
 80083d4:	0852      	lsrs	r2, r2, #1
 80083d6:	441a      	add	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	61fb      	str	r3, [r7, #28]
        break;
 80083e4:	e0bd      	b.n	8008562 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083e6:	f7fc fe57 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 80083ea:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d044      	beq.n	800847e <UART_SetConfig+0x121e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d03e      	beq.n	800847a <UART_SetConfig+0x121a>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2b02      	cmp	r3, #2
 8008402:	d038      	beq.n	8008476 <UART_SetConfig+0x1216>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b03      	cmp	r3, #3
 800840a:	d032      	beq.n	8008472 <UART_SetConfig+0x1212>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	2b04      	cmp	r3, #4
 8008412:	d02c      	beq.n	800846e <UART_SetConfig+0x120e>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	2b05      	cmp	r3, #5
 800841a:	d026      	beq.n	800846a <UART_SetConfig+0x120a>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	2b06      	cmp	r3, #6
 8008422:	d020      	beq.n	8008466 <UART_SetConfig+0x1206>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	2b07      	cmp	r3, #7
 800842a:	d01a      	beq.n	8008462 <UART_SetConfig+0x1202>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	2b08      	cmp	r3, #8
 8008432:	d014      	beq.n	800845e <UART_SetConfig+0x11fe>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b09      	cmp	r3, #9
 800843a:	d00e      	beq.n	800845a <UART_SetConfig+0x11fa>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	2b0a      	cmp	r3, #10
 8008442:	d008      	beq.n	8008456 <UART_SetConfig+0x11f6>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	2b0b      	cmp	r3, #11
 800844a:	d102      	bne.n	8008452 <UART_SetConfig+0x11f2>
 800844c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008450:	e016      	b.n	8008480 <UART_SetConfig+0x1220>
 8008452:	2301      	movs	r3, #1
 8008454:	e014      	b.n	8008480 <UART_SetConfig+0x1220>
 8008456:	2380      	movs	r3, #128	; 0x80
 8008458:	e012      	b.n	8008480 <UART_SetConfig+0x1220>
 800845a:	2340      	movs	r3, #64	; 0x40
 800845c:	e010      	b.n	8008480 <UART_SetConfig+0x1220>
 800845e:	2320      	movs	r3, #32
 8008460:	e00e      	b.n	8008480 <UART_SetConfig+0x1220>
 8008462:	2310      	movs	r3, #16
 8008464:	e00c      	b.n	8008480 <UART_SetConfig+0x1220>
 8008466:	230c      	movs	r3, #12
 8008468:	e00a      	b.n	8008480 <UART_SetConfig+0x1220>
 800846a:	230a      	movs	r3, #10
 800846c:	e008      	b.n	8008480 <UART_SetConfig+0x1220>
 800846e:	2308      	movs	r3, #8
 8008470:	e006      	b.n	8008480 <UART_SetConfig+0x1220>
 8008472:	2306      	movs	r3, #6
 8008474:	e004      	b.n	8008480 <UART_SetConfig+0x1220>
 8008476:	2304      	movs	r3, #4
 8008478:	e002      	b.n	8008480 <UART_SetConfig+0x1220>
 800847a:	2302      	movs	r3, #2
 800847c:	e000      	b.n	8008480 <UART_SetConfig+0x1220>
 800847e:	2301      	movs	r3, #1
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	fbb2 f2f3 	udiv	r2, r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	085b      	lsrs	r3, r3, #1
 800848c:	441a      	add	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	fbb2 f3f3 	udiv	r3, r2, r3
 8008496:	b29b      	uxth	r3, r3
 8008498:	61fb      	str	r3, [r7, #28]
        break;
 800849a:	e062      	b.n	8008562 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d04e      	beq.n	8008542 <UART_SetConfig+0x12e2>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d047      	beq.n	800853c <UART_SetConfig+0x12dc>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d040      	beq.n	8008536 <UART_SetConfig+0x12d6>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d039      	beq.n	8008530 <UART_SetConfig+0x12d0>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d032      	beq.n	800852a <UART_SetConfig+0x12ca>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	d02b      	beq.n	8008524 <UART_SetConfig+0x12c4>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	d024      	beq.n	800851e <UART_SetConfig+0x12be>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b07      	cmp	r3, #7
 80084da:	d01d      	beq.n	8008518 <UART_SetConfig+0x12b8>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	d016      	beq.n	8008512 <UART_SetConfig+0x12b2>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	2b09      	cmp	r3, #9
 80084ea:	d00f      	beq.n	800850c <UART_SetConfig+0x12ac>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	2b0a      	cmp	r3, #10
 80084f2:	d008      	beq.n	8008506 <UART_SetConfig+0x12a6>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	2b0b      	cmp	r3, #11
 80084fa:	d101      	bne.n	8008500 <UART_SetConfig+0x12a0>
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	e022      	b.n	8008546 <UART_SetConfig+0x12e6>
 8008500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008504:	e01f      	b.n	8008546 <UART_SetConfig+0x12e6>
 8008506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800850a:	e01c      	b.n	8008546 <UART_SetConfig+0x12e6>
 800850c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008510:	e019      	b.n	8008546 <UART_SetConfig+0x12e6>
 8008512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008516:	e016      	b.n	8008546 <UART_SetConfig+0x12e6>
 8008518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800851c:	e013      	b.n	8008546 <UART_SetConfig+0x12e6>
 800851e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008522:	e010      	b.n	8008546 <UART_SetConfig+0x12e6>
 8008524:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008528:	e00d      	b.n	8008546 <UART_SetConfig+0x12e6>
 800852a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800852e:	e00a      	b.n	8008546 <UART_SetConfig+0x12e6>
 8008530:	f241 5355 	movw	r3, #5461	; 0x1555
 8008534:	e007      	b.n	8008546 <UART_SetConfig+0x12e6>
 8008536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800853a:	e004      	b.n	8008546 <UART_SetConfig+0x12e6>
 800853c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008540:	e001      	b.n	8008546 <UART_SetConfig+0x12e6>
 8008542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	6852      	ldr	r2, [r2, #4]
 800854a:	0852      	lsrs	r2, r2, #1
 800854c:	441a      	add	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	fbb2 f3f3 	udiv	r3, r2, r3
 8008556:	b29b      	uxth	r3, r3
 8008558:	61fb      	str	r3, [r7, #28]
        break;
 800855a:	e002      	b.n	8008562 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	76fb      	strb	r3, [r7, #27]
        break;
 8008560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	2b0f      	cmp	r3, #15
 8008566:	d908      	bls.n	800857a <UART_SetConfig+0x131a>
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800856e:	d204      	bcs.n	800857a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	60da      	str	r2, [r3, #12]
 8008578:	e001      	b.n	800857e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800859a:	7efb      	ldrb	r3, [r7, #27]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3728      	adds	r7, #40	; 0x28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80085a6:	bf00      	nop
 80085a8:	00f42400 	.word	0x00f42400
 80085ac:	0001e848 	.word	0x0001e848
 80085b0:	0003d090 	.word	0x0003d090
 80085b4:	0007a120 	.word	0x0007a120
 80085b8:	000f4240 	.word	0x000f4240
 80085bc:	00145855 	.word	0x00145855
 80085c0:	00186a00 	.word	0x00186a00
 80085c4:	001e8480 	.word	0x001e8480
 80085c8:	0028b0aa 	.word	0x0028b0aa
 80085cc:	003d0900 	.word	0x003d0900
 80085d0:	007a1200 	.word	0x007a1200

080085d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	f003 0308 	and.w	r3, r3, #8
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008668:	f003 0310 	and.w	r3, r3, #16
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01a      	beq.n	80086ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086d2:	d10a      	bne.n	80086ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	605a      	str	r2, [r3, #4]
  }
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af02      	add	r7, sp, #8
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008728:	f7f9 f992 	bl	8001a50 <HAL_GetTick>
 800872c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b08      	cmp	r3, #8
 800873a:	d10e      	bne.n	800875a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800873c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f82c 	bl	80087a8 <UART_WaitOnFlagUntilTimeout>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e022      	b.n	80087a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b04      	cmp	r3, #4
 8008766:	d10e      	bne.n	8008786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f816 	bl	80087a8 <UART_WaitOnFlagUntilTimeout>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e00c      	b.n	80087a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	4613      	mov	r3, r2
 80087b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087b8:	e02c      	b.n	8008814 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c0:	d028      	beq.n	8008814 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c2:	f7f9 f945 	bl	8001a50 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d302      	bcc.n	80087d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d11d      	bne.n	8008814 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0201 	bic.w	r2, r2, #1
 80087f6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2220      	movs	r2, #32
 80087fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2220      	movs	r2, #32
 8008804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e00f      	b.n	8008834 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69da      	ldr	r2, [r3, #28]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	4013      	ands	r3, r2
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	429a      	cmp	r2, r3
 8008822:	bf0c      	ite	eq
 8008824:	2301      	moveq	r3, #1
 8008826:	2300      	movne	r3, #0
 8008828:	b2db      	uxtb	r3, r3
 800882a:	461a      	mov	r2, r3
 800882c:	79fb      	ldrb	r3, [r7, #7]
 800882e:	429a      	cmp	r2, r3
 8008830:	d0c3      	beq.n	80087ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008852:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6812      	ldr	r2, [r2, #0]
 800885e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008862:	f023 0301 	bic.w	r3, r3, #1
 8008866:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7fe fcd3 	bl	800724c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7fe fcaf 	bl	8007238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800891e:	b480      	push	{r7}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_UARTEx_DisableFifoMode+0x16>
 8008930:	2302      	movs	r3, #2
 8008932:	e027      	b.n	8008984 <HAL_UARTEx_DisableFifoMode+0x66>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2224      	movs	r2, #36	; 0x24
 8008940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f022 0201 	bic.w	r2, r2, #1
 800895a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008962:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d101      	bne.n	80089a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089a4:	2302      	movs	r3, #2
 80089a6:	e02d      	b.n	8008a04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2224      	movs	r2, #36	; 0x24
 80089b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0201 	bic.w	r2, r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f84f 	bl	8008a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e02d      	b.n	8008a80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2224      	movs	r2, #36	; 0x24
 8008a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0201 	bic.w	r2, r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f811 	bl	8008a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b089      	sub	sp, #36	; 0x24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008a90:	4a2f      	ldr	r2, [pc, #188]	; (8008b50 <UARTEx_SetNbDataToProcess+0xc8>)
 8008a92:	f107 0314 	add.w	r3, r7, #20
 8008a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a9a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008a9e:	4a2d      	ldr	r2, [pc, #180]	; (8008b54 <UARTEx_SetNbDataToProcess+0xcc>)
 8008aa0:	f107 030c 	add.w	r3, r7, #12
 8008aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008aa8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d108      	bne.n	8008ac6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ac4:	e03d      	b.n	8008b42 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ac6:	2308      	movs	r3, #8
 8008ac8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008aca:	2308      	movs	r3, #8
 8008acc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	0e5b      	lsrs	r3, r3, #25
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	0f5b      	lsrs	r3, r3, #29
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008aee:	7fbb      	ldrb	r3, [r7, #30]
 8008af0:	7f3a      	ldrb	r2, [r7, #28]
 8008af2:	f107 0120 	add.w	r1, r7, #32
 8008af6:	440a      	add	r2, r1
 8008af8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008afc:	fb02 f303 	mul.w	r3, r2, r3
 8008b00:	7f3a      	ldrb	r2, [r7, #28]
 8008b02:	f107 0120 	add.w	r1, r7, #32
 8008b06:	440a      	add	r2, r1
 8008b08:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008b18:	7ffb      	ldrb	r3, [r7, #31]
 8008b1a:	7f7a      	ldrb	r2, [r7, #29]
 8008b1c:	f107 0120 	add.w	r1, r7, #32
 8008b20:	440a      	add	r2, r1
 8008b22:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008b26:	fb02 f303 	mul.w	r3, r2, r3
 8008b2a:	7f7a      	ldrb	r2, [r7, #29]
 8008b2c:	f107 0120 	add.w	r1, r7, #32
 8008b30:	440a      	add	r2, r1
 8008b32:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b42:	bf00      	nop
 8008b44:	3724      	adds	r7, #36	; 0x24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	08008bc8 	.word	0x08008bc8
 8008b54:	08008bd0 	.word	0x08008bd0

08008b58 <__libc_init_array>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	4e0d      	ldr	r6, [pc, #52]	; (8008b90 <__libc_init_array+0x38>)
 8008b5c:	4c0d      	ldr	r4, [pc, #52]	; (8008b94 <__libc_init_array+0x3c>)
 8008b5e:	1ba4      	subs	r4, r4, r6
 8008b60:	10a4      	asrs	r4, r4, #2
 8008b62:	2500      	movs	r5, #0
 8008b64:	42a5      	cmp	r5, r4
 8008b66:	d109      	bne.n	8008b7c <__libc_init_array+0x24>
 8008b68:	4e0b      	ldr	r6, [pc, #44]	; (8008b98 <__libc_init_array+0x40>)
 8008b6a:	4c0c      	ldr	r4, [pc, #48]	; (8008b9c <__libc_init_array+0x44>)
 8008b6c:	f000 f820 	bl	8008bb0 <_init>
 8008b70:	1ba4      	subs	r4, r4, r6
 8008b72:	10a4      	asrs	r4, r4, #2
 8008b74:	2500      	movs	r5, #0
 8008b76:	42a5      	cmp	r5, r4
 8008b78:	d105      	bne.n	8008b86 <__libc_init_array+0x2e>
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
 8008b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b80:	4798      	blx	r3
 8008b82:	3501      	adds	r5, #1
 8008b84:	e7ee      	b.n	8008b64 <__libc_init_array+0xc>
 8008b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b8a:	4798      	blx	r3
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	e7f2      	b.n	8008b76 <__libc_init_array+0x1e>
 8008b90:	08008bf8 	.word	0x08008bf8
 8008b94:	08008bf8 	.word	0x08008bf8
 8008b98:	08008bf8 	.word	0x08008bf8
 8008b9c:	08008bfc 	.word	0x08008bfc

08008ba0 <memset>:
 8008ba0:	4402      	add	r2, r0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d100      	bne.n	8008baa <memset+0xa>
 8008ba8:	4770      	bx	lr
 8008baa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bae:	e7f9      	b.n	8008ba4 <memset+0x4>

08008bb0 <_init>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	bf00      	nop
 8008bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb6:	bc08      	pop	{r3}
 8008bb8:	469e      	mov	lr, r3
 8008bba:	4770      	bx	lr

08008bbc <_fini>:
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	bf00      	nop
 8008bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc2:	bc08      	pop	{r3}
 8008bc4:	469e      	mov	lr, r3
 8008bc6:	4770      	bx	lr
