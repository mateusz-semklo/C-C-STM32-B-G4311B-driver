
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080053b0  080053b0  000153b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d8  080053d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e0  080053e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  080053f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080053f4  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcec  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ff4  00000000  00000000  0002fd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb0  00000000  00000000  00031d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  00032cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dd30  00000000  00000000  00033b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d241  00000000  00000000  00051898  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2b91  00000000  00000000  0005ead9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012166a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d4  00000000  00000000  001216e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005398 	.word	0x08005398

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005398 	.word	0x08005398

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0xac>)
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_GPIO_Init+0xb0>)
 80005a4:	f000 fe3a 	bl	800121c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f000 fe00 	bl	80011b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 fe17 	bl	80011e6 <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10110000 	.word	0x10110000
 80005c8:	48000800 	.word	0x48000800

080005cc <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005dc:	d169      	bne.n	80006b2 <HAL_GPIO_EXTI_Callback+0xe6>
	{


licznik++;
 80005de:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	3301      	adds	r3, #1
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80005ea:	801a      	strh	r2, [r3, #0]




							switch (licznik)
 80005ec:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	3b01      	subs	r3, #1
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	d854      	bhi.n	80006a2 <HAL_GPIO_EXTI_Callback+0xd6>
 80005f8:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <HAL_GPIO_EXTI_Callback+0x34>)
 80005fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fe:	bf00      	nop
 8000600:	0800068d 	.word	0x0800068d
 8000604:	08000619 	.word	0x08000619
 8000608:	08000631 	.word	0x08000631
 800060c:	08000647 	.word	0x08000647
 8000610:	0800065f 	.word	0x0800065f
 8000614:	08000675 	.word	0x08000675
							{
							case 2:
						    	TIM1->CCR1=duty;
 8000618:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800061a:	f242 3228 	movw	r2, #9000	; 0x2328
 800061e:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=duty;
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000622:	f242 3228 	movw	r2, #9000	; 0x2328
 8000626:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=0;
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800062a:	2200      	movs	r2, #0
 800062c:	63da      	str	r2, [r3, #60]	; 0x3c
						    break;
 800062e:	e038      	b.n	80006a2 <HAL_GPIO_EXTI_Callback+0xd6>

							case 3:
						    	TIM1->CCR1=0;
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000632:	2200      	movs	r2, #0
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=duty;
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000638:	f242 3228 	movw	r2, #9000	; 0x2328
 800063c:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=0;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000640:	2200      	movs	r2, #0
 8000642:	63da      	str	r2, [r3, #60]	; 0x3c

						    break;
 8000644:	e02d      	b.n	80006a2 <HAL_GPIO_EXTI_Callback+0xd6>

							case 4:
						    	TIM1->CCR1=0;
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=duty;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800064e:	f242 3228 	movw	r2, #9000	; 0x2328
 8000652:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=duty;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000656:	f242 3228 	movw	r2, #9000	; 0x2328
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c

						    break;
 800065c:	e021      	b.n	80006a2 <HAL_GPIO_EXTI_Callback+0xd6>

						    case 5:
						    	TIM1->CCR1=0;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000660:	2200      	movs	r2, #0
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=0;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000666:	2200      	movs	r2, #0
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=duty;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800066c:	f242 3228 	movw	r2, #9000	; 0x2328
 8000670:	63da      	str	r2, [r3, #60]	; 0x3c

							break;
 8000672:	e016      	b.n	80006a2 <HAL_GPIO_EXTI_Callback+0xd6>

						    case 6:
						    	TIM1->CCR1=duty;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000676:	f242 3228 	movw	r2, #9000	; 0x2328
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=0;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800067e:	2200      	movs	r2, #0
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=duty;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000684:	f242 3228 	movw	r2, #9000	; 0x2328
 8000688:	63da      	str	r2, [r3, #60]	; 0x3c

						    break;
 800068a:	e00a      	b.n	80006a2 <HAL_GPIO_EXTI_Callback+0xd6>

						    case 1:
						    	TIM1->CCR1=duty;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800068e:	f242 3228 	movw	r2, #9000	; 0x2328
 8000692:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=0;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000696:	2200      	movs	r2, #0
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=0;
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800069c:	2200      	movs	r2, #0
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c

						    break;
 80006a0:	bf00      	nop





							if(licznik > 6)
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d902      	bls.n	80006b2 <HAL_GPIO_EXTI_Callback+0xe6>
							licznik=0;
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	801a      	strh	r2, [r3, #0]




	}
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000028 	.word	0x20000028
 80006c4:	40012c00 	.word	0x40012c00

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fc25 	bl	8000f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f880 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f7ff ff20 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006d8:	f000 f966 	bl	80009a8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80006dc:	f000 fa34 	bl	8000b48 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80006e0:	f000 fb62 	bl	8000da8 <MX_USART2_UART_Init>
//HAL_ADC_Start_DMA(&hadc1,pom13 , 2);
//HAL_ADC_Start_DMA(&hadc2,&pom2 , 1);


  //////// konfiguracja Timer 4  ////////////
    TIM4->ARR=359;
 80006e4:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <main+0xe8>)
 80006e6:	f240 1267 	movw	r2, #359	; 0x167
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
   //  TIM4->PSC=100;
   // TIM4->CCR1=200;
   // TIM4->CCR2=200;
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006ec:	2104      	movs	r1, #4
 80006ee:	4831      	ldr	r0, [pc, #196]	; (80007b4 <main+0xec>)
 80006f0:	f002 f93e 	bl	8002970 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006f4:	2100      	movs	r1, #0
 80006f6:	482f      	ldr	r0, [pc, #188]	; (80007b4 <main+0xec>)
 80006f8:	f002 f93a 	bl	8002970 <HAL_TIM_Encoder_Start>



    //////// konfiguracja Timer 1  ////////////
    TIM1->ARR=65000;
 80006fc:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <main+0xf0>)
 80006fe:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC=0;
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <main+0xf0>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->CCR1=0;
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <main+0xf0>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2=0;
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <main+0xf0>)
 8000712:	2200      	movs	r2, #0
 8000714:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3=0;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <main+0xf0>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
  //  HAL_TIMEx_ConfigCommutEvent_IT(&htim1,TIM_TS_ITR3, TIM_COMMUTATION_TRGI);


    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	4827      	ldr	r0, [pc, #156]	; (80007bc <main+0xf4>)
 8000720:	f001 ffae 	bl	8002680 <HAL_TIM_PWM_Start>
   	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000724:	2104      	movs	r1, #4
 8000726:	4825      	ldr	r0, [pc, #148]	; (80007bc <main+0xf4>)
 8000728:	f001 ffaa 	bl	8002680 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800072c:	2108      	movs	r1, #8
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <main+0xf4>)
 8000730:	f001 ffa6 	bl	8002680 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000734:	2100      	movs	r1, #0
 8000736:	4821      	ldr	r0, [pc, #132]	; (80007bc <main+0xf4>)
 8000738:	f002 ffde 	bl	80036f8 <HAL_TIMEx_PWMN_Start>
   	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800073c:	2104      	movs	r1, #4
 800073e:	481f      	ldr	r0, [pc, #124]	; (80007bc <main+0xf4>)
 8000740:	f002 ffda 	bl	80036f8 <HAL_TIMEx_PWMN_Start>
   	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000744:	2108      	movs	r1, #8
 8000746:	481d      	ldr	r0, [pc, #116]	; (80007bc <main+0xf4>)
 8000748:	f002 ffd6 	bl	80036f8 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	481c      	ldr	r0, [pc, #112]	; (80007c0 <main+0xf8>)
 8000750:	f000 fee6 	bl	8001520 <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d003      	beq.n	8000762 <main+0x9a>
			  a=1;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <main+0xfc>)
 800075c:	2201      	movs	r2, #1
 800075e:	801a      	strh	r2, [r3, #0]
 8000760:	e002      	b.n	8000768 <main+0xa0>
		  else
			  a=0;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <main+0xfc>)
 8000764:	2200      	movs	r2, #0
 8000766:	801a      	strh	r2, [r3, #0]

		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	4815      	ldr	r0, [pc, #84]	; (80007c0 <main+0xf8>)
 800076c:	f000 fed8 	bl	8001520 <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <main+0xb6>
		  		  b=1;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <main+0x100>)
 8000778:	2201      	movs	r2, #1
 800077a:	801a      	strh	r2, [r3, #0]
 800077c:	e002      	b.n	8000784 <main+0xbc>
		  else
			  b=0;
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <main+0x100>)
 8000780:	2200      	movs	r2, #0
 8000782:	801a      	strh	r2, [r3, #0]

		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <main+0xf8>)
 800078a:	f000 fec9 	bl	8001520 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <main+0xd4>
		  		  c=1;
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <main+0x104>)
 8000796:	2201      	movs	r2, #1
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	e002      	b.n	80007a2 <main+0xda>
		  else
			  c=0;
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <main+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	801a      	strh	r2, [r3, #0]


counter=TIM1->CNT;
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <main+0xf0>)
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <main+0x108>)
 80007aa:	801a      	strh	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80007ac:	e7ce      	b.n	800074c <main+0x84>
 80007ae:	bf00      	nop
 80007b0:	40000800 	.word	0x40000800
 80007b4:	20000048 	.word	0x20000048
 80007b8:	40012c00 	.word	0x40012c00
 80007bc:	20000094 	.word	0x20000094
 80007c0:	48000400 	.word	0x48000400
 80007c4:	20000044 	.word	0x20000044
 80007c8:	2000002c 	.word	0x2000002c
 80007cc:	20000040 	.word	0x20000040
 80007d0:	20000042 	.word	0x20000042

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b0a4      	sub	sp, #144	; 0x90
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007de:	2238      	movs	r2, #56	; 0x38
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fdd0 	bl	8005388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2244      	movs	r2, #68	; 0x44
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fdc2 	bl	8005388 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000804:	2000      	movs	r0, #0
 8000806:	f000 febb 	bl	8001580 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080a:	2301      	movs	r3, #1
 800080c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000812:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000818:	2303      	movs	r3, #3
 800081a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000820:	2350      	movs	r3, #80	; 0x50
 8000822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800083c:	4618      	mov	r0, r3
 800083e:	f000 ff43 	bl	80016c8 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000848:	f000 f826 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000850:	2303      	movs	r3, #3
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000860:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000864:	2107      	movs	r1, #7
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fa46 	bl	8001cf8 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000872:	f000 f811 	bl	8000898 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000876:	2302      	movs	r3, #2
 8000878:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fc55 	bl	8002130 <HAL_RCCEx_PeriphCLKConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800088c:	f000 f804 	bl	8000898 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3790      	adds	r7, #144	; 0x90
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6093      	str	r3, [r2, #8]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40007000 	.word	0x40007000

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6613      	str	r3, [r2, #96]	; 0x60
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80008fe:	f7ff ffd3 	bl	80008a8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f000 fb2c 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000970:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000974:	f000 fdec 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <SystemInit+0x28>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <SystemInit+0x28>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SystemInit+0x28>)
 8000992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000996:	609a      	str	r2, [r3, #8]
#endif
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09c      	sub	sp, #112	; 0x70
 80009ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2234      	movs	r2, #52	; 0x34
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f004 fcd0 	bl	8005388 <memset>

  htim1.Instance = TIM1;
 80009e8:	4b55      	ldr	r3, [pc, #340]	; (8000b40 <MX_TIM1_Init+0x198>)
 80009ea:	4a56      	ldr	r2, [pc, #344]	; (8000b44 <MX_TIM1_Init+0x19c>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ee:	4b54      	ldr	r3, [pc, #336]	; (8000b40 <MX_TIM1_Init+0x198>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <MX_TIM1_Init+0x198>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80009fa:	4b51      	ldr	r3, [pc, #324]	; (8000b40 <MX_TIM1_Init+0x198>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b4f      	ldr	r3, [pc, #316]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a06:	4b4e      	ldr	r3, [pc, #312]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b4c      	ldr	r3, [pc, #304]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a12:	484b      	ldr	r0, [pc, #300]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000a14:	f001 fd7c 	bl	8002510 <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a1e:	f7ff ff3b 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a26:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4844      	ldr	r0, [pc, #272]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000a30:	f002 f93c 	bl	8002cac <HAL_TIM_ConfigClockSource>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a3a:	f7ff ff2d 	bl	8000898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a3e:	4840      	ldr	r0, [pc, #256]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000a40:	f001 fdbd 	bl	80025be <HAL_TIM_PWM_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a4a:	f7ff ff25 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a4e:	2370      	movs	r3, #112	; 0x70
 8000a50:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4837      	ldr	r0, [pc, #220]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000a62:	f002 fec9 	bl	80037f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000a6c:	f7ff ff14 	bl	8000898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a70:	2360      	movs	r3, #96	; 0x60
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a90:	2200      	movs	r2, #0
 8000a92:	4619      	mov	r1, r3
 8000a94:	482a      	ldr	r0, [pc, #168]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000a96:	f001 fff9 	bl	8002a8c <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000aa0:	f7ff fefa 	bl	8000898 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aac:	2204      	movs	r2, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4823      	ldr	r0, [pc, #140]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000ab2:	f001 ffeb 	bl	8002a8c <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000abc:	f7ff feec 	bl	8000898 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ac4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ac8:	2208      	movs	r2, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	481c      	ldr	r0, [pc, #112]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000ace:	f001 ffdd 	bl	8002a8c <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8000ad8:	f7ff fede 	bl	8000898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ae0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_3;
 8000ae8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8000aee:	2344      	movs	r3, #68	; 0x44
 8000af0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000b10:	2303      	movs	r3, #3
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000b22:	f002 feeb 	bl	80038fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000b2c:	f7ff feb4 	bl	8000898 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <MX_TIM1_Init+0x198>)
 8000b32:	f000 f8c3 	bl	8000cbc <HAL_TIM_MspPostInit>

}
 8000b36:	bf00      	nop
 8000b38:	3770      	adds	r7, #112	; 0x70
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000094 	.word	0x20000094
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2224      	movs	r2, #36	; 0x24
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 fc16 	bl	8005388 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <MX_TIM4_Init+0xa0>)
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <MX_TIM4_Init+0xa4>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <MX_TIM4_Init+0xa0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_TIM4_Init+0xa0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_TIM4_Init+0xa0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_TIM4_Init+0xa0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_TIM4_Init+0xa0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI2;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_TIM4_Init+0xa8>)
 8000b8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <MX_TIM4_Init+0xa0>)
 8000bb6:	f001 fe35 	bl	8002824 <HAL_TIM_Encoder_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000bc0:	f7ff fe6a 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_TIM4_Init+0xa0>)
 8000bd2:	f002 fe11 	bl	80037f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000bdc:	f7ff fe5c 	bl	8000898 <Error_Handler>
  }

}
 8000be0:	bf00      	nop
 8000be2:	3730      	adds	r7, #48	; 0x30
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000048 	.word	0x20000048
 8000bec:	40000800 	.word	0x40000800
 8000bf0:	00010007 	.word	0x00010007

08000bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_TIM_Base_MspInit+0x38>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d10b      	bne.n	8000c1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_TIM_Base_MspInit+0x3c>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_TIM_Base_MspInit+0x3c>)
 8000c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c10:	6613      	str	r3, [r2, #96]	; 0x60
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <HAL_TIM_Base_MspInit+0x3c>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40012c00 	.word	0x40012c00
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d127      	bne.n	8000ca6 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = HALL_W_TIM4_Pin|HALL_U_TIM4_Pin;
 8000c86:	23c0      	movs	r3, #192	; 0xc0
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2302      	movs	r3, #2
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c96:	2302      	movs	r3, #2
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000ca2:	f000 fabb 	bl	800121c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40000800 	.word	0x40000800
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	48000400 	.word	0x48000400

08000cbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a2f      	ldr	r2, [pc, #188]	; (8000d98 <HAL_TIM_MspPostInit+0xdc>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d157      	bne.n	8000d8e <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <HAL_TIM_MspPostInit+0xe0>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <HAL_TIM_MspPostInit+0xe0>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <HAL_TIM_MspPostInit+0xe0>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <HAL_TIM_MspPostInit+0xe0>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <HAL_TIM_MspPostInit+0xe0>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <HAL_TIM_MspPostInit+0xe0>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <HAL_TIM_MspPostInit+0xe0>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <HAL_TIM_MspPostInit+0xe0>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <HAL_TIM_MspPostInit+0xe0>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4817      	ldr	r0, [pc, #92]	; (8000da0 <HAL_TIM_MspPostInit+0xe4>)
 8000d44:	f000 fa6a 	bl	800121c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	2302      	movs	r3, #2
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <HAL_TIM_MspPostInit+0xe8>)
 8000d66:	f000 fa59 	bl	800121c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000d6a:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f000 fa47 	bl	800121c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40012c00 	.word	0x40012c00
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000800 	.word	0x48000800
 8000da4:	48000400 	.word	0x48000400

08000da8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <MX_USART2_UART_Init+0x94>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000df2:	f002 fe48 	bl	8003a86 <HAL_UART_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000dfc:	f7ff fd4c 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e00:	2100      	movs	r1, #0
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000e04:	f004 f9b7 	bl	8005176 <HAL_UARTEx_SetTxFifoThreshold>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0e:	f7ff fd43 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000e16:	f004 f9ec 	bl	80051f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e20:	f7ff fd3a 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000e26:	f004 f96d 	bl	8005104 <HAL_UARTEx_DisableFifoMode>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e30:	f7ff fd32 	bl	8000898 <Error_Handler>
  }

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000e0 	.word	0x200000e0
 8000e3c:	40004400 	.word	0x40004400

08000e40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x7c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d127      	bne.n	8000eb2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000e92:	2318      	movs	r3, #24
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_UART_MspInit+0x84>)
 8000eae:	f000 f9b5 	bl	800121c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0b      	ldr	r4, [pc, #44]	; (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef2:	f7ff fd43 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f004 fa23 	bl	8005340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efa:	f7ff fbe5 	bl	80006c8 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   r0, =_estack
 8000f00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f0c:	080053e8 	.word	0x080053e8
  ldr r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f14:	20000170 	.word	0x20000170

08000f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_2_IRQHandler>

08000f1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f939 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f80e 	bl	8000f4c <HAL_InitTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	e001      	b.n	8000f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3c:	f7ff fcc4 	bl	80008c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f40:	79fb      	ldrb	r3, [r7, #7]

}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_InitTick+0x68>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d022      	beq.n	8000fa6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_InitTick+0x6c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_InitTick+0x68>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f944 	bl	8001202 <HAL_SYSTICK_Config>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10f      	bne.n	8000fa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d809      	bhi.n	8000f9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f86:	2200      	movs	r2, #0
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	f000 f910 	bl	80011b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_InitTick+0x70>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e007      	b.n	8000faa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e004      	b.n	8000faa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e001      	b.n	8000faa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_IncTick+0x1c>)
 8000fd0:	6013      	str	r3, [r2, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	2000016c 	.word	0x2000016c
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	2000016c 	.word	0x2000016c

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0b      	blt.n	800108a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	4907      	ldr	r1, [pc, #28]	; (8001098 <__NVIC_EnableIRQ+0x38>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e100 	.word	0xe000e100

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f7ff ff8e 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff29 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff40 	bl	8001044 <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff90 	bl	80010f0 <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5f 	bl	800109c <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff33 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffa4 	bl	8001158 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800122a:	e15a      	b.n	80014e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 814c 	beq.w	80014dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d00b      	beq.n	8001264 <HAL_GPIO_Init+0x48>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d007      	beq.n	8001264 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001258:	2b11      	cmp	r3, #17
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b12      	cmp	r3, #18
 8001262:	d130      	bne.n	80012c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800129a:	2201      	movs	r2, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	f003 0201 	and.w	r2, r3, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0xea>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b12      	cmp	r3, #18
 8001304:	d123      	bne.n	800134e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	6939      	ldr	r1, [r7, #16]
 800134a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0203 	and.w	r2, r3, #3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80a6 	beq.w	80014dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	4b5b      	ldr	r3, [pc, #364]	; (8001500 <HAL_GPIO_Init+0x2e4>)
 8001392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001394:	4a5a      	ldr	r2, [pc, #360]	; (8001500 <HAL_GPIO_Init+0x2e4>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6613      	str	r3, [r2, #96]	; 0x60
 800139c:	4b58      	ldr	r3, [pc, #352]	; (8001500 <HAL_GPIO_Init+0x2e4>)
 800139e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a8:	4a56      	ldr	r2, [pc, #344]	; (8001504 <HAL_GPIO_Init+0x2e8>)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013d2:	d01f      	beq.n	8001414 <HAL_GPIO_Init+0x1f8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <HAL_GPIO_Init+0x2ec>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d019      	beq.n	8001410 <HAL_GPIO_Init+0x1f4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a4b      	ldr	r2, [pc, #300]	; (800150c <HAL_GPIO_Init+0x2f0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1f0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a4a      	ldr	r2, [pc, #296]	; (8001510 <HAL_GPIO_Init+0x2f4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1ec>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a49      	ldr	r2, [pc, #292]	; (8001514 <HAL_GPIO_Init+0x2f8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_GPIO_Init+0x2fc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e4>
 80013fc:	2305      	movs	r3, #5
 80013fe:	e00a      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001400:	2306      	movs	r3, #6
 8001402:	e008      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001404:	2304      	movs	r3, #4
 8001406:	e006      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001408:	2303      	movs	r3, #3
 800140a:	e004      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 800140c:	2302      	movs	r3, #2
 800140e:	e002      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_GPIO_Init+0x1fa>
 8001414:	2300      	movs	r3, #0
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	f002 0203 	and.w	r2, r2, #3
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	4093      	lsls	r3, r2
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001426:	4937      	ldr	r1, [pc, #220]	; (8001504 <HAL_GPIO_Init+0x2e8>)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001434:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_GPIO_Init+0x300>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001458:	4a30      	ldr	r2, [pc, #192]	; (800151c <HAL_GPIO_Init+0x300>)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_GPIO_Init+0x300>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001482:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_GPIO_Init+0x300>)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001488:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_GPIO_Init+0x300>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_GPIO_Init+0x300>)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_GPIO_Init+0x300>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_GPIO_Init+0x300>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f47f ae9d 	bne.w	800122c <HAL_GPIO_Init+0x10>
  }
}
 80014f2:	bf00      	nop
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000
 8001508:	48000400 	.word	0x48000400
 800150c:	48000800 	.word	0x48000800
 8001510:	48000c00 	.word	0x48000c00
 8001514:	48001000 	.word	0x48001000
 8001518:	48001400 	.word	0x48001400
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f82c 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d141      	bne.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800158e:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159a:	d131      	bne.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800159c:	4b47      	ldr	r3, [pc, #284]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015a2:	4a46      	ldr	r2, [pc, #280]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015b4:	4a41      	ldr	r2, [pc, #260]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2232      	movs	r2, #50	; 0x32
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	0c9b      	lsrs	r3, r3, #18
 80015ce:	3301      	adds	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d2:	e002      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e6:	d102      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f2      	bne.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fa:	d158      	bne.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e057      	b.n	80016b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001600:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001606:	4a2d      	ldr	r2, [pc, #180]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800160c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001610:	e04d      	b.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001618:	d141      	bne.n	800169e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001626:	d131      	bne.n	800168c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800162e:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001640:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2232      	movs	r2, #50	; 0x32
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	0c9b      	lsrs	r3, r3, #18
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165e:	e002      	b.n	8001666 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3b01      	subs	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	d102      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f2      	bne.n	8001660 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001686:	d112      	bne.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e011      	b.n	80016b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800169c:	e007      	b.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40007000 	.word	0x40007000
 80016c0:	20000000 	.word	0x20000000
 80016c4:	431bde83 	.word	0x431bde83

080016c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e308      	b.n	8001cec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d075      	beq.n	80017d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e6:	4ba3      	ldr	r3, [pc, #652]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f0:	4ba0      	ldr	r3, [pc, #640]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	d102      	bne.n	8001706 <HAL_RCC_OscConfig+0x3e>
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d002      	beq.n	800170c <HAL_RCC_OscConfig+0x44>
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b08      	cmp	r3, #8
 800170a:	d10b      	bne.n	8001724 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	4b99      	ldr	r3, [pc, #612]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d05b      	beq.n	80017d0 <HAL_RCC_OscConfig+0x108>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d157      	bne.n	80017d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e2e3      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d106      	bne.n	800173c <HAL_RCC_OscConfig+0x74>
 800172e:	4b91      	ldr	r3, [pc, #580]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a90      	ldr	r2, [pc, #576]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e01d      	b.n	8001778 <HAL_RCC_OscConfig+0xb0>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x98>
 8001746:	4b8b      	ldr	r3, [pc, #556]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a8a      	ldr	r2, [pc, #552]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b88      	ldr	r3, [pc, #544]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a87      	ldr	r2, [pc, #540]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0xb0>
 8001760:	4b84      	ldr	r3, [pc, #528]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a83      	ldr	r2, [pc, #524]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b81      	ldr	r3, [pc, #516]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a80      	ldr	r2, [pc, #512]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fc30 	bl	8000fe4 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fc2c 	bl	8000fe4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e2a8      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4b76      	ldr	r3, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0xc0>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fc1c 	bl	8000fe4 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fc18 	bl	8000fe4 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e294      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c2:	4b6c      	ldr	r3, [pc, #432]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0xe8>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d075      	beq.n	80018ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e8:	4b62      	ldr	r3, [pc, #392]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d102      	bne.n	80017fe <HAL_RCC_OscConfig+0x136>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_OscConfig+0x13c>
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b04      	cmp	r3, #4
 8001802:	d11f      	bne.n	8001844 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_OscConfig+0x154>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e267      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b55      	ldr	r3, [pc, #340]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	4952      	ldr	r1, [pc, #328]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <HAL_RCC_OscConfig+0x2b0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fb89 	bl	8000f4c <HAL_InitTick>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d043      	beq.n	80018c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e253      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d023      	beq.n	8001894 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a48      	ldr	r2, [pc, #288]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fbc4 	bl	8000fe4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001860:	f7ff fbc0 	bl	8000fe4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e23c      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001872:	4b40      	ldr	r3, [pc, #256]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	061b      	lsls	r3, r3, #24
 800188c:	4939      	ldr	r1, [pc, #228]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]
 8001892:	e01a      	b.n	80018ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001894:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a36      	ldr	r2, [pc, #216]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800189a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fba0 	bl	8000fe4 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff fb9c 	bl	8000fe4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e218      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x1e0>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d03c      	beq.n	8001950 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01c      	beq.n	8001918 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e4:	4a23      	ldr	r2, [pc, #140]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff fb79 	bl	8000fe4 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff fb75 	bl	8000fe4 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1f1      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800190a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0ef      	beq.n	80018f6 <HAL_RCC_OscConfig+0x22e>
 8001916:	e01b      	b.n	8001950 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	4a15      	ldr	r2, [pc, #84]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff fb5c 	bl	8000fe4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fb58 	bl	8000fe4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1d4      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ef      	bne.n	8001930 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80ab 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x2b4>
 800196e:	2301      	movs	r3, #1
 8001970:	e005      	b.n	800197e <HAL_RCC_OscConfig+0x2b6>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	20000004 	.word	0x20000004
 800197c:	2300      	movs	r3, #0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00d      	beq.n	800199e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4baf      	ldr	r3, [pc, #700]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	4aae      	ldr	r2, [pc, #696]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6593      	str	r3, [r2, #88]	; 0x58
 800198e:	4bac      	ldr	r3, [pc, #688]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800199a:	2301      	movs	r3, #1
 800199c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199e:	4ba9      	ldr	r3, [pc, #676]	; (8001c44 <HAL_RCC_OscConfig+0x57c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d118      	bne.n	80019dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019aa:	4ba6      	ldr	r3, [pc, #664]	; (8001c44 <HAL_RCC_OscConfig+0x57c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4aa5      	ldr	r2, [pc, #660]	; (8001c44 <HAL_RCC_OscConfig+0x57c>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb15 	bl	8000fe4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019be:	f7ff fb11 	bl	8000fe4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e18d      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d0:	4b9c      	ldr	r3, [pc, #624]	; (8001c44 <HAL_RCC_OscConfig+0x57c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d108      	bne.n	80019f6 <HAL_RCC_OscConfig+0x32e>
 80019e4:	4b96      	ldr	r3, [pc, #600]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ea:	4a95      	ldr	r2, [pc, #596]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f4:	e024      	b.n	8001a40 <HAL_RCC_OscConfig+0x378>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d110      	bne.n	8001a20 <HAL_RCC_OscConfig+0x358>
 80019fe:	4b90      	ldr	r3, [pc, #576]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a04:	4a8e      	ldr	r2, [pc, #568]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0e:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a14:	4a8a      	ldr	r2, [pc, #552]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1e:	e00f      	b.n	8001a40 <HAL_RCC_OscConfig+0x378>
 8001a20:	4b87      	ldr	r3, [pc, #540]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	4a86      	ldr	r2, [pc, #536]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a30:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	4a82      	ldr	r2, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d016      	beq.n	8001a76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff facc 	bl	8000fe4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff fac8 	bl	8000fe4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e142      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ed      	beq.n	8001a50 <HAL_RCC_OscConfig+0x388>
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff fab5 	bl	8000fe4 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fab1 	bl	8000fe4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e12b      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a94:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ed      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aa2:	7ffb      	ldrb	r3, [r7, #31]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	4a64      	ldr	r2, [pc, #400]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d03c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ace:	4a5c      	ldr	r2, [pc, #368]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fa84 	bl	8000fe4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae0:	f7ff fa80 	bl	8000fe4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e0fc      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001af2:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ef      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x418>
 8001b00:	e01b      	b.n	8001b3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b02:	4b4f      	ldr	r3, [pc, #316]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b08:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff fa67 	bl	8000fe4 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1a:	f7ff fa63 	bl	8000fe4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0df      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ef      	bne.n	8001b1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80d3 	beq.w	8001cea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b44:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	f000 808d 	beq.w	8001c6c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d15a      	bne.n	8001c10 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a38      	ldr	r2, [pc, #224]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7ff fa3d 	bl	8000fe4 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff fa39 	bl	8000fe4 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0b5      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b80:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <HAL_RCC_OscConfig+0x580>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6a11      	ldr	r1, [r2, #32]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	4311      	orrs	r1, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ba6:	0212      	lsls	r2, r2, #8
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bae:	0852      	lsrs	r2, r2, #1
 8001bb0:	3a01      	subs	r2, #1
 8001bb2:	0552      	lsls	r2, r2, #21
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bba:	0852      	lsrs	r2, r2, #1
 8001bbc:	3a01      	subs	r2, #1
 8001bbe:	0652      	lsls	r2, r2, #25
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bc6:	06d2      	lsls	r2, r2, #27
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	491d      	ldr	r1, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff f9fc 	bl	8000fe4 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f9f8 	bl	8000fe4 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e074      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x528>
 8001c0e:	e06c      	b.n	8001cea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001c2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f9d4 	bl	8000fe4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3e:	e00e      	b.n	8001c5e <HAL_RCC_OscConfig+0x596>
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff f9ca 	bl	8000fe4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e046      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_RCC_OscConfig+0x62c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x584>
 8001c6a:	e03e      	b.n	8001cea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e039      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c78:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_RCC_OscConfig+0x62c>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d12c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	3b01      	subs	r3, #1
 8001c98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d123      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d11b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d113      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	085b      	lsrs	r3, r3, #1
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e11e      	b.n	8001f4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b91      	ldr	r3, [pc, #580]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d910      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b8e      	ldr	r3, [pc, #568]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 020f 	bic.w	r2, r3, #15
 8001d26:	498c      	ldr	r1, [pc, #560]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b8a      	ldr	r3, [pc, #552]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e106      	b.n	8001f4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d073      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d129      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d54:	4b81      	ldr	r3, [pc, #516]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0f4      	b.n	8001f4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d64:	f000 f99e 	bl	80020a4 <RCC_GetSysClockFreqFromPLLSource>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4a7c      	ldr	r2, [pc, #496]	; (8001f60 <HAL_RCC_ClockConfig+0x268>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d93f      	bls.n	8001df2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d72:	4b7a      	ldr	r3, [pc, #488]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d033      	beq.n	8001df2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12f      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d92:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9a:	4a70      	ldr	r2, [pc, #448]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e024      	b.n	8001df2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db0:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0c6      	b.n	8001f4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc0:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0be      	b.n	8001f4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001dd0:	f000 f8ce 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4a61      	ldr	r2, [pc, #388]	; (8001f60 <HAL_RCC_ClockConfig+0x268>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d909      	bls.n	8001df2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dde:	4b5f      	ldr	r3, [pc, #380]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de6:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001df2:	4b5a      	ldr	r3, [pc, #360]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 0203 	bic.w	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4957      	ldr	r1, [pc, #348]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e04:	f7ff f8ee 	bl	8000fe4 <HAL_GetTick>
 8001e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0c:	f7ff f8ea 	bl	8000fe4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e095      	b.n	8001f4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	4b4e      	ldr	r3, [pc, #312]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 020c 	and.w	r2, r3, #12
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d1eb      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d023      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4c:	4b43      	ldr	r3, [pc, #268]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a42      	ldr	r2, [pc, #264]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e64:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e6c:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4936      	ldr	r1, [pc, #216]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b80      	cmp	r3, #128	; 0x80
 8001e8c:	d105      	bne.n	8001e9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e8e:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d21d      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 020f 	bic.w	r2, r3, #15
 8001eb0:	4929      	ldr	r1, [pc, #164]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eb8:	f7ff f894 	bl	8000fe4 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff f890 	bl	8000fe4 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e03b      	b.n	8001f4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d1ed      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4917      	ldr	r1, [pc, #92]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f22:	f000 f825 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f26:	4601      	mov	r1, r0
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <HAL_RCC_ClockConfig+0x26c>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x270>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_RCC_ClockConfig+0x274>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f800 	bl	8000f4c <HAL_InitTick>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	04c4b400 	.word	0x04c4b400
 8001f64:	080053c0 	.word	0x080053c0
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d102      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f82:	4b2a      	ldr	r3, [pc, #168]	; (800202c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e047      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	e03e      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d136      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc4:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fce:	68d2      	ldr	r2, [r2, #12]
 8001fd0:	0a12      	lsrs	r2, r2, #8
 8001fd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	617b      	str	r3, [r7, #20]
      break;
 8001fdc:	e00c      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe8:	68d2      	ldr	r2, [r2, #12]
 8001fea:	0a12      	lsrs	r2, r2, #8
 8001fec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
      break;
 8001ff6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0e5b      	lsrs	r3, r3, #25
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	3301      	adds	r3, #1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	e001      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002018:	693b      	ldr	r3, [r7, #16]
}
 800201a:	4618      	mov	r0, r3
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	00f42400 	.word	0x00f42400
 8002030:	007a1200 	.word	0x007a1200

08002034 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_RCC_GetHCLKFreq+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000000 	.word	0x20000000

0800204c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002050:	f7ff fff0 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002054:	4601      	mov	r1, r0
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	fa21 f303 	lsr.w	r3, r1, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	080053d0 	.word	0x080053d0

08002078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800207c:	f7ff ffda 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002080:	4601      	mov	r1, r0
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0adb      	lsrs	r3, r3, #11
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	080053d0 	.word	0x080053d0

080020a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3301      	adds	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d10c      	bne.n	80020e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020c8:	4a17      	ldr	r2, [pc, #92]	; (8002128 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020d2:	68d2      	ldr	r2, [r2, #12]
 80020d4:	0a12      	lsrs	r2, r2, #8
 80020d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	617b      	str	r3, [r7, #20]
    break;
 80020e0:	e00c      	b.n	80020fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ec:	68d2      	ldr	r2, [r2, #12]
 80020ee:	0a12      	lsrs	r2, r2, #8
 80020f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
    break;
 80020fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0e5b      	lsrs	r3, r3, #25
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	3301      	adds	r3, #1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002116:	687b      	ldr	r3, [r7, #4]
}
 8002118:	4618      	mov	r0, r3
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40021000 	.word	0x40021000
 8002128:	007a1200 	.word	0x007a1200
 800212c:	00f42400 	.word	0x00f42400

08002130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002138:	2300      	movs	r3, #0
 800213a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800213c:	2300      	movs	r3, #0
 800213e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8098 	beq.w	800227e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b43      	ldr	r3, [pc, #268]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b40      	ldr	r3, [pc, #256]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4a3f      	ldr	r2, [pc, #252]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800217a:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a39      	ldr	r2, [pc, #228]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002186:	f7fe ff2d 	bl	8000fe4 <HAL_GetTick>
 800218a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800218c:	e009      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7fe ff29 	bl	8000fe4 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d902      	bls.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	74fb      	strb	r3, [r7, #19]
        break;
 80021a0:	e005      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021a2:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ef      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d159      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021b4:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01e      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d019      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021dc:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021ec:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021fc:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7fe fee9 	bl	8000fe4 <HAL_GetTick>
 8002212:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002214:	e00b      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe fee5 	bl	8000fe4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d902      	bls.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	74fb      	strb	r3, [r7, #19]
            break;
 800222c:	e006      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ec      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10b      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002258:	e008      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	74bb      	strb	r3, [r7, #18]
 800225e:	e005      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002260:	40021000 	.word	0x40021000
 8002264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800226c:	7c7b      	ldrb	r3, [r7, #17]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002272:	4ba6      	ldr	r3, [pc, #664]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	4aa5      	ldr	r2, [pc, #660]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800228a:	4ba0      	ldr	r3, [pc, #640]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f023 0203 	bic.w	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	499c      	ldr	r1, [pc, #624]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ac:	4b97      	ldr	r3, [pc, #604]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f023 020c 	bic.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	4994      	ldr	r1, [pc, #592]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ce:	4b8f      	ldr	r3, [pc, #572]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	498b      	ldr	r1, [pc, #556]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022f0:	4b86      	ldr	r3, [pc, #536]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	4983      	ldr	r1, [pc, #524]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002312:	4b7e      	ldr	r3, [pc, #504]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002318:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	497a      	ldr	r1, [pc, #488]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002334:	4b75      	ldr	r3, [pc, #468]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	4972      	ldr	r1, [pc, #456]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002356:	4b6d      	ldr	r3, [pc, #436]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	4969      	ldr	r1, [pc, #420]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002378:	4b64      	ldr	r3, [pc, #400]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4961      	ldr	r1, [pc, #388]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800239a:	4b5c      	ldr	r3, [pc, #368]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	4958      	ldr	r1, [pc, #352]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d015      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023bc:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	4950      	ldr	r1, [pc, #320]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023da:	d105      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023dc:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d015      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023f4:	4b45      	ldr	r3, [pc, #276]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	4942      	ldr	r1, [pc, #264]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002412:	d105      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002414:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a3c      	ldr	r2, [pc, #240]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800242c:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4934      	ldr	r1, [pc, #208]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800244a:	d105      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244c:	4b2f      	ldr	r3, [pc, #188]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a2e      	ldr	r2, [pc, #184]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002456:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002472:	4926      	ldr	r1, [pc, #152]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002482:	d105      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a20      	ldr	r2, [pc, #128]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d015      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	4918      	ldr	r1, [pc, #96]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ba:	d105      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	490a      	ldr	r1, [pc, #40]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f2:	d105      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002500:	7cbb      	ldrb	r3, [r7, #18]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000

08002510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e049      	b.n	80025b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fb5c 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f000 fc8a 	bl	8002e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e049      	b.n	8002664 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d106      	bne.n	80025ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f841 	bl	800266c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	4610      	mov	r0, r2
 80025fe:	f000 fc33 	bl	8002e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_TIM_PWM_Start+0x24>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b01      	cmp	r3, #1
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e03c      	b.n	800271e <HAL_TIM_PWM_Start+0x9e>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d109      	bne.n	80026be <HAL_TIM_PWM_Start+0x3e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	e02f      	b.n	800271e <HAL_TIM_PWM_Start+0x9e>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d109      	bne.n	80026d8 <HAL_TIM_PWM_Start+0x58>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e022      	b.n	800271e <HAL_TIM_PWM_Start+0x9e>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d109      	bne.n	80026f2 <HAL_TIM_PWM_Start+0x72>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	bf14      	ite	ne
 80026ea:	2301      	movne	r3, #1
 80026ec:	2300      	moveq	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e015      	b.n	800271e <HAL_TIM_PWM_Start+0x9e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d109      	bne.n	800270c <HAL_TIM_PWM_Start+0x8c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	e008      	b.n	800271e <HAL_TIM_PWM_Start+0x9e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06e      	b.n	8002804 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d104      	bne.n	8002736 <HAL_TIM_PWM_Start+0xb6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002734:	e023      	b.n	800277e <HAL_TIM_PWM_Start+0xfe>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d104      	bne.n	8002746 <HAL_TIM_PWM_Start+0xc6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002744:	e01b      	b.n	800277e <HAL_TIM_PWM_Start+0xfe>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d104      	bne.n	8002756 <HAL_TIM_PWM_Start+0xd6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002754:	e013      	b.n	800277e <HAL_TIM_PWM_Start+0xfe>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b0c      	cmp	r3, #12
 800275a:	d104      	bne.n	8002766 <HAL_TIM_PWM_Start+0xe6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002764:	e00b      	b.n	800277e <HAL_TIM_PWM_Start+0xfe>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b10      	cmp	r3, #16
 800276a:	d104      	bne.n	8002776 <HAL_TIM_PWM_Start+0xf6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002774:	e003      	b.n	800277e <HAL_TIM_PWM_Start+0xfe>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2201      	movs	r2, #1
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 ff90 	bl	80036ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1e      	ldr	r2, [pc, #120]	; (800280c <HAL_TIM_PWM_Start+0x18c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_TIM_PWM_Start+0x13e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_TIM_PWM_Start+0x190>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00e      	beq.n	80027be <HAL_TIM_PWM_Start+0x13e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <HAL_TIM_PWM_Start+0x194>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_TIM_PWM_Start+0x13e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <HAL_TIM_PWM_Start+0x198>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_TIM_PWM_Start+0x13e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a18      	ldr	r2, [pc, #96]	; (800281c <HAL_TIM_PWM_Start+0x19c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_PWM_Start+0x142>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_TIM_PWM_Start+0x144>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_TIM_PWM_Start+0x1a0>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d00b      	beq.n	8002802 <HAL_TIM_PWM_Start+0x182>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d007      	beq.n	8002802 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40013400 	.word	0x40013400
 8002814:	40014000 	.word	0x40014000
 8002818:	40014400 	.word	0x40014400
 800281c:	40014800 	.word	0x40014800
 8002820:	00010007 	.word	0x00010007

08002824 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e097      	b.n	8002968 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7fe f9f1 	bl	8000c34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002868:	f023 0307 	bic.w	r3, r3, #7
 800286c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f000 faf5 	bl	8002e68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	4313      	orrs	r3, r2
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80028c4:	f023 030c 	bic.w	r3, r3, #12
 80028c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	4313      	orrs	r3, r2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	011a      	lsls	r2, r3, #4
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	031b      	lsls	r3, r3, #12
 80028f4:	4313      	orrs	r3, r2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002902:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800290a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	4313      	orrs	r3, r2
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002980:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002988:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002990:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002998:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d110      	bne.n	80029c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80029a6:	7b7b      	ldrb	r3, [r7, #13]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e068      	b.n	8002a82 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c0:	e031      	b.n	8002a26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d110      	bne.n	80029ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80029c8:	7bbb      	ldrb	r3, [r7, #14]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80029ce:	7b3b      	ldrb	r3, [r7, #12]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d001      	beq.n	80029d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e054      	b.n	8002a82 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e8:	e01d      	b.n	8002a26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d108      	bne.n	8002a02 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029f6:	7b7b      	ldrb	r3, [r7, #13]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80029fc:	7b3b      	ldrb	r3, [r7, #12]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d001      	beq.n	8002a06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e03d      	b.n	8002a82 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_TIM_Encoder_Start+0xc2>
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d008      	beq.n	8002a42 <HAL_TIM_Encoder_Start+0xd2>
 8002a30:	e00f      	b.n	8002a52 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2201      	movs	r2, #1
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fe36 	bl	80036ac <TIM_CCxChannelCmd>
      break;
 8002a40:	e016      	b.n	8002a70 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2201      	movs	r2, #1
 8002a48:	2104      	movs	r1, #4
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fe2e 	bl	80036ac <TIM_CCxChannelCmd>
      break;
 8002a50:	e00e      	b.n	8002a70 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fe26 	bl	80036ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2201      	movs	r2, #1
 8002a66:	2104      	movs	r1, #4
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fe1f 	bl	80036ac <TIM_CCxChannelCmd>
      break;
 8002a6e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0fd      	b.n	8002ca2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b14      	cmp	r3, #20
 8002ab2:	f200 80f0 	bhi.w	8002c96 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002b11 	.word	0x08002b11
 8002ac0:	08002c97 	.word	0x08002c97
 8002ac4:	08002c97 	.word	0x08002c97
 8002ac8:	08002c97 	.word	0x08002c97
 8002acc:	08002b51 	.word	0x08002b51
 8002ad0:	08002c97 	.word	0x08002c97
 8002ad4:	08002c97 	.word	0x08002c97
 8002ad8:	08002c97 	.word	0x08002c97
 8002adc:	08002b93 	.word	0x08002b93
 8002ae0:	08002c97 	.word	0x08002c97
 8002ae4:	08002c97 	.word	0x08002c97
 8002ae8:	08002c97 	.word	0x08002c97
 8002aec:	08002bd3 	.word	0x08002bd3
 8002af0:	08002c97 	.word	0x08002c97
 8002af4:	08002c97 	.word	0x08002c97
 8002af8:	08002c97 	.word	0x08002c97
 8002afc:	08002c15 	.word	0x08002c15
 8002b00:	08002c97 	.word	0x08002c97
 8002b04:	08002c97 	.word	0x08002c97
 8002b08:	08002c97 	.word	0x08002c97
 8002b0c:	08002c55 	.word	0x08002c55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fa36 	bl	8002f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0208 	orr.w	r2, r2, #8
 8002b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0204 	bic.w	r2, r2, #4
 8002b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6999      	ldr	r1, [r3, #24]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	619a      	str	r2, [r3, #24]
      break;
 8002b4e:	e0a3      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 faa6 	bl	80030a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6999      	ldr	r1, [r3, #24]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	021a      	lsls	r2, r3, #8
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	619a      	str	r2, [r3, #24]
      break;
 8002b90:	e082      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fb0f 	bl	80031bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0208 	orr.w	r2, r2, #8
 8002bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0204 	bic.w	r2, r2, #4
 8002bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69d9      	ldr	r1, [r3, #28]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	61da      	str	r2, [r3, #28]
      break;
 8002bd0:	e062      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fb77 	bl	80032cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69d9      	ldr	r1, [r3, #28]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	021a      	lsls	r2, r3, #8
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	61da      	str	r2, [r3, #28]
      break;
 8002c12:	e041      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fbe0 	bl	80033e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0208 	orr.w	r2, r2, #8
 8002c2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c52:	e021      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fc24 	bl	80034a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	021a      	lsls	r2, r3, #8
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c94:	e000      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002c96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop

08002cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIM_ConfigClockSource+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e0c3      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x1a0>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b70      	cmp	r3, #112	; 0x70
 8002cfe:	d038      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0xc6>
 8002d00:	2b70      	cmp	r3, #112	; 0x70
 8002d02:	d815      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x84>
 8002d04:	2b30      	cmp	r3, #48	; 0x30
 8002d06:	f000 808e 	beq.w	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
 8002d0a:	2b30      	cmp	r3, #48	; 0x30
 8002d0c:	d809      	bhi.n	8002d22 <HAL_TIM_ConfigClockSource+0x76>
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	f000 8089 	beq.w	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	f000 8086 	beq.w	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8083 	beq.w	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d20:	e08b      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8002d22:	2b50      	cmp	r3, #80	; 0x50
 8002d24:	d04f      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d26:	2b60      	cmp	r3, #96	; 0x60
 8002d28:	d05d      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d06b      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8002d2e:	e084      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8002d30:	4a48      	ldr	r2, [pc, #288]	; (8002e54 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d077      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
 8002d36:	4a47      	ldr	r2, [pc, #284]	; (8002e54 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d809      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0xa4>
 8002d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d40:	d02e      	beq.n	8002da0 <HAL_TIM_ConfigClockSource+0xf4>
 8002d42:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002d46:	d06e      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d074      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8002d4e:	e074      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8002d50:	4a41      	ldr	r2, [pc, #260]	; (8002e58 <HAL_TIM_ConfigClockSource+0x1ac>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d067      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
 8002d56:	4a40      	ldr	r2, [pc, #256]	; (8002e58 <HAL_TIM_ConfigClockSource+0x1ac>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d803      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0xb8>
 8002d5c:	4a3f      	ldr	r2, [pc, #252]	; (8002e5c <HAL_TIM_ConfigClockSource+0x1b0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d061      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8002d62:	e06a      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8002d64:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <HAL_TIM_ConfigClockSource+0x1b4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d05d      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	; (8002e64 <HAL_TIM_ConfigClockSource+0x1b8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d05a      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8002d70:	e063      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6899      	ldr	r1, [r3, #8]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f000 fc73 	bl	800366c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	609a      	str	r2, [r3, #8]
      break;
 8002d9e:	e04c      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6899      	ldr	r1, [r3, #8]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f000 fc5c 	bl	800366c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc2:	609a      	str	r2, [r3, #8]
      break;
 8002dc4:	e039      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f000 fbce 	bl	8003574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2150      	movs	r1, #80	; 0x50
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fc27 	bl	8003632 <TIM_ITRx_SetConfig>
      break;
 8002de4:	e029      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 fbed 	bl	80035d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2160      	movs	r1, #96	; 0x60
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fc17 	bl	8003632 <TIM_ITRx_SetConfig>
      break;
 8002e04:	e019      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 fbae 	bl	8003574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2140      	movs	r1, #64	; 0x40
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fc07 	bl	8003632 <TIM_ITRx_SetConfig>
      break;
 8002e24:	e009      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f000 fbfe 	bl	8003632 <TIM_ITRx_SetConfig>
      break;
 8002e36:	e000      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8002e38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	00100020 	.word	0x00100020
 8002e58:	00100040 	.word	0x00100040
 8002e5c:	00100030 	.word	0x00100030
 8002e60:	00100060 	.word	0x00100060
 8002e64:	00100070 	.word	0x00100070

08002e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3c      	ldr	r2, [pc, #240]	; (8002f6c <TIM_Base_SetConfig+0x104>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00f      	beq.n	8002ea0 <TIM_Base_SetConfig+0x38>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e86:	d00b      	beq.n	8002ea0 <TIM_Base_SetConfig+0x38>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a39      	ldr	r2, [pc, #228]	; (8002f70 <TIM_Base_SetConfig+0x108>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <TIM_Base_SetConfig+0x38>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a38      	ldr	r2, [pc, #224]	; (8002f74 <TIM_Base_SetConfig+0x10c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_Base_SetConfig+0x38>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a37      	ldr	r2, [pc, #220]	; (8002f78 <TIM_Base_SetConfig+0x110>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	; (8002f6c <TIM_Base_SetConfig+0x104>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01b      	beq.n	8002ef2 <TIM_Base_SetConfig+0x8a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d017      	beq.n	8002ef2 <TIM_Base_SetConfig+0x8a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <TIM_Base_SetConfig+0x108>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <TIM_Base_SetConfig+0x8a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <TIM_Base_SetConfig+0x10c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00f      	beq.n	8002ef2 <TIM_Base_SetConfig+0x8a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a28      	ldr	r2, [pc, #160]	; (8002f78 <TIM_Base_SetConfig+0x110>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_Base_SetConfig+0x8a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <TIM_Base_SetConfig+0x114>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <TIM_Base_SetConfig+0x8a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <TIM_Base_SetConfig+0x118>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0x8a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a25      	ldr	r2, [pc, #148]	; (8002f84 <TIM_Base_SetConfig+0x11c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <TIM_Base_SetConfig+0x104>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00f      	beq.n	8002f50 <TIM_Base_SetConfig+0xe8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <TIM_Base_SetConfig+0x110>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00b      	beq.n	8002f50 <TIM_Base_SetConfig+0xe8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <TIM_Base_SetConfig+0x114>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d007      	beq.n	8002f50 <TIM_Base_SetConfig+0xe8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <TIM_Base_SetConfig+0x118>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d003      	beq.n	8002f50 <TIM_Base_SetConfig+0xe8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <TIM_Base_SetConfig+0x11c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d103      	bne.n	8002f58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	615a      	str	r2, [r3, #20]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40013400 	.word	0x40013400
 8002f7c:	40014000 	.word	0x40014000
 8002f80:	40014400 	.word	0x40014400
 8002f84:	40014800 	.word	0x40014800

08002f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0201 	bic.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f023 0302 	bic.w	r3, r3, #2
 8002fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <TIM_OC1_SetConfig+0x10c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00f      	beq.n	8003008 <TIM_OC1_SetConfig+0x80>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2b      	ldr	r2, [pc, #172]	; (8003098 <TIM_OC1_SetConfig+0x110>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00b      	beq.n	8003008 <TIM_OC1_SetConfig+0x80>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a2a      	ldr	r2, [pc, #168]	; (800309c <TIM_OC1_SetConfig+0x114>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <TIM_OC1_SetConfig+0x80>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a29      	ldr	r2, [pc, #164]	; (80030a0 <TIM_OC1_SetConfig+0x118>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_OC1_SetConfig+0x80>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a28      	ldr	r2, [pc, #160]	; (80030a4 <TIM_OC1_SetConfig+0x11c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10c      	bne.n	8003022 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0308 	bic.w	r3, r3, #8
 800300e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 0304 	bic.w	r3, r3, #4
 8003020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <TIM_OC1_SetConfig+0x10c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00f      	beq.n	800304a <TIM_OC1_SetConfig+0xc2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1a      	ldr	r2, [pc, #104]	; (8003098 <TIM_OC1_SetConfig+0x110>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00b      	beq.n	800304a <TIM_OC1_SetConfig+0xc2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a19      	ldr	r2, [pc, #100]	; (800309c <TIM_OC1_SetConfig+0x114>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <TIM_OC1_SetConfig+0xc2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <TIM_OC1_SetConfig+0x118>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d003      	beq.n	800304a <TIM_OC1_SetConfig+0xc2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <TIM_OC1_SetConfig+0x11c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d111      	bne.n	800306e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40013400 	.word	0x40013400
 800309c:	40014000 	.word	0x40014000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800

080030a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0210 	bic.w	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0320 	bic.w	r3, r3, #32
 80030f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a28      	ldr	r2, [pc, #160]	; (80031a8 <TIM_OC2_SetConfig+0x100>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_OC2_SetConfig+0x6c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a27      	ldr	r2, [pc, #156]	; (80031ac <TIM_OC2_SetConfig+0x104>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10d      	bne.n	8003130 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <TIM_OC2_SetConfig+0x100>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00f      	beq.n	8003158 <TIM_OC2_SetConfig+0xb0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <TIM_OC2_SetConfig+0x104>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00b      	beq.n	8003158 <TIM_OC2_SetConfig+0xb0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <TIM_OC2_SetConfig+0x108>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <TIM_OC2_SetConfig+0xb0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <TIM_OC2_SetConfig+0x10c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_OC2_SetConfig+0xb0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <TIM_OC2_SetConfig+0x110>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d113      	bne.n	8003180 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800315e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40013400 	.word	0x40013400
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800

080031bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <TIM_OC3_SetConfig+0xfc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_OC3_SetConfig+0x6a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a26      	ldr	r2, [pc, #152]	; (80032bc <TIM_OC3_SetConfig+0x100>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10d      	bne.n	8003242 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800322c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <TIM_OC3_SetConfig+0xfc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00f      	beq.n	800326a <TIM_OC3_SetConfig+0xae>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <TIM_OC3_SetConfig+0x100>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00b      	beq.n	800326a <TIM_OC3_SetConfig+0xae>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <TIM_OC3_SetConfig+0x104>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <TIM_OC3_SetConfig+0xae>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <TIM_OC3_SetConfig+0x108>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_OC3_SetConfig+0xae>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <TIM_OC3_SetConfig+0x10c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d113      	bne.n	8003292 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	621a      	str	r2, [r3, #32]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40013400 	.word	0x40013400
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800

080032cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800331a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	031b      	lsls	r3, r3, #12
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a28      	ldr	r2, [pc, #160]	; (80033cc <TIM_OC4_SetConfig+0x100>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_OC4_SetConfig+0x6c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a27      	ldr	r2, [pc, #156]	; (80033d0 <TIM_OC4_SetConfig+0x104>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d10d      	bne.n	8003354 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800333e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003352:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <TIM_OC4_SetConfig+0x100>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00f      	beq.n	800337c <TIM_OC4_SetConfig+0xb0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <TIM_OC4_SetConfig+0x104>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00b      	beq.n	800337c <TIM_OC4_SetConfig+0xb0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <TIM_OC4_SetConfig+0x108>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d007      	beq.n	800337c <TIM_OC4_SetConfig+0xb0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <TIM_OC4_SetConfig+0x10c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_OC4_SetConfig+0xb0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a19      	ldr	r2, [pc, #100]	; (80033dc <TIM_OC4_SetConfig+0x110>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d113      	bne.n	80033a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003382:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800338a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40013400 	.word	0x40013400
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800

080033e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003424:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a17      	ldr	r2, [pc, #92]	; (8003494 <TIM_OC5_SetConfig+0xb4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00f      	beq.n	800345a <TIM_OC5_SetConfig+0x7a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a16      	ldr	r2, [pc, #88]	; (8003498 <TIM_OC5_SetConfig+0xb8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00b      	beq.n	800345a <TIM_OC5_SetConfig+0x7a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <TIM_OC5_SetConfig+0xbc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <TIM_OC5_SetConfig+0x7a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <TIM_OC5_SetConfig+0xc0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_OC5_SetConfig+0x7a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <TIM_OC5_SetConfig+0xc4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d109      	bne.n	800346e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003460:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40013400 	.word	0x40013400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800

080034a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	051b      	lsls	r3, r3, #20
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a18      	ldr	r2, [pc, #96]	; (8003560 <TIM_OC6_SetConfig+0xb8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00f      	beq.n	8003524 <TIM_OC6_SetConfig+0x7c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a17      	ldr	r2, [pc, #92]	; (8003564 <TIM_OC6_SetConfig+0xbc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00b      	beq.n	8003524 <TIM_OC6_SetConfig+0x7c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <TIM_OC6_SetConfig+0xc0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <TIM_OC6_SetConfig+0x7c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a15      	ldr	r2, [pc, #84]	; (800356c <TIM_OC6_SetConfig+0xc4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_OC6_SetConfig+0x7c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a14      	ldr	r2, [pc, #80]	; (8003570 <TIM_OC6_SetConfig+0xc8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d109      	bne.n	8003538 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	029b      	lsls	r3, r3, #10
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40013400 	.word	0x40013400
 8003568:	40014000 	.word	0x40014000
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800

08003574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800359e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 030a 	bic.w	r3, r3, #10
 80035b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b087      	sub	sp, #28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0210 	bic.w	r2, r3, #16
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	031b      	lsls	r3, r3, #12
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800360e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003632:	b480      	push	{r7}
 8003634:	b085      	sub	sp, #20
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	f043 0307 	orr.w	r3, r3, #7
 8003658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	609a      	str	r2, [r3, #8]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	021a      	lsls	r2, r3, #8
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	431a      	orrs	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4313      	orrs	r3, r2
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2201      	movs	r2, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a1a      	ldr	r2, [r3, #32]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_TIMEx_PWMN_Start+0x24>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e022      	b.n	8003762 <HAL_TIMEx_PWMN_Start+0x6a>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b04      	cmp	r3, #4
 8003720:	d109      	bne.n	8003736 <HAL_TIMEx_PWMN_Start+0x3e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	bf14      	ite	ne
 800372e:	2301      	movne	r3, #1
 8003730:	2300      	moveq	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	e015      	b.n	8003762 <HAL_TIMEx_PWMN_Start+0x6a>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d109      	bne.n	8003750 <HAL_TIMEx_PWMN_Start+0x58>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e008      	b.n	8003762 <HAL_TIMEx_PWMN_Start+0x6a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e040      	b.n	80037ec <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <HAL_TIMEx_PWMN_Start+0x82>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003778:	e013      	b.n	80037a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b04      	cmp	r3, #4
 800377e:	d104      	bne.n	800378a <HAL_TIMEx_PWMN_Start+0x92>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003788:	e00b      	b.n	80037a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d104      	bne.n	800379a <HAL_TIMEx_PWMN_Start+0xa2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003798:	e003      	b.n	80037a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2204      	movs	r2, #4
 80037a8:	6839      	ldr	r1, [r7, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f946 	bl	8003a3c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_TIMEx_PWMN_Start+0xfc>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d00b      	beq.n	80037ea <HAL_TIMEx_PWMN_Start+0xf2>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d8:	d007      	beq.n	80037ea <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	00010007 	.word	0x00010007

080037f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800380c:	2302      	movs	r3, #2
 800380e:	e065      	b.n	80038dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2b      	ldr	r2, [pc, #172]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800384a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800385c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003860:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d018      	beq.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d013      	beq.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00e      	beq.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d009      	beq.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10c      	bne.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40013400 	.word	0x40013400
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40014000 	.word	0x40014000

080038fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003914:	2302      	movs	r3, #2
 8003916:	e087      	b.n	8003a28 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	041b      	lsls	r3, r3, #16
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a27      	ldr	r2, [pc, #156]	; (8003a34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a25      	ldr	r2, [pc, #148]	; (8003a38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d106      	bne.n	80039b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d004      	beq.n	80039c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d126      	bne.n	8003a16 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	051b      	lsls	r3, r3, #20
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d106      	bne.n	8003a16 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40013400 	.word	0x40013400

08003a3c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	2204      	movs	r2, #4
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	401a      	ands	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1a      	ldr	r2, [r3, #32]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e042      	b.n	8003b1e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd f9c8 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f82d 	bl	8003b28 <UART_SetConfig>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e022      	b.n	8003b1e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f001 f9db 	bl	8004e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f001 fa62 	bl	8004fe0 <UART_CheckIdleState>
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b28:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003b2c:	b08a      	sub	sp, #40	; 0x28
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4ba4      	ldr	r3, [pc, #656]	; (8003df8 <UART_SetConfig+0x2d0>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a99      	ldr	r2, [pc, #612]	; (8003dfc <UART_SetConfig+0x2d4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	f023 010f 	bic.w	r1, r3, #15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a8a      	ldr	r2, [pc, #552]	; (8003e00 <UART_SetConfig+0x2d8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d126      	bne.n	8003c2a <UART_SetConfig+0x102>
 8003bdc:	4b89      	ldr	r3, [pc, #548]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d81a      	bhi.n	8003c20 <UART_SetConfig+0xf8>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0xc8>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c01 	.word	0x08003c01
 8003bf4:	08003c11 	.word	0x08003c11
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c19 	.word	0x08003c19
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e0d6      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0e:	e0d2      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e0ce      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e0ca      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	bf00      	nop
 8003c28:	e0c5      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a76      	ldr	r2, [pc, #472]	; (8003e08 <UART_SetConfig+0x2e0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d138      	bne.n	8003ca6 <UART_SetConfig+0x17e>
 8003c34:	4b73      	ldr	r3, [pc, #460]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	d82c      	bhi.n	8003c9c <UART_SetConfig+0x174>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0x120>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003c9d 	.word	0x08003c9d
 8003c50:	08003c9d 	.word	0x08003c9d
 8003c54:	08003c9d 	.word	0x08003c9d
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003c9d 	.word	0x08003c9d
 8003c60:	08003c9d 	.word	0x08003c9d
 8003c64:	08003c9d 	.word	0x08003c9d
 8003c68:	08003c85 	.word	0x08003c85
 8003c6c:	08003c9d 	.word	0x08003c9d
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003c9d 	.word	0x08003c9d
 8003c78:	08003c95 	.word	0x08003c95
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c82:	e098      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8a:	e094      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c92:	e090      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003c94:	2308      	movs	r3, #8
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9a:	e08c      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca2:	bf00      	nop
 8003ca4:	e087      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a58      	ldr	r2, [pc, #352]	; (8003e0c <UART_SetConfig+0x2e4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d125      	bne.n	8003cfc <UART_SetConfig+0x1d4>
 8003cb0:	4b54      	ldr	r3, [pc, #336]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d011      	beq.n	8003ce2 <UART_SetConfig+0x1ba>
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d802      	bhi.n	8003cc8 <UART_SetConfig+0x1a0>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <UART_SetConfig+0x1aa>
 8003cc6:	e014      	b.n	8003cf2 <UART_SetConfig+0x1ca>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d006      	beq.n	8003cda <UART_SetConfig+0x1b2>
 8003ccc:	2b30      	cmp	r3, #48	; 0x30
 8003cce:	d00c      	beq.n	8003cea <UART_SetConfig+0x1c2>
 8003cd0:	e00f      	b.n	8003cf2 <UART_SetConfig+0x1ca>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd8:	e06d      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce0:	e069      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce8:	e065      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003cea:	2308      	movs	r3, #8
 8003cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf0:	e061      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003cf2:	2310      	movs	r3, #16
 8003cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf8:	bf00      	nop
 8003cfa:	e05c      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a43      	ldr	r2, [pc, #268]	; (8003e10 <UART_SetConfig+0x2e8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d125      	bne.n	8003d52 <UART_SetConfig+0x22a>
 8003d06:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d011      	beq.n	8003d38 <UART_SetConfig+0x210>
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d802      	bhi.n	8003d1e <UART_SetConfig+0x1f6>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <UART_SetConfig+0x200>
 8003d1c:	e014      	b.n	8003d48 <UART_SetConfig+0x220>
 8003d1e:	2b80      	cmp	r3, #128	; 0x80
 8003d20:	d006      	beq.n	8003d30 <UART_SetConfig+0x208>
 8003d22:	2bc0      	cmp	r3, #192	; 0xc0
 8003d24:	d00c      	beq.n	8003d40 <UART_SetConfig+0x218>
 8003d26:	e00f      	b.n	8003d48 <UART_SetConfig+0x220>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2e:	e042      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003d30:	2302      	movs	r3, #2
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e03e      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3e:	e03a      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003d40:	2308      	movs	r3, #8
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e036      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4e:	bf00      	nop
 8003d50:	e031      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a29      	ldr	r2, [pc, #164]	; (8003dfc <UART_SetConfig+0x2d4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d129      	bne.n	8003db0 <UART_SetConfig+0x288>
 8003d5c:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6a:	d014      	beq.n	8003d96 <UART_SetConfig+0x26e>
 8003d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d70:	d802      	bhi.n	8003d78 <UART_SetConfig+0x250>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <UART_SetConfig+0x25e>
 8003d76:	e016      	b.n	8003da6 <UART_SetConfig+0x27e>
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7c:	d007      	beq.n	8003d8e <UART_SetConfig+0x266>
 8003d7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d82:	d00c      	beq.n	8003d9e <UART_SetConfig+0x276>
 8003d84:	e00f      	b.n	8003da6 <UART_SetConfig+0x27e>
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8c:	e013      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d94:	e00f      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003d96:	2304      	movs	r3, #4
 8003d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9c:	e00b      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da4:	e007      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003da6:	2310      	movs	r3, #16
 8003da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dac:	bf00      	nop
 8003dae:	e002      	b.n	8003db6 <UART_SetConfig+0x28e>
 8003db0:	2310      	movs	r3, #16
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a10      	ldr	r2, [pc, #64]	; (8003dfc <UART_SetConfig+0x2d4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	f040 842e 	bne.w	800461e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	f200 8169 	bhi.w	800409e <UART_SetConfig+0x576>
 8003dcc:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <UART_SetConfig+0x2ac>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003e15 	.word	0x08003e15
 8003dd8:	0800409f 	.word	0x0800409f
 8003ddc:	08003eb7 	.word	0x08003eb7
 8003de0:	0800409f 	.word	0x0800409f
 8003de4:	08003f4f 	.word	0x08003f4f
 8003de8:	0800409f 	.word	0x0800409f
 8003dec:	0800409f 	.word	0x0800409f
 8003df0:	0800409f 	.word	0x0800409f
 8003df4:	08003ff1 	.word	0x08003ff1
 8003df8:	cfff69f3 	.word	0xcfff69f3
 8003dfc:	40008000 	.word	0x40008000
 8003e00:	40013800 	.word	0x40013800
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40004400 	.word	0x40004400
 8003e0c:	40004800 	.word	0x40004800
 8003e10:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003e14:	f7fe f91a 	bl	800204c <HAL_RCC_GetPCLK1Freq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d044      	beq.n	8003eac <UART_SetConfig+0x384>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d03e      	beq.n	8003ea8 <UART_SetConfig+0x380>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d038      	beq.n	8003ea4 <UART_SetConfig+0x37c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d032      	beq.n	8003ea0 <UART_SetConfig+0x378>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d02c      	beq.n	8003e9c <UART_SetConfig+0x374>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b05      	cmp	r3, #5
 8003e48:	d026      	beq.n	8003e98 <UART_SetConfig+0x370>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d020      	beq.n	8003e94 <UART_SetConfig+0x36c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b07      	cmp	r3, #7
 8003e58:	d01a      	beq.n	8003e90 <UART_SetConfig+0x368>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d014      	beq.n	8003e8c <UART_SetConfig+0x364>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	2b09      	cmp	r3, #9
 8003e68:	d00e      	beq.n	8003e88 <UART_SetConfig+0x360>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2b0a      	cmp	r3, #10
 8003e70:	d008      	beq.n	8003e84 <UART_SetConfig+0x35c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	2b0b      	cmp	r3, #11
 8003e78:	d102      	bne.n	8003e80 <UART_SetConfig+0x358>
 8003e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e7e:	e016      	b.n	8003eae <UART_SetConfig+0x386>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e014      	b.n	8003eae <UART_SetConfig+0x386>
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	e012      	b.n	8003eae <UART_SetConfig+0x386>
 8003e88:	2340      	movs	r3, #64	; 0x40
 8003e8a:	e010      	b.n	8003eae <UART_SetConfig+0x386>
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	e00e      	b.n	8003eae <UART_SetConfig+0x386>
 8003e90:	2310      	movs	r3, #16
 8003e92:	e00c      	b.n	8003eae <UART_SetConfig+0x386>
 8003e94:	230c      	movs	r3, #12
 8003e96:	e00a      	b.n	8003eae <UART_SetConfig+0x386>
 8003e98:	230a      	movs	r3, #10
 8003e9a:	e008      	b.n	8003eae <UART_SetConfig+0x386>
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	e006      	b.n	8003eae <UART_SetConfig+0x386>
 8003ea0:	2306      	movs	r3, #6
 8003ea2:	e004      	b.n	8003eae <UART_SetConfig+0x386>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	e002      	b.n	8003eae <UART_SetConfig+0x386>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e000      	b.n	8003eae <UART_SetConfig+0x386>
 8003eac:	2301      	movs	r3, #1
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	617b      	str	r3, [r7, #20]
        break;
 8003eb4:	e0f6      	b.n	80040a4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d044      	beq.n	8003f48 <UART_SetConfig+0x420>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d03e      	beq.n	8003f44 <UART_SetConfig+0x41c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d038      	beq.n	8003f40 <UART_SetConfig+0x418>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d032      	beq.n	8003f3c <UART_SetConfig+0x414>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d02c      	beq.n	8003f38 <UART_SetConfig+0x410>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d026      	beq.n	8003f34 <UART_SetConfig+0x40c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d020      	beq.n	8003f30 <UART_SetConfig+0x408>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b07      	cmp	r3, #7
 8003ef4:	d01a      	beq.n	8003f2c <UART_SetConfig+0x404>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d014      	beq.n	8003f28 <UART_SetConfig+0x400>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2b09      	cmp	r3, #9
 8003f04:	d00e      	beq.n	8003f24 <UART_SetConfig+0x3fc>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	2b0a      	cmp	r3, #10
 8003f0c:	d008      	beq.n	8003f20 <UART_SetConfig+0x3f8>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2b0b      	cmp	r3, #11
 8003f14:	d102      	bne.n	8003f1c <UART_SetConfig+0x3f4>
 8003f16:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f1a:	e016      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f1c:	4ba1      	ldr	r3, [pc, #644]	; (80041a4 <UART_SetConfig+0x67c>)
 8003f1e:	e014      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f20:	4ba1      	ldr	r3, [pc, #644]	; (80041a8 <UART_SetConfig+0x680>)
 8003f22:	e012      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f24:	4ba1      	ldr	r3, [pc, #644]	; (80041ac <UART_SetConfig+0x684>)
 8003f26:	e010      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f28:	4ba1      	ldr	r3, [pc, #644]	; (80041b0 <UART_SetConfig+0x688>)
 8003f2a:	e00e      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f2c:	4ba1      	ldr	r3, [pc, #644]	; (80041b4 <UART_SetConfig+0x68c>)
 8003f2e:	e00c      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f30:	4ba1      	ldr	r3, [pc, #644]	; (80041b8 <UART_SetConfig+0x690>)
 8003f32:	e00a      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f34:	4ba1      	ldr	r3, [pc, #644]	; (80041bc <UART_SetConfig+0x694>)
 8003f36:	e008      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f38:	4ba1      	ldr	r3, [pc, #644]	; (80041c0 <UART_SetConfig+0x698>)
 8003f3a:	e006      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f3c:	4ba1      	ldr	r3, [pc, #644]	; (80041c4 <UART_SetConfig+0x69c>)
 8003f3e:	e004      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f40:	4ba1      	ldr	r3, [pc, #644]	; (80041c8 <UART_SetConfig+0x6a0>)
 8003f42:	e002      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f44:	4ba1      	ldr	r3, [pc, #644]	; (80041cc <UART_SetConfig+0x6a4>)
 8003f46:	e000      	b.n	8003f4a <UART_SetConfig+0x422>
 8003f48:	4b96      	ldr	r3, [pc, #600]	; (80041a4 <UART_SetConfig+0x67c>)
 8003f4a:	617b      	str	r3, [r7, #20]
        break;
 8003f4c:	e0aa      	b.n	80040a4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003f4e:	f7fe f80f 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8003f52:	4602      	mov	r2, r0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d044      	beq.n	8003fe6 <UART_SetConfig+0x4be>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d03e      	beq.n	8003fe2 <UART_SetConfig+0x4ba>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d038      	beq.n	8003fde <UART_SetConfig+0x4b6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d032      	beq.n	8003fda <UART_SetConfig+0x4b2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d02c      	beq.n	8003fd6 <UART_SetConfig+0x4ae>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2b05      	cmp	r3, #5
 8003f82:	d026      	beq.n	8003fd2 <UART_SetConfig+0x4aa>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d020      	beq.n	8003fce <UART_SetConfig+0x4a6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2b07      	cmp	r3, #7
 8003f92:	d01a      	beq.n	8003fca <UART_SetConfig+0x4a2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d014      	beq.n	8003fc6 <UART_SetConfig+0x49e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2b09      	cmp	r3, #9
 8003fa2:	d00e      	beq.n	8003fc2 <UART_SetConfig+0x49a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2b0a      	cmp	r3, #10
 8003faa:	d008      	beq.n	8003fbe <UART_SetConfig+0x496>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2b0b      	cmp	r3, #11
 8003fb2:	d102      	bne.n	8003fba <UART_SetConfig+0x492>
 8003fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb8:	e016      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e014      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	e012      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fc2:	2340      	movs	r3, #64	; 0x40
 8003fc4:	e010      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fc6:	2320      	movs	r3, #32
 8003fc8:	e00e      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fca:	2310      	movs	r3, #16
 8003fcc:	e00c      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	e00a      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fd2:	230a      	movs	r3, #10
 8003fd4:	e008      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	e006      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fda:	2306      	movs	r3, #6
 8003fdc:	e004      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fde:	2304      	movs	r3, #4
 8003fe0:	e002      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e000      	b.n	8003fe8 <UART_SetConfig+0x4c0>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
        break;
 8003fee:	e059      	b.n	80040a4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d04e      	beq.n	8004096 <UART_SetConfig+0x56e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d047      	beq.n	8004090 <UART_SetConfig+0x568>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	2b02      	cmp	r3, #2
 8004006:	d040      	beq.n	800408a <UART_SetConfig+0x562>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2b03      	cmp	r3, #3
 800400e:	d039      	beq.n	8004084 <UART_SetConfig+0x55c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	2b04      	cmp	r3, #4
 8004016:	d032      	beq.n	800407e <UART_SetConfig+0x556>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	2b05      	cmp	r3, #5
 800401e:	d02b      	beq.n	8004078 <UART_SetConfig+0x550>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	2b06      	cmp	r3, #6
 8004026:	d024      	beq.n	8004072 <UART_SetConfig+0x54a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	2b07      	cmp	r3, #7
 800402e:	d01d      	beq.n	800406c <UART_SetConfig+0x544>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	2b08      	cmp	r3, #8
 8004036:	d016      	beq.n	8004066 <UART_SetConfig+0x53e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	2b09      	cmp	r3, #9
 800403e:	d00f      	beq.n	8004060 <UART_SetConfig+0x538>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b0a      	cmp	r3, #10
 8004046:	d008      	beq.n	800405a <UART_SetConfig+0x532>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	2b0b      	cmp	r3, #11
 800404e:	d101      	bne.n	8004054 <UART_SetConfig+0x52c>
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	e022      	b.n	800409a <UART_SetConfig+0x572>
 8004054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004058:	e01f      	b.n	800409a <UART_SetConfig+0x572>
 800405a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800405e:	e01c      	b.n	800409a <UART_SetConfig+0x572>
 8004060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004064:	e019      	b.n	800409a <UART_SetConfig+0x572>
 8004066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800406a:	e016      	b.n	800409a <UART_SetConfig+0x572>
 800406c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004070:	e013      	b.n	800409a <UART_SetConfig+0x572>
 8004072:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004076:	e010      	b.n	800409a <UART_SetConfig+0x572>
 8004078:	f640 43cc 	movw	r3, #3276	; 0xccc
 800407c:	e00d      	b.n	800409a <UART_SetConfig+0x572>
 800407e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004082:	e00a      	b.n	800409a <UART_SetConfig+0x572>
 8004084:	f241 5355 	movw	r3, #5461	; 0x1555
 8004088:	e007      	b.n	800409a <UART_SetConfig+0x572>
 800408a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800408e:	e004      	b.n	800409a <UART_SetConfig+0x572>
 8004090:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004094:	e001      	b.n	800409a <UART_SetConfig+0x572>
 8004096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409a:	617b      	str	r3, [r7, #20]
        break;
 800409c:	e002      	b.n	80040a4 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	76fb      	strb	r3, [r7, #27]
        break;
 80040a2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 86cd 	beq.w	8004e46 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4413      	add	r3, r2
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d305      	bcc.n	80040c8 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d903      	bls.n	80040d0 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	f000 bebb 	b.w	8004e46 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80040d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	f200 828d 	bhi.w	80045f4 <UART_SetConfig+0xacc>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <UART_SetConfig+0x5b8>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004105 	.word	0x08004105
 80040e4:	080045f5 	.word	0x080045f5
 80040e8:	0800426f 	.word	0x0800426f
 80040ec:	080045f5 	.word	0x080045f5
 80040f0:	08004365 	.word	0x08004365
 80040f4:	080045f5 	.word	0x080045f5
 80040f8:	080045f5 	.word	0x080045f5
 80040fc:	080045f5 	.word	0x080045f5
 8004100:	080044a3 	.word	0x080044a3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004104:	f7fd ffa2 	bl	800204c <HAL_RCC_GetPCLK1Freq>
 8004108:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4618      	mov	r0, r3
 800410e:	f04f 0100 	mov.w	r1, #0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d07d      	beq.n	8004216 <UART_SetConfig+0x6ee>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	2b01      	cmp	r3, #1
 8004120:	d074      	beq.n	800420c <UART_SetConfig+0x6e4>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	2b02      	cmp	r3, #2
 8004128:	d06b      	beq.n	8004202 <UART_SetConfig+0x6da>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	2b03      	cmp	r3, #3
 8004130:	d062      	beq.n	80041f8 <UART_SetConfig+0x6d0>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	2b04      	cmp	r3, #4
 8004138:	d059      	beq.n	80041ee <UART_SetConfig+0x6c6>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b05      	cmp	r3, #5
 8004140:	d050      	beq.n	80041e4 <UART_SetConfig+0x6bc>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b06      	cmp	r3, #6
 8004148:	d047      	beq.n	80041da <UART_SetConfig+0x6b2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	2b07      	cmp	r3, #7
 8004150:	d03e      	beq.n	80041d0 <UART_SetConfig+0x6a8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	2b08      	cmp	r3, #8
 8004158:	d01f      	beq.n	800419a <UART_SetConfig+0x672>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b09      	cmp	r3, #9
 8004160:	d016      	beq.n	8004190 <UART_SetConfig+0x668>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	2b0a      	cmp	r3, #10
 8004168:	d00d      	beq.n	8004186 <UART_SetConfig+0x65e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b0b      	cmp	r3, #11
 8004170:	d104      	bne.n	800417c <UART_SetConfig+0x654>
 8004172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004176:	f04f 0400 	mov.w	r4, #0
 800417a:	e050      	b.n	800421e <UART_SetConfig+0x6f6>
 800417c:	f04f 0301 	mov.w	r3, #1
 8004180:	f04f 0400 	mov.w	r4, #0
 8004184:	e04b      	b.n	800421e <UART_SetConfig+0x6f6>
 8004186:	f04f 0380 	mov.w	r3, #128	; 0x80
 800418a:	f04f 0400 	mov.w	r4, #0
 800418e:	e046      	b.n	800421e <UART_SetConfig+0x6f6>
 8004190:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004194:	f04f 0400 	mov.w	r4, #0
 8004198:	e041      	b.n	800421e <UART_SetConfig+0x6f6>
 800419a:	f04f 0320 	mov.w	r3, #32
 800419e:	f04f 0400 	mov.w	r4, #0
 80041a2:	e03c      	b.n	800421e <UART_SetConfig+0x6f6>
 80041a4:	00f42400 	.word	0x00f42400
 80041a8:	0001e848 	.word	0x0001e848
 80041ac:	0003d090 	.word	0x0003d090
 80041b0:	0007a120 	.word	0x0007a120
 80041b4:	000f4240 	.word	0x000f4240
 80041b8:	00145855 	.word	0x00145855
 80041bc:	00186a00 	.word	0x00186a00
 80041c0:	001e8480 	.word	0x001e8480
 80041c4:	0028b0aa 	.word	0x0028b0aa
 80041c8:	003d0900 	.word	0x003d0900
 80041cc:	007a1200 	.word	0x007a1200
 80041d0:	f04f 0310 	mov.w	r3, #16
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	e021      	b.n	800421e <UART_SetConfig+0x6f6>
 80041da:	f04f 030c 	mov.w	r3, #12
 80041de:	f04f 0400 	mov.w	r4, #0
 80041e2:	e01c      	b.n	800421e <UART_SetConfig+0x6f6>
 80041e4:	f04f 030a 	mov.w	r3, #10
 80041e8:	f04f 0400 	mov.w	r4, #0
 80041ec:	e017      	b.n	800421e <UART_SetConfig+0x6f6>
 80041ee:	f04f 0308 	mov.w	r3, #8
 80041f2:	f04f 0400 	mov.w	r4, #0
 80041f6:	e012      	b.n	800421e <UART_SetConfig+0x6f6>
 80041f8:	f04f 0306 	mov.w	r3, #6
 80041fc:	f04f 0400 	mov.w	r4, #0
 8004200:	e00d      	b.n	800421e <UART_SetConfig+0x6f6>
 8004202:	f04f 0304 	mov.w	r3, #4
 8004206:	f04f 0400 	mov.w	r4, #0
 800420a:	e008      	b.n	800421e <UART_SetConfig+0x6f6>
 800420c:	f04f 0302 	mov.w	r3, #2
 8004210:	f04f 0400 	mov.w	r4, #0
 8004214:	e003      	b.n	800421e <UART_SetConfig+0x6f6>
 8004216:	f04f 0301 	mov.w	r3, #1
 800421a:	f04f 0400 	mov.w	r4, #0
 800421e:	461a      	mov	r2, r3
 8004220:	4623      	mov	r3, r4
 8004222:	f7fb fff9 	bl	8000218 <__aeabi_uldivmod>
 8004226:	4603      	mov	r3, r0
 8004228:	460c      	mov	r4, r1
 800422a:	4619      	mov	r1, r3
 800422c:	4622      	mov	r2, r4
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	f04f 0400 	mov.w	r4, #0
 8004236:	0214      	lsls	r4, r2, #8
 8004238:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800423c:	020b      	lsls	r3, r1, #8
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6852      	ldr	r2, [r2, #4]
 8004242:	0852      	lsrs	r2, r2, #1
 8004244:	4611      	mov	r1, r2
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	eb13 0b01 	adds.w	fp, r3, r1
 800424e:	eb44 0c02 	adc.w	ip, r4, r2
 8004252:	4658      	mov	r0, fp
 8004254:	4661      	mov	r1, ip
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f04f 0400 	mov.w	r4, #0
 800425e:	461a      	mov	r2, r3
 8004260:	4623      	mov	r3, r4
 8004262:	f7fb ffd9 	bl	8000218 <__aeabi_uldivmod>
 8004266:	4603      	mov	r3, r0
 8004268:	460c      	mov	r4, r1
 800426a:	61fb      	str	r3, [r7, #28]
            break;
 800426c:	e1c5      	b.n	80045fa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d05b      	beq.n	800432e <UART_SetConfig+0x806>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2b01      	cmp	r3, #1
 800427c:	d053      	beq.n	8004326 <UART_SetConfig+0x7fe>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2b02      	cmp	r3, #2
 8004284:	d04b      	beq.n	800431e <UART_SetConfig+0x7f6>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	2b03      	cmp	r3, #3
 800428c:	d043      	beq.n	8004316 <UART_SetConfig+0x7ee>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2b04      	cmp	r3, #4
 8004294:	d03b      	beq.n	800430e <UART_SetConfig+0x7e6>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2b05      	cmp	r3, #5
 800429c:	d033      	beq.n	8004306 <UART_SetConfig+0x7de>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d02b      	beq.n	80042fe <UART_SetConfig+0x7d6>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2b07      	cmp	r3, #7
 80042ac:	d023      	beq.n	80042f6 <UART_SetConfig+0x7ce>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d01b      	beq.n	80042ee <UART_SetConfig+0x7c6>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	2b09      	cmp	r3, #9
 80042bc:	d013      	beq.n	80042e6 <UART_SetConfig+0x7be>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2b0a      	cmp	r3, #10
 80042c4:	d00b      	beq.n	80042de <UART_SetConfig+0x7b6>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2b0b      	cmp	r3, #11
 80042cc:	d103      	bne.n	80042d6 <UART_SetConfig+0x7ae>
 80042ce:	4bae      	ldr	r3, [pc, #696]	; (8004588 <UART_SetConfig+0xa60>)
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	e02e      	b.n	8004334 <UART_SetConfig+0x80c>
 80042d6:	4bad      	ldr	r3, [pc, #692]	; (800458c <UART_SetConfig+0xa64>)
 80042d8:	f04f 0400 	mov.w	r4, #0
 80042dc:	e02a      	b.n	8004334 <UART_SetConfig+0x80c>
 80042de:	4bac      	ldr	r3, [pc, #688]	; (8004590 <UART_SetConfig+0xa68>)
 80042e0:	f04f 0400 	mov.w	r4, #0
 80042e4:	e026      	b.n	8004334 <UART_SetConfig+0x80c>
 80042e6:	4bab      	ldr	r3, [pc, #684]	; (8004594 <UART_SetConfig+0xa6c>)
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	e022      	b.n	8004334 <UART_SetConfig+0x80c>
 80042ee:	4baa      	ldr	r3, [pc, #680]	; (8004598 <UART_SetConfig+0xa70>)
 80042f0:	f04f 0400 	mov.w	r4, #0
 80042f4:	e01e      	b.n	8004334 <UART_SetConfig+0x80c>
 80042f6:	4ba9      	ldr	r3, [pc, #676]	; (800459c <UART_SetConfig+0xa74>)
 80042f8:	f04f 0400 	mov.w	r4, #0
 80042fc:	e01a      	b.n	8004334 <UART_SetConfig+0x80c>
 80042fe:	a49e      	add	r4, pc, #632	; (adr r4, 8004578 <UART_SetConfig+0xa50>)
 8004300:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004304:	e016      	b.n	8004334 <UART_SetConfig+0x80c>
 8004306:	4ba6      	ldr	r3, [pc, #664]	; (80045a0 <UART_SetConfig+0xa78>)
 8004308:	f04f 0400 	mov.w	r4, #0
 800430c:	e012      	b.n	8004334 <UART_SetConfig+0x80c>
 800430e:	4ba5      	ldr	r3, [pc, #660]	; (80045a4 <UART_SetConfig+0xa7c>)
 8004310:	f04f 0400 	mov.w	r4, #0
 8004314:	e00e      	b.n	8004334 <UART_SetConfig+0x80c>
 8004316:	a49a      	add	r4, pc, #616	; (adr r4, 8004580 <UART_SetConfig+0xa58>)
 8004318:	e9d4 3400 	ldrd	r3, r4, [r4]
 800431c:	e00a      	b.n	8004334 <UART_SetConfig+0x80c>
 800431e:	4ba2      	ldr	r3, [pc, #648]	; (80045a8 <UART_SetConfig+0xa80>)
 8004320:	f04f 0400 	mov.w	r4, #0
 8004324:	e006      	b.n	8004334 <UART_SetConfig+0x80c>
 8004326:	4ba1      	ldr	r3, [pc, #644]	; (80045ac <UART_SetConfig+0xa84>)
 8004328:	f04f 0400 	mov.w	r4, #0
 800432c:	e002      	b.n	8004334 <UART_SetConfig+0x80c>
 800432e:	4b97      	ldr	r3, [pc, #604]	; (800458c <UART_SetConfig+0xa64>)
 8004330:	f04f 0400 	mov.w	r4, #0
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6852      	ldr	r2, [r2, #4]
 8004338:	0852      	lsrs	r2, r2, #1
 800433a:	4611      	mov	r1, r2
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	eb13 0b01 	adds.w	fp, r3, r1
 8004344:	eb44 0c02 	adc.w	ip, r4, r2
 8004348:	4658      	mov	r0, fp
 800434a:	4661      	mov	r1, ip
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f04f 0400 	mov.w	r4, #0
 8004354:	461a      	mov	r2, r3
 8004356:	4623      	mov	r3, r4
 8004358:	f7fb ff5e 	bl	8000218 <__aeabi_uldivmod>
 800435c:	4603      	mov	r3, r0
 800435e:	460c      	mov	r4, r1
 8004360:	61fb      	str	r3, [r7, #28]
            break;
 8004362:	e14a      	b.n	80045fa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004364:	f7fd fe04 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8004368:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4618      	mov	r0, r3
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d067      	beq.n	800444a <UART_SetConfig+0x922>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b01      	cmp	r3, #1
 8004380:	d05e      	beq.n	8004440 <UART_SetConfig+0x918>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b02      	cmp	r3, #2
 8004388:	d055      	beq.n	8004436 <UART_SetConfig+0x90e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b03      	cmp	r3, #3
 8004390:	d04c      	beq.n	800442c <UART_SetConfig+0x904>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b04      	cmp	r3, #4
 8004398:	d043      	beq.n	8004422 <UART_SetConfig+0x8fa>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d03a      	beq.n	8004418 <UART_SetConfig+0x8f0>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b06      	cmp	r3, #6
 80043a8:	d031      	beq.n	800440e <UART_SetConfig+0x8e6>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b07      	cmp	r3, #7
 80043b0:	d028      	beq.n	8004404 <UART_SetConfig+0x8dc>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d01f      	beq.n	80043fa <UART_SetConfig+0x8d2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b09      	cmp	r3, #9
 80043c0:	d016      	beq.n	80043f0 <UART_SetConfig+0x8c8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b0a      	cmp	r3, #10
 80043c8:	d00d      	beq.n	80043e6 <UART_SetConfig+0x8be>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b0b      	cmp	r3, #11
 80043d0:	d104      	bne.n	80043dc <UART_SetConfig+0x8b4>
 80043d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043d6:	f04f 0400 	mov.w	r4, #0
 80043da:	e03a      	b.n	8004452 <UART_SetConfig+0x92a>
 80043dc:	f04f 0301 	mov.w	r3, #1
 80043e0:	f04f 0400 	mov.w	r4, #0
 80043e4:	e035      	b.n	8004452 <UART_SetConfig+0x92a>
 80043e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80043ea:	f04f 0400 	mov.w	r4, #0
 80043ee:	e030      	b.n	8004452 <UART_SetConfig+0x92a>
 80043f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80043f4:	f04f 0400 	mov.w	r4, #0
 80043f8:	e02b      	b.n	8004452 <UART_SetConfig+0x92a>
 80043fa:	f04f 0320 	mov.w	r3, #32
 80043fe:	f04f 0400 	mov.w	r4, #0
 8004402:	e026      	b.n	8004452 <UART_SetConfig+0x92a>
 8004404:	f04f 0310 	mov.w	r3, #16
 8004408:	f04f 0400 	mov.w	r4, #0
 800440c:	e021      	b.n	8004452 <UART_SetConfig+0x92a>
 800440e:	f04f 030c 	mov.w	r3, #12
 8004412:	f04f 0400 	mov.w	r4, #0
 8004416:	e01c      	b.n	8004452 <UART_SetConfig+0x92a>
 8004418:	f04f 030a 	mov.w	r3, #10
 800441c:	f04f 0400 	mov.w	r4, #0
 8004420:	e017      	b.n	8004452 <UART_SetConfig+0x92a>
 8004422:	f04f 0308 	mov.w	r3, #8
 8004426:	f04f 0400 	mov.w	r4, #0
 800442a:	e012      	b.n	8004452 <UART_SetConfig+0x92a>
 800442c:	f04f 0306 	mov.w	r3, #6
 8004430:	f04f 0400 	mov.w	r4, #0
 8004434:	e00d      	b.n	8004452 <UART_SetConfig+0x92a>
 8004436:	f04f 0304 	mov.w	r3, #4
 800443a:	f04f 0400 	mov.w	r4, #0
 800443e:	e008      	b.n	8004452 <UART_SetConfig+0x92a>
 8004440:	f04f 0302 	mov.w	r3, #2
 8004444:	f04f 0400 	mov.w	r4, #0
 8004448:	e003      	b.n	8004452 <UART_SetConfig+0x92a>
 800444a:	f04f 0301 	mov.w	r3, #1
 800444e:	f04f 0400 	mov.w	r4, #0
 8004452:	461a      	mov	r2, r3
 8004454:	4623      	mov	r3, r4
 8004456:	f7fb fedf 	bl	8000218 <__aeabi_uldivmod>
 800445a:	4603      	mov	r3, r0
 800445c:	460c      	mov	r4, r1
 800445e:	4619      	mov	r1, r3
 8004460:	4622      	mov	r2, r4
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	f04f 0400 	mov.w	r4, #0
 800446a:	0214      	lsls	r4, r2, #8
 800446c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004470:	020b      	lsls	r3, r1, #8
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6852      	ldr	r2, [r2, #4]
 8004476:	0852      	lsrs	r2, r2, #1
 8004478:	4611      	mov	r1, r2
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	eb13 0b01 	adds.w	fp, r3, r1
 8004482:	eb44 0c02 	adc.w	ip, r4, r2
 8004486:	4658      	mov	r0, fp
 8004488:	4661      	mov	r1, ip
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f04f 0400 	mov.w	r4, #0
 8004492:	461a      	mov	r2, r3
 8004494:	4623      	mov	r3, r4
 8004496:	f7fb febf 	bl	8000218 <__aeabi_uldivmod>
 800449a:	4603      	mov	r3, r0
 800449c:	460c      	mov	r4, r1
 800449e:	61fb      	str	r3, [r7, #28]
            break;
 80044a0:	e0ab      	b.n	80045fa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8088 	beq.w	80045bc <UART_SetConfig+0xa94>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d05b      	beq.n	800456c <UART_SetConfig+0xa44>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d052      	beq.n	8004562 <UART_SetConfig+0xa3a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d04a      	beq.n	800455a <UART_SetConfig+0xa32>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d041      	beq.n	8004550 <UART_SetConfig+0xa28>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d039      	beq.n	8004548 <UART_SetConfig+0xa20>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b06      	cmp	r3, #6
 80044da:	d031      	beq.n	8004540 <UART_SetConfig+0xa18>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b07      	cmp	r3, #7
 80044e2:	d028      	beq.n	8004536 <UART_SetConfig+0xa0e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d01f      	beq.n	800452c <UART_SetConfig+0xa04>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b09      	cmp	r3, #9
 80044f2:	d016      	beq.n	8004522 <UART_SetConfig+0x9fa>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	2b0a      	cmp	r3, #10
 80044fa:	d00d      	beq.n	8004518 <UART_SetConfig+0x9f0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	2b0b      	cmp	r3, #11
 8004502:	d104      	bne.n	800450e <UART_SetConfig+0x9e6>
 8004504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004508:	f04f 0400 	mov.w	r4, #0
 800450c:	e05a      	b.n	80045c4 <UART_SetConfig+0xa9c>
 800450e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004512:	f04f 0400 	mov.w	r4, #0
 8004516:	e055      	b.n	80045c4 <UART_SetConfig+0xa9c>
 8004518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800451c:	f04f 0400 	mov.w	r4, #0
 8004520:	e050      	b.n	80045c4 <UART_SetConfig+0xa9c>
 8004522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004526:	f04f 0400 	mov.w	r4, #0
 800452a:	e04b      	b.n	80045c4 <UART_SetConfig+0xa9c>
 800452c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004530:	f04f 0400 	mov.w	r4, #0
 8004534:	e046      	b.n	80045c4 <UART_SetConfig+0xa9c>
 8004536:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800453a:	f04f 0400 	mov.w	r4, #0
 800453e:	e041      	b.n	80045c4 <UART_SetConfig+0xa9c>
 8004540:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <UART_SetConfig+0xa88>)
 8004542:	f04f 0400 	mov.w	r4, #0
 8004546:	e03d      	b.n	80045c4 <UART_SetConfig+0xa9c>
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <UART_SetConfig+0xa8c>)
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	e039      	b.n	80045c4 <UART_SetConfig+0xa9c>
 8004550:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004554:	f04f 0400 	mov.w	r4, #0
 8004558:	e034      	b.n	80045c4 <UART_SetConfig+0xa9c>
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <UART_SetConfig+0xa90>)
 800455c:	f04f 0400 	mov.w	r4, #0
 8004560:	e030      	b.n	80045c4 <UART_SetConfig+0xa9c>
 8004562:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004566:	f04f 0400 	mov.w	r4, #0
 800456a:	e02b      	b.n	80045c4 <UART_SetConfig+0xa9c>
 800456c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004570:	f04f 0400 	mov.w	r4, #0
 8004574:	e026      	b.n	80045c4 <UART_SetConfig+0xa9c>
 8004576:	bf00      	nop
 8004578:	14585500 	.word	0x14585500
 800457c:	00000000 	.word	0x00000000
 8004580:	28b0aa00 	.word	0x28b0aa00
 8004584:	00000000 	.word	0x00000000
 8004588:	00f42400 	.word	0x00f42400
 800458c:	f4240000 	.word	0xf4240000
 8004590:	01e84800 	.word	0x01e84800
 8004594:	03d09000 	.word	0x03d09000
 8004598:	07a12000 	.word	0x07a12000
 800459c:	0f424000 	.word	0x0f424000
 80045a0:	186a0000 	.word	0x186a0000
 80045a4:	1e848000 	.word	0x1e848000
 80045a8:	3d090000 	.word	0x3d090000
 80045ac:	7a120000 	.word	0x7a120000
 80045b0:	000aaa00 	.word	0x000aaa00
 80045b4:	000ccc00 	.word	0x000ccc00
 80045b8:	00155500 	.word	0x00155500
 80045bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80045c0:	f04f 0400 	mov.w	r4, #0
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6852      	ldr	r2, [r2, #4]
 80045c8:	0852      	lsrs	r2, r2, #1
 80045ca:	4611      	mov	r1, r2
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	eb13 0b01 	adds.w	fp, r3, r1
 80045d4:	eb44 0c02 	adc.w	ip, r4, r2
 80045d8:	4658      	mov	r0, fp
 80045da:	4661      	mov	r1, ip
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f04f 0400 	mov.w	r4, #0
 80045e4:	461a      	mov	r2, r3
 80045e6:	4623      	mov	r3, r4
 80045e8:	f7fb fe16 	bl	8000218 <__aeabi_uldivmod>
 80045ec:	4603      	mov	r3, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	61fb      	str	r3, [r7, #28]
            break;
 80045f2:	e002      	b.n	80045fa <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	76fb      	strb	r3, [r7, #27]
            break;
 80045f8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004600:	d309      	bcc.n	8004616 <UART_SetConfig+0xaee>
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004608:	d205      	bcs.n	8004616 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	60da      	str	r2, [r3, #12]
 8004612:	f000 bc18 	b.w	8004e46 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	76fb      	strb	r3, [r7, #27]
 800461a:	f000 bc14 	b.w	8004e46 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004626:	f040 8204 	bne.w	8004a32 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800462a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800462e:	2b08      	cmp	r3, #8
 8004630:	f200 81df 	bhi.w	80049f2 <UART_SetConfig+0xeca>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0xb14>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	08004661 	.word	0x08004661
 8004640:	08004719 	.word	0x08004719
 8004644:	080047d1 	.word	0x080047d1
 8004648:	080049f3 	.word	0x080049f3
 800464c:	08004879 	.word	0x08004879
 8004650:	080049f3 	.word	0x080049f3
 8004654:	080049f3 	.word	0x080049f3
 8004658:	080049f3 	.word	0x080049f3
 800465c:	08004931 	.word	0x08004931
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004660:	f7fd fcf4 	bl	800204c <HAL_RCC_GetPCLK1Freq>
 8004664:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	d044      	beq.n	80046f8 <UART_SetConfig+0xbd0>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	2b01      	cmp	r3, #1
 8004674:	d03e      	beq.n	80046f4 <UART_SetConfig+0xbcc>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	2b02      	cmp	r3, #2
 800467c:	d038      	beq.n	80046f0 <UART_SetConfig+0xbc8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	2b03      	cmp	r3, #3
 8004684:	d032      	beq.n	80046ec <UART_SetConfig+0xbc4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b04      	cmp	r3, #4
 800468c:	d02c      	beq.n	80046e8 <UART_SetConfig+0xbc0>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	2b05      	cmp	r3, #5
 8004694:	d026      	beq.n	80046e4 <UART_SetConfig+0xbbc>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	2b06      	cmp	r3, #6
 800469c:	d020      	beq.n	80046e0 <UART_SetConfig+0xbb8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	2b07      	cmp	r3, #7
 80046a4:	d01a      	beq.n	80046dc <UART_SetConfig+0xbb4>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d014      	beq.n	80046d8 <UART_SetConfig+0xbb0>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	2b09      	cmp	r3, #9
 80046b4:	d00e      	beq.n	80046d4 <UART_SetConfig+0xbac>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	2b0a      	cmp	r3, #10
 80046bc:	d008      	beq.n	80046d0 <UART_SetConfig+0xba8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b0b      	cmp	r3, #11
 80046c4:	d102      	bne.n	80046cc <UART_SetConfig+0xba4>
 80046c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ca:	e016      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e014      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	e012      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046d4:	2340      	movs	r3, #64	; 0x40
 80046d6:	e010      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046d8:	2320      	movs	r3, #32
 80046da:	e00e      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046dc:	2310      	movs	r3, #16
 80046de:	e00c      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046e0:	230c      	movs	r3, #12
 80046e2:	e00a      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046e4:	230a      	movs	r3, #10
 80046e6:	e008      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046e8:	2308      	movs	r3, #8
 80046ea:	e006      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046ec:	2306      	movs	r3, #6
 80046ee:	e004      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046f0:	2304      	movs	r3, #4
 80046f2:	e002      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e000      	b.n	80046fa <UART_SetConfig+0xbd2>
 80046f8:	2301      	movs	r3, #1
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	005a      	lsls	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	b29b      	uxth	r3, r3
 8004714:	61fb      	str	r3, [r7, #28]
        break;
 8004716:	e16f      	b.n	80049f8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004718:	f7fd fcae 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 800471c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d044      	beq.n	80047b0 <UART_SetConfig+0xc88>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	2b01      	cmp	r3, #1
 800472c:	d03e      	beq.n	80047ac <UART_SetConfig+0xc84>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b02      	cmp	r3, #2
 8004734:	d038      	beq.n	80047a8 <UART_SetConfig+0xc80>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b03      	cmp	r3, #3
 800473c:	d032      	beq.n	80047a4 <UART_SetConfig+0xc7c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b04      	cmp	r3, #4
 8004744:	d02c      	beq.n	80047a0 <UART_SetConfig+0xc78>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	2b05      	cmp	r3, #5
 800474c:	d026      	beq.n	800479c <UART_SetConfig+0xc74>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	2b06      	cmp	r3, #6
 8004754:	d020      	beq.n	8004798 <UART_SetConfig+0xc70>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2b07      	cmp	r3, #7
 800475c:	d01a      	beq.n	8004794 <UART_SetConfig+0xc6c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b08      	cmp	r3, #8
 8004764:	d014      	beq.n	8004790 <UART_SetConfig+0xc68>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2b09      	cmp	r3, #9
 800476c:	d00e      	beq.n	800478c <UART_SetConfig+0xc64>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b0a      	cmp	r3, #10
 8004774:	d008      	beq.n	8004788 <UART_SetConfig+0xc60>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b0b      	cmp	r3, #11
 800477c:	d102      	bne.n	8004784 <UART_SetConfig+0xc5c>
 800477e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004782:	e016      	b.n	80047b2 <UART_SetConfig+0xc8a>
 8004784:	2301      	movs	r3, #1
 8004786:	e014      	b.n	80047b2 <UART_SetConfig+0xc8a>
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	e012      	b.n	80047b2 <UART_SetConfig+0xc8a>
 800478c:	2340      	movs	r3, #64	; 0x40
 800478e:	e010      	b.n	80047b2 <UART_SetConfig+0xc8a>
 8004790:	2320      	movs	r3, #32
 8004792:	e00e      	b.n	80047b2 <UART_SetConfig+0xc8a>
 8004794:	2310      	movs	r3, #16
 8004796:	e00c      	b.n	80047b2 <UART_SetConfig+0xc8a>
 8004798:	230c      	movs	r3, #12
 800479a:	e00a      	b.n	80047b2 <UART_SetConfig+0xc8a>
 800479c:	230a      	movs	r3, #10
 800479e:	e008      	b.n	80047b2 <UART_SetConfig+0xc8a>
 80047a0:	2308      	movs	r3, #8
 80047a2:	e006      	b.n	80047b2 <UART_SetConfig+0xc8a>
 80047a4:	2306      	movs	r3, #6
 80047a6:	e004      	b.n	80047b2 <UART_SetConfig+0xc8a>
 80047a8:	2304      	movs	r3, #4
 80047aa:	e002      	b.n	80047b2 <UART_SetConfig+0xc8a>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e000      	b.n	80047b2 <UART_SetConfig+0xc8a>
 80047b0:	2301      	movs	r3, #1
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	005a      	lsls	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	441a      	add	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	61fb      	str	r3, [r7, #28]
        break;
 80047ce:	e113      	b.n	80049f8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d043      	beq.n	8004860 <UART_SetConfig+0xd38>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d03d      	beq.n	800485c <UART_SetConfig+0xd34>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d037      	beq.n	8004858 <UART_SetConfig+0xd30>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d031      	beq.n	8004854 <UART_SetConfig+0xd2c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d02b      	beq.n	8004850 <UART_SetConfig+0xd28>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d025      	beq.n	800484c <UART_SetConfig+0xd24>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b06      	cmp	r3, #6
 8004806:	d01f      	beq.n	8004848 <UART_SetConfig+0xd20>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b07      	cmp	r3, #7
 800480e:	d019      	beq.n	8004844 <UART_SetConfig+0xd1c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b08      	cmp	r3, #8
 8004816:	d013      	beq.n	8004840 <UART_SetConfig+0xd18>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	2b09      	cmp	r3, #9
 800481e:	d00d      	beq.n	800483c <UART_SetConfig+0xd14>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2b0a      	cmp	r3, #10
 8004826:	d007      	beq.n	8004838 <UART_SetConfig+0xd10>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	2b0b      	cmp	r3, #11
 800482e:	d101      	bne.n	8004834 <UART_SetConfig+0xd0c>
 8004830:	4b8d      	ldr	r3, [pc, #564]	; (8004a68 <UART_SetConfig+0xf40>)
 8004832:	e016      	b.n	8004862 <UART_SetConfig+0xd3a>
 8004834:	4b8d      	ldr	r3, [pc, #564]	; (8004a6c <UART_SetConfig+0xf44>)
 8004836:	e014      	b.n	8004862 <UART_SetConfig+0xd3a>
 8004838:	4b8d      	ldr	r3, [pc, #564]	; (8004a70 <UART_SetConfig+0xf48>)
 800483a:	e012      	b.n	8004862 <UART_SetConfig+0xd3a>
 800483c:	4b8d      	ldr	r3, [pc, #564]	; (8004a74 <UART_SetConfig+0xf4c>)
 800483e:	e010      	b.n	8004862 <UART_SetConfig+0xd3a>
 8004840:	4b8d      	ldr	r3, [pc, #564]	; (8004a78 <UART_SetConfig+0xf50>)
 8004842:	e00e      	b.n	8004862 <UART_SetConfig+0xd3a>
 8004844:	4b8d      	ldr	r3, [pc, #564]	; (8004a7c <UART_SetConfig+0xf54>)
 8004846:	e00c      	b.n	8004862 <UART_SetConfig+0xd3a>
 8004848:	4b8d      	ldr	r3, [pc, #564]	; (8004a80 <UART_SetConfig+0xf58>)
 800484a:	e00a      	b.n	8004862 <UART_SetConfig+0xd3a>
 800484c:	4b8d      	ldr	r3, [pc, #564]	; (8004a84 <UART_SetConfig+0xf5c>)
 800484e:	e008      	b.n	8004862 <UART_SetConfig+0xd3a>
 8004850:	4b8d      	ldr	r3, [pc, #564]	; (8004a88 <UART_SetConfig+0xf60>)
 8004852:	e006      	b.n	8004862 <UART_SetConfig+0xd3a>
 8004854:	4b8d      	ldr	r3, [pc, #564]	; (8004a8c <UART_SetConfig+0xf64>)
 8004856:	e004      	b.n	8004862 <UART_SetConfig+0xd3a>
 8004858:	4b8d      	ldr	r3, [pc, #564]	; (8004a90 <UART_SetConfig+0xf68>)
 800485a:	e002      	b.n	8004862 <UART_SetConfig+0xd3a>
 800485c:	4b8d      	ldr	r3, [pc, #564]	; (8004a94 <UART_SetConfig+0xf6c>)
 800485e:	e000      	b.n	8004862 <UART_SetConfig+0xd3a>
 8004860:	4b82      	ldr	r3, [pc, #520]	; (8004a6c <UART_SetConfig+0xf44>)
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6852      	ldr	r2, [r2, #4]
 8004866:	0852      	lsrs	r2, r2, #1
 8004868:	441a      	add	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	b29b      	uxth	r3, r3
 8004874:	61fb      	str	r3, [r7, #28]
        break;
 8004876:	e0bf      	b.n	80049f8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004878:	f7fd fb7a 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 800487c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d044      	beq.n	8004910 <UART_SetConfig+0xde8>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b01      	cmp	r3, #1
 800488c:	d03e      	beq.n	800490c <UART_SetConfig+0xde4>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2b02      	cmp	r3, #2
 8004894:	d038      	beq.n	8004908 <UART_SetConfig+0xde0>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b03      	cmp	r3, #3
 800489c:	d032      	beq.n	8004904 <UART_SetConfig+0xddc>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d02c      	beq.n	8004900 <UART_SetConfig+0xdd8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d026      	beq.n	80048fc <UART_SetConfig+0xdd4>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b06      	cmp	r3, #6
 80048b4:	d020      	beq.n	80048f8 <UART_SetConfig+0xdd0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b07      	cmp	r3, #7
 80048bc:	d01a      	beq.n	80048f4 <UART_SetConfig+0xdcc>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d014      	beq.n	80048f0 <UART_SetConfig+0xdc8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2b09      	cmp	r3, #9
 80048cc:	d00e      	beq.n	80048ec <UART_SetConfig+0xdc4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b0a      	cmp	r3, #10
 80048d4:	d008      	beq.n	80048e8 <UART_SetConfig+0xdc0>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b0b      	cmp	r3, #11
 80048dc:	d102      	bne.n	80048e4 <UART_SetConfig+0xdbc>
 80048de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048e2:	e016      	b.n	8004912 <UART_SetConfig+0xdea>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e014      	b.n	8004912 <UART_SetConfig+0xdea>
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	e012      	b.n	8004912 <UART_SetConfig+0xdea>
 80048ec:	2340      	movs	r3, #64	; 0x40
 80048ee:	e010      	b.n	8004912 <UART_SetConfig+0xdea>
 80048f0:	2320      	movs	r3, #32
 80048f2:	e00e      	b.n	8004912 <UART_SetConfig+0xdea>
 80048f4:	2310      	movs	r3, #16
 80048f6:	e00c      	b.n	8004912 <UART_SetConfig+0xdea>
 80048f8:	230c      	movs	r3, #12
 80048fa:	e00a      	b.n	8004912 <UART_SetConfig+0xdea>
 80048fc:	230a      	movs	r3, #10
 80048fe:	e008      	b.n	8004912 <UART_SetConfig+0xdea>
 8004900:	2308      	movs	r3, #8
 8004902:	e006      	b.n	8004912 <UART_SetConfig+0xdea>
 8004904:	2306      	movs	r3, #6
 8004906:	e004      	b.n	8004912 <UART_SetConfig+0xdea>
 8004908:	2304      	movs	r3, #4
 800490a:	e002      	b.n	8004912 <UART_SetConfig+0xdea>
 800490c:	2302      	movs	r3, #2
 800490e:	e000      	b.n	8004912 <UART_SetConfig+0xdea>
 8004910:	2301      	movs	r3, #1
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	005a      	lsls	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	441a      	add	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	b29b      	uxth	r3, r3
 800492c:	61fb      	str	r3, [r7, #28]
        break;
 800492e:	e063      	b.n	80049f8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2b00      	cmp	r3, #0
 8004936:	d04f      	beq.n	80049d8 <UART_SetConfig+0xeb0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2b01      	cmp	r3, #1
 800493e:	d048      	beq.n	80049d2 <UART_SetConfig+0xeaa>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	2b02      	cmp	r3, #2
 8004946:	d041      	beq.n	80049cc <UART_SetConfig+0xea4>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	2b03      	cmp	r3, #3
 800494e:	d03a      	beq.n	80049c6 <UART_SetConfig+0xe9e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	2b04      	cmp	r3, #4
 8004956:	d033      	beq.n	80049c0 <UART_SetConfig+0xe98>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2b05      	cmp	r3, #5
 800495e:	d02c      	beq.n	80049ba <UART_SetConfig+0xe92>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2b06      	cmp	r3, #6
 8004966:	d025      	beq.n	80049b4 <UART_SetConfig+0xe8c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2b07      	cmp	r3, #7
 800496e:	d01e      	beq.n	80049ae <UART_SetConfig+0xe86>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2b08      	cmp	r3, #8
 8004976:	d017      	beq.n	80049a8 <UART_SetConfig+0xe80>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2b09      	cmp	r3, #9
 800497e:	d010      	beq.n	80049a2 <UART_SetConfig+0xe7a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b0a      	cmp	r3, #10
 8004986:	d009      	beq.n	800499c <UART_SetConfig+0xe74>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b0b      	cmp	r3, #11
 800498e:	d102      	bne.n	8004996 <UART_SetConfig+0xe6e>
 8004990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004994:	e022      	b.n	80049dc <UART_SetConfig+0xeb4>
 8004996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800499a:	e01f      	b.n	80049dc <UART_SetConfig+0xeb4>
 800499c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a0:	e01c      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a6:	e019      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ac:	e016      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049b2:	e013      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049b4:	f241 5354 	movw	r3, #5460	; 0x1554
 80049b8:	e010      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049ba:	f641 1398 	movw	r3, #6552	; 0x1998
 80049be:	e00d      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049c4:	e00a      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049c6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80049ca:	e007      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049d0:	e004      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d6:	e001      	b.n	80049dc <UART_SetConfig+0xeb4>
 80049d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6852      	ldr	r2, [r2, #4]
 80049e0:	0852      	lsrs	r2, r2, #1
 80049e2:	441a      	add	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	61fb      	str	r3, [r7, #28]
        break;
 80049f0:	e002      	b.n	80049f8 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	76fb      	strb	r3, [r7, #27]
        break;
 80049f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	d916      	bls.n	8004a2c <UART_SetConfig+0xf04>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a04:	d212      	bcs.n	8004a2c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f023 030f 	bic.w	r3, r3, #15
 8004a0e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	89fa      	ldrh	r2, [r7, #14]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	e20c      	b.n	8004e46 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	76fb      	strb	r3, [r7, #27]
 8004a30:	e209      	b.n	8004e46 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8004a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	f200 81f4 	bhi.w	8004e24 <UART_SetConfig+0x12fc>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0xf1c>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	08004b4f 	.word	0x08004b4f
 8004a4c:	08004c05 	.word	0x08004c05
 8004a50:	08004e25 	.word	0x08004e25
 8004a54:	08004caf 	.word	0x08004caf
 8004a58:	08004e25 	.word	0x08004e25
 8004a5c:	08004e25 	.word	0x08004e25
 8004a60:	08004e25 	.word	0x08004e25
 8004a64:	08004d65 	.word	0x08004d65
 8004a68:	0001e848 	.word	0x0001e848
 8004a6c:	01e84800 	.word	0x01e84800
 8004a70:	0003d090 	.word	0x0003d090
 8004a74:	0007a120 	.word	0x0007a120
 8004a78:	000f4240 	.word	0x000f4240
 8004a7c:	001e8480 	.word	0x001e8480
 8004a80:	0028b0aa 	.word	0x0028b0aa
 8004a84:	0030d400 	.word	0x0030d400
 8004a88:	003d0900 	.word	0x003d0900
 8004a8c:	00516154 	.word	0x00516154
 8004a90:	007a1200 	.word	0x007a1200
 8004a94:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fd fad8 	bl	800204c <HAL_RCC_GetPCLK1Freq>
 8004a9c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d044      	beq.n	8004b30 <UART_SetConfig+0x1008>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d03e      	beq.n	8004b2c <UART_SetConfig+0x1004>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d038      	beq.n	8004b28 <UART_SetConfig+0x1000>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d032      	beq.n	8004b24 <UART_SetConfig+0xffc>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d02c      	beq.n	8004b20 <UART_SetConfig+0xff8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b05      	cmp	r3, #5
 8004acc:	d026      	beq.n	8004b1c <UART_SetConfig+0xff4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2b06      	cmp	r3, #6
 8004ad4:	d020      	beq.n	8004b18 <UART_SetConfig+0xff0>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	2b07      	cmp	r3, #7
 8004adc:	d01a      	beq.n	8004b14 <UART_SetConfig+0xfec>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d014      	beq.n	8004b10 <UART_SetConfig+0xfe8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2b09      	cmp	r3, #9
 8004aec:	d00e      	beq.n	8004b0c <UART_SetConfig+0xfe4>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b0a      	cmp	r3, #10
 8004af4:	d008      	beq.n	8004b08 <UART_SetConfig+0xfe0>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b0b      	cmp	r3, #11
 8004afc:	d102      	bne.n	8004b04 <UART_SetConfig+0xfdc>
 8004afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b02:	e016      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e014      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	e012      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b0c:	2340      	movs	r3, #64	; 0x40
 8004b0e:	e010      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b10:	2320      	movs	r3, #32
 8004b12:	e00e      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b14:	2310      	movs	r3, #16
 8004b16:	e00c      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b18:	230c      	movs	r3, #12
 8004b1a:	e00a      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b1c:	230a      	movs	r3, #10
 8004b1e:	e008      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b20:	2308      	movs	r3, #8
 8004b22:	e006      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b24:	2306      	movs	r3, #6
 8004b26:	e004      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	e002      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e000      	b.n	8004b32 <UART_SetConfig+0x100a>
 8004b30:	2301      	movs	r3, #1
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	441a      	add	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	61fb      	str	r3, [r7, #28]
        break;
 8004b4c:	e16d      	b.n	8004e2a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b4e:	f7fd fa93 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8004b52:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d044      	beq.n	8004be6 <UART_SetConfig+0x10be>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d03e      	beq.n	8004be2 <UART_SetConfig+0x10ba>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d038      	beq.n	8004bde <UART_SetConfig+0x10b6>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d032      	beq.n	8004bda <UART_SetConfig+0x10b2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d02c      	beq.n	8004bd6 <UART_SetConfig+0x10ae>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b05      	cmp	r3, #5
 8004b82:	d026      	beq.n	8004bd2 <UART_SetConfig+0x10aa>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2b06      	cmp	r3, #6
 8004b8a:	d020      	beq.n	8004bce <UART_SetConfig+0x10a6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b07      	cmp	r3, #7
 8004b92:	d01a      	beq.n	8004bca <UART_SetConfig+0x10a2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d014      	beq.n	8004bc6 <UART_SetConfig+0x109e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	2b09      	cmp	r3, #9
 8004ba2:	d00e      	beq.n	8004bc2 <UART_SetConfig+0x109a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b0a      	cmp	r3, #10
 8004baa:	d008      	beq.n	8004bbe <UART_SetConfig+0x1096>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	2b0b      	cmp	r3, #11
 8004bb2:	d102      	bne.n	8004bba <UART_SetConfig+0x1092>
 8004bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bb8:	e016      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e014      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	e012      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bc2:	2340      	movs	r3, #64	; 0x40
 8004bc4:	e010      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bc6:	2320      	movs	r3, #32
 8004bc8:	e00e      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bca:	2310      	movs	r3, #16
 8004bcc:	e00c      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	e00a      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bd2:	230a      	movs	r3, #10
 8004bd4:	e008      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	e006      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bda:	2306      	movs	r3, #6
 8004bdc:	e004      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004bde:	2304      	movs	r3, #4
 8004be0:	e002      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e000      	b.n	8004be8 <UART_SetConfig+0x10c0>
 8004be6:	2301      	movs	r3, #1
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	441a      	add	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	61fb      	str	r3, [r7, #28]
        break;
 8004c02:	e112      	b.n	8004e2a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d044      	beq.n	8004c96 <UART_SetConfig+0x116e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d03e      	beq.n	8004c92 <UART_SetConfig+0x116a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d038      	beq.n	8004c8e <UART_SetConfig+0x1166>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d032      	beq.n	8004c8a <UART_SetConfig+0x1162>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d02c      	beq.n	8004c86 <UART_SetConfig+0x115e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b05      	cmp	r3, #5
 8004c32:	d026      	beq.n	8004c82 <UART_SetConfig+0x115a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d020      	beq.n	8004c7e <UART_SetConfig+0x1156>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	2b07      	cmp	r3, #7
 8004c42:	d01a      	beq.n	8004c7a <UART_SetConfig+0x1152>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d014      	beq.n	8004c76 <UART_SetConfig+0x114e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	d00e      	beq.n	8004c72 <UART_SetConfig+0x114a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	2b0a      	cmp	r3, #10
 8004c5a:	d008      	beq.n	8004c6e <UART_SetConfig+0x1146>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	2b0b      	cmp	r3, #11
 8004c62:	d102      	bne.n	8004c6a <UART_SetConfig+0x1142>
 8004c64:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004c68:	e016      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c6a:	4b81      	ldr	r3, [pc, #516]	; (8004e70 <UART_SetConfig+0x1348>)
 8004c6c:	e014      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c6e:	4b81      	ldr	r3, [pc, #516]	; (8004e74 <UART_SetConfig+0x134c>)
 8004c70:	e012      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c72:	4b81      	ldr	r3, [pc, #516]	; (8004e78 <UART_SetConfig+0x1350>)
 8004c74:	e010      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c76:	4b81      	ldr	r3, [pc, #516]	; (8004e7c <UART_SetConfig+0x1354>)
 8004c78:	e00e      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c7a:	4b81      	ldr	r3, [pc, #516]	; (8004e80 <UART_SetConfig+0x1358>)
 8004c7c:	e00c      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c7e:	4b81      	ldr	r3, [pc, #516]	; (8004e84 <UART_SetConfig+0x135c>)
 8004c80:	e00a      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c82:	4b81      	ldr	r3, [pc, #516]	; (8004e88 <UART_SetConfig+0x1360>)
 8004c84:	e008      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c86:	4b81      	ldr	r3, [pc, #516]	; (8004e8c <UART_SetConfig+0x1364>)
 8004c88:	e006      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c8a:	4b81      	ldr	r3, [pc, #516]	; (8004e90 <UART_SetConfig+0x1368>)
 8004c8c:	e004      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c8e:	4b81      	ldr	r3, [pc, #516]	; (8004e94 <UART_SetConfig+0x136c>)
 8004c90:	e002      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c92:	4b81      	ldr	r3, [pc, #516]	; (8004e98 <UART_SetConfig+0x1370>)
 8004c94:	e000      	b.n	8004c98 <UART_SetConfig+0x1170>
 8004c96:	4b76      	ldr	r3, [pc, #472]	; (8004e70 <UART_SetConfig+0x1348>)
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6852      	ldr	r2, [r2, #4]
 8004c9c:	0852      	lsrs	r2, r2, #1
 8004c9e:	441a      	add	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	61fb      	str	r3, [r7, #28]
        break;
 8004cac:	e0bd      	b.n	8004e2a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cae:	f7fd f95f 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8004cb2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d044      	beq.n	8004d46 <UART_SetConfig+0x121e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d03e      	beq.n	8004d42 <UART_SetConfig+0x121a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d038      	beq.n	8004d3e <UART_SetConfig+0x1216>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d032      	beq.n	8004d3a <UART_SetConfig+0x1212>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d02c      	beq.n	8004d36 <UART_SetConfig+0x120e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	2b05      	cmp	r3, #5
 8004ce2:	d026      	beq.n	8004d32 <UART_SetConfig+0x120a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	2b06      	cmp	r3, #6
 8004cea:	d020      	beq.n	8004d2e <UART_SetConfig+0x1206>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	2b07      	cmp	r3, #7
 8004cf2:	d01a      	beq.n	8004d2a <UART_SetConfig+0x1202>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d014      	beq.n	8004d26 <UART_SetConfig+0x11fe>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	2b09      	cmp	r3, #9
 8004d02:	d00e      	beq.n	8004d22 <UART_SetConfig+0x11fa>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	2b0a      	cmp	r3, #10
 8004d0a:	d008      	beq.n	8004d1e <UART_SetConfig+0x11f6>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2b0b      	cmp	r3, #11
 8004d12:	d102      	bne.n	8004d1a <UART_SetConfig+0x11f2>
 8004d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d18:	e016      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e014      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	e012      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d22:	2340      	movs	r3, #64	; 0x40
 8004d24:	e010      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d26:	2320      	movs	r3, #32
 8004d28:	e00e      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d2a:	2310      	movs	r3, #16
 8004d2c:	e00c      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d2e:	230c      	movs	r3, #12
 8004d30:	e00a      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d32:	230a      	movs	r3, #10
 8004d34:	e008      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d36:	2308      	movs	r3, #8
 8004d38:	e006      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d3a:	2306      	movs	r3, #6
 8004d3c:	e004      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d3e:	2304      	movs	r3, #4
 8004d40:	e002      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e000      	b.n	8004d48 <UART_SetConfig+0x1220>
 8004d46:	2301      	movs	r3, #1
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	61fb      	str	r3, [r7, #28]
        break;
 8004d62:	e062      	b.n	8004e2a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d04e      	beq.n	8004e0a <UART_SetConfig+0x12e2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d047      	beq.n	8004e04 <UART_SetConfig+0x12dc>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d040      	beq.n	8004dfe <UART_SetConfig+0x12d6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d039      	beq.n	8004df8 <UART_SetConfig+0x12d0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d032      	beq.n	8004df2 <UART_SetConfig+0x12ca>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d02b      	beq.n	8004dec <UART_SetConfig+0x12c4>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2b06      	cmp	r3, #6
 8004d9a:	d024      	beq.n	8004de6 <UART_SetConfig+0x12be>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	2b07      	cmp	r3, #7
 8004da2:	d01d      	beq.n	8004de0 <UART_SetConfig+0x12b8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d016      	beq.n	8004dda <UART_SetConfig+0x12b2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b09      	cmp	r3, #9
 8004db2:	d00f      	beq.n	8004dd4 <UART_SetConfig+0x12ac>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2b0a      	cmp	r3, #10
 8004dba:	d008      	beq.n	8004dce <UART_SetConfig+0x12a6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2b0b      	cmp	r3, #11
 8004dc2:	d101      	bne.n	8004dc8 <UART_SetConfig+0x12a0>
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	e022      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dcc:	e01f      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dd2:	e01c      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd8:	e019      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dde:	e016      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004de0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004de4:	e013      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004de6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004dea:	e010      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004dec:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004df0:	e00d      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004df6:	e00a      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004df8:	f241 5355 	movw	r3, #5461	; 0x1555
 8004dfc:	e007      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e02:	e004      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004e04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e08:	e001      	b.n	8004e0e <UART_SetConfig+0x12e6>
 8004e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6852      	ldr	r2, [r2, #4]
 8004e12:	0852      	lsrs	r2, r2, #1
 8004e14:	441a      	add	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	61fb      	str	r3, [r7, #28]
        break;
 8004e22:	e002      	b.n	8004e2a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	76fb      	strb	r3, [r7, #27]
        break;
 8004e28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	2b0f      	cmp	r3, #15
 8004e2e:	d908      	bls.n	8004e42 <UART_SetConfig+0x131a>
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e36:	d204      	bcs.n	8004e42 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	e001      	b.n	8004e46 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004e62:	7efb      	ldrb	r3, [r7, #27]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3728      	adds	r7, #40	; 0x28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004e6e:	bf00      	nop
 8004e70:	00f42400 	.word	0x00f42400
 8004e74:	0001e848 	.word	0x0001e848
 8004e78:	0003d090 	.word	0x0003d090
 8004e7c:	0007a120 	.word	0x0007a120
 8004e80:	000f4240 	.word	0x000f4240
 8004e84:	00145855 	.word	0x00145855
 8004e88:	00186a00 	.word	0x00186a00
 8004e8c:	001e8480 	.word	0x001e8480
 8004e90:	0028b0aa 	.word	0x0028b0aa
 8004e94:	003d0900 	.word	0x003d0900
 8004e98:	007a1200 	.word	0x007a1200

08004e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d10a      	bne.n	8004fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ff0:	f7fb fff8 	bl	8000fe4 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b08      	cmp	r3, #8
 8005002:	d10e      	bne.n	8005022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f82c 	bl	8005070 <UART_WaitOnFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e022      	b.n	8005068 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d10e      	bne.n	800504e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f816 	bl	8005070 <UART_WaitOnFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e00c      	b.n	8005068 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005080:	e02c      	b.n	80050dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005088:	d028      	beq.n	80050dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508a:	f7fb ffab 	bl	8000fe4 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	429a      	cmp	r2, r3
 8005098:	d302      	bcc.n	80050a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d11d      	bne.n	80050dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e00f      	b.n	80050fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4013      	ands	r3, r2
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	bf0c      	ite	eq
 80050ec:	2301      	moveq	r3, #1
 80050ee:	2300      	movne	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d0c3      	beq.n	8005082 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_UARTEx_DisableFifoMode+0x16>
 8005116:	2302      	movs	r3, #2
 8005118:	e027      	b.n	800516a <HAL_UARTEx_DisableFifoMode+0x66>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2224      	movs	r2, #36	; 0x24
 8005126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005148:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800518a:	2302      	movs	r3, #2
 800518c:	e02d      	b.n	80051ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2224      	movs	r2, #36	; 0x24
 800519a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f850 	bl	8005270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005206:	2302      	movs	r3, #2
 8005208:	e02d      	b.n	8005266 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2224      	movs	r2, #36	; 0x24
 8005216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f812 	bl	8005270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	; 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005278:	4a2f      	ldr	r2, [pc, #188]	; (8005338 <UARTEx_SetNbDataToProcess+0xc8>)
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005282:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005286:	4a2d      	ldr	r2, [pc, #180]	; (800533c <UARTEx_SetNbDataToProcess+0xcc>)
 8005288:	f107 030c 	add.w	r3, r7, #12
 800528c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005290:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005298:	2b00      	cmp	r3, #0
 800529a:	d108      	bne.n	80052ae <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052ac:	e03d      	b.n	800532a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052ae:	2308      	movs	r3, #8
 80052b0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052b2:	2308      	movs	r3, #8
 80052b4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	0e5b      	lsrs	r3, r3, #25
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	0f5b      	lsrs	r3, r3, #29
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80052d6:	7fbb      	ldrb	r3, [r7, #30]
 80052d8:	7f3a      	ldrb	r2, [r7, #28]
 80052da:	f107 0120 	add.w	r1, r7, #32
 80052de:	440a      	add	r2, r1
 80052e0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80052e4:	fb02 f303 	mul.w	r3, r2, r3
 80052e8:	7f3a      	ldrb	r2, [r7, #28]
 80052ea:	f107 0120 	add.w	r1, r7, #32
 80052ee:	440a      	add	r2, r1
 80052f0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80052f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005300:	7ffb      	ldrb	r3, [r7, #31]
 8005302:	7f7a      	ldrb	r2, [r7, #29]
 8005304:	f107 0120 	add.w	r1, r7, #32
 8005308:	440a      	add	r2, r1
 800530a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	7f7a      	ldrb	r2, [r7, #29]
 8005314:	f107 0120 	add.w	r1, r7, #32
 8005318:	440a      	add	r2, r1
 800531a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800531e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005322:	b29a      	uxth	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800532a:	bf00      	nop
 800532c:	3724      	adds	r7, #36	; 0x24
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	080053b0 	.word	0x080053b0
 800533c:	080053b8 	.word	0x080053b8

08005340 <__libc_init_array>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4e0d      	ldr	r6, [pc, #52]	; (8005378 <__libc_init_array+0x38>)
 8005344:	4c0d      	ldr	r4, [pc, #52]	; (800537c <__libc_init_array+0x3c>)
 8005346:	1ba4      	subs	r4, r4, r6
 8005348:	10a4      	asrs	r4, r4, #2
 800534a:	2500      	movs	r5, #0
 800534c:	42a5      	cmp	r5, r4
 800534e:	d109      	bne.n	8005364 <__libc_init_array+0x24>
 8005350:	4e0b      	ldr	r6, [pc, #44]	; (8005380 <__libc_init_array+0x40>)
 8005352:	4c0c      	ldr	r4, [pc, #48]	; (8005384 <__libc_init_array+0x44>)
 8005354:	f000 f820 	bl	8005398 <_init>
 8005358:	1ba4      	subs	r4, r4, r6
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	2500      	movs	r5, #0
 800535e:	42a5      	cmp	r5, r4
 8005360:	d105      	bne.n	800536e <__libc_init_array+0x2e>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005368:	4798      	blx	r3
 800536a:	3501      	adds	r5, #1
 800536c:	e7ee      	b.n	800534c <__libc_init_array+0xc>
 800536e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005372:	4798      	blx	r3
 8005374:	3501      	adds	r5, #1
 8005376:	e7f2      	b.n	800535e <__libc_init_array+0x1e>
 8005378:	080053e0 	.word	0x080053e0
 800537c:	080053e0 	.word	0x080053e0
 8005380:	080053e0 	.word	0x080053e0
 8005384:	080053e4 	.word	0x080053e4

08005388 <memset>:
 8005388:	4402      	add	r2, r0
 800538a:	4603      	mov	r3, r0
 800538c:	4293      	cmp	r3, r2
 800538e:	d100      	bne.n	8005392 <memset+0xa>
 8005390:	4770      	bx	lr
 8005392:	f803 1b01 	strb.w	r1, [r3], #1
 8005396:	e7f9      	b.n	800538c <memset+0x4>

08005398 <_init>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	bf00      	nop
 800539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539e:	bc08      	pop	{r3}
 80053a0:	469e      	mov	lr, r3
 80053a2:	4770      	bx	lr

080053a4 <_fini>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr
